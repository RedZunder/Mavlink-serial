
betafpv_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fc8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001288  08006190  08006190  00007190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007418  08007418  000094b8  2**0
                  CONTENTS
  4 .ARM          00000008  08007418  08007418  00008418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007420  08007420  000094b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007420  08007420  00008420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007424  08007424  00008424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000378  20000000  08007428  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000378  080077a0  00009378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000418  08007840  00009418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a24  200004b8  080078e0  000094b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000edc  080078e0  00009edc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000094b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014d7b  00000000  00000000  000094e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002704  00000000  00000000  0001e263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001070  00000000  00000000  00020968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cf3  00000000  00000000  000219d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f689  00000000  00000000  000226cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b6c7  00000000  00000000  00051d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016ed97  00000000  00000000  0006d41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001dc1b2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000466c  00000000  00000000  001dc1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  001e0864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200004b8 	.word	0x200004b8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006178 	.word	0x08006178

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200004bc 	.word	0x200004bc
 8000204:	08006178 	.word	0x08006178

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_TIM_PeriodElapsedCallback>:
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)rx, 6);

}*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim4 )
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d101      	bne.n	800050c <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    broadcast_heartbeat();
 8000508:	f001 fee4 	bl	80022d4 <broadcast_heartbeat>
  }
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	200005bc 	.word	0x200005bc

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f002 f91e 	bl	800275e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f82f 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f993 	bl	8000850 <MX_GPIO_Init>
  MX_ETH_Init();
 800052a:	f000 f893 	bl	8000654 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800052e:	f000 f95f 	bl	80007f0 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000532:	f000 f92d 	bl	8000790 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000536:	f000 f8db 	bl	80006f0 <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim4);
 800053a:	480f      	ldr	r0, [pc, #60]	@ (8000578 <main+0x60>)
 800053c:	f004 f96a 	bl	8004814 <HAL_TIM_Base_Start_IT>

  uint8_t x=0;
 8000540:	2300      	movs	r3, #0
 8000542:	71fb      	strb	r3, [r7, #7]
  encode_mavlink_mssg(x);
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4618      	mov	r0, r3
 8000548:	f001 fe94 	bl	8002274 <encode_mavlink_mssg>

	  //show answer in serial terminal
		//HAL_UART_Transmit(&huart3,(uint8_t *) 255,1,100);
		//HAL_UART_Transmit(&huart1, (uint8_t *)rx,sizeof(rx),100);

		decode_mavlink_mssg(mssgBytes[i]);
 800054c:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <main+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <main+0x68>)
 8000552:	5cd3      	ldrb	r3, [r2, r3]
 8000554:	4618      	mov	r0, r3
 8000556:	f001 fe29 	bl	80021ac <decode_mavlink_mssg>

		if(i<sizeof(mssgBytes))
 800055a:	4b08      	ldr	r3, [pc, #32]	@ (800057c <main+0x64>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f240 326a 	movw	r2, #874	@ 0x36a
 8000562:	4293      	cmp	r3, r2
 8000564:	d804      	bhi.n	8000570 <main+0x58>
			i++;
 8000566:	4b05      	ldr	r3, [pc, #20]	@ (800057c <main+0x64>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	4a03      	ldr	r2, [pc, #12]	@ (800057c <main+0x64>)
 800056e:	6013      	str	r3, [r2, #0]




		HAL_Delay(10);
 8000570:	200a      	movs	r0, #10
 8000572:	f002 f951 	bl	8002818 <HAL_Delay>
		decode_mavlink_mssg(mssgBytes[i]);
 8000576:	e7e9      	b.n	800054c <main+0x34>
 8000578:	200005bc 	.word	0x200005bc
 800057c:	20000718 	.word	0x20000718
 8000580:	20000000 	.word	0x20000000

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	@ 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	@ 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f005 fdb6 	bl	8006104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a8:	f003 f812 	bl	80035d0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	4b27      	ldr	r3, [pc, #156]	@ (800064c <SystemClock_Config+0xc8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	4a26      	ldr	r2, [pc, #152]	@ (800064c <SystemClock_Config+0xc8>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b8:	4b24      	ldr	r3, [pc, #144]	@ (800064c <SystemClock_Config+0xc8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c4:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <SystemClock_Config+0xcc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005cc:	4a20      	ldr	r2, [pc, #128]	@ (8000650 <SystemClock_Config+0xcc>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <SystemClock_Config+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f8:	2348      	movs	r3, #72	@ 0x48
 80005fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000600:	2303      	movs	r3, #3
 8000602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f002 fff1 	bl	80035f0 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000614:	f000 f9ee 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2102      	movs	r1, #2
 8000634:	4618      	mov	r0, r3
 8000636:	f003 fa7f 	bl	8003b38 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000640:	f000 f9d8 	bl	80009f4 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	@ 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <MX_ETH_Init+0x84>)
 800065a:	4a20      	ldr	r2, [pc, #128]	@ (80006dc <MX_ETH_Init+0x88>)
 800065c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800065e:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <MX_ETH_Init+0x8c>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000664:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <MX_ETH_Init+0x8c>)
 8000666:	2280      	movs	r2, #128	@ 0x80
 8000668:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800066a:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <MX_ETH_Init+0x8c>)
 800066c:	22e1      	movs	r2, #225	@ 0xe1
 800066e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000670:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <MX_ETH_Init+0x8c>)
 8000672:	2200      	movs	r2, #0
 8000674:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000676:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_ETH_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800067c:	4b18      	ldr	r3, [pc, #96]	@ (80006e0 <MX_ETH_Init+0x8c>)
 800067e:	2200      	movs	r2, #0
 8000680:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_ETH_Init+0x84>)
 8000684:	4a16      	ldr	r2, [pc, #88]	@ (80006e0 <MX_ETH_Init+0x8c>)
 8000686:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_ETH_Init+0x84>)
 800068a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800068e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_ETH_Init+0x84>)
 8000692:	4a14      	ldr	r2, [pc, #80]	@ (80006e4 <MX_ETH_Init+0x90>)
 8000694:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <MX_ETH_Init+0x84>)
 8000698:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <MX_ETH_Init+0x94>)
 800069a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800069c:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_ETH_Init+0x84>)
 800069e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006a2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006a4:	480c      	ldr	r0, [pc, #48]	@ (80006d8 <MX_ETH_Init+0x84>)
 80006a6:	f002 fa7f 	bl	8002ba8 <HAL_ETH_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006b0:	f000 f9a0 	bl	80009f4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006b4:	2238      	movs	r2, #56	@ 0x38
 80006b6:	2100      	movs	r1, #0
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <MX_ETH_Init+0x98>)
 80006ba:	f005 fd23 	bl	8006104 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_ETH_Init+0x98>)
 80006c0:	2221      	movs	r2, #33	@ 0x21
 80006c2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_ETH_Init+0x98>)
 80006c6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80006ca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <MX_ETH_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000050c 	.word	0x2000050c
 80006dc:	40028000 	.word	0x40028000
 80006e0:	2000071c 	.word	0x2000071c
 80006e4:	20000418 	.word	0x20000418
 80006e8:	20000378 	.word	0x20000378
 80006ec:	200004d4 	.word	0x200004d4

080006f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MX_TIM4_Init+0x98>)
 8000710:	4a1e      	ldr	r2, [pc, #120]	@ (800078c <MX_TIM4_Init+0x9c>)
 8000712:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 8000714:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <MX_TIM4_Init+0x98>)
 8000716:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800071a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071c:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_TIM4_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 8000722:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <MX_TIM4_Init+0x98>)
 8000724:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000728:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072a:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <MX_TIM4_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000730:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_TIM4_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000736:	4814      	ldr	r0, [pc, #80]	@ (8000788 <MX_TIM4_Init+0x98>)
 8000738:	f004 f814 	bl	8004764 <HAL_TIM_Base_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000742:	f000 f957 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4619      	mov	r1, r3
 8000752:	480d      	ldr	r0, [pc, #52]	@ (8000788 <MX_TIM4_Init+0x98>)
 8000754:	f004 f9de 	bl	8004b14 <HAL_TIM_ConfigClockSource>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800075e:	f000 f949 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_TIM4_Init+0x98>)
 8000770:	f004 fc08 	bl	8004f84 <HAL_TIMEx_MasterConfigSynchronization>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800077a:	f000 f93b 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3720      	adds	r7, #32
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200005bc 	.word	0x200005bc
 800078c:	40000800 	.word	0x40000800

08000790 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000794:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_USART1_UART_Init+0x58>)
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <MX_USART1_UART_Init+0x5c>)
 8000798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <MX_USART1_UART_Init+0x58>)
 800079c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80007a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART1_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_USART1_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART1_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART1_UART_Init+0x58>)
 80007b6:	2208      	movs	r2, #8
 80007b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART1_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART1_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART1_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART1_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART1_UART_Init+0x58>)
 80007d4:	f004 fcd0 	bl	8005178 <HAL_HalfDuplex_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007de:	f000 f909 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000608 	.word	0x20000608
 80007ec:	40011000 	.word	0x40011000

080007f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f4:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 80007f6:	4a15      	ldr	r2, [pc, #84]	@ (800084c <MX_USART3_UART_Init+0x5c>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007fa:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_USART3_UART_Init+0x58>)
 8000834:	f004 fc52 	bl	80050dc <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800083e:	f000 f8d9 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000690 	.word	0x20000690
 800084c:	40004800 	.word	0x40004800

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	@ 0x30
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b5e      	ldr	r3, [pc, #376]	@ (80009e0 <MX_GPIO_Init+0x190>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a5d      	ldr	r2, [pc, #372]	@ (80009e0 <MX_GPIO_Init+0x190>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b5b      	ldr	r3, [pc, #364]	@ (80009e0 <MX_GPIO_Init+0x190>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	4b58      	ldr	r3, [pc, #352]	@ (80009e0 <MX_GPIO_Init+0x190>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a57      	ldr	r2, [pc, #348]	@ (80009e0 <MX_GPIO_Init+0x190>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b55      	ldr	r3, [pc, #340]	@ (80009e0 <MX_GPIO_Init+0x190>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b52      	ldr	r3, [pc, #328]	@ (80009e0 <MX_GPIO_Init+0x190>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a51      	ldr	r2, [pc, #324]	@ (80009e0 <MX_GPIO_Init+0x190>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b4f      	ldr	r3, [pc, #316]	@ (80009e0 <MX_GPIO_Init+0x190>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b4c      	ldr	r3, [pc, #304]	@ (80009e0 <MX_GPIO_Init+0x190>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a4b      	ldr	r2, [pc, #300]	@ (80009e0 <MX_GPIO_Init+0x190>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b49      	ldr	r3, [pc, #292]	@ (80009e0 <MX_GPIO_Init+0x190>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	4b46      	ldr	r3, [pc, #280]	@ (80009e0 <MX_GPIO_Init+0x190>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a45      	ldr	r2, [pc, #276]	@ (80009e0 <MX_GPIO_Init+0x190>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b43      	ldr	r3, [pc, #268]	@ (80009e0 <MX_GPIO_Init+0x190>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008de:	4b40      	ldr	r3, [pc, #256]	@ (80009e0 <MX_GPIO_Init+0x190>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a3f      	ldr	r2, [pc, #252]	@ (80009e0 <MX_GPIO_Init+0x190>)
 80008e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b3d      	ldr	r3, [pc, #244]	@ (80009e0 <MX_GPIO_Init+0x190>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008fc:	4839      	ldr	r0, [pc, #228]	@ (80009e4 <MX_GPIO_Init+0x194>)
 80008fe:	f002 fe4d 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2140      	movs	r1, #64	@ 0x40
 8000906:	4838      	ldr	r0, [pc, #224]	@ (80009e8 <MX_GPIO_Init+0x198>)
 8000908:	f002 fe48 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800090c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000912:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4832      	ldr	r0, [pc, #200]	@ (80009ec <MX_GPIO_Init+0x19c>)
 8000924:	f002 fc8e 	bl	8003244 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000928:	f244 0381 	movw	r3, #16513	@ 0x4081
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4828      	ldr	r0, [pc, #160]	@ (80009e4 <MX_GPIO_Init+0x194>)
 8000942:	f002 fc7f 	bl	8003244 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000946:	2340      	movs	r3, #64	@ 0x40
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4822      	ldr	r0, [pc, #136]	@ (80009e8 <MX_GPIO_Init+0x198>)
 800095e:	f002 fc71 	bl	8003244 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000962:	2380      	movs	r3, #128	@ 0x80
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	481c      	ldr	r0, [pc, #112]	@ (80009e8 <MX_GPIO_Init+0x198>)
 8000976:	f002 fc65 	bl	8003244 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800097a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800098c:	230a      	movs	r3, #10
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4816      	ldr	r0, [pc, #88]	@ (80009f0 <MX_GPIO_Init+0x1a0>)
 8000998:	f002 fc54 	bl	8003244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800099c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MX_GPIO_Init+0x194>)
 80009b2:	f002 fc47 	bl	8003244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009bc:	2312      	movs	r3, #18
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c8:	2304      	movs	r3, #4
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <MX_GPIO_Init+0x194>)
 80009d4:	f002 fc36 	bl	8003244 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3730      	adds	r7, #48	@ 0x30
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40021800 	.word	0x40021800
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020000 	.word	0x40020000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4053      	eors	r3, r2
 8000a16:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	011b      	lsls	r3, r3, #4
 8000a1c:	b25a      	sxtb	r2, r3
 8000a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a22:	4053      	eors	r3, r2
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	021b      	lsls	r3, r3, #8
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	4053      	eors	r3, r2
 8000a3a:	b21a      	sxth	r2, r3
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	4053      	eors	r3, r2
 8000a44:	b21a      	sxth	r2, r3
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	091b      	lsrs	r3, r3, #4
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	4053      	eors	r3, r2
 8000a50:	b21b      	sxth	r3, r3
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	801a      	strh	r2, [r3, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a72:	801a      	strh	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000a8c:	f107 030e 	add.w	r3, r7, #14
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ffe7 	bl	8000a64 <crc_init>
	while (length--) {
 8000a96:	e009      	b.n	8000aac <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	f107 020e 	add.w	r2, r7, #14
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffaa 	bl	8000a00 <crc_accumulate>
	while (length--) {
 8000aac:	887b      	ldrh	r3, [r7, #2]
 8000aae:	1e5a      	subs	r2, r3, #1
 8000ab0:	807a      	strh	r2, [r7, #2]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f0      	bne.n	8000a98 <crc_calculate+0x18>
        }
        return crcTmp;
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	4613      	mov	r3, r2
 8000acc:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	617b      	str	r3, [r7, #20]
	while (length--) {
 8000ad2:	e007      	b.n	8000ae4 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	617a      	str	r2, [r7, #20]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	68f9      	ldr	r1, [r7, #12]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ff8e 	bl	8000a00 <crc_accumulate>
	while (length--) {
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	1e5a      	subs	r2, r3, #1
 8000ae8:	80fa      	strh	r2, [r7, #6]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f2      	bne.n	8000ad4 <crc_accumulate_buffer+0x14>
        }
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b48 <mavlink_sha256_init+0x50>)
 8000b10:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	@ (8000b4c <mavlink_sha256_init+0x54>)
 8000b16:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <mavlink_sha256_init+0x58>)
 8000b1c:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a0c      	ldr	r2, [pc, #48]	@ (8000b54 <mavlink_sha256_init+0x5c>)
 8000b22:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a0c      	ldr	r2, [pc, #48]	@ (8000b58 <mavlink_sha256_init+0x60>)
 8000b28:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <mavlink_sha256_init+0x64>)
 8000b2e:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <mavlink_sha256_init+0x68>)
 8000b34:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <mavlink_sha256_init+0x6c>)
 8000b3a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	6a09e667 	.word	0x6a09e667
 8000b4c:	bb67ae85 	.word	0xbb67ae85
 8000b50:	3c6ef372 	.word	0x3c6ef372
 8000b54:	a54ff53a 	.word	0xa54ff53a
 8000b58:	510e527f 	.word	0x510e527f
 8000b5c:	9b05688c 	.word	0x9b05688c
 8000b60:	1f83d9ab 	.word	0x1f83d9ab
 8000b64:	5be0cd19 	.word	0x5be0cd19

08000b68 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b0cf      	sub	sp, #316	@ 0x13c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b72:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000b76:	6018      	str	r0, [r3, #0]
 8000b78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b7c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000b80:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8000b82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b86:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    BB = m->counter[1];
 8000b92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b96:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    CC = m->counter[2];
 8000ba2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ba6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    DD = m->counter[3];
 8000bb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bb6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    EE = m->counter[4];
 8000bc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bc6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    FF = m->counter[5];
 8000bd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bd6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GG = m->counter[6];
 8000be2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000be6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6a1b      	ldr	r3, [r3, #32]
 8000bee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HH = m->counter[7];
 8000bf2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bf6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    for (i = 0; i < 16; ++i)
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000c08:	e016      	b.n	8000c38 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 8000c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000c14:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8000c18:	6812      	ldr	r2, [r2, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	6819      	ldr	r1, [r3, #0]
 8000c1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c26:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c32:	3301      	adds	r3, #1
 8000c34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	dde4      	ble.n	8000c0a <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8000c40:	2310      	movs	r3, #16
 8000c42:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000c46:	e069      	b.n	8000d1c <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c4c:	1e9a      	subs	r2, r3, #2
 8000c4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5a:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c62:	1e99      	subs	r1, r3, #2
 8000c64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c70:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000c74:	405a      	eors	r2, r3
 8000c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c7a:	1e99      	subs	r1, r3, #2
 8000c7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c88:	0a9b      	lsrs	r3, r3, #10
 8000c8a:	405a      	eors	r2, r3
 8000c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c90:	1fd9      	subs	r1, r3, #7
 8000c92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c9e:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ca4:	f1a3 010f 	sub.w	r1, r3, #15
 8000ca8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cb4:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cbc:	f1a3 000f 	sub.w	r0, r3, #15
 8000cc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cc8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ccc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000cd0:	4059      	eors	r1, r3
 8000cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cd6:	f1a3 000f 	sub.w	r0, r3, #15
 8000cda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cde:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ce2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000cea:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cf0:	f1a3 0110 	sub.w	r1, r3, #16
 8000cf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cf8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d00:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d16:	3301      	adds	r3, #1
 8000d18:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d20:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d22:	dd91      	ble.n	8000c48 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000d2a:	e078      	b.n	8000e1e <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000d2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d30:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000d34:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d38:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000d3c:	405a      	eors	r2, r3
 8000d3e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d42:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000d46:	405a      	eors	r2, r3
 8000d48:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d4c:	441a      	add	r2, r3
 8000d4e:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8000d52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d56:	4019      	ands	r1, r3
 8000d58:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d5c:	43d8      	mvns	r0, r3
 8000d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000d62:	4003      	ands	r3, r0
 8000d64:	404b      	eors	r3, r1
 8000d66:	441a      	add	r2, r3
 8000d68:	496e      	ldr	r1, [pc, #440]	@ (8000f24 <mavlink_sha256_calc+0x3bc>)
 8000d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d72:	441a      	add	r2, r3
 8000d74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d7c:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8000d80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d84:	4413      	add	r3, r2
 8000d86:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000d8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000d8e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000d92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000d96:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000d9a:	405a      	eors	r2, r3
 8000d9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000da0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000da4:	405a      	eors	r2, r3
 8000da6:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8000daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000dae:	4059      	eors	r1, r3
 8000db0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000db4:	4019      	ands	r1, r3
 8000db6:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000dbe:	4003      	ands	r3, r0
 8000dc0:	404b      	eors	r3, r1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			     
	HH = GG;
 8000dc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000dcc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	GG = FF;
 8000dd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000dd4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	FF = EE;
 8000dd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ddc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	EE = DD + T1;
 8000de0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000de4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000de8:	4413      	add	r3, r2
 8000dea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	DD = CC;
 8000dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000df2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	CC = BB;
 8000df6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000dfa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	BB = AA;
 8000dfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000e02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	AA = T1 + T2;
 8000e06:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e0e:	4413      	add	r3, r2
 8000e10:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (i = 0; i < 64; i++) {
 8000e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e22:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e24:	dd82      	ble.n	8000d2c <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 8000e26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e2a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000e36:	441a      	add	r2, r3
 8000e38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e3c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8000e44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68da      	ldr	r2, [r3, #12]
 8000e50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000e54:	441a      	add	r2, r3
 8000e56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e5a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8000e62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e66:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e72:	441a      	add	r2, r3
 8000e74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e78:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8000e80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e84:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	695a      	ldr	r2, [r3, #20]
 8000e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000e90:	441a      	add	r2, r3
 8000e92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e96:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8000e9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ea2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000eae:	441a      	add	r2, r3
 8000eb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000eb4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8000ebc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ec0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	69da      	ldr	r2, [r3, #28]
 8000ec8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000ecc:	441a      	add	r2, r3
 8000ece:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ed2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8000eda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ede:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6a1a      	ldr	r2, [r3, #32]
 8000ee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000eea:	441a      	add	r2, r3
 8000eec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ef0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8000ef8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000efc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f08:	441a      	add	r2, r3
 8000f0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f0e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000f16:	bf00      	nop
 8000f18:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	08006190 	.word	0x08006190

08000f28 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b09c      	sub	sp, #112	@ 0x70
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	441a      	add	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d904      	bls.n	8000f60 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000f60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f62:	08db      	lsrs	r3, r3, #3
 8000f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f68:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8000f6a:	e057      	b.n	800101c <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 8000f6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f6e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000f72:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d201      	bcs.n	8000f80 <mavlink_sha256_update+0x58>
            l = len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000f86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f88:	4413      	add	r3, r2
 8000f8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000f8c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f005 f8e4 	bl	800615c <memcpy>
	offset += l;
 8000f94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000f96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f98:	4413      	add	r3, r2
 8000f9a:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 8000f9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000f9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fa0:	4413      	add	r3, r2
 8000fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000fac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fae:	2b40      	cmp	r3, #64	@ 0x40
 8000fb0:	d134      	bne.n	800101c <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3328      	adds	r3, #40	@ 0x28
 8000fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 8000fb8:	2300      	movs	r3, #0
 8000fba:	663b      	str	r3, [r7, #96]	@ 0x60
 8000fbc:	e023      	b.n	8001006 <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000fbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000fc4:	4413      	add	r3, r2
 8000fc6:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000fc8:	f107 0210 	add.w	r2, r7, #16
 8000fcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 8000fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fd6:	3303      	adds	r3, #3
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fdc:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fe0:	1c9a      	adds	r2, r3, #2
 8000fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	7812      	ldrb	r2, [r2, #0]
 8000ff4:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000ff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001000:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001002:	3301      	adds	r3, #1
 8001004:	663b      	str	r3, [r7, #96]	@ 0x60
 8001006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001008:	2b0f      	cmp	r3, #15
 800100a:	ddd8      	ble.n	8000fbe <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f7ff fda8 	bl	8000b68 <mavlink_sha256_calc>
	    offset = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1a4      	bne.n	8000f6c <mavlink_sha256_update+0x44>
	}
    }
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	3770      	adds	r7, #112	@ 0x70
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b098      	sub	sp, #96	@ 0x60
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	08db      	lsrs	r3, r3, #3
 800103c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001040:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001044:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800104c:	3301      	adds	r3, #1
 800104e:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3308      	adds	r3, #8
 8001054:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 8001056:	2380      	movs	r3, #128	@ 0x80
 8001058:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	3301      	adds	r3, #1
 8001060:	2247      	movs	r2, #71	@ 0x47
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f005 f84d 	bl	8006104 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001070:	3307      	adds	r3, #7
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	3360      	adds	r3, #96	@ 0x60
 8001076:	443b      	add	r3, r7
 8001078:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	0a1a      	lsrs	r2, r3, #8
 8001082:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001084:	3306      	adds	r3, #6
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	3360      	adds	r3, #96	@ 0x60
 800108a:	443b      	add	r3, r7
 800108c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	0c1a      	lsrs	r2, r3, #16
 8001096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001098:	3305      	adds	r3, #5
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	3360      	adds	r3, #96	@ 0x60
 800109e:	443b      	add	r3, r7
 80010a0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	0e1a      	lsrs	r2, r3, #24
 80010aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010ac:	3304      	adds	r3, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	3360      	adds	r3, #96	@ 0x60
 80010b2:	443b      	add	r3, r7
 80010b4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010be:	3303      	adds	r3, #3
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	3360      	adds	r3, #96	@ 0x60
 80010c4:	443b      	add	r3, r7
 80010c6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	0a1a      	lsrs	r2, r3, #8
 80010d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010d2:	3302      	adds	r3, #2
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	3360      	adds	r3, #96	@ 0x60
 80010d8:	443b      	add	r3, r7
 80010da:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	0c1a      	lsrs	r2, r3, #16
 80010e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	3360      	adds	r3, #96	@ 0x60
 80010ec:	443b      	add	r3, r7
 80010ee:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	0e1b      	lsrs	r3, r3, #24
 80010f8:	b2d9      	uxtb	r1, r3
 80010fa:	f107 020c 	add.w	r2, r7, #12
 80010fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001100:	4413      	add	r3, r2
 8001102:	460a      	mov	r2, r1
 8001104:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8001106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001108:	f103 0208 	add.w	r2, r3, #8
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff08 	bl	8000f28 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8001118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800111a:	78da      	ldrb	r2, [r3, #3]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001126:	7892      	ldrb	r2, [r2, #2]
 8001128:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3302      	adds	r3, #2
 800112e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001130:	7852      	ldrb	r2, [r2, #1]
 8001132:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	3303      	adds	r3, #3
 8001138:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800113a:	7812      	ldrb	r2, [r2, #0]
 800113c:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	3304      	adds	r3, #4
 8001142:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001144:	79d2      	ldrb	r2, [r2, #7]
 8001146:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	3305      	adds	r3, #5
 800114c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800114e:	7992      	ldrb	r2, [r2, #6]
 8001150:	701a      	strb	r2, [r3, #0]
}
 8001152:	bf00      	nop
 8001154:	3760      	adds	r7, #96	@ 0x60
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4a03      	ldr	r2, [pc, #12]	@ (8001180 <mavlink_get_channel_status+0x24>)
 8001172:	4413      	add	r3, r2
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	20000e78 	.word	0x20000e78

08001184 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f240 1223 	movw	r2, #291	@ 0x123
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	4a03      	ldr	r2, [pc, #12]	@ (80011a8 <mavlink_get_channel_buffer+0x24>)
 800119a:	4413      	add	r3, r2
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	200009ec 	.word	0x200009ec

080011ac <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b0a0      	sub	sp, #128	@ 0x80
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <mavlink_sign_packet+0x20>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <mavlink_sign_packet+0x24>
	    return 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	e04f      	b.n	8001270 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	785a      	ldrb	r2, [r3, #1]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011de:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3301      	adds	r3, #1
 80011e6:	f107 0110 	add.w	r1, r7, #16
 80011ea:	2206      	movs	r2, #6
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 ffb5 	bl	800615c <memcpy>
	signing->timestamp++;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011f8:	1c54      	adds	r4, r2, #1
 80011fa:	f143 0500 	adc.w	r5, r3, #0
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fc75 	bl	8000af8 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f103 0110 	add.w	r1, r3, #16
 8001214:	f107 0318 	add.w	r3, r7, #24
 8001218:	2220      	movs	r2, #32
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fe84 	bl	8000f28 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001220:	78fa      	ldrb	r2, [r7, #3]
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fe7d 	bl	8000f28 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 800122e:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 8001232:	f107 0318 	add.w	r3, r7, #24
 8001236:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe74 	bl	8000f28 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001240:	f107 0318 	add.w	r3, r7, #24
 8001244:	2202      	movs	r2, #2
 8001246:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fe6c 	bl	8000f28 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	2207      	movs	r2, #7
 8001256:	68b9      	ldr	r1, [r7, #8]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe65 	bl	8000f28 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1dda      	adds	r2, r3, #7
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fedf 	bl	800102c <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 800126e:	230d      	movs	r3, #13
}
 8001270:	4618      	mov	r0, r3
 8001272:	3780      	adds	r7, #128	@ 0x80
 8001274:	46bd      	mov	sp, r7
 8001276:	bdb0      	pop	{r4, r5, r7, pc}

08001278 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001284:	e002      	b.n	800128c <_mav_trim_payload+0x14>
		length--;
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	3b01      	subs	r3, #1
 800128a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d906      	bls.n	80012a0 <_mav_trim_payload+0x28>
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	3b01      	subs	r3, #1
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f2      	beq.n	8001286 <_mav_trim_payload+0xe>
	}
	return length;
 80012a0:	78fb      	ldrb	r3, [r7, #3]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b0aa      	sub	sp, #168	@ 0xa8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <mavlink_signature_check+0x16>
		return true;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e13e      	b.n	8001544 <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3302      	adds	r3, #2
 80012ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	const uint8_t *psig = msg->signature;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 80012d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        const uint8_t *incoming_signature = psig+7;
 80012d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012dc:	3307      	adds	r3, #7
 80012de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 80012e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fc06 	bl	8000af8 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f103 0110 	add.w	r1, r3, #16
 80012f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f6:	2220      	movs	r2, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe15 	bl	8000f28 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 80012fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001302:	220a      	movs	r2, #10
 8001304:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fe0d 	bl	8000f28 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f103 010c 	add.w	r1, r3, #12
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	78db      	ldrb	r3, [r3, #3]
 8001318:	461a      	mov	r2, r3
 800131a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fe02 	bl	8000f28 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f503 718a 	add.w	r1, r3, #276	@ 0x114
 800132a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132e:	2202      	movs	r2, #2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fdf9 	bl	8000f28 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8001336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800133a:	2207      	movs	r2, #7
 800133c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fdf1 	bl	8000f28 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8001346:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800134a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe6b 	bl	800102c <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 8001356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135a:	2206      	movs	r2, #6
 800135c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001360:	4618      	mov	r0, r3
 8001362:	f004 febf 	bl	80060e4 <memcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2202      	movs	r2, #2
 8001370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		return false;
 8001374:	2300      	movs	r3, #0
 8001376:	e0e5      	b.n	8001544 <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8001378:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	tstamp.t64 = 0;
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 800138e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001392:	1c59      	adds	r1, r3, #1
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	2206      	movs	r2, #6
 800139a:	4618      	mov	r0, r3
 800139c:	f004 fede 	bl	800615c <memcpy>

	if (signing_streams == NULL) {
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                return false;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e0c8      	b.n	8001544 <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 80013b8:	e02b      	b.n	8001412 <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	79d9      	ldrb	r1, [r3, #7]
 80013be:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	4413      	add	r3, r2
 80013ca:	4403      	add	r3, r0
 80013cc:	3303      	adds	r3, #3
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4299      	cmp	r1, r3
 80013d2:	d119      	bne.n	8001408 <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7a19      	ldrb	r1, [r3, #8]
 80013d8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80013dc:	68b8      	ldr	r0, [r7, #8]
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	4403      	add	r3, r0
 80013e6:	3304      	adds	r3, #4
 80013e8:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80013ea:	4299      	cmp	r1, r3
 80013ec:	d10c      	bne.n	8001408 <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 80013ee:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	3302      	adds	r3, #2
 80013fe:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001400:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8001404:	429a      	cmp	r2, r3
 8001406:	d00b      	beq.n	8001420 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001408:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800140c:	3301      	adds	r3, #1
 800140e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800141a:	429a      	cmp	r2, r3
 800141c:	d3cd      	bcc.n	80013ba <mavlink_signature_check+0x10a>
 800141e:	e000      	b.n	8001422 <mavlink_signature_check+0x172>
			break;
 8001420:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800142a:	429a      	cmp	r2, r3
 800142c:	d146      	bne.n	80014bc <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	d905      	bls.n	8001442 <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2204      	movs	r2, #4
 800143a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 800143e:	2300      	movs	r3, #0
 8001440:	e080      	b.n	8001544 <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001442:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001446:	4941      	ldr	r1, [pc, #260]	@ (800154c <mavlink_signature_check+0x29c>)
 8001448:	1854      	adds	r4, r2, r1
 800144a:	f143 0500 	adc.w	r5, r3, #0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001454:	4294      	cmp	r4, r2
 8001456:	eb75 0303 	sbcs.w	r3, r5, r3
 800145a:	d205      	bcs.n	8001468 <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2205      	movs	r2, #5
 8001460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 8001464:	2300      	movs	r3, #0
 8001466:	e06d      	b.n	8001544 <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8001468:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	79d8      	ldrb	r0, [r3, #7]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	4613      	mov	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4413      	add	r3, r2
 8001478:	440b      	add	r3, r1
 800147a:	3303      	adds	r3, #3
 800147c:	4602      	mov	r2, r0
 800147e:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001480:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7a18      	ldrb	r0, [r3, #8]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	440b      	add	r3, r1
 8001492:	3304      	adds	r3, #4
 8001494:	4602      	mov	r2, r0
 8001496:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001498:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	4613      	mov	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4413      	add	r3, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	3302      	adds	r3, #2
 80014a8:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80014ac:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	801a      	strh	r2, [r3, #0]
 80014ba:	e021      	b.n	8001500 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 80014c8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	1d59      	adds	r1, r3, #5
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	2206      	movs	r2, #6
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 fe3c 	bl	800615c <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 80014e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014ec:	4290      	cmp	r0, r2
 80014ee:	eb71 0303 	sbcs.w	r3, r1, r3
 80014f2:	d305      	bcc.n	8001500 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2206      	movs	r2, #6
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e021      	b.n	8001544 <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001500:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001504:	4613      	mov	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4413      	add	r3, r2
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	1d58      	adds	r0, r3, #5
 8001510:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001514:	3301      	adds	r3, #1
 8001516:	2206      	movs	r2, #6
 8001518:	4619      	mov	r1, r3
 800151a:	f004 fe1f 	bl	800615c <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 800151e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001522:	68f9      	ldr	r1, [r7, #12]
 8001524:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001528:	4290      	cmp	r0, r2
 800152a:	eb71 0303 	sbcs.w	r3, r1, r3
 800152e:	d204      	bcs.n	800153a <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 8001530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001534:	68f9      	ldr	r1, [r7, #12]
 8001536:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return true;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	37a8      	adds	r7, #168	@ 0xa8
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}
 800154c:	005b8d80 	.word	0x005b8d80

08001550 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001552:	b08f      	sub	sp, #60	@ 0x3c
 8001554:	af04      	add	r7, sp, #16
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	72fb      	strb	r3, [r7, #11]
 800155e:	4613      	mov	r3, r2
 8001560:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7b1b      	ldrb	r3, [r3, #12]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	bf14      	ite	ne
 800156e:	2301      	movne	r3, #1
 8001570:	2300      	moveq	r3, #0
 8001572:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001576:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800157a:	f083 0301 	eor.w	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00c      	beq.n	800159e <mavlink_finalize_message_buffer+0x4e>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <mavlink_finalize_message_buffer+0x4e>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <mavlink_finalize_message_buffer+0x4e>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <mavlink_finalize_message_buffer+0x50>
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80015a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 80015b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <mavlink_finalize_message_buffer+0x6c>
 80015b8:	230d      	movs	r3, #13
 80015ba:	e000      	b.n	80015be <mavlink_finalize_message_buffer+0x6e>
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 80015c2:	230a      	movs	r3, #10
 80015c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 80015c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	22fe      	movs	r2, #254	@ 0xfe
 80015d4:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80015d6:	2306      	movs	r3, #6
 80015d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80015dc:	e002      	b.n	80015e4 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	22fd      	movs	r2, #253	@ 0xfd
 80015e2:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80015e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10a      	bne.n	8001602 <mavlink_finalize_message_buffer+0xb2>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	330c      	adds	r3, #12
 80015f0:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fe3e 	bl	8001278 <_mav_trim_payload>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	e001      	b.n	8001606 <mavlink_finalize_message_buffer+0xb6>
 8001602:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	7afa      	ldrb	r2, [r7, #11]
 800160e:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	7aba      	ldrb	r2, [r7, #10]
 8001614:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	711a      	strb	r2, [r3, #4]
	if (signing) {
 800161c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	791b      	ldrb	r3, [r3, #4]
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	b2da      	uxtb	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	799a      	ldrb	r2, [r3, #6]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	799b      	ldrb	r3, [r3, #6]
 8001644:	3301      	adds	r3, #1
 8001646:	b2da      	uxtb	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	789b      	ldrb	r3, [r3, #2]
 8001650:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	78db      	ldrb	r3, [r3, #3]
 8001656:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8001658:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	799b      	ldrb	r3, [r3, #6]
 8001664:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	79db      	ldrb	r3, [r3, #7]
 800166a:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	7a1b      	ldrb	r3, [r3, #8]
 8001670:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	7a5a      	ldrb	r2, [r3, #9]
 8001676:	7a99      	ldrb	r1, [r3, #10]
 8001678:	0209      	lsls	r1, r1, #8
 800167a:	430a      	orrs	r2, r1
 800167c:	7adb      	ldrb	r3, [r3, #11]
 800167e:	041b      	lsls	r3, r3, #16
 8001680:	4313      	orrs	r3, r2
 8001682:	b2db      	uxtb	r3, r3
 8001684:	777b      	strb	r3, [r7, #29]
 8001686:	e030      	b.n	80016ea <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	791b      	ldrb	r3, [r3, #4]
 800168c:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	795b      	ldrb	r3, [r3, #5]
 8001692:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	799b      	ldrb	r3, [r3, #6]
 8001698:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	79db      	ldrb	r3, [r3, #7]
 800169e:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	7a1b      	ldrb	r3, [r3, #8]
 80016a4:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	7a5a      	ldrb	r2, [r3, #9]
 80016aa:	7a99      	ldrb	r1, [r3, #10]
 80016ac:	0209      	lsls	r1, r1, #8
 80016ae:	430a      	orrs	r2, r1
 80016b0:	7adb      	ldrb	r3, [r3, #11]
 80016b2:	041b      	lsls	r3, r3, #16
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	7a5a      	ldrb	r2, [r3, #9]
 80016be:	7a99      	ldrb	r1, [r3, #10]
 80016c0:	0209      	lsls	r1, r1, #8
 80016c2:	430a      	orrs	r2, r1
 80016c4:	7adb      	ldrb	r3, [r3, #11]
 80016c6:	041b      	lsls	r3, r3, #16
 80016c8:	4313      	orrs	r3, r2
 80016ca:	121b      	asrs	r3, r3, #8
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	7a5a      	ldrb	r2, [r3, #9]
 80016d6:	7a99      	ldrb	r1, [r3, #10]
 80016d8:	0209      	lsls	r1, r1, #8
 80016da:	430a      	orrs	r2, r1
 80016dc:	7adb      	ldrb	r3, [r3, #11]
 80016de:	041b      	lsls	r3, r3, #16
 80016e0:	4313      	orrs	r3, r2
 80016e2:	141b      	asrs	r3, r3, #16
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 80016ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	3301      	adds	r3, #1
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff f9bf 	bl	8000a80 <crc_calculate>
 8001702:	4603      	mov	r3, r0
 8001704:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f103 010c 	add.w	r1, r3, #12
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	78db      	ldrb	r3, [r3, #3]
 8001710:	461a      	mov	r2, r3
 8001712:	f107 0316 	add.w	r3, r7, #22
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff f9d2 	bl	8000ac0 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 800171c:	f107 0216 	add.w	r2, r7, #22
 8001720:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff f96a 	bl	8000a00 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800172c:	8af9      	ldrh	r1, [r7, #22]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	330c      	adds	r3, #12
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	78d2      	ldrb	r2, [r2, #3]
 8001736:	4413      	add	r3, r2
 8001738:	b2ca      	uxtb	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 800173c:	8afb      	ldrh	r3, [r7, #22]
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	b299      	uxth	r1, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f103 020c 	add.w	r2, r3, #12
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	78db      	ldrb	r3, [r3, #3]
 800174c:	3301      	adds	r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	b2ca      	uxtb	r2, r1
 8001752:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8001754:	8afa      	ldrh	r2, [r7, #22]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 800175a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01a      	beq.n	8001798 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f503 758b 	add.w	r5, r3, #278	@ 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	310c      	adds	r1, #12
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 800177c:	4401      	add	r1, r0
 800177e:	f897 6027 	ldrb.w	r6, [r7, #39]	@ 0x27
 8001782:	f107 0018 	add.w	r0, r7, #24
 8001786:	9102      	str	r1, [sp, #8]
 8001788:	9201      	str	r2, [sp, #4]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	4633      	mov	r3, r6
 800178e:	4602      	mov	r2, r0
 8001790:	4629      	mov	r1, r5
 8001792:	4620      	mov	r0, r4
 8001794:	f7ff fd0a 	bl	80011ac <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	78db      	ldrb	r3, [r3, #3]
 800179c:	461a      	mov	r2, r3
 800179e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	3302      	adds	r3, #2
 80017b4:	b29b      	uxth	r3, r3
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	372c      	adds	r7, #44	@ 0x2c
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017be <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b088      	sub	sp, #32
 80017c2:	af04      	add	r7, sp, #16
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	4608      	mov	r0, r1
 80017c8:	4611      	mov	r1, r2
 80017ca:	461a      	mov	r2, r3
 80017cc:	4603      	mov	r3, r0
 80017ce:	70fb      	strb	r3, [r7, #3]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70bb      	strb	r3, [r7, #2]
 80017d4:	4613      	mov	r3, r2
 80017d6:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fcbe 	bl	800115c <mavlink_get_channel_status>
 80017e0:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 80017e2:	78ba      	ldrb	r2, [r7, #2]
 80017e4:	78f9      	ldrb	r1, [r7, #3]
 80017e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	7f3b      	ldrb	r3, [r7, #28]
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	7e3b      	ldrb	r3, [r7, #24]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff feaa 	bl	8001550 <mavlink_finalize_message_buffer>
 80017fc:	4603      	mov	r3, r0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af04      	add	r7, sp, #16
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	4608      	mov	r0, r1
 8001810:	4611      	mov	r1, r2
 8001812:	461a      	mov	r2, r3
 8001814:	4603      	mov	r3, r0
 8001816:	70fb      	strb	r3, [r7, #3]
 8001818:	460b      	mov	r3, r1
 800181a:	70bb      	strb	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001820:	78ba      	ldrb	r2, [r7, #2]
 8001822:	78f9      	ldrb	r1, [r7, #3]
 8001824:	7d3b      	ldrb	r3, [r7, #20]
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	7c3b      	ldrb	r3, [r7, #16]
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2300      	movs	r3, #0
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffc3 	bl	80017be <mavlink_finalize_message_chan>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	789b      	ldrb	r3, [r3, #2]
 800184e:	3301      	adds	r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	709a      	strb	r2, [r3, #2]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 800186e:	f107 030e 	add.w	r3, r7, #14
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f8f6 	bl	8000a64 <crc_init>
	msg->checksum = crcTmp;
 8001878:	89fa      	ldrh	r2, [r7, #14]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	801a      	strh	r2, [r3, #0]
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 800189a:	f107 020e 	add.w	r2, r7, #14
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f8ac 	bl	8000a00 <crc_accumulate>
	msg->checksum = checksum;
 80018a8:	89fa      	ldrh	r2, [r7, #14]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	801a      	strh	r2, [r3, #0]
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	f240 1373 	movw	r3, #371	@ 0x173
 80018c8:	613b      	str	r3, [r7, #16]
        while (low < high) {
 80018ca:	e025      	b.n	8001918 <mavlink_get_msg_entry+0x60>
            uint32_t mid = (low+1+high)/2;
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4413      	add	r3, r2
 80018d2:	3301      	adds	r3, #1
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80018d8:	491e      	ldr	r1, [pc, #120]	@ (8001954 <mavlink_get_msg_entry+0x9c>)
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d203      	bcs.n	80018f6 <mavlink_get_msg_entry+0x3e>
                high = mid-1;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
                continue;
 80018f4:	e010      	b.n	8001918 <mavlink_get_msg_entry+0x60>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80018f6:	4917      	ldr	r1, [pc, #92]	@ (8001954 <mavlink_get_msg_entry+0x9c>)
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	d902      	bls.n	8001912 <mavlink_get_msg_entry+0x5a>
                low = mid;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	617b      	str	r3, [r7, #20]
                continue;
 8001910:	e002      	b.n	8001918 <mavlink_get_msg_entry+0x60>
            }
            low = mid;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	617b      	str	r3, [r7, #20]
            break;
 8001916:	e003      	b.n	8001920 <mavlink_get_msg_entry+0x68>
        while (low < high) {
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d3d5      	bcc.n	80018cc <mavlink_get_msg_entry+0x14>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8001920:	490c      	ldr	r1, [pc, #48]	@ (8001954 <mavlink_get_msg_entry+0x9c>)
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 8001936:	2300      	movs	r3, #0
 8001938:	e006      	b.n	8001948 <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4a03      	ldr	r2, [pc, #12]	@ (8001954 <mavlink_get_msg_entry+0x9c>)
 8001946:	4413      	add	r3, r2
}
 8001948:	4618      	mov	r0, r3
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	08006290 	.word	0x08006290

08001958 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	78db      	ldrb	r3, [r3, #3]
 8001972:	2b0f      	cmp	r3, #15
 8001974:	f200 8272 	bhi.w	8001e5c <mavlink_frame_char_buffer+0x504>
 8001978:	a201      	add	r2, pc, #4	@ (adr r2, 8001980 <mavlink_frame_char_buffer+0x28>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	080019c1 	.word	0x080019c1
 8001984:	080019c1 	.word	0x080019c1
 8001988:	08001a1f 	.word	0x08001a1f
 800198c:	08001a85 	.word	0x08001a85
 8001990:	08001ab9 	.word	0x08001ab9
 8001994:	08001ad1 	.word	0x08001ad1
 8001998:	08001ae9 	.word	0x08001ae9
 800199c:	08001b01 	.word	0x08001b01
 80019a0:	08001b19 	.word	0x08001b19
 80019a4:	08001b73 	.word	0x08001b73
 80019a8:	08001bbf 	.word	0x08001bbf
 80019ac:	08001c1b 	.word	0x08001c1b
 80019b0:	08001c53 	.word	0x08001c53
 80019b4:	08001ceb 	.word	0x08001ceb
 80019b8:	08001ceb 	.word	0x08001ceb
 80019bc:	08001da7 	.word	0x08001da7
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2bfd      	cmp	r3, #253	@ 0xfd
 80019c4:	d113      	bne.n	80019ee <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2202      	movs	r2, #2
 80019ca:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	79fa      	ldrb	r2, [r7, #7]
 80019d6:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	7b1b      	ldrb	r3, [r3, #12]
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff ff3b 	bl	8001862 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 80019ec:	e22d      	b.n	8001e4a <mavlink_frame_char_buffer+0x4f2>
		} else if (c == MAVLINK_STX_MAVLINK1)
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80019f2:	f040 822a 	bne.w	8001e4a <mavlink_frame_char_buffer+0x4f2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2202      	movs	r2, #2
 80019fa:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	79fa      	ldrb	r2, [r7, #7]
 8001a06:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	7b1b      	ldrb	r3, [r3, #12]
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f7ff ff23 	bl	8001862 <mavlink_start_checksum>
		break;
 8001a1c:	e215      	b.n	8001e4a <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00f      	beq.n	8001a46 <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f7ff ff05 	bl	8001842 <_mav_parse_error>
			status->msg_received = 0;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2201      	movs	r2, #1
 8001a42:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8001a44:	e20a      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
			rxmsg->len = c;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	79fa      	ldrb	r2, [r7, #7]
 8001a4a:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	4619      	mov	r1, r3
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f7ff ff15 	bl	8001886 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d009      	beq.n	8001a7c <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2205      	movs	r2, #5
 8001a78:	70da      	strb	r2, [r3, #3]
		break;
 8001a7a:	e1ef      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2203      	movs	r2, #3
 8001a80:	70da      	strb	r2, [r3, #3]
		break;
 8001a82:	e1eb      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	79fa      	ldrb	r2, [r7, #7]
 8001a88:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	791b      	ldrb	r3, [r3, #4]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d909      	bls.n	8001aa6 <mavlink_frame_char_buffer+0x14e>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001a92:	68b8      	ldr	r0, [r7, #8]
 8001a94:	f7ff fed5 	bl	8001842 <_mav_parse_error>
			status->msg_received = 0;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	70da      	strb	r2, [r3, #3]
			break;
 8001aa4:	e1da      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
		}
		mavlink_update_checksum(rxmsg, c);
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff feeb 	bl	8001886 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	70da      	strb	r2, [r3, #3]
		break;
 8001ab6:	e1d1      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	79fa      	ldrb	r2, [r7, #7]
 8001abc:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f7ff fedf 	bl	8001886 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2205      	movs	r2, #5
 8001acc:	70da      	strb	r2, [r3, #3]
		break;
 8001ace:	e1c5      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
 8001ad4:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff fed3 	bl	8001886 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2206      	movs	r2, #6
 8001ae4:	70da      	strb	r2, [r3, #3]
		break;
 8001ae6:	e1b9      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	79fa      	ldrb	r2, [r7, #7]
 8001aec:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4619      	mov	r1, r3
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f7ff fec7 	bl	8001886 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2207      	movs	r2, #7
 8001afc:	70da      	strb	r2, [r3, #3]
		break;
 8001afe:	e1ad      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	79fa      	ldrb	r2, [r7, #7]
 8001b04:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff febb 	bl	8001886 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2208      	movs	r2, #8
 8001b14:	70da      	strb	r2, [r3, #3]
		break;
 8001b16:	e1a1      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	b2d9      	uxtb	r1, r3
 8001b22:	2000      	movs	r0, #0
 8001b24:	4301      	orrs	r1, r0
 8001b26:	7251      	strb	r1, [r2, #9]
 8001b28:	0a19      	lsrs	r1, r3, #8
 8001b2a:	b2c9      	uxtb	r1, r1
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	4301      	orrs	r1, r0
 8001b30:	7291      	strb	r1, [r2, #10]
 8001b32:	0c1b      	lsrs	r3, r3, #16
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2100      	movs	r1, #0
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff fea0 	bl	8001886 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	7b1b      	ldrb	r3, [r3, #12]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <mavlink_frame_char_buffer+0x212>
			if(rxmsg->len > 0) {
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	78db      	ldrb	r3, [r3, #3]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <mavlink_frame_char_buffer+0x20a>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	220b      	movs	r2, #11
 8001b5e:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8001b60:	e17c      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	220c      	movs	r2, #12
 8001b66:	70da      	strb	r2, [r3, #3]
		break;
 8001b68:	e178      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2209      	movs	r2, #9
 8001b6e:	70da      	strb	r2, [r3, #3]
		break;
 8001b70:	e174      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= ((uint32_t)c)<<8;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	7a5a      	ldrb	r2, [r3, #9]
 8001b76:	7a99      	ldrb	r1, [r3, #10]
 8001b78:	0209      	lsls	r1, r1, #8
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	7adb      	ldrb	r3, [r3, #11]
 8001b7e:	041b      	lsls	r3, r3, #16
 8001b80:	4313      	orrs	r3, r2
 8001b82:	461a      	mov	r2, r3
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	b2d1      	uxtb	r1, r2
 8001b92:	2000      	movs	r0, #0
 8001b94:	4301      	orrs	r1, r0
 8001b96:	7259      	strb	r1, [r3, #9]
 8001b98:	0a11      	lsrs	r1, r2, #8
 8001b9a:	b2c9      	uxtb	r1, r1
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	4301      	orrs	r1, r0
 8001ba0:	7299      	strb	r1, [r3, #10]
 8001ba2:	0c12      	lsrs	r2, r2, #16
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f7ff fe68 	bl	8001886 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	220a      	movs	r2, #10
 8001bba:	70da      	strb	r2, [r3, #3]
		break;
 8001bbc:	e14e      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	7a5a      	ldrb	r2, [r3, #9]
 8001bc2:	7a99      	ldrb	r1, [r3, #10]
 8001bc4:	0209      	lsls	r1, r1, #8
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	7adb      	ldrb	r3, [r3, #11]
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	461a      	mov	r2, r3
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	041b      	lsls	r3, r3, #16
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	b2d1      	uxtb	r1, r2
 8001bde:	2000      	movs	r0, #0
 8001be0:	4301      	orrs	r1, r0
 8001be2:	7259      	strb	r1, [r3, #9]
 8001be4:	0a11      	lsrs	r1, r2, #8
 8001be6:	b2c9      	uxtb	r1, r1
 8001be8:	2000      	movs	r0, #0
 8001bea:	4301      	orrs	r1, r0
 8001bec:	7299      	strb	r1, [r3, #10]
 8001bee:	0c12      	lsrs	r2, r2, #16
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff fe42 	bl	8001886 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	78db      	ldrb	r3, [r3, #3]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <mavlink_frame_char_buffer+0x2ba>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	220b      	movs	r2, #11
 8001c0e:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8001c10:	e124      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	220c      	movs	r2, #12
 8001c16:	70da      	strb	r2, [r3, #3]
		break;
 8001c18:	e120      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f103 020c 	add.w	r2, r3, #12
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	791b      	ldrb	r3, [r3, #4]
 8001c24:	1c59      	adds	r1, r3, #1
 8001c26:	b2c8      	uxtb	r0, r1
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	7108      	strb	r0, [r1, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	79fa      	ldrb	r2, [r7, #7]
 8001c30:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4619      	mov	r1, r3
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7ff fe25 	bl	8001886 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	791a      	ldrb	r2, [r3, #4]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	78db      	ldrb	r3, [r3, #3]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	f040 8102 	bne.w	8001e4e <mavlink_frame_char_buffer+0x4f6>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	70da      	strb	r2, [r3, #3]
		}
		break;
 8001c50:	e0fd      	b.n	8001e4e <mavlink_frame_char_buffer+0x4f6>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	7a5a      	ldrb	r2, [r3, #9]
 8001c56:	7a99      	ldrb	r1, [r3, #10]
 8001c58:	0209      	lsls	r1, r1, #8
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	7adb      	ldrb	r3, [r3, #11]
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	4313      	orrs	r3, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fe28 	bl	80018b8 <mavlink_get_msg_entry>
 8001c68:	61b8      	str	r0, [r7, #24]
		if (e == NULL) {
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <mavlink_frame_char_buffer+0x328>
			// Message not found in CRC_EXTRA table.
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	220e      	movs	r2, #14
 8001c74:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	79fa      	ldrb	r2, [r7, #7]
 8001c7a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			// zero-fill the packet to cope with short incoming packets
				if (e && status->packet_idx < e->max_msg_len) {
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
			}
		}
		break;
 8001c7e:	e0e8      	b.n	8001e52 <mavlink_frame_char_buffer+0x4fa>
			uint8_t crc_extra = e->crc_extra;
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	791b      	ldrb	r3, [r3, #4]
 8001c84:	75fb      	strb	r3, [r7, #23]
			mavlink_update_checksum(rxmsg, crc_extra);
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f7ff fdfb 	bl	8001886 <mavlink_update_checksum>
			if (c != (rxmsg->checksum & 0xFF)) {
 8001c90:	79fa      	ldrb	r2, [r7, #7]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d003      	beq.n	8001ca6 <mavlink_frame_char_buffer+0x34e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	220e      	movs	r2, #14
 8001ca2:	70da      	strb	r2, [r3, #3]
 8001ca4:	e002      	b.n	8001cac <mavlink_frame_char_buffer+0x354>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	220d      	movs	r2, #13
 8001caa:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	79fa      	ldrb	r2, [r7, #7]
 8001cb0:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				if (e && status->packet_idx < e->max_msg_len) {
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80cb 	beq.w	8001e52 <mavlink_frame_char_buffer+0x4fa>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	791a      	ldrb	r2, [r3, #4]
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	799b      	ldrb	r3, [r3, #6]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f080 80c4 	bcs.w	8001e52 <mavlink_frame_char_buffer+0x4fa>
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	330c      	adds	r3, #12
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	7912      	ldrb	r2, [r2, #4]
 8001cd2:	1898      	adds	r0, r3, r2
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	799b      	ldrb	r3, [r3, #6]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	791b      	ldrb	r3, [r3, #4]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	f004 fa0e 	bl	8006104 <memset>
		break;
 8001ce8:	e0b3      	b.n	8001e52 <mavlink_frame_char_buffer+0x4fa>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	78db      	ldrb	r3, [r3, #3]
 8001cee:	2b0e      	cmp	r3, #14
 8001cf0:	d008      	beq.n	8001d04 <mavlink_frame_char_buffer+0x3ac>
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d003      	beq.n	8001d0c <mavlink_frame_char_buffer+0x3b4>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2202      	movs	r2, #2
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e002      	b.n	8001d12 <mavlink_frame_char_buffer+0x3ba>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	79fa      	ldrb	r2, [r7, #7]
 8001d16:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	791b      	ldrb	r3, [r3, #4]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00e      	beq.n	8001d44 <mavlink_frame_char_buffer+0x3ec>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	220f      	movs	r2, #15
 8001d2a:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	220d      	movs	r2, #13
 8001d30:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	f000 808d 	beq.w	8001e56 <mavlink_frame_char_buffer+0x4fe>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8001d42:	e088      	b.n	8001e56 <mavlink_frame_char_buffer+0x4fe>
			if (status->signing &&
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01f      	beq.n	8001d8c <mavlink_frame_char_buffer+0x434>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (status->signing &&
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d013      	beq.n	8001d7e <mavlink_frame_char_buffer+0x426>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	7a59      	ldrb	r1, [r3, #9]
 8001d60:	7a98      	ldrb	r0, [r3, #10]
 8001d62:	0200      	lsls	r0, r0, #8
 8001d64:	4301      	orrs	r1, r0
 8001d66:	7adb      	ldrb	r3, [r3, #11]
 8001d68:	041b      	lsls	r3, r3, #16
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	68b8      	ldr	r0, [r7, #8]
 8001d70:	4790      	blx	r2
 8001d72:	4603      	mov	r3, r0
 8001d74:	f083 0301 	eor.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <mavlink_frame_char_buffer+0x434>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d002      	beq.n	8001d8c <mavlink_frame_char_buffer+0x434>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d05e      	beq.n	8001e56 <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001d98:	f240 1223 	movw	r2, #291	@ 0x123
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	6838      	ldr	r0, [r7, #0]
 8001da0:	f004 f9dc 	bl	800615c <memcpy>
		break;
 8001da4:	e057      	b.n	8001e56 <mavlink_frame_char_buffer+0x4fe>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	7b5b      	ldrb	r3, [r3, #13]
 8001daa:	f1c3 030d 	rsb	r3, r3, #13
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4413      	add	r3, r2
 8001db2:	79fa      	ldrb	r2, [r7, #7]
 8001db4:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
		status->signature_wait--;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	7b5b      	ldrb	r3, [r3, #13]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	7b5b      	ldrb	r3, [r3, #13]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d146      	bne.n	8001e5a <mavlink_frame_char_buffer+0x502>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6918      	ldr	r0, [r3, #16]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7ff fa6a 	bl	80012b0 <mavlink_signature_check>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8001de0:	7ffb      	ldrb	r3, [r7, #31]
 8001de2:	f083 0301 	eor.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d017      	beq.n	8001e1c <mavlink_frame_char_buffer+0x4c4>
			   	(status->signing->accept_unsigned_callback &&
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (!sig_ok &&
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d012      	beq.n	8001e1c <mavlink_frame_char_buffer+0x4c4>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	7a59      	ldrb	r1, [r3, #9]
 8001e00:	7a98      	ldrb	r0, [r3, #10]
 8001e02:	0200      	lsls	r0, r0, #8
 8001e04:	4301      	orrs	r1, r0
 8001e06:	7adb      	ldrb	r3, [r3, #11]
 8001e08:	041b      	lsls	r3, r3, #16
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	68b8      	ldr	r0, [r7, #8]
 8001e10:	4790      	blx	r2
 8001e12:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <mavlink_frame_char_buffer+0x4c4>
				// accepted via application level override
				sig_ok = true;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8001e1c:	7ffb      	ldrb	r3, [r7, #31]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <mavlink_frame_char_buffer+0x4d2>
				status->msg_received = MAVLINK_FRAMING_OK;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e002      	b.n	8001e30 <mavlink_frame_char_buffer+0x4d8>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2201      	movs	r2, #1
 8001e34:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00e      	beq.n	8001e5a <mavlink_frame_char_buffer+0x502>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001e3c:	f240 1223 	movw	r2, #291	@ 0x123
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	6838      	ldr	r0, [r7, #0]
 8001e44:	f004 f98a 	bl	800615c <memcpy>
			}
		}
		break;
 8001e48:	e007      	b.n	8001e5a <mavlink_frame_char_buffer+0x502>
		break;
 8001e4a:	bf00      	nop
 8001e4c:	e006      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
		break;
 8001e4e:	bf00      	nop
 8001e50:	e004      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
		break;
 8001e52:	bf00      	nop
 8001e54:	e002      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
		break;
 8001e56:	bf00      	nop
 8001e58:	e000      	b.n	8001e5c <mavlink_frame_char_buffer+0x504>
		break;
 8001e5a:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d110      	bne.n	8001e86 <mavlink_frame_char_buffer+0x52e>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	799a      	ldrb	r2, [r3, #6]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	891b      	ldrh	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <mavlink_frame_char_buffer+0x522>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2200      	movs	r2, #0
 8001e78:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	891b      	ldrh	r3, [r3, #8]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <mavlink_frame_char_buffer+0x53c>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	78da      	ldrb	r2, [r3, #3]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8001e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01a      	beq.n	8001ed0 <mavlink_frame_char_buffer+0x578>
           r_mavlink_status->parse_state = status->parse_state;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	78da      	ldrb	r2, [r3, #3]
 8001e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea0:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	791a      	ldrb	r2, [r3, #4]
 8001ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea8:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	795b      	ldrb	r3, [r3, #5]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb4:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	891a      	ldrh	r2, [r3, #8]
 8001eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ebc:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	789b      	ldrb	r3, [r3, #2]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec6:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	7b1a      	ldrb	r2, [r3, #12]
 8001ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ece:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d110      	bne.n	8001f00 <mavlink_frame_char_buffer+0x5a8>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00d      	beq.n	8001f00 <mavlink_frame_char_buffer+0x5a8>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3720      	adds	r7, #32
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	60ba      	str	r2, [r7, #8]
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4603      	mov	r3, r0
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff f92f 	bl	8001184 <mavlink_get_channel_buffer>
 8001f26:	4604      	mov	r4, r0
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f916 	bl	800115c <mavlink_get_channel_status>
 8001f30:	4601      	mov	r1, r0
 8001f32:	7bba      	ldrb	r2, [r7, #14]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7ff fd0c 	bl	8001958 <mavlink_frame_char_buffer>
 8001f40:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}

08001f4a <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b088      	sub	sp, #32
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60ba      	str	r2, [r7, #8]
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	4603      	mov	r3, r0
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8001f5c:	7bb9      	ldrb	r1, [r7, #14]
 8001f5e:	7bf8      	ldrb	r0, [r7, #15]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	f7ff ffd2 	bl	8001f0c <mavlink_frame_char>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001f6c:	7ffb      	ldrb	r3, [r7, #31]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d002      	beq.n	8001f78 <mavlink_parse_char+0x2e>
 8001f72:	7ffb      	ldrb	r3, [r7, #31]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d120      	bne.n	8001fba <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f902 	bl	8001184 <mavlink_get_channel_buffer>
 8001f80:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f8e9 	bl	800115c <mavlink_get_channel_status>
 8001f8a:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f7ff fc58 	bl	8001842 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8001f9e:	7bbb      	ldrb	r3, [r7, #14]
 8001fa0:	2bfd      	cmp	r3, #253	@ 0xfd
 8001fa2:	d108      	bne.n	8001fb6 <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2200      	movs	r2, #0
 8001fae:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8001fb0:	69b8      	ldr	r0, [r7, #24]
 8001fb2:	f7ff fc56 	bl	8001862 <mavlink_start_checksum>
	    }
	    return 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e000      	b.n	8001fbc <mavlink_parse_char+0x72>
    }
    return msg_received;
 8001fba:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <mavlink_msg_sys_status_decode>:
 *
 * @param msg The message to decode
 * @param sys_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_sys_status_decode(const mavlink_message_t* msg, mavlink_sys_status_t* sys_status)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
    sys_status->battery_remaining = mavlink_msg_sys_status_get_battery_remaining(msg);
    sys_status->onboard_control_sensors_present_extended = mavlink_msg_sys_status_get_onboard_control_sensors_present_extended(msg);
    sys_status->onboard_control_sensors_enabled_extended = mavlink_msg_sys_status_get_onboard_control_sensors_enabled_extended(msg);
    sys_status->onboard_control_sensors_health_extended = mavlink_msg_sys_status_get_onboard_control_sensors_health_extended(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SYS_STATUS_LEN? msg->len : MAVLINK_MSG_ID_SYS_STATUS_LEN;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	78db      	ldrb	r3, [r3, #3]
 8001fd2:	2b2b      	cmp	r3, #43	@ 0x2b
 8001fd4:	bf28      	it	cs
 8001fd6:	232b      	movcs	r3, #43	@ 0x2b
 8001fd8:	73fb      	strb	r3, [r7, #15]
        memset(sys_status, 0, MAVLINK_MSG_ID_SYS_STATUS_LEN);
 8001fda:	222b      	movs	r2, #43	@ 0x2b
 8001fdc:	2100      	movs	r1, #0
 8001fde:	6838      	ldr	r0, [r7, #0]
 8001fe0:	f004 f890 	bl	8006104 <memset>
    memcpy(sys_status, _MAV_PAYLOAD(msg), len);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	4619      	mov	r1, r3
 8001fec:	6838      	ldr	r0, [r7, #0]
 8001fee:	f004 f8b5 	bl	800615c <memcpy>
#endif
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
    global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
    global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
    global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
    global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN? msg->len : MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	78db      	ldrb	r3, [r3, #3]
 8002008:	2b1c      	cmp	r3, #28
 800200a:	bf28      	it	cs
 800200c:	231c      	movcs	r3, #28
 800200e:	73fb      	strb	r3, [r7, #15]
        memset(global_position_int, 0, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
 8002010:	221c      	movs	r2, #28
 8002012:	2100      	movs	r1, #0
 8002014:	6838      	ldr	r0, [r7, #0]
 8002016:	f004 f875 	bl	8006104 <memset>
    memcpy(global_position_int, _MAV_PAYLOAD(msg), len);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	330c      	adds	r3, #12
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	4619      	mov	r1, r3
 8002022:	6838      	ldr	r0, [r7, #0]
 8002024:	f004 f89a 	bl	800615c <memcpy>
#endif
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <mavlink_msg_command_long_pack>:
 * @param param7  Parameter 7 (for the specific command).
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_command_long_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b096      	sub	sp, #88	@ 0x58
 8002034:	af02      	add	r7, sp, #8
 8002036:	623a      	str	r2, [r7, #32]
 8002038:	461a      	mov	r2, r3
 800203a:	ed87 0a07 	vstr	s0, [r7, #28]
 800203e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002042:	ed87 1a05 	vstr	s2, [r7, #20]
 8002046:	edc7 1a04 	vstr	s3, [r7, #16]
 800204a:	ed87 2a03 	vstr	s4, [r7, #12]
 800204e:	edc7 2a02 	vstr	s5, [r7, #8]
 8002052:	ed87 3a01 	vstr	s6, [r7, #4]
 8002056:	4603      	mov	r3, r0
 8002058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800205c:	460b      	mov	r3, r1
 800205e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002062:	4613      	mov	r3, r2
 8002064:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    _mav_put_uint8_t(buf, 32, confirmation);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#else
    mavlink_command_long_t packet;
    packet.param1 = param1;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    packet.param2 = param2;
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	633b      	str	r3, [r7, #48]	@ 0x30
    packet.param3 = param3;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	637b      	str	r3, [r7, #52]	@ 0x34
    packet.param4 = param4;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	63bb      	str	r3, [r7, #56]	@ 0x38
    packet.param5 = param5;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    packet.param6 = param6;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	643b      	str	r3, [r7, #64]	@ 0x40
    packet.param7 = param7;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	647b      	str	r3, [r7, #68]	@ 0x44
    packet.command = command;
 8002084:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002088:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    packet.target_system = target_system;
 800208c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002090:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    packet.target_component = target_component;
 8002094:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002098:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    packet.confirmation = confirmation;
 800209c:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80020a0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	330c      	adds	r3, #12
 80020a8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80020ac:	2221      	movs	r2, #33	@ 0x21
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 f854 	bl	800615c <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_COMMAND_LONG;
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f042 024c 	orr.w	r2, r2, #76	@ 0x4c
 80020bc:	725a      	strb	r2, [r3, #9]
 80020be:	2200      	movs	r2, #0
 80020c0:	729a      	strb	r2, [r3, #10]
 80020c2:	2200      	movs	r2, #0
 80020c4:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_COMMAND_LONG_MIN_LEN, MAVLINK_MSG_ID_COMMAND_LONG_LEN, MAVLINK_MSG_ID_COMMAND_LONG_CRC);
 80020c6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80020ca:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80020ce:	2398      	movs	r3, #152	@ 0x98
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	2321      	movs	r3, #33	@ 0x21
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2321      	movs	r3, #33	@ 0x21
 80020d8:	6a38      	ldr	r0, [r7, #32]
 80020da:	f7ff fb94 	bl	8001806 <mavlink_finalize_message>
 80020de:	4603      	mov	r3, r0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3750      	adds	r7, #80	@ 0x50
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <mavlink_msg_power_status_decode>:
 *
 * @param msg The message to decode
 * @param power_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_power_status_decode(const mavlink_message_t* msg, mavlink_power_status_t* power_status)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    power_status->Vcc = mavlink_msg_power_status_get_Vcc(msg);
    power_status->Vservo = mavlink_msg_power_status_get_Vservo(msg);
    power_status->flags = mavlink_msg_power_status_get_flags(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_POWER_STATUS_LEN? msg->len : MAVLINK_MSG_ID_POWER_STATUS_LEN;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	78db      	ldrb	r3, [r3, #3]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	bf28      	it	cs
 80020fa:	2306      	movcs	r3, #6
 80020fc:	73fb      	strb	r3, [r7, #15]
        memset(power_status, 0, MAVLINK_MSG_ID_POWER_STATUS_LEN);
 80020fe:	2206      	movs	r2, #6
 8002100:	2100      	movs	r1, #0
 8002102:	6838      	ldr	r0, [r7, #0]
 8002104:	f003 fffe 	bl	8006104 <memset>
    memcpy(power_status, _MAV_PAYLOAD(msg), len);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	330c      	adds	r3, #12
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	4619      	mov	r1, r3
 8002110:	6838      	ldr	r0, [r7, #0]
 8002112:	f004 f823 	bl	800615c <memcpy>
#endif
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b088      	sub	sp, #32
 8002122:	af02      	add	r7, sp, #8
 8002124:	603a      	str	r2, [r7, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	460b      	mov	r3, r1
 800212e:	71bb      	strb	r3, [r7, #6]
 8002130:	4613      	mov	r3, r2
 8002132:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8002134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002136:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 8002138:	797b      	ldrb	r3, [r7, #5]
 800213a:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 800213c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002140:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8002142:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002146:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 8002148:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800214c:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 800214e:	2303      	movs	r3, #3
 8002150:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	330c      	adds	r3, #12
 8002156:	f107 010c 	add.w	r1, r7, #12
 800215a:	2209      	movs	r2, #9
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fffd 	bl	800615c <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	725a      	strb	r2, [r3, #9]
 8002168:	2200      	movs	r2, #0
 800216a:	729a      	strb	r2, [r3, #10]
 800216c:	2200      	movs	r2, #0
 800216e:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8002170:	79ba      	ldrb	r2, [r7, #6]
 8002172:	79f9      	ldrb	r1, [r7, #7]
 8002174:	2332      	movs	r3, #50	@ 0x32
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	2309      	movs	r3, #9
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2309      	movs	r3, #9
 800217e:	6838      	ldr	r0, [r7, #0]
 8002180:	f7ff fb41 	bl	8001806 <mavlink_finalize_message>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <mavlink_msg_heartbeat_get_type>:
 * @brief Get field type from heartbeat message
 *
 * @return  Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.
 */
static inline uint8_t mavlink_msg_heartbeat_get_type(const mavlink_message_t* msg)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint8_t(msg,  4);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	330c      	adds	r3, #12
 800219a:	3304      	adds	r3, #4
 800219c:	781b      	ldrb	r3, [r3, #0]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <decode_mavlink_mssg>:
 *
 * @param byte:		Current byte of the message to decode
 *
 **/
void decode_mavlink_mssg(const unsigned char* byte)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	if (mavlink_parse_char(chan, byte, &msg, &status))
 80021b4:	4b24      	ldr	r3, [pc, #144]	@ (8002248 <decode_mavlink_mssg+0x9c>)
 80021b6:	7818      	ldrb	r0, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	b2d9      	uxtb	r1, r3
 80021bc:	4b23      	ldr	r3, [pc, #140]	@ (800224c <decode_mavlink_mssg+0xa0>)
 80021be:	4a24      	ldr	r2, [pc, #144]	@ (8002250 <decode_mavlink_mssg+0xa4>)
 80021c0:	f7ff fec3 	bl	8001f4a <mavlink_parse_char>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d03a      	beq.n	8002240 <decode_mavlink_mssg+0x94>

		HAL_UART_Transmit(&huart3, msg.msgid, 24, 100);
		HAL_UART_Transmit(&huart3, "\n", 1, 100);*/

		// ... DECODE THE MESSAGE PAYLOAD HERE ...
		 switch(msg.msgid) {
 80021ca:	4b21      	ldr	r3, [pc, #132]	@ (8002250 <decode_mavlink_mssg+0xa4>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80021d2:	2b7d      	cmp	r3, #125	@ 0x7d
 80021d4:	d029      	beq.n	800222a <decode_mavlink_mssg+0x7e>
 80021d6:	2b7d      	cmp	r3, #125	@ 0x7d
 80021d8:	dc31      	bgt.n	800223e <decode_mavlink_mssg+0x92>
 80021da:	2b21      	cmp	r3, #33	@ 0x21
 80021dc:	d00e      	beq.n	80021fc <decode_mavlink_mssg+0x50>
 80021de:	2b21      	cmp	r3, #33	@ 0x21
 80021e0:	dc2d      	bgt.n	800223e <decode_mavlink_mssg+0x92>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <decode_mavlink_mssg+0x40>
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d015      	beq.n	8002216 <decode_mavlink_mssg+0x6a>
				power = pwr_status.Vcc;
			break;


			default:
			break;
 80021ea:	e028      	b.n	800223e <decode_mavlink_mssg+0x92>
			 	device_type=mavlink_msg_heartbeat_get_type(&msg);
 80021ec:	4818      	ldr	r0, [pc, #96]	@ (8002250 <decode_mavlink_mssg+0xa4>)
 80021ee:	f7ff ffce 	bl	800218e <mavlink_msg_heartbeat_get_type>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b17      	ldr	r3, [pc, #92]	@ (8002254 <decode_mavlink_mssg+0xa8>)
 80021f8:	601a      	str	r2, [r3, #0]
			 break;
 80021fa:	e021      	b.n	8002240 <decode_mavlink_mssg+0x94>
				mavlink_msg_global_position_int_decode(&msg, &global_position);
 80021fc:	4916      	ldr	r1, [pc, #88]	@ (8002258 <decode_mavlink_mssg+0xac>)
 80021fe:	4814      	ldr	r0, [pc, #80]	@ (8002250 <decode_mavlink_mssg+0xa4>)
 8002200:	f7ff fefb 	bl	8001ffa <mavlink_msg_global_position_int_decode>
				mav_alt=global_position.alt;
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <decode_mavlink_mssg+0xac>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a14      	ldr	r2, [pc, #80]	@ (800225c <decode_mavlink_mssg+0xb0>)
 800220a:	6013      	str	r3, [r2, #0]
				mav_lat=global_position.lat;
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <decode_mavlink_mssg+0xac>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a13      	ldr	r2, [pc, #76]	@ (8002260 <decode_mavlink_mssg+0xb4>)
 8002212:	6013      	str	r3, [r2, #0]
			break;
 8002214:	e014      	b.n	8002240 <decode_mavlink_mssg+0x94>
				mavlink_msg_sys_status_decode(&msg, &sys_status);
 8002216:	4913      	ldr	r1, [pc, #76]	@ (8002264 <decode_mavlink_mssg+0xb8>)
 8002218:	480d      	ldr	r0, [pc, #52]	@ (8002250 <decode_mavlink_mssg+0xa4>)
 800221a:	f7ff fed3 	bl	8001fc4 <mavlink_msg_sys_status_decode>
				health = sys_status.onboard_control_sensors_health;
 800221e:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <decode_mavlink_mssg+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	461a      	mov	r2, r3
 8002224:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <decode_mavlink_mssg+0xbc>)
 8002226:	601a      	str	r2, [r3, #0]
			break;
 8002228:	e00a      	b.n	8002240 <decode_mavlink_mssg+0x94>
				mavlink_msg_power_status_decode(&msg, &pwr_status);
 800222a:	4910      	ldr	r1, [pc, #64]	@ (800226c <decode_mavlink_mssg+0xc0>)
 800222c:	4808      	ldr	r0, [pc, #32]	@ (8002250 <decode_mavlink_mssg+0xa4>)
 800222e:	f7ff ff5b 	bl	80020e8 <mavlink_msg_power_status_decode>
				power = pwr_status.Vcc;
 8002232:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <decode_mavlink_mssg+0xc0>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <decode_mavlink_mssg+0xc4>)
 800223a:	601a      	str	r2, [r3, #0]
			break;
 800223c:	e000      	b.n	8002240 <decode_mavlink_mssg+0x94>
			break;
 800223e:	bf00      	nop
			}
	}

}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2000078a 	.word	0x2000078a
 800224c:	2000078c 	.word	0x2000078c
 8002250:	200007a4 	.word	0x200007a4
 8002254:	20000750 	.word	0x20000750
 8002258:	20000724 	.word	0x20000724
 800225c:	20000744 	.word	0x20000744
 8002260:	20000748 	.word	0x20000748
 8002264:	20000758 	.word	0x20000758
 8002268:	20000740 	.word	0x20000740
 800226c:	20000784 	.word	0x20000784
 8002270:	2000074c 	.word	0x2000074c

08002274 <encode_mavlink_mssg>:
 * @param conf_counter	Coutner to keep track of attempts for sending the command
 *
 **/

void encode_mavlink_mssg(uint8_t conf_counter)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af04      	add	r7, sp, #16
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
	//EXAMPLE: send command to request message of VFR_HUD(74)
	mavlink_msg_command_long_pack(SYS_ID, componentID, &cmmd, TARGET_ID,
 800227e:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <encode_mavlink_mssg+0x50>)
 8002280:	7819      	ldrb	r1, [r3, #0]
 8002282:	4b10      	ldr	r3, [pc, #64]	@ (80022c4 <encode_mavlink_mssg+0x50>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	1dfa      	adds	r2, r7, #7
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	9202      	str	r2, [sp, #8]
 800228c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002290:	9201      	str	r2, [sp, #4]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 8002298:	eddf 2a0b 	vldr	s5, [pc, #44]	@ 80022c8 <encode_mavlink_mssg+0x54>
 800229c:	ed9f 2a0a 	vldr	s4, [pc, #40]	@ 80022c8 <encode_mavlink_mssg+0x54>
 80022a0:	eddf 1a09 	vldr	s3, [pc, #36]	@ 80022c8 <encode_mavlink_mssg+0x54>
 80022a4:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 80022c8 <encode_mavlink_mssg+0x54>
 80022a8:	eddf 0a07 	vldr	s1, [pc, #28]	@ 80022c8 <encode_mavlink_mssg+0x54>
 80022ac:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80022cc <encode_mavlink_mssg+0x58>
 80022b0:	2301      	movs	r3, #1
 80022b2:	4a07      	ldr	r2, [pc, #28]	@ (80022d0 <encode_mavlink_mssg+0x5c>)
 80022b4:	20ff      	movs	r0, #255	@ 0xff
 80022b6:	f7ff febb 	bl	8002030 <mavlink_msg_command_long_pack>
			VFR_HUD, 0, 0, 0, 0, 0, 1);		//last '1' for target address

//same as pack but with premade struct
	//mavlink_msg_command_long_encode(system_id, component_id, msg, command_long)

}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000754 	.word	0x20000754
 80022c8:	00000000 	.word	0x00000000
 80022cc:	42940000 	.word	0x42940000
 80022d0:	200008c8 	.word	0x200008c8

080022d4 <broadcast_heartbeat>:
 * 			and be called every second(1Hz)
 *
 * @return 	Length of the HEARTBEAT message
 */
uint16_t broadcast_heartbeat()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af04      	add	r7, sp, #16

	return mavlink_msg_heartbeat_pack(SYS_ID, MAV_COMP_ID_MISSIONPLANNER,
 80022da:	2300      	movs	r3, #0
 80022dc:	9303      	str	r3, [sp, #12]
 80022de:	2300      	movs	r3, #0
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	2300      	movs	r3, #0
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	2308      	movs	r3, #8
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2306      	movs	r3, #6
 80022ec:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <broadcast_heartbeat+0x2c>)
 80022ee:	21be      	movs	r1, #190	@ 0xbe
 80022f0:	20ff      	movs	r0, #255	@ 0xff
 80022f2:	f7ff ff14 	bl	800211e <mavlink_msg_heartbeat_pack>
 80022f6:	4603      	mov	r3, r0
			&msg, MAV_TYPE_GCS,	MAV_AUTOPILOT_INVALID, 0, 0, MAV_STATE_UNINIT);
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200007a4 	.word	0x200007a4

08002304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b0f      	ldr	r3, [pc, #60]	@ (8002348 <HAL_MspInit+0x44>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	4a0e      	ldr	r2, [pc, #56]	@ (8002348 <HAL_MspInit+0x44>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002314:	6413      	str	r3, [r2, #64]	@ 0x40
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <HAL_MspInit+0x44>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_MspInit+0x44>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	4a08      	ldr	r2, [pc, #32]	@ (8002348 <HAL_MspInit+0x44>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800232c:	6453      	str	r3, [r2, #68]	@ 0x44
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_MspInit+0x44>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800

0800234c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08e      	sub	sp, #56	@ 0x38
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a4e      	ldr	r2, [pc, #312]	@ (80024a4 <HAL_ETH_MspInit+0x158>)
 800236a:	4293      	cmp	r3, r2
 800236c:	f040 8096 	bne.w	800249c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002370:	4b4d      	ldr	r3, [pc, #308]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	4a4c      	ldr	r2, [pc, #304]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 8002376:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800237a:	6313      	str	r3, [r2, #48]	@ 0x30
 800237c:	4b4a      	ldr	r3, [pc, #296]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	4b47      	ldr	r3, [pc, #284]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	4a46      	ldr	r2, [pc, #280]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 800238e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002392:	6313      	str	r3, [r2, #48]	@ 0x30
 8002394:	4b44      	ldr	r3, [pc, #272]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002398:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4b41      	ldr	r3, [pc, #260]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a4:	4a40      	ldr	r2, [pc, #256]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80023aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ac:	4b3e      	ldr	r3, [pc, #248]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b8:	4b3b      	ldr	r3, [pc, #236]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023bc:	4a3a      	ldr	r2, [pc, #232]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c4:	4b38      	ldr	r3, [pc, #224]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d0:	4b35      	ldr	r3, [pc, #212]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	4a34      	ldr	r2, [pc, #208]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6313      	str	r3, [r2, #48]	@ 0x30
 80023dc:	4b32      	ldr	r3, [pc, #200]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ec:	4a2e      	ldr	r2, [pc, #184]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023ee:	f043 0302 	orr.w	r3, r3, #2
 80023f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f4:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002400:	4b29      	ldr	r3, [pc, #164]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002404:	4a28      	ldr	r2, [pc, #160]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 8002406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800240a:	6313      	str	r3, [r2, #48]	@ 0x30
 800240c:	4b26      	ldr	r3, [pc, #152]	@ (80024a8 <HAL_ETH_MspInit+0x15c>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002418:	2332      	movs	r3, #50	@ 0x32
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002428:	230b      	movs	r3, #11
 800242a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002430:	4619      	mov	r1, r3
 8002432:	481e      	ldr	r0, [pc, #120]	@ (80024ac <HAL_ETH_MspInit+0x160>)
 8002434:	f000 ff06 	bl	8003244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002438:	2386      	movs	r3, #134	@ 0x86
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002448:	230b      	movs	r3, #11
 800244a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002450:	4619      	mov	r1, r3
 8002452:	4817      	ldr	r0, [pc, #92]	@ (80024b0 <HAL_ETH_MspInit+0x164>)
 8002454:	f000 fef6 	bl	8003244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002458:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800246a:	230b      	movs	r3, #11
 800246c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002472:	4619      	mov	r1, r3
 8002474:	480f      	ldr	r0, [pc, #60]	@ (80024b4 <HAL_ETH_MspInit+0x168>)
 8002476:	f000 fee5 	bl	8003244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800247a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800248c:	230b      	movs	r3, #11
 800248e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002494:	4619      	mov	r1, r3
 8002496:	4808      	ldr	r0, [pc, #32]	@ (80024b8 <HAL_ETH_MspInit+0x16c>)
 8002498:	f000 fed4 	bl	8003244 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800249c:	bf00      	nop
 800249e:	3738      	adds	r7, #56	@ 0x38
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40028000 	.word	0x40028000
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40021800 	.word	0x40021800

080024bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002500 <HAL_TIM_Base_MspInit+0x44>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d113      	bne.n	80024f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <HAL_TIM_Base_MspInit+0x48>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002504 <HAL_TIM_Base_MspInit+0x48>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_TIM_Base_MspInit+0x48>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	201e      	movs	r0, #30
 80024ec:	f000 fa93 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024f0:	201e      	movs	r0, #30
 80024f2:	f000 faac 	bl	8002a4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40000800 	.word	0x40000800
 8002504:	40023800 	.word	0x40023800

08002508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0ac      	sub	sp, #176	@ 0xb0
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002520:	f107 0318 	add.w	r3, r7, #24
 8002524:	2284      	movs	r2, #132	@ 0x84
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fdeb 	bl	8006104 <memset>
  if(huart->Instance==USART1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a46      	ldr	r2, [pc, #280]	@ (800264c <HAL_UART_MspInit+0x144>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d143      	bne.n	80025c0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002538:	2340      	movs	r3, #64	@ 0x40
 800253a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800253c:	2300      	movs	r3, #0
 800253e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002540:	f107 0318 	add.w	r3, r7, #24
 8002544:	4618      	mov	r0, r3
 8002546:	f001 fd1d 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002550:	f7fe fa50 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002554:	4b3e      	ldr	r3, [pc, #248]	@ (8002650 <HAL_UART_MspInit+0x148>)
 8002556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002558:	4a3d      	ldr	r2, [pc, #244]	@ (8002650 <HAL_UART_MspInit+0x148>)
 800255a:	f043 0310 	orr.w	r3, r3, #16
 800255e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002560:	4b3b      	ldr	r3, [pc, #236]	@ (8002650 <HAL_UART_MspInit+0x148>)
 8002562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256c:	4b38      	ldr	r3, [pc, #224]	@ (8002650 <HAL_UART_MspInit+0x148>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	4a37      	ldr	r2, [pc, #220]	@ (8002650 <HAL_UART_MspInit+0x148>)
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	6313      	str	r3, [r2, #48]	@ 0x30
 8002578:	4b35      	ldr	r3, [pc, #212]	@ (8002650 <HAL_UART_MspInit+0x148>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002584:	2340      	movs	r3, #64	@ 0x40
 8002586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800258a:	2312      	movs	r3, #18
 800258c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002590:	2301      	movs	r3, #1
 8002592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800259c:	2307      	movs	r3, #7
 800259e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025a6:	4619      	mov	r1, r3
 80025a8:	482a      	ldr	r0, [pc, #168]	@ (8002654 <HAL_UART_MspInit+0x14c>)
 80025aa:	f000 fe4b 	bl	8003244 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	2025      	movs	r0, #37	@ 0x25
 80025b4:	f000 fa2f 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025b8:	2025      	movs	r0, #37	@ 0x25
 80025ba:	f000 fa48 	bl	8002a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025be:	e041      	b.n	8002644 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a24      	ldr	r2, [pc, #144]	@ (8002658 <HAL_UART_MspInit+0x150>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d13c      	bne.n	8002644 <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025d0:	2300      	movs	r3, #0
 80025d2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d4:	f107 0318 	add.w	r3, r7, #24
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 fcd3 	bl	8003f84 <HAL_RCCEx_PeriphCLKConfig>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80025e4:	f7fe fa06 	bl	80009f4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025e8:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <HAL_UART_MspInit+0x148>)
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	4a18      	ldr	r2, [pc, #96]	@ (8002650 <HAL_UART_MspInit+0x148>)
 80025ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f4:	4b16      	ldr	r3, [pc, #88]	@ (8002650 <HAL_UART_MspInit+0x148>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002600:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <HAL_UART_MspInit+0x148>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	4a12      	ldr	r2, [pc, #72]	@ (8002650 <HAL_UART_MspInit+0x148>)
 8002606:	f043 0308 	orr.w	r3, r3, #8
 800260a:	6313      	str	r3, [r2, #48]	@ 0x30
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <HAL_UART_MspInit+0x148>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002618:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800261c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002632:	2307      	movs	r3, #7
 8002634:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002638:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800263c:	4619      	mov	r1, r3
 800263e:	4807      	ldr	r0, [pc, #28]	@ (800265c <HAL_UART_MspInit+0x154>)
 8002640:	f000 fe00 	bl	8003244 <HAL_GPIO_Init>
}
 8002644:	bf00      	nop
 8002646:	37b0      	adds	r7, #176	@ 0xb0
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40011000 	.word	0x40011000
 8002650:	40023800 	.word	0x40023800
 8002654:	40020400 	.word	0x40020400
 8002658:	40004800 	.word	0x40004800
 800265c:	40020c00 	.word	0x40020c00

08002660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <NMI_Handler+0x4>

08002668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <HardFault_Handler+0x4>

08002670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <MemManage_Handler+0x4>

08002678 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <BusFault_Handler+0x4>

08002680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002684:	bf00      	nop
 8002686:	e7fd      	b.n	8002684 <UsageFault_Handler+0x4>

08002688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b6:	f000 f88f 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <TIM4_IRQHandler+0x10>)
 80026c6:	f002 f91d 	bl	8004904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200005bc 	.word	0x200005bc

080026d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026d8:	4802      	ldr	r0, [pc, #8]	@ (80026e4 <USART1_IRQHandler+0x10>)
 80026da:	f002 fda3 	bl	8005224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000608 	.word	0x20000608

080026e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026ec:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <SystemInit+0x20>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f2:	4a05      	ldr	r2, [pc, #20]	@ (8002708 <SystemInit+0x20>)
 80026f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <Reset_Handler>:
 800270c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002744 <LoopFillZerobss+0xe>
 8002710:	f7ff ffea 	bl	80026e8 <SystemInit>
 8002714:	480c      	ldr	r0, [pc, #48]	@ (8002748 <LoopFillZerobss+0x12>)
 8002716:	490d      	ldr	r1, [pc, #52]	@ (800274c <LoopFillZerobss+0x16>)
 8002718:	4a0d      	ldr	r2, [pc, #52]	@ (8002750 <LoopFillZerobss+0x1a>)
 800271a:	2300      	movs	r3, #0
 800271c:	e002      	b.n	8002724 <LoopCopyDataInit>

0800271e <CopyDataInit>:
 800271e:	58d4      	ldr	r4, [r2, r3]
 8002720:	50c4      	str	r4, [r0, r3]
 8002722:	3304      	adds	r3, #4

08002724 <LoopCopyDataInit>:
 8002724:	18c4      	adds	r4, r0, r3
 8002726:	428c      	cmp	r4, r1
 8002728:	d3f9      	bcc.n	800271e <CopyDataInit>
 800272a:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <LoopFillZerobss+0x1e>)
 800272c:	4c0a      	ldr	r4, [pc, #40]	@ (8002758 <LoopFillZerobss+0x22>)
 800272e:	2300      	movs	r3, #0
 8002730:	e001      	b.n	8002736 <LoopFillZerobss>

08002732 <FillZerobss>:
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	3204      	adds	r2, #4

08002736 <LoopFillZerobss>:
 8002736:	42a2      	cmp	r2, r4
 8002738:	d3fb      	bcc.n	8002732 <FillZerobss>
 800273a:	f003 fceb 	bl	8006114 <__libc_init_array>
 800273e:	f7fd feeb 	bl	8000518 <main>
 8002742:	4770      	bx	lr
 8002744:	20050000 	.word	0x20050000
 8002748:	20000000 	.word	0x20000000
 800274c:	20000378 	.word	0x20000378
 8002750:	08007428 	.word	0x08007428
 8002754:	200004b8 	.word	0x200004b8
 8002758:	20000edc 	.word	0x20000edc

0800275c <ADC_IRQHandler>:
 800275c:	e7fe      	b.n	800275c <ADC_IRQHandler>

0800275e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002762:	2003      	movs	r0, #3
 8002764:	f000 f94c 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002768:	2000      	movs	r0, #0
 800276a:	f000 f805 	bl	8002778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800276e:	f7ff fdc9 	bl	8002304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002780:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <HAL_InitTick+0x54>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b12      	ldr	r3, [pc, #72]	@ (80027d0 <HAL_InitTick+0x58>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800278e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f967 	bl	8002a6a <HAL_SYSTICK_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00e      	b.n	80027c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d80a      	bhi.n	80027c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ac:	2200      	movs	r2, #0
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f000 f92f 	bl	8002a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b8:	4a06      	ldr	r2, [pc, #24]	@ (80027d4 <HAL_InitTick+0x5c>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	2000036c 	.word	0x2000036c
 80027d0:	20000374 	.word	0x20000374
 80027d4:	20000370 	.word	0x20000370

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	@ (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000374 	.word	0x20000374
 80027fc:	20000ed8 	.word	0x20000ed8

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000ed8 	.word	0x20000ed8

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffde 	bl	8002800 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000374 	.word	0x20000374

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 800288a:	4313      	orrs	r3, r2
 800288c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288e:	4a04      	ldr	r2, [pc, #16]	@ (80028a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	60d3      	str	r3, [r2, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00
 80028a4:	05fa0000 	.word	0x05fa0000

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	@ (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	@ (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	@ (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	@ 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	@ 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029cc:	d301      	bcc.n	80029d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00f      	b.n	80029f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d2:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <SysTick_Config+0x40>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029da:	210f      	movs	r1, #15
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f7ff ff8e 	bl	8002900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <SysTick_Config+0x40>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ea:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <SysTick_Config+0x40>)
 80029ec:	2207      	movs	r2, #7
 80029ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	e000e010 	.word	0xe000e010

08002a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff29 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a28:	f7ff ff3e 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff8e 	bl	8002954 <NVIC_EncodePriority>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff5d 	bl	8002900 <__NVIC_SetPriority>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff31 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa2 	bl	80029bc <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a90:	f7ff feb6 	bl	8002800 <HAL_GetTick>
 8002a94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d008      	beq.n	8002ab4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2280      	movs	r2, #128	@ 0x80
 8002aa6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e052      	b.n	8002b5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0216 	bic.w	r2, r2, #22
 8002ac2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ad2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d103      	bne.n	8002ae4 <HAL_DMA_Abort+0x62>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0208 	bic.w	r2, r2, #8
 8002af2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b04:	e013      	b.n	8002b2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b06:	f7ff fe7b 	bl	8002800 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d90c      	bls.n	8002b2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e015      	b.n	8002b5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e4      	bne.n	8002b06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b40:	223f      	movs	r2, #63	@ 0x3f
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d004      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2280      	movs	r2, #128	@ 0x80
 8002b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e00c      	b.n	8002b9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2205      	movs	r2, #5
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e086      	b.n	8002cc8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d106      	bne.n	8002bd2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2223      	movs	r2, #35	@ 0x23
 8002bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff fbbd 	bl	800234c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd0 <HAL_ETH_Init+0x128>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	4a3e      	ldr	r2, [pc, #248]	@ (8002cd0 <HAL_ETH_Init+0x128>)
 8002bd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bde:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd0 <HAL_ETH_Init+0x128>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002bea:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd4 <HAL_ETH_Init+0x12c>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4a39      	ldr	r2, [pc, #228]	@ (8002cd4 <HAL_ETH_Init+0x12c>)
 8002bf0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002bf4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002bf6:	4b37      	ldr	r3, [pc, #220]	@ (8002cd4 <HAL_ETH_Init+0x12c>)
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4935      	ldr	r1, [pc, #212]	@ (8002cd4 <HAL_ETH_Init+0x12c>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002c04:	4b33      	ldr	r3, [pc, #204]	@ (8002cd4 <HAL_ETH_Init+0x12c>)
 8002c06:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c20:	f7ff fdee 	bl	8002800 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c26:	e011      	b.n	8002c4c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c28:	f7ff fdea 	bl	8002800 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c36:	d909      	bls.n	8002c4c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	22e0      	movs	r2, #224	@ 0xe0
 8002c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e03d      	b.n	8002cc8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e4      	bne.n	8002c28 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f97a 	bl	8002f58 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fa25 	bl	80030b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa7b 	bl	8003166 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	461a      	mov	r2, r3
 8002c76:	2100      	movs	r1, #0
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f9e3 	bl	8003044 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <HAL_ETH_Init+0x130>)
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002cb2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40013800 	.word	0x40013800
 8002cd8:	00020060 	.word	0x00020060

08002cdc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4b53      	ldr	r3, [pc, #332]	@ (8002e40 <ETH_SetMACConfig+0x164>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	7b9b      	ldrb	r3, [r3, #14]
 8002cfa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	7c12      	ldrb	r2, [r2, #16]
 8002d00:	2a00      	cmp	r2, #0
 8002d02:	d102      	bne.n	8002d0a <ETH_SetMACConfig+0x2e>
 8002d04:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d08:	e000      	b.n	8002d0c <ETH_SetMACConfig+0x30>
 8002d0a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002d0c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	7c52      	ldrb	r2, [r2, #17]
 8002d12:	2a00      	cmp	r2, #0
 8002d14:	d102      	bne.n	8002d1c <ETH_SetMACConfig+0x40>
 8002d16:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002d1a:	e000      	b.n	8002d1e <ETH_SetMACConfig+0x42>
 8002d1c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d1e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002d24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	7fdb      	ldrb	r3, [r3, #31]
 8002d2a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002d2c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	7f92      	ldrb	r2, [r2, #30]
 8002d38:	2a00      	cmp	r2, #0
 8002d3a:	d102      	bne.n	8002d42 <ETH_SetMACConfig+0x66>
 8002d3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d40:	e000      	b.n	8002d44 <ETH_SetMACConfig+0x68>
 8002d42:	2200      	movs	r2, #0
                        macconf->Speed |
 8002d44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	7f1b      	ldrb	r3, [r3, #28]
 8002d4a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d4c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d52:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	791b      	ldrb	r3, [r3, #4]
 8002d58:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002d5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d62:	2a00      	cmp	r2, #0
 8002d64:	d102      	bne.n	8002d6c <ETH_SetMACConfig+0x90>
 8002d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d6a:	e000      	b.n	8002d6e <ETH_SetMACConfig+0x92>
 8002d6c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	7bdb      	ldrb	r3, [r3, #15]
 8002d74:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d76:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d84:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002d86:	4313      	orrs	r3, r2
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f7ff fd3a 	bl	8002818 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002dba:	4013      	ands	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002dca:	2a00      	cmp	r2, #0
 8002dcc:	d101      	bne.n	8002dd2 <ETH_SetMACConfig+0xf6>
 8002dce:	2280      	movs	r2, #128	@ 0x80
 8002dd0:	e000      	b.n	8002dd4 <ETH_SetMACConfig+0xf8>
 8002dd2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dd4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002dda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002de2:	2a01      	cmp	r2, #1
 8002de4:	d101      	bne.n	8002dea <ETH_SetMACConfig+0x10e>
 8002de6:	2208      	movs	r2, #8
 8002de8:	e000      	b.n	8002dec <ETH_SetMACConfig+0x110>
 8002dea:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002dec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002df4:	2a01      	cmp	r2, #1
 8002df6:	d101      	bne.n	8002dfc <ETH_SetMACConfig+0x120>
 8002df8:	2204      	movs	r2, #4
 8002dfa:	e000      	b.n	8002dfe <ETH_SetMACConfig+0x122>
 8002dfc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002dfe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002e06:	2a01      	cmp	r2, #1
 8002e08:	d101      	bne.n	8002e0e <ETH_SetMACConfig+0x132>
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	e000      	b.n	8002e10 <ETH_SetMACConfig+0x134>
 8002e0e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e10:	4313      	orrs	r3, r2
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f7ff fcf5 	bl	8002818 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	619a      	str	r2, [r3, #24]
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	fd20810f 	.word	0xfd20810f

08002e44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f54 <ETH_SetDMAConfig+0x110>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	7b1b      	ldrb	r3, [r3, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <ETH_SetDMAConfig+0x2c>
 8002e6a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e6e:	e000      	b.n	8002e72 <ETH_SetDMAConfig+0x2e>
 8002e70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	7b5b      	ldrb	r3, [r3, #13]
 8002e76:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e78:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	7f52      	ldrb	r2, [r2, #29]
 8002e7e:	2a00      	cmp	r2, #0
 8002e80:	d102      	bne.n	8002e88 <ETH_SetDMAConfig+0x44>
 8002e82:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e86:	e000      	b.n	8002e8a <ETH_SetDMAConfig+0x46>
 8002e88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	7b9b      	ldrb	r3, [r3, #14]
 8002e90:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e92:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e98:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	7f1b      	ldrb	r3, [r3, #28]
 8002e9e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002ea0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	7f9b      	ldrb	r3, [r3, #30]
 8002ea6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ea8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002eae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002eb6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eda:	2001      	movs	r0, #1
 8002edc:	f7ff fc9c 	bl	8002818 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	791b      	ldrb	r3, [r3, #4]
 8002ef2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ef8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002efe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002f04:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f0c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002f0e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002f16:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002f1c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f2a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f38:	2001      	movs	r0, #1
 8002f3a:	f7ff fc6d 	bl	8002818 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6013      	str	r3, [r2, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	f8de3f23 	.word	0xf8de3f23

08002f58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b0a6      	sub	sp, #152	@ 0x98
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002fc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002fc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002fd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff fe7f 	bl	8002cdc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002fec:	2301      	movs	r3, #1
 8002fee:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003000:	2300      	movs	r3, #0
 8003002:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800300a:	2301      	movs	r3, #1
 800300c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800300e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003012:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003014:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003018:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800301a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800301e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003026:	2300      	movs	r3, #0
 8003028:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff05 	bl	8002e44 <ETH_SetDMAConfig>
}
 800303a:	bf00      	nop
 800303c:	3798      	adds	r7, #152	@ 0x98
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3305      	adds	r3, #5
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	3204      	adds	r2, #4
 800305c:	7812      	ldrb	r2, [r2, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <ETH_MACAddressConfig+0x68>)
 8003066:	4413      	add	r3, r2
 8003068:	461a      	mov	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3303      	adds	r3, #3
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	061a      	lsls	r2, r3, #24
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3302      	adds	r3, #2
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	041b      	lsls	r3, r3, #16
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3301      	adds	r3, #1
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	4313      	orrs	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	7812      	ldrb	r2, [r2, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <ETH_MACAddressConfig+0x6c>)
 8003096:	4413      	add	r3, r2
 8003098:	461a      	mov	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	6013      	str	r3, [r2, #0]
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40028040 	.word	0x40028040
 80030b0:	40028044 	.word	0x40028044

080030b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e03e      	b.n	8003140 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68d9      	ldr	r1, [r3, #12]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2200      	movs	r2, #0
 80030de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2200      	movs	r2, #0
 80030ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	3206      	adds	r2, #6
 80030f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d80c      	bhi.n	8003124 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68d9      	ldr	r1, [r3, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	461a      	mov	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	e004      	b.n	800312e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	461a      	mov	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3301      	adds	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b03      	cmp	r3, #3
 8003144:	d9bd      	bls.n	80030c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003158:	611a      	str	r2, [r3, #16]
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	e048      	b.n	8003206 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6919      	ldr	r1, [r3, #16]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2200      	movs	r2, #0
 8003190:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2200      	movs	r2, #0
 8003196:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2200      	movs	r2, #0
 800319c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2200      	movs	r2, #0
 80031a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80031b0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	3212      	adds	r2, #18
 80031d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d80c      	bhi.n	80031f6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6919      	ldr	r1, [r3, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	440b      	add	r3, r1
 80031ee:	461a      	mov	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	60da      	str	r2, [r3, #12]
 80031f4:	e004      	b.n	8003200 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3301      	adds	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d9b3      	bls.n	8003174 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003236:	60da      	str	r2, [r3, #12]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	@ 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	e175      	b.n	8003550 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	429a      	cmp	r2, r3
 800327e:	f040 8164 	bne.w	800354a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b01      	cmp	r3, #1
 800328c:	d005      	beq.n	800329a <HAL_GPIO_Init+0x56>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d130      	bne.n	80032fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	2203      	movs	r2, #3
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032d0:	2201      	movs	r2, #1
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 0201 	and.w	r2, r3, #1
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b03      	cmp	r3, #3
 8003306:	d017      	beq.n	8003338 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	2203      	movs	r2, #3
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d123      	bne.n	800338c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	08da      	lsrs	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3208      	adds	r2, #8
 800334c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	220f      	movs	r2, #15
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	08da      	lsrs	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3208      	adds	r2, #8
 8003386:	69b9      	ldr	r1, [r7, #24]
 8003388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0203 	and.w	r2, r3, #3
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80be 	beq.w	800354a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ce:	4b66      	ldr	r3, [pc, #408]	@ (8003568 <HAL_GPIO_Init+0x324>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d2:	4a65      	ldr	r2, [pc, #404]	@ (8003568 <HAL_GPIO_Init+0x324>)
 80033d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033da:	4b63      	ldr	r3, [pc, #396]	@ (8003568 <HAL_GPIO_Init+0x324>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80033e6:	4a61      	ldr	r2, [pc, #388]	@ (800356c <HAL_GPIO_Init+0x328>)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	3302      	adds	r3, #2
 80033ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	220f      	movs	r2, #15
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a58      	ldr	r2, [pc, #352]	@ (8003570 <HAL_GPIO_Init+0x32c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d037      	beq.n	8003482 <HAL_GPIO_Init+0x23e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a57      	ldr	r2, [pc, #348]	@ (8003574 <HAL_GPIO_Init+0x330>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d031      	beq.n	800347e <HAL_GPIO_Init+0x23a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a56      	ldr	r2, [pc, #344]	@ (8003578 <HAL_GPIO_Init+0x334>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02b      	beq.n	800347a <HAL_GPIO_Init+0x236>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a55      	ldr	r2, [pc, #340]	@ (800357c <HAL_GPIO_Init+0x338>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d025      	beq.n	8003476 <HAL_GPIO_Init+0x232>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a54      	ldr	r2, [pc, #336]	@ (8003580 <HAL_GPIO_Init+0x33c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01f      	beq.n	8003472 <HAL_GPIO_Init+0x22e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a53      	ldr	r2, [pc, #332]	@ (8003584 <HAL_GPIO_Init+0x340>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d019      	beq.n	800346e <HAL_GPIO_Init+0x22a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a52      	ldr	r2, [pc, #328]	@ (8003588 <HAL_GPIO_Init+0x344>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_GPIO_Init+0x226>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a51      	ldr	r2, [pc, #324]	@ (800358c <HAL_GPIO_Init+0x348>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00d      	beq.n	8003466 <HAL_GPIO_Init+0x222>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a50      	ldr	r2, [pc, #320]	@ (8003590 <HAL_GPIO_Init+0x34c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <HAL_GPIO_Init+0x21e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a4f      	ldr	r2, [pc, #316]	@ (8003594 <HAL_GPIO_Init+0x350>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_GPIO_Init+0x21a>
 800345a:	2309      	movs	r3, #9
 800345c:	e012      	b.n	8003484 <HAL_GPIO_Init+0x240>
 800345e:	230a      	movs	r3, #10
 8003460:	e010      	b.n	8003484 <HAL_GPIO_Init+0x240>
 8003462:	2308      	movs	r3, #8
 8003464:	e00e      	b.n	8003484 <HAL_GPIO_Init+0x240>
 8003466:	2307      	movs	r3, #7
 8003468:	e00c      	b.n	8003484 <HAL_GPIO_Init+0x240>
 800346a:	2306      	movs	r3, #6
 800346c:	e00a      	b.n	8003484 <HAL_GPIO_Init+0x240>
 800346e:	2305      	movs	r3, #5
 8003470:	e008      	b.n	8003484 <HAL_GPIO_Init+0x240>
 8003472:	2304      	movs	r3, #4
 8003474:	e006      	b.n	8003484 <HAL_GPIO_Init+0x240>
 8003476:	2303      	movs	r3, #3
 8003478:	e004      	b.n	8003484 <HAL_GPIO_Init+0x240>
 800347a:	2302      	movs	r3, #2
 800347c:	e002      	b.n	8003484 <HAL_GPIO_Init+0x240>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_GPIO_Init+0x240>
 8003482:	2300      	movs	r3, #0
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	f002 0203 	and.w	r2, r2, #3
 800348a:	0092      	lsls	r2, r2, #2
 800348c:	4093      	lsls	r3, r2
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003494:	4935      	ldr	r1, [pc, #212]	@ (800356c <HAL_GPIO_Init+0x328>)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	3302      	adds	r3, #2
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003598 <HAL_GPIO_Init+0x354>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034c6:	4a34      	ldr	r2, [pc, #208]	@ (8003598 <HAL_GPIO_Init+0x354>)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034cc:	4b32      	ldr	r3, [pc, #200]	@ (8003598 <HAL_GPIO_Init+0x354>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034f0:	4a29      	ldr	r2, [pc, #164]	@ (8003598 <HAL_GPIO_Init+0x354>)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034f6:	4b28      	ldr	r3, [pc, #160]	@ (8003598 <HAL_GPIO_Init+0x354>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	43db      	mvns	r3, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4013      	ands	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800351a:	4a1f      	ldr	r2, [pc, #124]	@ (8003598 <HAL_GPIO_Init+0x354>)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003520:	4b1d      	ldr	r3, [pc, #116]	@ (8003598 <HAL_GPIO_Init+0x354>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003544:	4a14      	ldr	r2, [pc, #80]	@ (8003598 <HAL_GPIO_Init+0x354>)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3301      	adds	r3, #1
 800354e:	61fb      	str	r3, [r7, #28]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b0f      	cmp	r3, #15
 8003554:	f67f ae86 	bls.w	8003264 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	3724      	adds	r7, #36	@ 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	40013800 	.word	0x40013800
 8003570:	40020000 	.word	0x40020000
 8003574:	40020400 	.word	0x40020400
 8003578:	40020800 	.word	0x40020800
 800357c:	40020c00 	.word	0x40020c00
 8003580:	40021000 	.word	0x40021000
 8003584:	40021400 	.word	0x40021400
 8003588:	40021800 	.word	0x40021800
 800358c:	40021c00 	.word	0x40021c00
 8003590:	40022000 	.word	0x40022000
 8003594:	40022400 	.word	0x40022400
 8003598:	40013c00 	.word	0x40013c00

0800359c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035ac:	787b      	ldrb	r3, [r7, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80035b8:	e003      	b.n	80035c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	041a      	lsls	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	619a      	str	r2, [r3, #24]
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d4:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a04      	ldr	r2, [pc, #16]	@ (80035ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40007000 	.word	0x40007000

080035f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e291      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8087 	beq.w	8003722 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003614:	4b96      	ldr	r3, [pc, #600]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b04      	cmp	r3, #4
 800361e:	d00c      	beq.n	800363a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003620:	4b93      	ldr	r3, [pc, #588]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b08      	cmp	r3, #8
 800362a:	d112      	bne.n	8003652 <HAL_RCC_OscConfig+0x62>
 800362c:	4b90      	ldr	r3, [pc, #576]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003634:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003638:	d10b      	bne.n	8003652 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363a:	4b8d      	ldr	r3, [pc, #564]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d06c      	beq.n	8003720 <HAL_RCC_OscConfig+0x130>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d168      	bne.n	8003720 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e26b      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x7a>
 800365c:	4b84      	ldr	r3, [pc, #528]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a83      	ldr	r2, [pc, #524]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	e02e      	b.n	80036c8 <HAL_RCC_OscConfig+0xd8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x9c>
 8003672:	4b7f      	ldr	r3, [pc, #508]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7e      	ldr	r2, [pc, #504]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b7c      	ldr	r3, [pc, #496]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a7b      	ldr	r2, [pc, #492]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003684:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e01d      	b.n	80036c8 <HAL_RCC_OscConfig+0xd8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0xc0>
 8003696:	4b76      	ldr	r3, [pc, #472]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a75      	ldr	r2, [pc, #468]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800369c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	4b73      	ldr	r3, [pc, #460]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a72      	ldr	r2, [pc, #456]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e00b      	b.n	80036c8 <HAL_RCC_OscConfig+0xd8>
 80036b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80036b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80036c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d013      	beq.n	80036f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7ff f896 	bl	8002800 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d8:	f7ff f892 	bl	8002800 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	@ 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e21f      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	4b61      	ldr	r3, [pc, #388]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0xe8>
 80036f6:	e014      	b.n	8003722 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7ff f882 	bl	8002800 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003700:	f7ff f87e 	bl	8002800 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	@ 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e20b      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003712:	4b57      	ldr	r3, [pc, #348]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x110>
 800371e:	e000      	b.n	8003722 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d069      	beq.n	8003802 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800372e:	4b50      	ldr	r3, [pc, #320]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00b      	beq.n	8003752 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373a:	4b4d      	ldr	r3, [pc, #308]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b08      	cmp	r3, #8
 8003744:	d11c      	bne.n	8003780 <HAL_RCC_OscConfig+0x190>
 8003746:	4b4a      	ldr	r3, [pc, #296]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d116      	bne.n	8003780 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003752:	4b47      	ldr	r3, [pc, #284]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_RCC_OscConfig+0x17a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d001      	beq.n	800376a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e1df      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376a:	4b41      	ldr	r3, [pc, #260]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	493d      	ldr	r1, [pc, #244]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	e040      	b.n	8003802 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d023      	beq.n	80037d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003788:	4b39      	ldr	r3, [pc, #228]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a38      	ldr	r2, [pc, #224]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7ff f834 	bl	8002800 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800379c:	f7ff f830 	bl	8002800 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e1bd      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	4b30      	ldr	r3, [pc, #192]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4929      	ldr	r1, [pc, #164]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
 80037ce:	e018      	b.n	8003802 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d0:	4b27      	ldr	r3, [pc, #156]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a26      	ldr	r2, [pc, #152]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7ff f810 	bl	8002800 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e4:	f7ff f80c 	bl	8002800 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e199      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d038      	beq.n	8003880 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d019      	beq.n	800384a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003816:	4b16      	ldr	r3, [pc, #88]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381a:	4a15      	ldr	r2, [pc, #84]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7fe ffed 	bl	8002800 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382a:	f7fe ffe9 	bl	8002800 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e176      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800383c:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800383e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x23a>
 8003848:	e01a      	b.n	8003880 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384a:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	4a08      	ldr	r2, [pc, #32]	@ (8003870 <HAL_RCC_OscConfig+0x280>)
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003856:	f7fe ffd3 	bl	8002800 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800385e:	f7fe ffcf 	bl	8002800 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d903      	bls.n	8003874 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e15c      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
 8003870:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003874:	4b91      	ldr	r3, [pc, #580]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ee      	bne.n	800385e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80a4 	beq.w	80039d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388e:	4b8b      	ldr	r3, [pc, #556]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10d      	bne.n	80038b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	4b88      	ldr	r3, [pc, #544]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	4a87      	ldr	r2, [pc, #540]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a6:	4b85      	ldr	r3, [pc, #532]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b6:	4b82      	ldr	r3, [pc, #520]	@ (8003ac0 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d118      	bne.n	80038f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80038c2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ac0 <HAL_RCC_OscConfig+0x4d0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ac0 <HAL_RCC_OscConfig+0x4d0>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ce:	f7fe ff97 	bl	8002800 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d6:	f7fe ff93 	bl	8002800 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b64      	cmp	r3, #100	@ 0x64
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e120      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e8:	4b75      	ldr	r3, [pc, #468]	@ (8003ac0 <HAL_RCC_OscConfig+0x4d0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d106      	bne.n	800390a <HAL_RCC_OscConfig+0x31a>
 80038fc:	4b6f      	ldr	r3, [pc, #444]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003900:	4a6e      	ldr	r2, [pc, #440]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	@ 0x70
 8003908:	e02d      	b.n	8003966 <HAL_RCC_OscConfig+0x376>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x33c>
 8003912:	4b6a      	ldr	r3, [pc, #424]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003916:	4a69      	ldr	r2, [pc, #420]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	6713      	str	r3, [r2, #112]	@ 0x70
 800391e:	4b67      	ldr	r3, [pc, #412]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003922:	4a66      	ldr	r2, [pc, #408]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003924:	f023 0304 	bic.w	r3, r3, #4
 8003928:	6713      	str	r3, [r2, #112]	@ 0x70
 800392a:	e01c      	b.n	8003966 <HAL_RCC_OscConfig+0x376>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b05      	cmp	r3, #5
 8003932:	d10c      	bne.n	800394e <HAL_RCC_OscConfig+0x35e>
 8003934:	4b61      	ldr	r3, [pc, #388]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003938:	4a60      	ldr	r2, [pc, #384]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 800393a:	f043 0304 	orr.w	r3, r3, #4
 800393e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003940:	4b5e      	ldr	r3, [pc, #376]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003944:	4a5d      	ldr	r2, [pc, #372]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6713      	str	r3, [r2, #112]	@ 0x70
 800394c:	e00b      	b.n	8003966 <HAL_RCC_OscConfig+0x376>
 800394e:	4b5b      	ldr	r3, [pc, #364]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003952:	4a5a      	ldr	r2, [pc, #360]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	6713      	str	r3, [r2, #112]	@ 0x70
 800395a:	4b58      	ldr	r3, [pc, #352]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395e:	4a57      	ldr	r2, [pc, #348]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d015      	beq.n	800399a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396e:	f7fe ff47 	bl	8002800 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7fe ff43 	bl	8002800 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0ce      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	4b4b      	ldr	r3, [pc, #300]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ee      	beq.n	8003976 <HAL_RCC_OscConfig+0x386>
 8003998:	e014      	b.n	80039c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399a:	f7fe ff31 	bl	8002800 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fe ff2d 	bl	8002800 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e0b8      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b8:	4b40      	ldr	r3, [pc, #256]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1ee      	bne.n	80039a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d105      	bne.n	80039d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ca:	4b3c      	ldr	r3, [pc, #240]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	4a3b      	ldr	r2, [pc, #236]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80a4 	beq.w	8003b28 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e0:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d06b      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d149      	bne.n	8003a88 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f4:	4b31      	ldr	r3, [pc, #196]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a30      	ldr	r2, [pc, #192]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 80039fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fe fefe 	bl	8002800 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe fefa 	bl	8002800 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e087      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	4b28      	ldr	r3, [pc, #160]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a52:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a54:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a18      	ldr	r2, [pc, #96]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fe fece 	bl	8002800 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fe feca 	bl	8002800 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e057      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7a:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x478>
 8003a86:	e04f      	b.n	8003b28 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a88:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003a8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7fe feb4 	bl	8002800 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9c:	f7fe feb0 	bl	8002800 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e03d      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aae:	4b03      	ldr	r3, [pc, #12]	@ (8003abc <HAL_RCC_OscConfig+0x4cc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x4ac>
 8003aba:	e035      	b.n	8003b28 <HAL_RCC_OscConfig+0x538>
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b34 <HAL_RCC_OscConfig+0x544>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d028      	beq.n	8003b24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d121      	bne.n	8003b24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d11a      	bne.n	8003b24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003af4:	4013      	ands	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003afa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d111      	bne.n	8003b24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d107      	bne.n	8003b24 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800

08003b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0d0      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b50:	4b6a      	ldr	r3, [pc, #424]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d910      	bls.n	8003b80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5e:	4b67      	ldr	r3, [pc, #412]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 020f 	bic.w	r2, r3, #15
 8003b66:	4965      	ldr	r1, [pc, #404]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b63      	ldr	r3, [pc, #396]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0b8      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d020      	beq.n	8003bce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b98:	4b59      	ldr	r3, [pc, #356]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4a58      	ldr	r2, [pc, #352]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ba2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb0:	4b53      	ldr	r3, [pc, #332]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a52      	ldr	r2, [pc, #328]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bbc:	4b50      	ldr	r3, [pc, #320]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	494d      	ldr	r1, [pc, #308]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d040      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b47      	ldr	r3, [pc, #284]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d115      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e07f      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d107      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfa:	4b41      	ldr	r3, [pc, #260]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e073      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e06b      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	4b39      	ldr	r3, [pc, #228]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 0203 	bic.w	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4936      	ldr	r1, [pc, #216]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c2c:	f7fe fde8 	bl	8002800 <HAL_GetTick>
 8003c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c34:	f7fe fde4 	bl	8002800 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e053      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 020c 	and.w	r2, r3, #12
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1eb      	bne.n	8003c34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5c:	4b27      	ldr	r3, [pc, #156]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d210      	bcs.n	8003c8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 020f 	bic.w	r2, r3, #15
 8003c72:	4922      	ldr	r1, [pc, #136]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7a:	4b20      	ldr	r3, [pc, #128]	@ (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d001      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e032      	b.n	8003cf2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c98:	4b19      	ldr	r3, [pc, #100]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	4916      	ldr	r1, [pc, #88]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cb6:	4b12      	ldr	r3, [pc, #72]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	490e      	ldr	r1, [pc, #56]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cca:	f000 f821 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	490a      	ldr	r1, [pc, #40]	@ (8003d04 <HAL_RCC_ClockConfig+0x1cc>)
 8003cdc:	5ccb      	ldrb	r3, [r1, r3]
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	4a09      	ldr	r2, [pc, #36]	@ (8003d08 <HAL_RCC_ClockConfig+0x1d0>)
 8003ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ce6:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <HAL_RCC_ClockConfig+0x1d4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fd44 	bl	8002778 <HAL_InitTick>

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023c00 	.word	0x40023c00
 8003d00:	40023800 	.word	0x40023800
 8003d04:	08007400 	.word	0x08007400
 8003d08:	2000036c 	.word	0x2000036c
 8003d0c:	20000370 	.word	0x20000370

08003d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b094      	sub	sp, #80	@ 0x50
 8003d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d20:	2300      	movs	r3, #0
 8003d22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d28:	4b79      	ldr	r3, [pc, #484]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d00d      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x40>
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	f200 80e1 	bhi.w	8003efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x34>
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d42:	e0db      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b73      	ldr	r3, [pc, #460]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d48:	e0db      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4a:	4b73      	ldr	r3, [pc, #460]	@ (8003f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d4e:	e0d8      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d50:	4b6f      	ldr	r3, [pc, #444]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d063      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d66:	4b6a      	ldr	r3, [pc, #424]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	099b      	lsrs	r3, r3, #6
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d82:	4622      	mov	r2, r4
 8003d84:	462b      	mov	r3, r5
 8003d86:	f04f 0000 	mov.w	r0, #0
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	0159      	lsls	r1, r3, #5
 8003d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d94:	0150      	lsls	r0, r2, #5
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	1a51      	subs	r1, r2, r1
 8003d9e:	6139      	str	r1, [r7, #16]
 8003da0:	4629      	mov	r1, r5
 8003da2:	eb63 0301 	sbc.w	r3, r3, r1
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003db4:	4659      	mov	r1, fp
 8003db6:	018b      	lsls	r3, r1, #6
 8003db8:	4651      	mov	r1, sl
 8003dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	018a      	lsls	r2, r1, #6
 8003dc2:	4651      	mov	r1, sl
 8003dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8003dc8:	4659      	mov	r1, fp
 8003dca:	eb63 0901 	sbc.w	r9, r3, r1
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003de2:	4690      	mov	r8, r2
 8003de4:	4699      	mov	r9, r3
 8003de6:	4623      	mov	r3, r4
 8003de8:	eb18 0303 	adds.w	r3, r8, r3
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	462b      	mov	r3, r5
 8003df0:	eb49 0303 	adc.w	r3, r9, r3
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e02:	4629      	mov	r1, r5
 8003e04:	024b      	lsls	r3, r1, #9
 8003e06:	4621      	mov	r1, r4
 8003e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	024a      	lsls	r2, r1, #9
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e16:	2200      	movs	r2, #0
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e20:	f7fc f9f2 	bl	8000208 <__aeabi_uldivmod>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4613      	mov	r3, r2
 8003e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e2c:	e058      	b.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2e:	4b38      	ldr	r3, [pc, #224]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	099b      	lsrs	r3, r3, #6
 8003e34:	2200      	movs	r2, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	4611      	mov	r1, r2
 8003e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e3e:	623b      	str	r3, [r7, #32]
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e48:	4642      	mov	r2, r8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	f04f 0000 	mov.w	r0, #0
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	0159      	lsls	r1, r3, #5
 8003e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e5a:	0150      	lsls	r0, r2, #5
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4641      	mov	r1, r8
 8003e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e66:	4649      	mov	r1, r9
 8003e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e80:	ebb2 040a 	subs.w	r4, r2, sl
 8003e84:	eb63 050b 	sbc.w	r5, r3, fp
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	00eb      	lsls	r3, r5, #3
 8003e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e96:	00e2      	lsls	r2, r4, #3
 8003e98:	4614      	mov	r4, r2
 8003e9a:	461d      	mov	r5, r3
 8003e9c:	4643      	mov	r3, r8
 8003e9e:	18e3      	adds	r3, r4, r3
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	eb45 0303 	adc.w	r3, r5, r3
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	028b      	lsls	r3, r1, #10
 8003eba:	4621      	mov	r1, r4
 8003ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	028a      	lsls	r2, r1, #10
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	61fa      	str	r2, [r7, #28]
 8003ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ed4:	f7fc f998 	bl	8000208 <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4613      	mov	r3, r2
 8003ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	0c1b      	lsrs	r3, r3, #16
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	3301      	adds	r3, #1
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ef0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003efa:	e002      	b.n	8003f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8003efe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3750      	adds	r7, #80	@ 0x50
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	007a1200 	.word	0x007a1200

08003f1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f20:	4b03      	ldr	r3, [pc, #12]	@ (8003f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	2000036c 	.word	0x2000036c

08003f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f38:	f7ff fff0 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0a9b      	lsrs	r3, r3, #10
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4903      	ldr	r1, [pc, #12]	@ (8003f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f4a:	5ccb      	ldrb	r3, [r1, r3]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	08007410 	.word	0x08007410

08003f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f60:	f7ff ffdc 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0b5b      	lsrs	r3, r3, #13
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	@ (8003f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	08007410 	.word	0x08007410

08003f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d012      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fac:	4b69      	ldr	r3, [pc, #420]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a68      	ldr	r2, [pc, #416]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003fb6:	6093      	str	r3, [r2, #8]
 8003fb8:	4b66      	ldr	r3, [pc, #408]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc0:	4964      	ldr	r1, [pc, #400]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d017      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fde:	4b5d      	ldr	r3, [pc, #372]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fec:	4959      	ldr	r1, [pc, #356]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffc:	d101      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800400a:	2301      	movs	r3, #1
 800400c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d017      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800401a:	4b4e      	ldr	r3, [pc, #312]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004020:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	494a      	ldr	r1, [pc, #296]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004038:	d101      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004046:	2301      	movs	r3, #1
 8004048:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 808b 	beq.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b3a      	ldr	r3, [pc, #232]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	4a39      	ldr	r2, [pc, #228]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004072:	6413      	str	r3, [r2, #64]	@ 0x40
 8004074:	4b37      	ldr	r3, [pc, #220]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004080:	4b35      	ldr	r3, [pc, #212]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a34      	ldr	r2, [pc, #208]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800408a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408c:	f7fe fbb8 	bl	8002800 <HAL_GetTick>
 8004090:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fe fbb4 	bl	8002800 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	@ 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e357      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80040a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b2:	4b28      	ldr	r3, [pc, #160]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d035      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d02e      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d0:	4b20      	ldr	r3, [pc, #128]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040da:	4b1e      	ldr	r3, [pc, #120]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	4a1d      	ldr	r2, [pc, #116]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040e6:	4b1b      	ldr	r3, [pc, #108]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040f2:	4a18      	ldr	r2, [pc, #96]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040f8:	4b16      	ldr	r3, [pc, #88]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d114      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe fb7c 	bl	8002800 <HAL_GetTick>
 8004108:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	e00a      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410c:	f7fe fb78 	bl	8002800 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411a:	4293      	cmp	r3, r2
 800411c:	d901      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e319      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004122:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0ee      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800413a:	d111      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800413c:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004148:	4b04      	ldr	r3, [pc, #16]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800414a:	400b      	ands	r3, r1
 800414c:	4901      	ldr	r1, [pc, #4]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
 8004152:	e00b      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004154:	40023800 	.word	0x40023800
 8004158:	40007000 	.word	0x40007000
 800415c:	0ffffcff 	.word	0x0ffffcff
 8004160:	4baa      	ldr	r3, [pc, #680]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4aa9      	ldr	r2, [pc, #676]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004166:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	4ba7      	ldr	r3, [pc, #668]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800416e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	49a4      	ldr	r1, [pc, #656]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417a:	4313      	orrs	r3, r2
 800417c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d010      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800418a:	4ba0      	ldr	r3, [pc, #640]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004190:	4a9e      	ldr	r2, [pc, #632]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004192:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004196:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800419a:	4b9c      	ldr	r3, [pc, #624]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800419c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	4999      	ldr	r1, [pc, #612]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041b8:	4b94      	ldr	r3, [pc, #592]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041c6:	4991      	ldr	r1, [pc, #580]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041da:	4b8c      	ldr	r3, [pc, #560]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e8:	4988      	ldr	r1, [pc, #544]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041fc:	4b83      	ldr	r3, [pc, #524]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800420a:	4980      	ldr	r1, [pc, #512]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800421e:	4b7b      	ldr	r3, [pc, #492]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004224:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422c:	4977      	ldr	r1, [pc, #476]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004240:	4b72      	ldr	r3, [pc, #456]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424e:	496f      	ldr	r1, [pc, #444]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004262:	4b6a      	ldr	r3, [pc, #424]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004268:	f023 020c 	bic.w	r2, r3, #12
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004270:	4966      	ldr	r1, [pc, #408]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004284:	4b61      	ldr	r3, [pc, #388]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	495e      	ldr	r1, [pc, #376]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042a6:	4b59      	ldr	r3, [pc, #356]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ac:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b4:	4955      	ldr	r1, [pc, #340]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042c8:	4b50      	ldr	r3, [pc, #320]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d6:	494d      	ldr	r1, [pc, #308]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042ea:	4b48      	ldr	r3, [pc, #288]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f8:	4944      	ldr	r1, [pc, #272]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800430c:	4b3f      	ldr	r3, [pc, #252]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004312:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431a:	493c      	ldr	r1, [pc, #240]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800432e:	4b37      	ldr	r3, [pc, #220]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004334:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433c:	4933      	ldr	r1, [pc, #204]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004350:	4b2e      	ldr	r3, [pc, #184]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004356:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800435e:	492b      	ldr	r1, [pc, #172]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d011      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004372:	4b26      	ldr	r3, [pc, #152]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004378:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004380:	4922      	ldr	r1, [pc, #136]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800438c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004390:	d101      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004392:	2301      	movs	r3, #1
 8004394:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043b2:	4b16      	ldr	r3, [pc, #88]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c0:	4912      	ldr	r1, [pc, #72]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00b      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043d4:	4b0d      	ldr	r3, [pc, #52]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043da:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043e4:	4909      	ldr	r1, [pc, #36]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d006      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80d9 	beq.w	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004400:	4b02      	ldr	r3, [pc, #8]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a01      	ldr	r2, [pc, #4]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004406:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800440a:	e001      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800440c:	40023800 	.word	0x40023800
 8004410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004412:	f7fe f9f5 	bl	8002800 <HAL_GetTick>
 8004416:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004418:	e008      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800441a:	f7fe f9f1 	bl	8002800 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b64      	cmp	r3, #100	@ 0x64
 8004426:	d901      	bls.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e194      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800442c:	4b6c      	ldr	r3, [pc, #432]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d021      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004448:	2b00      	cmp	r3, #0
 800444a:	d11d      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800444c:	4b64      	ldr	r3, [pc, #400]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800445a:	4b61      	ldr	r3, [pc, #388]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004460:	0e1b      	lsrs	r3, r3, #24
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	019a      	lsls	r2, r3, #6
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	041b      	lsls	r3, r3, #16
 8004472:	431a      	orrs	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	061b      	lsls	r3, r3, #24
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	071b      	lsls	r3, r3, #28
 8004480:	4957      	ldr	r1, [pc, #348]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02e      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044b2:	d129      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044b4:	4b4a      	ldr	r3, [pc, #296]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ba:	0c1b      	lsrs	r3, r3, #16
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044c2:	4b47      	ldr	r3, [pc, #284]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c8:	0f1b      	lsrs	r3, r3, #28
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	019a      	lsls	r2, r3, #6
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	041b      	lsls	r3, r3, #16
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	061b      	lsls	r3, r3, #24
 80044e2:	431a      	orrs	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	071b      	lsls	r3, r3, #28
 80044e8:	493d      	ldr	r1, [pc, #244]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044f0:	4b3b      	ldr	r3, [pc, #236]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044f6:	f023 021f 	bic.w	r2, r3, #31
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	3b01      	subs	r3, #1
 8004500:	4937      	ldr	r1, [pc, #220]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01d      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004514:	4b32      	ldr	r3, [pc, #200]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800451a:	0e1b      	lsrs	r3, r3, #24
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004522:	4b2f      	ldr	r3, [pc, #188]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004528:	0f1b      	lsrs	r3, r3, #28
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	019a      	lsls	r2, r3, #6
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	431a      	orrs	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	431a      	orrs	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	071b      	lsls	r3, r3, #28
 8004548:	4925      	ldr	r1, [pc, #148]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d011      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	019a      	lsls	r2, r3, #6
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	061b      	lsls	r3, r3, #24
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	071b      	lsls	r3, r3, #28
 8004578:	4919      	ldr	r1, [pc, #100]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004580:	4b17      	ldr	r3, [pc, #92]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a16      	ldr	r2, [pc, #88]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004586:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800458a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458c:	f7fe f938 	bl	8002800 <HAL_GetTick>
 8004590:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004594:	f7fe f934 	bl	8002800 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	@ 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0d7      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045a6:	4b0e      	ldr	r3, [pc, #56]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	f040 80cd 	bne.w	8004754 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045ba:	4b09      	ldr	r3, [pc, #36]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a08      	ldr	r2, [pc, #32]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c6:	f7fe f91b 	bl	8002800 <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045cc:	e00a      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045ce:	f7fe f917 	bl	8002800 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b64      	cmp	r3, #100	@ 0x64
 80045da:	d903      	bls.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e0ba      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80045e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045f0:	d0ed      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02e      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d12a      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800461a:	4b51      	ldr	r3, [pc, #324]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004628:	4b4d      	ldr	r3, [pc, #308]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462e:	0f1b      	lsrs	r3, r3, #28
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	019a      	lsls	r2, r3, #6
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	041b      	lsls	r3, r3, #16
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	061b      	lsls	r3, r3, #24
 8004648:	431a      	orrs	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	071b      	lsls	r3, r3, #28
 800464e:	4944      	ldr	r1, [pc, #272]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004656:	4b42      	ldr	r3, [pc, #264]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800465c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	3b01      	subs	r3, #1
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	493d      	ldr	r1, [pc, #244]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d022      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004684:	d11d      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004686:	4b36      	ldr	r3, [pc, #216]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468c:	0e1b      	lsrs	r3, r3, #24
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004694:	4b32      	ldr	r3, [pc, #200]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469a:	0f1b      	lsrs	r3, r3, #28
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	019a      	lsls	r2, r3, #6
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	431a      	orrs	r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	061b      	lsls	r3, r3, #24
 80046b4:	431a      	orrs	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	071b      	lsls	r3, r3, #28
 80046ba:	4929      	ldr	r1, [pc, #164]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d028      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046ce:	4b24      	ldr	r3, [pc, #144]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d4:	0e1b      	lsrs	r3, r3, #24
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046dc:	4b20      	ldr	r3, [pc, #128]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	0c1b      	lsrs	r3, r3, #16
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	019a      	lsls	r2, r3, #6
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	431a      	orrs	r2, r3
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	061b      	lsls	r3, r3, #24
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	071b      	lsls	r3, r3, #28
 8004702:	4917      	ldr	r1, [pc, #92]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004704:	4313      	orrs	r3, r2
 8004706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800470a:	4b15      	ldr	r3, [pc, #84]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800470c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004710:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004718:	4911      	ldr	r1, [pc, #68]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004720:	4b0f      	ldr	r3, [pc, #60]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a0e      	ldr	r2, [pc, #56]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800472a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472c:	f7fe f868 	bl	8002800 <HAL_GetTick>
 8004730:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004734:	f7fe f864 	bl	8002800 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	@ 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e007      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004746:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800474e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004752:	d1ef      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800

08004764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e049      	b.n	800480a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd fe96 	bl	80024bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f000 faa8 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d001      	beq.n	800482c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e054      	b.n	80048d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a26      	ldr	r2, [pc, #152]	@ (80048e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d022      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0x80>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004856:	d01d      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0x80>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a22      	ldr	r2, [pc, #136]	@ (80048e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d018      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0x80>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a21      	ldr	r2, [pc, #132]	@ (80048ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0x80>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1f      	ldr	r2, [pc, #124]	@ (80048f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00e      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0x80>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1e      	ldr	r2, [pc, #120]	@ (80048f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d009      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0x80>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1c      	ldr	r2, [pc, #112]	@ (80048f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0x80>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1b      	ldr	r2, [pc, #108]	@ (80048fc <HAL_TIM_Base_Start_IT+0xe8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d115      	bne.n	80048c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	4b19      	ldr	r3, [pc, #100]	@ (8004900 <HAL_TIM_Base_Start_IT+0xec>)
 800489c:	4013      	ands	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b06      	cmp	r3, #6
 80048a4:	d015      	beq.n	80048d2 <HAL_TIM_Base_Start_IT+0xbe>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ac:	d011      	beq.n	80048d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048be:	e008      	b.n	80048d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e000      	b.n	80048d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40000c00 	.word	0x40000c00
 80048f4:	40010400 	.word	0x40010400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40001800 	.word	0x40001800
 8004900:	00010007 	.word	0x00010007

08004904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0202 	mvn.w	r2, #2
 8004938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f9b4 	bl	8004cbc <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f9a6 	bl	8004ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f9b7 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d020      	beq.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01b      	beq.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0204 	mvn.w	r2, #4
 8004984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f98e 	bl	8004cbc <HAL_TIM_IC_CaptureCallback>
 80049a0:	e005      	b.n	80049ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f980 	bl	8004ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f991 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d020      	beq.n	8004a00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01b      	beq.n	8004a00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0208 	mvn.w	r2, #8
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2204      	movs	r2, #4
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f968 	bl	8004cbc <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f95a 	bl	8004ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f96b 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d020      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01b      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0210 	mvn.w	r2, #16
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2208      	movs	r2, #8
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f942 	bl	8004cbc <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f934 	bl	8004ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f945 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0201 	mvn.w	r2, #1
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fb fd44 	bl	80004f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00c      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fb0b 	bl	80050b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fb03 	bl	80050c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8ff 	bl	8004ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f06f 0220 	mvn.w	r2, #32
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 facb 	bl	80050a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIM_ConfigClockSource+0x1c>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e0b4      	b.n	8004c9a <HAL_TIM_ConfigClockSource+0x186>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	4b56      	ldr	r3, [pc, #344]	@ (8004ca4 <HAL_TIM_ConfigClockSource+0x190>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b68:	d03e      	beq.n	8004be8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6e:	f200 8087 	bhi.w	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b76:	f000 8086 	beq.w	8004c86 <HAL_TIM_ConfigClockSource+0x172>
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7e:	d87f      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b70      	cmp	r3, #112	@ 0x70
 8004b82:	d01a      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0xa6>
 8004b84:	2b70      	cmp	r3, #112	@ 0x70
 8004b86:	d87b      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b88:	2b60      	cmp	r3, #96	@ 0x60
 8004b8a:	d050      	beq.n	8004c2e <HAL_TIM_ConfigClockSource+0x11a>
 8004b8c:	2b60      	cmp	r3, #96	@ 0x60
 8004b8e:	d877      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b90:	2b50      	cmp	r3, #80	@ 0x50
 8004b92:	d03c      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0xfa>
 8004b94:	2b50      	cmp	r3, #80	@ 0x50
 8004b96:	d873      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004b98:	2b40      	cmp	r3, #64	@ 0x40
 8004b9a:	d058      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0x13a>
 8004b9c:	2b40      	cmp	r3, #64	@ 0x40
 8004b9e:	d86f      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba0:	2b30      	cmp	r3, #48	@ 0x30
 8004ba2:	d064      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004ba4:	2b30      	cmp	r3, #48	@ 0x30
 8004ba6:	d86b      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d060      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d867      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d05c      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d05a      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x15a>
 8004bb8:	e062      	b.n	8004c80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bca:	f000 f9bb 	bl	8004f44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	609a      	str	r2, [r3, #8]
      break;
 8004be6:	e04f      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bf8:	f000 f9a4 	bl	8004f44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c0a:	609a      	str	r2, [r3, #8]
      break;
 8004c0c:	e03c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f000 f918 	bl	8004e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2150      	movs	r1, #80	@ 0x50
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 f971 	bl	8004f0e <TIM_ITRx_SetConfig>
      break;
 8004c2c:	e02c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f000 f937 	bl	8004eae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2160      	movs	r1, #96	@ 0x60
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f961 	bl	8004f0e <TIM_ITRx_SetConfig>
      break;
 8004c4c:	e01c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f000 f8f8 	bl	8004e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2140      	movs	r1, #64	@ 0x40
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f951 	bl	8004f0e <TIM_ITRx_SetConfig>
      break;
 8004c6c:	e00c      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f000 f948 	bl	8004f0e <TIM_ITRx_SetConfig>
      break;
 8004c7e:	e003      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
      break;
 8004c84:	e000      	b.n	8004c88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	fffeff88 	.word	0xfffeff88

08004ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a46      	ldr	r2, [pc, #280]	@ (8004e24 <TIM_Base_SetConfig+0x12c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d013      	beq.n	8004d38 <TIM_Base_SetConfig+0x40>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d16:	d00f      	beq.n	8004d38 <TIM_Base_SetConfig+0x40>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a43      	ldr	r2, [pc, #268]	@ (8004e28 <TIM_Base_SetConfig+0x130>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <TIM_Base_SetConfig+0x40>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a42      	ldr	r2, [pc, #264]	@ (8004e2c <TIM_Base_SetConfig+0x134>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d007      	beq.n	8004d38 <TIM_Base_SetConfig+0x40>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a41      	ldr	r2, [pc, #260]	@ (8004e30 <TIM_Base_SetConfig+0x138>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a40      	ldr	r2, [pc, #256]	@ (8004e34 <TIM_Base_SetConfig+0x13c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d108      	bne.n	8004d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a35      	ldr	r2, [pc, #212]	@ (8004e24 <TIM_Base_SetConfig+0x12c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d02b      	beq.n	8004daa <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d58:	d027      	beq.n	8004daa <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a32      	ldr	r2, [pc, #200]	@ (8004e28 <TIM_Base_SetConfig+0x130>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d023      	beq.n	8004daa <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a31      	ldr	r2, [pc, #196]	@ (8004e2c <TIM_Base_SetConfig+0x134>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d01f      	beq.n	8004daa <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a30      	ldr	r2, [pc, #192]	@ (8004e30 <TIM_Base_SetConfig+0x138>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01b      	beq.n	8004daa <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2f      	ldr	r2, [pc, #188]	@ (8004e34 <TIM_Base_SetConfig+0x13c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d017      	beq.n	8004daa <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2e      	ldr	r2, [pc, #184]	@ (8004e38 <TIM_Base_SetConfig+0x140>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2d      	ldr	r2, [pc, #180]	@ (8004e3c <TIM_Base_SetConfig+0x144>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00f      	beq.n	8004daa <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8004e40 <TIM_Base_SetConfig+0x148>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00b      	beq.n	8004daa <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2b      	ldr	r2, [pc, #172]	@ (8004e44 <TIM_Base_SetConfig+0x14c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d007      	beq.n	8004daa <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2a      	ldr	r2, [pc, #168]	@ (8004e48 <TIM_Base_SetConfig+0x150>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d003      	beq.n	8004daa <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a29      	ldr	r2, [pc, #164]	@ (8004e4c <TIM_Base_SetConfig+0x154>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d108      	bne.n	8004dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a10      	ldr	r2, [pc, #64]	@ (8004e24 <TIM_Base_SetConfig+0x12c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_Base_SetConfig+0xf8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a12      	ldr	r2, [pc, #72]	@ (8004e34 <TIM_Base_SetConfig+0x13c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d103      	bne.n	8004df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d105      	bne.n	8004e16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f023 0201 	bic.w	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	611a      	str	r2, [r3, #16]
  }
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40010000 	.word	0x40010000
 8004e28:	40000400 	.word	0x40000400
 8004e2c:	40000800 	.word	0x40000800
 8004e30:	40000c00 	.word	0x40000c00
 8004e34:	40010400 	.word	0x40010400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800
 8004e44:	40001800 	.word	0x40001800
 8004e48:	40001c00 	.word	0x40001c00
 8004e4c:	40002000 	.word	0x40002000

08004e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f023 0201 	bic.w	r2, r3, #1
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f023 030a 	bic.w	r3, r3, #10
 8004e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b087      	sub	sp, #28
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f023 0210 	bic.w	r2, r3, #16
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	031b      	lsls	r3, r3, #12
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004eea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	621a      	str	r2, [r3, #32]
}
 8004f02:	bf00      	nop
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b085      	sub	sp, #20
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f043 0307 	orr.w	r3, r3, #7
 8004f30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	609a      	str	r2, [r3, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b087      	sub	sp, #28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
 8004f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	021a      	lsls	r2, r3, #8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d101      	bne.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e06d      	b.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a30      	ldr	r2, [pc, #192]	@ (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d004      	beq.n	8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2f      	ldr	r2, [pc, #188]	@ (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d108      	bne.n	8004fe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004fd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a20      	ldr	r2, [pc, #128]	@ (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d022      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500e:	d01d      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1d      	ldr	r2, [pc, #116]	@ (800508c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d018      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1c      	ldr	r2, [pc, #112]	@ (8005090 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d013      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1a      	ldr	r2, [pc, #104]	@ (8005094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00e      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a15      	ldr	r2, [pc, #84]	@ (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d009      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a16      	ldr	r2, [pc, #88]	@ (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a15      	ldr	r2, [pc, #84]	@ (800509c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d10c      	bne.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005052:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	4313      	orrs	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40014000 	.word	0x40014000
 800509c:	40001800 	.word	0x40001800

080050a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e040      	b.n	8005170 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fd fa02 	bl	8002508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2224      	movs	r2, #36	@ 0x24
 8005108:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fdd4 	bl	8005cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fb6d 	bl	8005808 <UART_SetConfig>
 800512e:	4603      	mov	r3, r0
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e01b      	b.n	8005170 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fe53 	bl	8005e14 <UART_CheckIdleState>
 800516e:	4603      	mov	r3, r0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e048      	b.n	800521c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fd f9b4 	bl	8002508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2224      	movs	r2, #36	@ 0x24
 80051a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fd86 	bl	8005cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fb1f 	bl	8005808 <UART_SetConfig>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e023      	b.n	800521c <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80051f2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0208 	orr.w	r2, r2, #8
 8005202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fdfd 	bl	8005e14 <UART_CheckIdleState>
 800521a:	4603      	mov	r3, r0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b0ba      	sub	sp, #232	@ 0xe8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800524a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800524e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005252:	4013      	ands	r3, r2
 8005254:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d115      	bne.n	800528c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00f      	beq.n	800528c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800526c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d009      	beq.n	800528c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8297 	beq.w	80057b0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
      }
      return;
 800528a:	e291      	b.n	80057b0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800528c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8117 	beq.w	80054c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80052a6:	4b85      	ldr	r3, [pc, #532]	@ (80054bc <HAL_UART_IRQHandler+0x298>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 810a 	beq.w	80054c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d011      	beq.n	80052e0 <HAL_UART_IRQHandler+0xbc>
 80052bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00b      	beq.n	80052e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2201      	movs	r2, #1
 80052ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052d6:	f043 0201 	orr.w	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d011      	beq.n	8005310 <HAL_UART_IRQHandler+0xec>
 80052ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2202      	movs	r2, #2
 80052fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005306:	f043 0204 	orr.w	r2, r3, #4
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d011      	beq.n	8005340 <HAL_UART_IRQHandler+0x11c>
 800531c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2204      	movs	r2, #4
 800532e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005336:	f043 0202 	orr.w	r2, r3, #2
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d017      	beq.n	800537c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800534c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d105      	bne.n	8005364 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800535c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2208      	movs	r2, #8
 800536a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005372:	f043 0208 	orr.w	r2, r3, #8
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800537c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005384:	2b00      	cmp	r3, #0
 8005386:	d012      	beq.n	80053ae <HAL_UART_IRQHandler+0x18a>
 8005388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800538c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00c      	beq.n	80053ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800539c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 81fd 	beq.w	80057b4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f6:	2b40      	cmp	r3, #64	@ 0x40
 80053f8:	d005      	beq.n	8005406 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005402:	2b00      	cmp	r3, #0
 8005404:	d04f      	beq.n	80054a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fdc8 	bl	8005f9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005416:	2b40      	cmp	r3, #64	@ 0x40
 8005418:	d141      	bne.n	800549e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3308      	adds	r3, #8
 8005420:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3308      	adds	r3, #8
 8005442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005446:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800544a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800545e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1d9      	bne.n	800541a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800546a:	2b00      	cmp	r3, #0
 800546c:	d013      	beq.n	8005496 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005472:	4a13      	ldr	r2, [pc, #76]	@ (80054c0 <HAL_UART_IRQHandler+0x29c>)
 8005474:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd fb71 	bl	8002b62 <HAL_DMA_Abort_IT>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d017      	beq.n	80054b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800548a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005490:	4610      	mov	r0, r2
 8005492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	e00f      	b.n	80054b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9a0 	bl	80057dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549c:	e00b      	b.n	80054b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f99c 	bl	80057dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	e007      	b.n	80054b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f998 	bl	80057dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80054b4:	e17e      	b.n	80057b4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b6:	bf00      	nop
    return;
 80054b8:	e17c      	b.n	80057b4 <HAL_UART_IRQHandler+0x590>
 80054ba:	bf00      	nop
 80054bc:	04000120 	.word	0x04000120
 80054c0:	08006065 	.word	0x08006065

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	f040 814c 	bne.w	8005766 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8145 	beq.w	8005766 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 813e 	beq.w	8005766 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2210      	movs	r2, #16
 80054f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fc:	2b40      	cmp	r3, #64	@ 0x40
 80054fe:	f040 80b6 	bne.w	800566e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800550e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 8150 	beq.w	80057b8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800551e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005522:	429a      	cmp	r2, r3
 8005524:	f080 8148 	bcs.w	80057b8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800552e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800553c:	f000 8086 	beq.w	800564c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005554:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800555c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	461a      	mov	r2, r3
 8005566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800556a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800556e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005576:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1da      	bne.n	8005540 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800559a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e1      	bne.n	800558a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3308      	adds	r3, #8
 80055cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e3      	bne.n	80055c6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800561a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800561c:	f023 0310 	bic.w	r3, r3, #16
 8005620:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800562e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005630:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005634:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800563c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e4      	bne.n	800560c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005646:	4618      	mov	r0, r3
 8005648:	f7fd fa1b 	bl	8002a82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800565e:	b29b      	uxth	r3, r3
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	b29b      	uxth	r3, r3
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8c2 	bl	80057f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800566c:	e0a4      	b.n	80057b8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800567a:	b29b      	uxth	r3, r3
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8096 	beq.w	80057bc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8091 	beq.w	80057bc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80056bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80056be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e4      	bne.n	800569a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3308      	adds	r3, #8
 80056d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	623b      	str	r3, [r7, #32]
   return(result);
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	f023 0301 	bic.w	r3, r3, #1
 80056e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80056f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e3      	bne.n	80056d0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	60fb      	str	r3, [r7, #12]
   return(result);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f023 0310 	bic.w	r3, r3, #16
 8005730:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	69b9      	ldr	r1, [r7, #24]
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	617b      	str	r3, [r7, #20]
   return(result);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e4      	bne.n	800571c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f846 	bl	80057f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005764:	e02a      	b.n	80057bc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800576a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00e      	beq.n	8005790 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d01c      	beq.n	80057c0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
    }
    return;
 800578e:	e017      	b.n	80057c0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d012      	beq.n	80057c2 <HAL_UART_IRQHandler+0x59e>
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00c      	beq.n	80057c2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fc71 	bl	8006090 <UART_EndTransmit_IT>
    return;
 80057ae:	e008      	b.n	80057c2 <HAL_UART_IRQHandler+0x59e>
      return;
 80057b0:	bf00      	nop
 80057b2:	e006      	b.n	80057c2 <HAL_UART_IRQHandler+0x59e>
    return;
 80057b4:	bf00      	nop
 80057b6:	e004      	b.n	80057c2 <HAL_UART_IRQHandler+0x59e>
      return;
 80057b8:	bf00      	nop
 80057ba:	e002      	b.n	80057c2 <HAL_UART_IRQHandler+0x59e>
      return;
 80057bc:	bf00      	nop
 80057be:	e000      	b.n	80057c2 <HAL_UART_IRQHandler+0x59e>
    return;
 80057c0:	bf00      	nop
  }

}
 80057c2:	37e8      	adds	r7, #232	@ 0xe8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4ba6      	ldr	r3, [pc, #664]	@ (8005acc <UART_SetConfig+0x2c4>)
 8005834:	4013      	ands	r3, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	6979      	ldr	r1, [r7, #20]
 800583c:	430b      	orrs	r3, r1
 800583e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	430a      	orrs	r2, r1
 8005878:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a94      	ldr	r2, [pc, #592]	@ (8005ad0 <UART_SetConfig+0x2c8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d120      	bne.n	80058c6 <UART_SetConfig+0xbe>
 8005884:	4b93      	ldr	r3, [pc, #588]	@ (8005ad4 <UART_SetConfig+0x2cc>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b03      	cmp	r3, #3
 8005890:	d816      	bhi.n	80058c0 <UART_SetConfig+0xb8>
 8005892:	a201      	add	r2, pc, #4	@ (adr r2, 8005898 <UART_SetConfig+0x90>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058a9 	.word	0x080058a9
 800589c:	080058b5 	.word	0x080058b5
 80058a0:	080058af 	.word	0x080058af
 80058a4:	080058bb 	.word	0x080058bb
 80058a8:	2301      	movs	r3, #1
 80058aa:	77fb      	strb	r3, [r7, #31]
 80058ac:	e150      	b.n	8005b50 <UART_SetConfig+0x348>
 80058ae:	2302      	movs	r3, #2
 80058b0:	77fb      	strb	r3, [r7, #31]
 80058b2:	e14d      	b.n	8005b50 <UART_SetConfig+0x348>
 80058b4:	2304      	movs	r3, #4
 80058b6:	77fb      	strb	r3, [r7, #31]
 80058b8:	e14a      	b.n	8005b50 <UART_SetConfig+0x348>
 80058ba:	2308      	movs	r3, #8
 80058bc:	77fb      	strb	r3, [r7, #31]
 80058be:	e147      	b.n	8005b50 <UART_SetConfig+0x348>
 80058c0:	2310      	movs	r3, #16
 80058c2:	77fb      	strb	r3, [r7, #31]
 80058c4:	e144      	b.n	8005b50 <UART_SetConfig+0x348>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a83      	ldr	r2, [pc, #524]	@ (8005ad8 <UART_SetConfig+0x2d0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d132      	bne.n	8005936 <UART_SetConfig+0x12e>
 80058d0:	4b80      	ldr	r3, [pc, #512]	@ (8005ad4 <UART_SetConfig+0x2cc>)
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d6:	f003 030c 	and.w	r3, r3, #12
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d828      	bhi.n	8005930 <UART_SetConfig+0x128>
 80058de:	a201      	add	r2, pc, #4	@ (adr r2, 80058e4 <UART_SetConfig+0xdc>)
 80058e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e4:	08005919 	.word	0x08005919
 80058e8:	08005931 	.word	0x08005931
 80058ec:	08005931 	.word	0x08005931
 80058f0:	08005931 	.word	0x08005931
 80058f4:	08005925 	.word	0x08005925
 80058f8:	08005931 	.word	0x08005931
 80058fc:	08005931 	.word	0x08005931
 8005900:	08005931 	.word	0x08005931
 8005904:	0800591f 	.word	0x0800591f
 8005908:	08005931 	.word	0x08005931
 800590c:	08005931 	.word	0x08005931
 8005910:	08005931 	.word	0x08005931
 8005914:	0800592b 	.word	0x0800592b
 8005918:	2300      	movs	r3, #0
 800591a:	77fb      	strb	r3, [r7, #31]
 800591c:	e118      	b.n	8005b50 <UART_SetConfig+0x348>
 800591e:	2302      	movs	r3, #2
 8005920:	77fb      	strb	r3, [r7, #31]
 8005922:	e115      	b.n	8005b50 <UART_SetConfig+0x348>
 8005924:	2304      	movs	r3, #4
 8005926:	77fb      	strb	r3, [r7, #31]
 8005928:	e112      	b.n	8005b50 <UART_SetConfig+0x348>
 800592a:	2308      	movs	r3, #8
 800592c:	77fb      	strb	r3, [r7, #31]
 800592e:	e10f      	b.n	8005b50 <UART_SetConfig+0x348>
 8005930:	2310      	movs	r3, #16
 8005932:	77fb      	strb	r3, [r7, #31]
 8005934:	e10c      	b.n	8005b50 <UART_SetConfig+0x348>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a68      	ldr	r2, [pc, #416]	@ (8005adc <UART_SetConfig+0x2d4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d120      	bne.n	8005982 <UART_SetConfig+0x17a>
 8005940:	4b64      	ldr	r3, [pc, #400]	@ (8005ad4 <UART_SetConfig+0x2cc>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005946:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800594a:	2b30      	cmp	r3, #48	@ 0x30
 800594c:	d013      	beq.n	8005976 <UART_SetConfig+0x16e>
 800594e:	2b30      	cmp	r3, #48	@ 0x30
 8005950:	d814      	bhi.n	800597c <UART_SetConfig+0x174>
 8005952:	2b20      	cmp	r3, #32
 8005954:	d009      	beq.n	800596a <UART_SetConfig+0x162>
 8005956:	2b20      	cmp	r3, #32
 8005958:	d810      	bhi.n	800597c <UART_SetConfig+0x174>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <UART_SetConfig+0x15c>
 800595e:	2b10      	cmp	r3, #16
 8005960:	d006      	beq.n	8005970 <UART_SetConfig+0x168>
 8005962:	e00b      	b.n	800597c <UART_SetConfig+0x174>
 8005964:	2300      	movs	r3, #0
 8005966:	77fb      	strb	r3, [r7, #31]
 8005968:	e0f2      	b.n	8005b50 <UART_SetConfig+0x348>
 800596a:	2302      	movs	r3, #2
 800596c:	77fb      	strb	r3, [r7, #31]
 800596e:	e0ef      	b.n	8005b50 <UART_SetConfig+0x348>
 8005970:	2304      	movs	r3, #4
 8005972:	77fb      	strb	r3, [r7, #31]
 8005974:	e0ec      	b.n	8005b50 <UART_SetConfig+0x348>
 8005976:	2308      	movs	r3, #8
 8005978:	77fb      	strb	r3, [r7, #31]
 800597a:	e0e9      	b.n	8005b50 <UART_SetConfig+0x348>
 800597c:	2310      	movs	r3, #16
 800597e:	77fb      	strb	r3, [r7, #31]
 8005980:	e0e6      	b.n	8005b50 <UART_SetConfig+0x348>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a56      	ldr	r2, [pc, #344]	@ (8005ae0 <UART_SetConfig+0x2d8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d120      	bne.n	80059ce <UART_SetConfig+0x1c6>
 800598c:	4b51      	ldr	r3, [pc, #324]	@ (8005ad4 <UART_SetConfig+0x2cc>)
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005992:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005996:	2bc0      	cmp	r3, #192	@ 0xc0
 8005998:	d013      	beq.n	80059c2 <UART_SetConfig+0x1ba>
 800599a:	2bc0      	cmp	r3, #192	@ 0xc0
 800599c:	d814      	bhi.n	80059c8 <UART_SetConfig+0x1c0>
 800599e:	2b80      	cmp	r3, #128	@ 0x80
 80059a0:	d009      	beq.n	80059b6 <UART_SetConfig+0x1ae>
 80059a2:	2b80      	cmp	r3, #128	@ 0x80
 80059a4:	d810      	bhi.n	80059c8 <UART_SetConfig+0x1c0>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <UART_SetConfig+0x1a8>
 80059aa:	2b40      	cmp	r3, #64	@ 0x40
 80059ac:	d006      	beq.n	80059bc <UART_SetConfig+0x1b4>
 80059ae:	e00b      	b.n	80059c8 <UART_SetConfig+0x1c0>
 80059b0:	2300      	movs	r3, #0
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e0cc      	b.n	8005b50 <UART_SetConfig+0x348>
 80059b6:	2302      	movs	r3, #2
 80059b8:	77fb      	strb	r3, [r7, #31]
 80059ba:	e0c9      	b.n	8005b50 <UART_SetConfig+0x348>
 80059bc:	2304      	movs	r3, #4
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e0c6      	b.n	8005b50 <UART_SetConfig+0x348>
 80059c2:	2308      	movs	r3, #8
 80059c4:	77fb      	strb	r3, [r7, #31]
 80059c6:	e0c3      	b.n	8005b50 <UART_SetConfig+0x348>
 80059c8:	2310      	movs	r3, #16
 80059ca:	77fb      	strb	r3, [r7, #31]
 80059cc:	e0c0      	b.n	8005b50 <UART_SetConfig+0x348>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a44      	ldr	r2, [pc, #272]	@ (8005ae4 <UART_SetConfig+0x2dc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d125      	bne.n	8005a24 <UART_SetConfig+0x21c>
 80059d8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad4 <UART_SetConfig+0x2cc>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059e6:	d017      	beq.n	8005a18 <UART_SetConfig+0x210>
 80059e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ec:	d817      	bhi.n	8005a1e <UART_SetConfig+0x216>
 80059ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059f2:	d00b      	beq.n	8005a0c <UART_SetConfig+0x204>
 80059f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059f8:	d811      	bhi.n	8005a1e <UART_SetConfig+0x216>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <UART_SetConfig+0x1fe>
 80059fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a02:	d006      	beq.n	8005a12 <UART_SetConfig+0x20a>
 8005a04:	e00b      	b.n	8005a1e <UART_SetConfig+0x216>
 8005a06:	2300      	movs	r3, #0
 8005a08:	77fb      	strb	r3, [r7, #31]
 8005a0a:	e0a1      	b.n	8005b50 <UART_SetConfig+0x348>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e09e      	b.n	8005b50 <UART_SetConfig+0x348>
 8005a12:	2304      	movs	r3, #4
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e09b      	b.n	8005b50 <UART_SetConfig+0x348>
 8005a18:	2308      	movs	r3, #8
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e098      	b.n	8005b50 <UART_SetConfig+0x348>
 8005a1e:	2310      	movs	r3, #16
 8005a20:	77fb      	strb	r3, [r7, #31]
 8005a22:	e095      	b.n	8005b50 <UART_SetConfig+0x348>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae8 <UART_SetConfig+0x2e0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d125      	bne.n	8005a7a <UART_SetConfig+0x272>
 8005a2e:	4b29      	ldr	r3, [pc, #164]	@ (8005ad4 <UART_SetConfig+0x2cc>)
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a3c:	d017      	beq.n	8005a6e <UART_SetConfig+0x266>
 8005a3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a42:	d817      	bhi.n	8005a74 <UART_SetConfig+0x26c>
 8005a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a48:	d00b      	beq.n	8005a62 <UART_SetConfig+0x25a>
 8005a4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a4e:	d811      	bhi.n	8005a74 <UART_SetConfig+0x26c>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <UART_SetConfig+0x254>
 8005a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a58:	d006      	beq.n	8005a68 <UART_SetConfig+0x260>
 8005a5a:	e00b      	b.n	8005a74 <UART_SetConfig+0x26c>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e076      	b.n	8005b50 <UART_SetConfig+0x348>
 8005a62:	2302      	movs	r3, #2
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e073      	b.n	8005b50 <UART_SetConfig+0x348>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e070      	b.n	8005b50 <UART_SetConfig+0x348>
 8005a6e:	2308      	movs	r3, #8
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e06d      	b.n	8005b50 <UART_SetConfig+0x348>
 8005a74:	2310      	movs	r3, #16
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e06a      	b.n	8005b50 <UART_SetConfig+0x348>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005aec <UART_SetConfig+0x2e4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d138      	bne.n	8005af6 <UART_SetConfig+0x2ee>
 8005a84:	4b13      	ldr	r3, [pc, #76]	@ (8005ad4 <UART_SetConfig+0x2cc>)
 8005a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005a8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a92:	d017      	beq.n	8005ac4 <UART_SetConfig+0x2bc>
 8005a94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a98:	d82a      	bhi.n	8005af0 <UART_SetConfig+0x2e8>
 8005a9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a9e:	d00b      	beq.n	8005ab8 <UART_SetConfig+0x2b0>
 8005aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa4:	d824      	bhi.n	8005af0 <UART_SetConfig+0x2e8>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <UART_SetConfig+0x2aa>
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aae:	d006      	beq.n	8005abe <UART_SetConfig+0x2b6>
 8005ab0:	e01e      	b.n	8005af0 <UART_SetConfig+0x2e8>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e04b      	b.n	8005b50 <UART_SetConfig+0x348>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e048      	b.n	8005b50 <UART_SetConfig+0x348>
 8005abe:	2304      	movs	r3, #4
 8005ac0:	77fb      	strb	r3, [r7, #31]
 8005ac2:	e045      	b.n	8005b50 <UART_SetConfig+0x348>
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e042      	b.n	8005b50 <UART_SetConfig+0x348>
 8005aca:	bf00      	nop
 8005acc:	efff69f3 	.word	0xefff69f3
 8005ad0:	40011000 	.word	0x40011000
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40004400 	.word	0x40004400
 8005adc:	40004800 	.word	0x40004800
 8005ae0:	40004c00 	.word	0x40004c00
 8005ae4:	40005000 	.word	0x40005000
 8005ae8:	40011400 	.word	0x40011400
 8005aec:	40007800 	.word	0x40007800
 8005af0:	2310      	movs	r3, #16
 8005af2:	77fb      	strb	r3, [r7, #31]
 8005af4:	e02c      	b.n	8005b50 <UART_SetConfig+0x348>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a72      	ldr	r2, [pc, #456]	@ (8005cc4 <UART_SetConfig+0x4bc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d125      	bne.n	8005b4c <UART_SetConfig+0x344>
 8005b00:	4b71      	ldr	r3, [pc, #452]	@ (8005cc8 <UART_SetConfig+0x4c0>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b06:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005b0a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005b0e:	d017      	beq.n	8005b40 <UART_SetConfig+0x338>
 8005b10:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005b14:	d817      	bhi.n	8005b46 <UART_SetConfig+0x33e>
 8005b16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b1a:	d00b      	beq.n	8005b34 <UART_SetConfig+0x32c>
 8005b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b20:	d811      	bhi.n	8005b46 <UART_SetConfig+0x33e>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <UART_SetConfig+0x326>
 8005b26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b2a:	d006      	beq.n	8005b3a <UART_SetConfig+0x332>
 8005b2c:	e00b      	b.n	8005b46 <UART_SetConfig+0x33e>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	77fb      	strb	r3, [r7, #31]
 8005b32:	e00d      	b.n	8005b50 <UART_SetConfig+0x348>
 8005b34:	2302      	movs	r3, #2
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e00a      	b.n	8005b50 <UART_SetConfig+0x348>
 8005b3a:	2304      	movs	r3, #4
 8005b3c:	77fb      	strb	r3, [r7, #31]
 8005b3e:	e007      	b.n	8005b50 <UART_SetConfig+0x348>
 8005b40:	2308      	movs	r3, #8
 8005b42:	77fb      	strb	r3, [r7, #31]
 8005b44:	e004      	b.n	8005b50 <UART_SetConfig+0x348>
 8005b46:	2310      	movs	r3, #16
 8005b48:	77fb      	strb	r3, [r7, #31]
 8005b4a:	e001      	b.n	8005b50 <UART_SetConfig+0x348>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b58:	d15b      	bne.n	8005c12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005b5a:	7ffb      	ldrb	r3, [r7, #31]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d828      	bhi.n	8005bb2 <UART_SetConfig+0x3aa>
 8005b60:	a201      	add	r2, pc, #4	@ (adr r2, 8005b68 <UART_SetConfig+0x360>)
 8005b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b66:	bf00      	nop
 8005b68:	08005b8d 	.word	0x08005b8d
 8005b6c:	08005b95 	.word	0x08005b95
 8005b70:	08005b9d 	.word	0x08005b9d
 8005b74:	08005bb3 	.word	0x08005bb3
 8005b78:	08005ba3 	.word	0x08005ba3
 8005b7c:	08005bb3 	.word	0x08005bb3
 8005b80:	08005bb3 	.word	0x08005bb3
 8005b84:	08005bb3 	.word	0x08005bb3
 8005b88:	08005bab 	.word	0x08005bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b8c:	f7fe f9d2 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8005b90:	61b8      	str	r0, [r7, #24]
        break;
 8005b92:	e013      	b.n	8005bbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b94:	f7fe f9e2 	bl	8003f5c <HAL_RCC_GetPCLK2Freq>
 8005b98:	61b8      	str	r0, [r7, #24]
        break;
 8005b9a:	e00f      	b.n	8005bbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8005ccc <UART_SetConfig+0x4c4>)
 8005b9e:	61bb      	str	r3, [r7, #24]
        break;
 8005ba0:	e00c      	b.n	8005bbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba2:	f7fe f8b5 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8005ba6:	61b8      	str	r0, [r7, #24]
        break;
 8005ba8:	e008      	b.n	8005bbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bae:	61bb      	str	r3, [r7, #24]
        break;
 8005bb0:	e004      	b.n	8005bbc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	77bb      	strb	r3, [r7, #30]
        break;
 8005bba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d074      	beq.n	8005cac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	005a      	lsls	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	441a      	add	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	2b0f      	cmp	r3, #15
 8005bdc:	d916      	bls.n	8005c0c <UART_SetConfig+0x404>
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be4:	d212      	bcs.n	8005c0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	f023 030f 	bic.w	r3, r3, #15
 8005bee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	89fb      	ldrh	r3, [r7, #14]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	89fa      	ldrh	r2, [r7, #14]
 8005c08:	60da      	str	r2, [r3, #12]
 8005c0a:	e04f      	b.n	8005cac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	77bb      	strb	r3, [r7, #30]
 8005c10:	e04c      	b.n	8005cac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c12:	7ffb      	ldrb	r3, [r7, #31]
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d828      	bhi.n	8005c6a <UART_SetConfig+0x462>
 8005c18:	a201      	add	r2, pc, #4	@ (adr r2, 8005c20 <UART_SetConfig+0x418>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c4d 	.word	0x08005c4d
 8005c28:	08005c55 	.word	0x08005c55
 8005c2c:	08005c6b 	.word	0x08005c6b
 8005c30:	08005c5b 	.word	0x08005c5b
 8005c34:	08005c6b 	.word	0x08005c6b
 8005c38:	08005c6b 	.word	0x08005c6b
 8005c3c:	08005c6b 	.word	0x08005c6b
 8005c40:	08005c63 	.word	0x08005c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c44:	f7fe f976 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8005c48:	61b8      	str	r0, [r7, #24]
        break;
 8005c4a:	e013      	b.n	8005c74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c4c:	f7fe f986 	bl	8003f5c <HAL_RCC_GetPCLK2Freq>
 8005c50:	61b8      	str	r0, [r7, #24]
        break;
 8005c52:	e00f      	b.n	8005c74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c54:	4b1d      	ldr	r3, [pc, #116]	@ (8005ccc <UART_SetConfig+0x4c4>)
 8005c56:	61bb      	str	r3, [r7, #24]
        break;
 8005c58:	e00c      	b.n	8005c74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5a:	f7fe f859 	bl	8003d10 <HAL_RCC_GetSysClockFreq>
 8005c5e:	61b8      	str	r0, [r7, #24]
        break;
 8005c60:	e008      	b.n	8005c74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c66:	61bb      	str	r3, [r7, #24]
        break;
 8005c68:	e004      	b.n	8005c74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	77bb      	strb	r3, [r7, #30]
        break;
 8005c72:	bf00      	nop
    }

    if (pclk != 0U)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d018      	beq.n	8005cac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	085a      	lsrs	r2, r3, #1
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	441a      	add	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b0f      	cmp	r3, #15
 8005c92:	d909      	bls.n	8005ca8 <UART_SetConfig+0x4a0>
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c9a:	d205      	bcs.n	8005ca8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	e001      	b.n	8005cac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005cb8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3720      	adds	r7, #32
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40007c00 	.word	0x40007c00
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	00f42400 	.word	0x00f42400

08005cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01a      	beq.n	8005de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dce:	d10a      	bne.n	8005de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
  }
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08c      	sub	sp, #48	@ 0x30
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e24:	f7fc fcec 	bl	8002800 <HAL_GetTick>
 8005e28:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d12e      	bne.n	8005e96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	2200      	movs	r2, #0
 8005e42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f83b 	bl	8005ec2 <UART_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d021      	beq.n	8005e96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e66:	623b      	str	r3, [r7, #32]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	69b9      	ldr	r1, [r7, #24]
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e6      	bne.n	8005e52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e011      	b.n	8005eba <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3728      	adds	r7, #40	@ 0x28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	603b      	str	r3, [r7, #0]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed2:	e04f      	b.n	8005f74 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d04b      	beq.n	8005f74 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005edc:	f7fc fc90 	bl	8002800 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d302      	bcc.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e04e      	b.n	8005f94 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d037      	beq.n	8005f74 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b80      	cmp	r3, #128	@ 0x80
 8005f08:	d034      	beq.n	8005f74 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b40      	cmp	r3, #64	@ 0x40
 8005f0e:	d031      	beq.n	8005f74 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d110      	bne.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2208      	movs	r2, #8
 8005f24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 f838 	bl	8005f9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2208      	movs	r2, #8
 8005f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e029      	b.n	8005f94 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f4e:	d111      	bne.n	8005f74 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f81e 	bl	8005f9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e00f      	b.n	8005f94 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69da      	ldr	r2, [r3, #28]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	bf0c      	ite	eq
 8005f84:	2301      	moveq	r3, #1
 8005f86:	2300      	movne	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d0a0      	beq.n	8005ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b095      	sub	sp, #84	@ 0x54
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e6      	bne.n	8005fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3308      	adds	r3, #8
 8005fdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e5      	bne.n	8005fd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800600e:	2b01      	cmp	r3, #1
 8006010:	d118      	bne.n	8006044 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f023 0310 	bic.w	r3, r3, #16
 8006026:	647b      	str	r3, [r7, #68]	@ 0x44
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	6979      	ldr	r1, [r7, #20]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	613b      	str	r3, [r7, #16]
   return(result);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e6      	bne.n	8006012 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006058:	bf00      	nop
 800605a:	3754      	adds	r7, #84	@ 0x54
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fbaa 	bl	80057dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006088:	bf00      	nop
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	61bb      	str	r3, [r7, #24]
 80060b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6979      	ldr	r1, [r7, #20]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	613b      	str	r3, [r7, #16]
   return(result);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e6      	bne.n	8006098 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff fb76 	bl	80057c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060dc:	bf00      	nop
 80060de:	3720      	adds	r7, #32
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <memcmp>:
 80060e4:	b510      	push	{r4, lr}
 80060e6:	3901      	subs	r1, #1
 80060e8:	4402      	add	r2, r0
 80060ea:	4290      	cmp	r0, r2
 80060ec:	d101      	bne.n	80060f2 <memcmp+0xe>
 80060ee:	2000      	movs	r0, #0
 80060f0:	e005      	b.n	80060fe <memcmp+0x1a>
 80060f2:	7803      	ldrb	r3, [r0, #0]
 80060f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80060f8:	42a3      	cmp	r3, r4
 80060fa:	d001      	beq.n	8006100 <memcmp+0x1c>
 80060fc:	1b18      	subs	r0, r3, r4
 80060fe:	bd10      	pop	{r4, pc}
 8006100:	3001      	adds	r0, #1
 8006102:	e7f2      	b.n	80060ea <memcmp+0x6>

08006104 <memset>:
 8006104:	4402      	add	r2, r0
 8006106:	4603      	mov	r3, r0
 8006108:	4293      	cmp	r3, r2
 800610a:	d100      	bne.n	800610e <memset+0xa>
 800610c:	4770      	bx	lr
 800610e:	f803 1b01 	strb.w	r1, [r3], #1
 8006112:	e7f9      	b.n	8006108 <memset+0x4>

08006114 <__libc_init_array>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	4d0d      	ldr	r5, [pc, #52]	@ (800614c <__libc_init_array+0x38>)
 8006118:	4c0d      	ldr	r4, [pc, #52]	@ (8006150 <__libc_init_array+0x3c>)
 800611a:	1b64      	subs	r4, r4, r5
 800611c:	10a4      	asrs	r4, r4, #2
 800611e:	2600      	movs	r6, #0
 8006120:	42a6      	cmp	r6, r4
 8006122:	d109      	bne.n	8006138 <__libc_init_array+0x24>
 8006124:	4d0b      	ldr	r5, [pc, #44]	@ (8006154 <__libc_init_array+0x40>)
 8006126:	4c0c      	ldr	r4, [pc, #48]	@ (8006158 <__libc_init_array+0x44>)
 8006128:	f000 f826 	bl	8006178 <_init>
 800612c:	1b64      	subs	r4, r4, r5
 800612e:	10a4      	asrs	r4, r4, #2
 8006130:	2600      	movs	r6, #0
 8006132:	42a6      	cmp	r6, r4
 8006134:	d105      	bne.n	8006142 <__libc_init_array+0x2e>
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	f855 3b04 	ldr.w	r3, [r5], #4
 800613c:	4798      	blx	r3
 800613e:	3601      	adds	r6, #1
 8006140:	e7ee      	b.n	8006120 <__libc_init_array+0xc>
 8006142:	f855 3b04 	ldr.w	r3, [r5], #4
 8006146:	4798      	blx	r3
 8006148:	3601      	adds	r6, #1
 800614a:	e7f2      	b.n	8006132 <__libc_init_array+0x1e>
 800614c:	08007420 	.word	0x08007420
 8006150:	08007420 	.word	0x08007420
 8006154:	08007420 	.word	0x08007420
 8006158:	08007424 	.word	0x08007424

0800615c <memcpy>:
 800615c:	440a      	add	r2, r1
 800615e:	4291      	cmp	r1, r2
 8006160:	f100 33ff 	add.w	r3, r0, #4294967295
 8006164:	d100      	bne.n	8006168 <memcpy+0xc>
 8006166:	4770      	bx	lr
 8006168:	b510      	push	{r4, lr}
 800616a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006172:	4291      	cmp	r1, r2
 8006174:	d1f9      	bne.n	800616a <memcpy+0xe>
 8006176:	bd10      	pop	{r4, pc}

08006178 <_init>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr

08006184 <_fini>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	bf00      	nop
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr

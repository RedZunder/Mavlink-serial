
betafpv_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e90  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000128c  08007058  08007058  00008058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082e4  080082e4  0000a14c  2**0
                  CONTENTS
  4 .ARM          00000008  080082e4  080082e4  000092e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082ec  080082ec  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082ec  080082ec  000092ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082f0  080082f0  000092f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080082f4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08008300  0000a00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  080083a0  0000a0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000dc4  20000150  08008440  0000a150  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20000f14  08008440  0000af14  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001627a  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000029be  00000000  00000000  000203f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001138  00000000  00000000  00022db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d8b  00000000  00000000  00023ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002fa2c  00000000  00000000  00024c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c850  00000000  00000000  000546a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016f397  00000000  00000000  00070ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001e028e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004970  00000000  00000000  001e02d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  001e4c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000150 	.word	0x20000150
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007040 	.word	0x08007040

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000154 	.word	0x20000154
 8000204:	08007040 	.word	0x08007040

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_UARTEx_RxEventCallback>:

#if MODE==2		//---------Read from UART live and send to terminal


	void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
	{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
		//RECEIVE AND PRINT TO TERMINAL
		if(huart==&huart2)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <HAL_UARTEx_RxEventCallback+0x38>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d10c      	bne.n	8000526 <HAL_UARTEx_RxEventCallback+0x2e>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);				//DEBUG LIGHT
 800050c:	2180      	movs	r1, #128	@ 0x80
 800050e:	4809      	ldr	r0, [pc, #36]	@ (8000534 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000510:	f003 fb37 	bl	8003b82 <HAL_GPIO_TogglePin>
			decode_mavlink_mssg(&rx_byte, &rx_mssg);
 8000514:	4908      	ldr	r1, [pc, #32]	@ (8000538 <HAL_UARTEx_RxEventCallback+0x40>)
 8000516:	4809      	ldr	r0, [pc, #36]	@ (800053c <HAL_UARTEx_RxEventCallback+0x44>)
 8000518:	f002 f84c 	bl	80025b4 <decode_mavlink_mssg>
			HAL_UART_Transmit_IT(&huart3, &rx_byte, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	4907      	ldr	r1, [pc, #28]	@ (800053c <HAL_UARTEx_RxEventCallback+0x44>)
 8000520:	4807      	ldr	r0, [pc, #28]	@ (8000540 <HAL_UARTEx_RxEventCallback+0x48>)
 8000522:	f005 f973 	bl	800580c <HAL_UART_Transmit_IT>
		}

	}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000328 	.word	0x20000328
 8000534:	40020400 	.word	0x40020400
 8000538:	200004c0 	.word	0x200004c0
 800053c:	200005e3 	.word	0x200005e3
 8000540:	200003b0 	.word	0x200003b0

08000544 <HAL_UART_TxCpltCallback>:

	void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
	{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
			if(huart==&huart2)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4a09      	ldr	r2, [pc, #36]	@ (8000574 <HAL_UART_TxCpltCallback+0x30>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d10b      	bne.n	800056c <HAL_UART_TxCpltCallback+0x28>
			{
				HAL_HalfDuplex_EnableReceiver(&huart2);
 8000554:	4807      	ldr	r0, [pc, #28]	@ (8000574 <HAL_UART_TxCpltCallback+0x30>)
 8000556:	f005 fcef 	bl	8005f38 <HAL_HalfDuplex_EnableReceiver>

				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);				//DEBUG LIGHT
 800055a:	2101      	movs	r1, #1
 800055c:	4806      	ldr	r0, [pc, #24]	@ (8000578 <HAL_UART_TxCpltCallback+0x34>)
 800055e:	f003 fb10 	bl	8003b82 <HAL_GPIO_TogglePin>

				HAL_UARTEx_ReceiveToIdle_IT(&huart2, &rx_byte, 1);		//KEEP READING
 8000562:	2201      	movs	r2, #1
 8000564:	4905      	ldr	r1, [pc, #20]	@ (800057c <HAL_UART_TxCpltCallback+0x38>)
 8000566:	4803      	ldr	r0, [pc, #12]	@ (8000574 <HAL_UART_TxCpltCallback+0x30>)
 8000568:	f006 fccf 	bl	8006f0a <HAL_UARTEx_ReceiveToIdle_IT>
			}

	}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000328 	.word	0x20000328
 8000578:	40020400 	.word	0x40020400
 800057c:	200005e3 	.word	0x200005e3

08000580 <HAL_TIM_PeriodElapsedCallback>:


	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
		//send HEARTBEAT every 1Hz
		if (htim==&htim4)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a0e      	ldr	r2, [pc, #56]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d115      	bne.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			HAL_HalfDuplex_EnableTransmitter(&huart2);
 8000590:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000592:	f005 fc7f 	bl	8005e94 <HAL_HalfDuplex_EnableTransmitter>
			len=mavlink_heartbeat(hb_buffer);
 8000596:	480d      	ldr	r0, [pc, #52]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000598:	f002 f8b0 	bl	80026fc <mavlink_heartbeat>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005a2:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, hb_buffer, len);
 80005a4:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4908      	ldr	r1, [pc, #32]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005ac:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005ae:	f005 f92d 	bl	800580c <HAL_UART_Transmit_IT>
			HAL_UART_Transmit_IT(&huart3, "hb", 2);
 80005b2:	2202      	movs	r2, #2
 80005b4:	4907      	ldr	r1, [pc, #28]	@ (80005d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005b6:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005b8:	f005 f928 	bl	800580c <HAL_UART_Transmit_IT>

		}

	}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000254 	.word	0x20000254
 80005c8:	20000328 	.word	0x20000328
 80005cc:	200005e4 	.word	0x200005e4
 80005d0:	200006fc 	.word	0x200006fc
 80005d4:	08007058 	.word	0x08007058
 80005d8:	200003b0 	.word	0x200003b0

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f002 fb97 	bl	8002d12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f818 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9dc 	bl	80009a4 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ec:	f000 f87c 	bl	80006e8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 f978 	bl	80008e4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 f916 	bl	8000824 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80005f8:	f000 f8c4 	bl	8000784 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f942 	bl	8000884 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000600:	f000 f9a0 	bl	8000944 <MX_USART6_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim4);
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <main+0x38>)
 8000606:	f004 fbf9 	bl	8004dfc <HAL_TIM_Base_Start_IT>
		}
		#endif



		HAL_Delay(10);
 800060a:	200a      	movs	r0, #10
 800060c:	f002 fbde 	bl	8002dcc <HAL_Delay>
 8000610:	e7fb      	b.n	800060a <main+0x2e>
 8000612:	bf00      	nop
 8000614:	20000254 	.word	0x20000254

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	@ 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f006 fccf 	bl	8006fca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800063c:	f003 fabc 	bl	8003bb8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <SystemClock_Config+0xc8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a26      	ldr	r2, [pc, #152]	@ (80006e0 <SystemClock_Config+0xc8>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000660:	4a20      	ldr	r2, [pc, #128]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800068c:	2348      	movs	r3, #72	@ 0x48
 800068e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000694:	2303      	movs	r3, #3
 8000696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fa9b 	bl	8003bd8 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 fa4e 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f003 fd29 	bl	8004120 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d4:	f000 fa38 	bl	8000b48 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	@ 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_ETH_Init+0x84>)
 80006ee:	4a20      	ldr	r2, [pc, #128]	@ (8000770 <MX_ETH_Init+0x88>)
 80006f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <MX_ETH_Init+0x8c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <MX_ETH_Init+0x8c>)
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <MX_ETH_Init+0x8c>)
 8000700:	22e1      	movs	r2, #225	@ 0xe1
 8000702:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <MX_ETH_Init+0x8c>)
 8000706:	2200      	movs	r2, #0
 8000708:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_ETH_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_ETH_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_ETH_Init+0x84>)
 8000718:	4a16      	ldr	r2, [pc, #88]	@ (8000774 <MX_ETH_Init+0x8c>)
 800071a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_ETH_Init+0x84>)
 800071e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000722:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_ETH_Init+0x84>)
 8000726:	4a14      	ldr	r2, [pc, #80]	@ (8000778 <MX_ETH_Init+0x90>)
 8000728:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_ETH_Init+0x84>)
 800072c:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_ETH_Init+0x94>)
 800072e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_ETH_Init+0x84>)
 8000732:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000736:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000738:	480c      	ldr	r0, [pc, #48]	@ (800076c <MX_ETH_Init+0x84>)
 800073a:	f002 fd0f 	bl	800315c <HAL_ETH_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 fa00 	bl	8000b48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000748:	2238      	movs	r2, #56	@ 0x38
 800074a:	2100      	movs	r1, #0
 800074c:	480c      	ldr	r0, [pc, #48]	@ (8000780 <MX_ETH_Init+0x98>)
 800074e:	f006 fc3c 	bl	8006fca <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <MX_ETH_Init+0x98>)
 8000754:	2221      	movs	r2, #33	@ 0x21
 8000756:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_ETH_Init+0x98>)
 800075a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800075e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_ETH_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001a4 	.word	0x200001a4
 8000770:	40028000 	.word	0x40028000
 8000774:	20000700 	.word	0x20000700
 8000778:	200000ac 	.word	0x200000ac
 800077c:	2000000c 	.word	0x2000000c
 8000780:	2000016c 	.word	0x2000016c

08000784 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <MX_TIM4_Init+0x98>)
 80007a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000820 <MX_TIM4_Init+0x9c>)
 80007a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <MX_TIM4_Init+0x98>)
 80007aa:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80007ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_TIM4_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 80007b6:	4b19      	ldr	r3, [pc, #100]	@ (800081c <MX_TIM4_Init+0x98>)
 80007b8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80007bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_TIM4_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_TIM4_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007ca:	4814      	ldr	r0, [pc, #80]	@ (800081c <MX_TIM4_Init+0x98>)
 80007cc:	f004 fabe 	bl	8004d4c <HAL_TIM_Base_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80007d6:	f000 f9b7 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	4619      	mov	r1, r3
 80007e6:	480d      	ldr	r0, [pc, #52]	@ (800081c <MX_TIM4_Init+0x98>)
 80007e8:	f004 fc88 	bl	80050fc <HAL_TIM_ConfigClockSource>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80007f2:	f000 f9a9 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	@ (800081c <MX_TIM4_Init+0x98>)
 8000804:	f004 feb2 	bl	800556c <HAL_TIMEx_MasterConfigSynchronization>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800080e:	f000 f99b 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000254 	.word	0x20000254
 8000820:	40000800 	.word	0x40000800

08000824 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000828:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_USART1_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	@ (8000880 <MX_USART1_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800082e:	4b13      	ldr	r3, [pc, #76]	@ (800087c <MX_USART1_UART_Init+0x58>)
 8000830:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000834:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_USART1_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_USART1_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_USART1_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_USART1_UART_Init+0x58>)
 800084a:	2208      	movs	r2, #8
 800084c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_USART1_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_USART1_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_USART1_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_USART1_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_USART1_UART_Init+0x58>)
 8000868:	f004 ff7a 	bl	8005760 <HAL_HalfDuplex_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f969 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200002a0 	.word	0x200002a0
 8000880:	40011000 	.word	0x40011000

08000884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_USART2_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <MX_USART2_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_USART2_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_USART2_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USART2_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USART2_UART_Init+0x58>)
 80008c8:	f004 ff4a 	bl	8005760 <HAL_HalfDuplex_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f939 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000328 	.word	0x20000328
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_USART3_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <MX_USART3_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	@ (800093c <MX_USART3_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USART3_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_USART3_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USART3_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USART3_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USART3_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USART3_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USART3_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USART3_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USART3_UART_Init+0x58>)
 8000928:	f004 fecc 	bl	80056c4 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f909 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200003b0 	.word	0x200003b0
 8000940:	40004800 	.word	0x40004800

08000944 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_USART6_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	@ (80009a0 <MX_USART6_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_USART6_UART_Init+0x58>)
 8000950:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000954:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USART6_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_USART6_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USART6_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USART6_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USART6_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USART6_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USART6_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USART6_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_USART6_UART_Init+0x58>)
 8000988:	f004 fe9c 	bl	80056c4 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f8d9 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000438 	.word	0x20000438
 80009a0:	40011400 	.word	0x40011400

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	@ 0x30
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000b34 <MX_GPIO_Init+0x190>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a5d      	ldr	r2, [pc, #372]	@ (8000b34 <MX_GPIO_Init+0x190>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b5b      	ldr	r3, [pc, #364]	@ (8000b34 <MX_GPIO_Init+0x190>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	4b58      	ldr	r3, [pc, #352]	@ (8000b34 <MX_GPIO_Init+0x190>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a57      	ldr	r2, [pc, #348]	@ (8000b34 <MX_GPIO_Init+0x190>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b55      	ldr	r3, [pc, #340]	@ (8000b34 <MX_GPIO_Init+0x190>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b52      	ldr	r3, [pc, #328]	@ (8000b34 <MX_GPIO_Init+0x190>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a51      	ldr	r2, [pc, #324]	@ (8000b34 <MX_GPIO_Init+0x190>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b34 <MX_GPIO_Init+0x190>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b4c      	ldr	r3, [pc, #304]	@ (8000b34 <MX_GPIO_Init+0x190>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a4b      	ldr	r2, [pc, #300]	@ (8000b34 <MX_GPIO_Init+0x190>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b49      	ldr	r3, [pc, #292]	@ (8000b34 <MX_GPIO_Init+0x190>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b46      	ldr	r3, [pc, #280]	@ (8000b34 <MX_GPIO_Init+0x190>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a45      	ldr	r2, [pc, #276]	@ (8000b34 <MX_GPIO_Init+0x190>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b43      	ldr	r3, [pc, #268]	@ (8000b34 <MX_GPIO_Init+0x190>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a32:	4b40      	ldr	r3, [pc, #256]	@ (8000b34 <MX_GPIO_Init+0x190>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a3f      	ldr	r2, [pc, #252]	@ (8000b34 <MX_GPIO_Init+0x190>)
 8000a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b34 <MX_GPIO_Init+0x190>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a50:	4839      	ldr	r0, [pc, #228]	@ (8000b38 <MX_GPIO_Init+0x194>)
 8000a52:	f003 f87d 	bl	8003b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2140      	movs	r1, #64	@ 0x40
 8000a5a:	4838      	ldr	r0, [pc, #224]	@ (8000b3c <MX_GPIO_Init+0x198>)
 8000a5c:	f003 f878 	bl	8003b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4832      	ldr	r0, [pc, #200]	@ (8000b40 <MX_GPIO_Init+0x19c>)
 8000a78:	f002 febe 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a7c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4828      	ldr	r0, [pc, #160]	@ (8000b38 <MX_GPIO_Init+0x194>)
 8000a96:	f002 feaf 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a9a:	2340      	movs	r3, #64	@ 0x40
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4822      	ldr	r0, [pc, #136]	@ (8000b3c <MX_GPIO_Init+0x198>)
 8000ab2:	f002 fea1 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ab6:	2380      	movs	r3, #128	@ 0x80
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	481c      	ldr	r0, [pc, #112]	@ (8000b3c <MX_GPIO_Init+0x198>)
 8000aca:	f002 fe95 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000ace:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ae0:	230a      	movs	r3, #10
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4816      	ldr	r0, [pc, #88]	@ (8000b44 <MX_GPIO_Init+0x1a0>)
 8000aec:	f002 fe84 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000af0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <MX_GPIO_Init+0x194>)
 8000b06:	f002 fe77 	bl	80037f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b10:	2312      	movs	r3, #18
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_GPIO_Init+0x194>)
 8000b28:	f002 fe66 	bl	80037f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	@ 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40020800 	.word	0x40020800
 8000b44:	40020000 	.word	0x40020000

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4053      	eors	r3, r2
 8000b6a:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	b25a      	sxtb	r2, r3
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b76:	4053      	eors	r3, r2
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	b21a      	sxth	r2, r3
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	4053      	eors	r3, r2
 8000b8e:	b21a      	sxth	r2, r3
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4053      	eors	r3, r2
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	4053      	eors	r3, r2
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	801a      	strh	r2, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bc6:	801a      	strh	r2, [r3, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000be0:	f107 030e 	add.w	r3, r7, #14
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ffe7 	bl	8000bb8 <crc_init>
	while (length--) {
 8000bea:	e009      	b.n	8000c00 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f107 020e 	add.w	r2, r7, #14
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ffaa 	bl	8000b54 <crc_accumulate>
	while (length--) {
 8000c00:	887b      	ldrh	r3, [r7, #2]
 8000c02:	1e5a      	subs	r2, r3, #1
 8000c04:	807a      	strh	r2, [r7, #2]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f0      	bne.n	8000bec <crc_calculate+0x18>
        }
        return crcTmp;
 8000c0a:	89fb      	ldrh	r3, [r7, #14]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	617b      	str	r3, [r7, #20]
	while (length--) {
 8000c26:	e007      	b.n	8000c38 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	617a      	str	r2, [r7, #20]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	68f9      	ldr	r1, [r7, #12]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff8e 	bl	8000b54 <crc_accumulate>
	while (length--) {
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	1e5a      	subs	r2, r3, #1
 8000c3c:	80fa      	strh	r2, [r7, #6]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1f2      	bne.n	8000c28 <crc_accumulate_buffer+0x14>
        }
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <mavlink_sha256_init+0x50>)
 8000c64:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <mavlink_sha256_init+0x54>)
 8000c6a:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca4 <mavlink_sha256_init+0x58>)
 8000c70:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca8 <mavlink_sha256_init+0x5c>)
 8000c76:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000cac <mavlink_sha256_init+0x60>)
 8000c7c:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb0 <mavlink_sha256_init+0x64>)
 8000c82:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <mavlink_sha256_init+0x68>)
 8000c88:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <mavlink_sha256_init+0x6c>)
 8000c8e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	6a09e667 	.word	0x6a09e667
 8000ca0:	bb67ae85 	.word	0xbb67ae85
 8000ca4:	3c6ef372 	.word	0x3c6ef372
 8000ca8:	a54ff53a 	.word	0xa54ff53a
 8000cac:	510e527f 	.word	0x510e527f
 8000cb0:	9b05688c 	.word	0x9b05688c
 8000cb4:	1f83d9ab 	.word	0x1f83d9ab
 8000cb8:	5be0cd19 	.word	0x5be0cd19

08000cbc <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b0cf      	sub	sp, #316	@ 0x13c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cc6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000cca:	6018      	str	r0, [r3, #0]
 8000ccc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cd0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000cd4:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8000cd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cda:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    BB = m->counter[1];
 8000ce6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    CC = m->counter[2];
 8000cf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cfa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    DD = m->counter[3];
 8000d06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d0a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    EE = m->counter[4];
 8000d16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d1a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    FF = m->counter[5];
 8000d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d2a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GG = m->counter[6];
 8000d36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d3a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HH = m->counter[7];
 8000d46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d4a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d52:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    for (i = 0; i < 16; ++i)
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000d5c:	e016      	b.n	8000d8c <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 8000d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000d68:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8000d6c:	6812      	ldr	r2, [r2, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	6819      	ldr	r1, [r3, #0]
 8000d72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d7a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d86:	3301      	adds	r3, #1
 8000d88:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	dde4      	ble.n	8000d5e <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8000d94:	2310      	movs	r3, #16
 8000d96:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000d9a:	e069      	b.n	8000e70 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000da0:	1e9a      	subs	r2, r3, #2
 8000da2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000da6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dae:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000db6:	1e99      	subs	r1, r3, #2
 8000db8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000dc4:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000dc8:	405a      	eors	r2, r3
 8000dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000dce:	1e99      	subs	r1, r3, #2
 8000dd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ddc:	0a9b      	lsrs	r3, r3, #10
 8000dde:	405a      	eors	r2, r3
 8000de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000de4:	1fd9      	subs	r1, r3, #7
 8000de6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000df2:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000df8:	f1a3 010f 	sub.w	r1, r3, #15
 8000dfc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e08:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e10:	f1a3 000f 	sub.w	r0, r3, #15
 8000e14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e20:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000e24:	4059      	eors	r1, r3
 8000e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e2a:	f1a3 000f 	sub.w	r0, r3, #15
 8000e2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000e3e:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e44:	f1a3 0110 	sub.w	r1, r3, #16
 8000e48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e54:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000e56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e74:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e76:	dd91      	ble.n	8000d9c <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000e7e:	e078      	b.n	8000f72 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000e80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e84:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000e88:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e8c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000e90:	405a      	eors	r2, r3
 8000e92:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e96:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000e9a:	405a      	eors	r2, r3
 8000e9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000ea0:	441a      	add	r2, r3
 8000ea2:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8000ea6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eaa:	4019      	ands	r1, r3
 8000eac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000eb0:	43d8      	mvns	r0, r3
 8000eb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000eb6:	4003      	ands	r3, r0
 8000eb8:	404b      	eors	r3, r1
 8000eba:	441a      	add	r2, r3
 8000ebc:	496e      	ldr	r1, [pc, #440]	@ (8001078 <mavlink_sha256_calc+0x3bc>)
 8000ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ec2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ec6:	441a      	add	r2, r3
 8000ec8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ecc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ed0:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8000ed4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ed8:	4413      	add	r3, r2
 8000eda:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000ede:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000ee2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000ee6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000eea:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000eee:	405a      	eors	r2, r3
 8000ef0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000ef4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000ef8:	405a      	eors	r2, r3
 8000efa:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8000efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f02:	4059      	eors	r1, r3
 8000f04:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000f08:	4019      	ands	r1, r3
 8000f0a:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f12:	4003      	ands	r3, r0
 8000f14:	404b      	eors	r3, r1
 8000f16:	4413      	add	r3, r2
 8000f18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			     
	HH = GG;
 8000f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000f20:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	GG = FF;
 8000f24:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	FF = EE;
 8000f2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	EE = DD + T1;
 8000f34:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000f38:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	DD = CC;
 8000f42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	CC = BB;
 8000f4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000f4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	BB = AA;
 8000f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000f56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	AA = T1 + T2;
 8000f5a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000f62:	4413      	add	r3, r2
 8000f64:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (i = 0; i < 64; i++) {
 8000f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f76:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f78:	dd82      	ble.n	8000e80 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 8000f7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f7e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000f8a:	441a      	add	r2, r3
 8000f8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f90:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8000f98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000fa8:	441a      	add	r2, r3
 8000faa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8000fb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000fc6:	441a      	add	r2, r3
 8000fc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fcc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8000fd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fd8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	695a      	ldr	r2, [r3, #20]
 8000fe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000fe4:	441a      	add	r2, r3
 8000fe6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8000ff2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ff6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	699a      	ldr	r2, [r3, #24]
 8000ffe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001002:	441a      	add	r2, r3
 8001004:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001008:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8001010:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001014:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	69da      	ldr	r2, [r3, #28]
 800101c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001020:	441a      	add	r2, r3
 8001022:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001026:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 800102e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001032:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a1a      	ldr	r2, [r3, #32]
 800103a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800103e:	441a      	add	r2, r3
 8001040:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001044:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 800104c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001050:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001058:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800105c:	441a      	add	r2, r3
 800105e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001062:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800106a:	bf00      	nop
 800106c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	0800705c 	.word	0x0800705c

0800107c <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b09c      	sub	sp, #112	@ 0x70
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	441a      	add	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d904      	bls.n	80010b4 <mavlink_sha256_update+0x38>
	++m->sz[1];
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 80010b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 80010be:	e057      	b.n	8001170 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 80010c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010c2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80010c6:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d201      	bcs.n	80010d4 <mavlink_sha256_update+0x58>
            l = len;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80010da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010dc:	4413      	add	r3, r2
 80010de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80010e0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80010e2:	4618      	mov	r0, r3
 80010e4:	f005 ff9e 	bl	8007024 <memcpy>
	offset += l;
 80010e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80010ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010ec:	4413      	add	r3, r2
 80010ee:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 80010f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010f4:	4413      	add	r3, r2
 80010f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001100:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001102:	2b40      	cmp	r3, #64	@ 0x40
 8001104:	d134      	bne.n	8001170 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3328      	adds	r3, #40	@ 0x28
 800110a:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 800110c:	2300      	movs	r3, #0
 800110e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001110:	e023      	b.n	800115a <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8001112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001118:	4413      	add	r3, r2
 800111a:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 800111c:	f107 0210 	add.w	r2, r7, #16
 8001120:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 8001128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800112a:	3303      	adds	r3, #3
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001130:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001134:	1c9a      	adds	r2, r3, #2
 8001136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001138:	3301      	adds	r3, #1
 800113a:	7812      	ldrb	r2, [r2, #0]
 800113c:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 800113e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001144:	3302      	adds	r3, #2
 8001146:	7812      	ldrb	r2, [r2, #0]
 8001148:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 800114a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800114c:	3303      	adds	r3, #3
 800114e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001156:	3301      	adds	r3, #1
 8001158:	663b      	str	r3, [r7, #96]	@ 0x60
 800115a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800115c:	2b0f      	cmp	r3, #15
 800115e:	ddd8      	ble.n	8001112 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f7ff fda8 	bl	8000cbc <mavlink_sha256_calc>
	    offset = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1a4      	bne.n	80010c0 <mavlink_sha256_update+0x44>
	}
    }
}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	3770      	adds	r7, #112	@ 0x70
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b098      	sub	sp, #96	@ 0x60
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	08db      	lsrs	r3, r3, #3
 8001190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001194:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001196:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001198:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 800119c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011a0:	3301      	adds	r3, #1
 80011a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3308      	adds	r3, #8
 80011a8:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	3301      	adds	r3, #1
 80011b4:	2247      	movs	r2, #71	@ 0x47
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 ff06 	bl	8006fca <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011c4:	3307      	adds	r3, #7
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	3360      	adds	r3, #96	@ 0x60
 80011ca:	443b      	add	r3, r7
 80011cc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	0a1a      	lsrs	r2, r3, #8
 80011d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011d8:	3306      	adds	r3, #6
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	3360      	adds	r3, #96	@ 0x60
 80011de:	443b      	add	r3, r7
 80011e0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	0c1a      	lsrs	r2, r3, #16
 80011ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011ec:	3305      	adds	r3, #5
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	3360      	adds	r3, #96	@ 0x60
 80011f2:	443b      	add	r3, r7
 80011f4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	0e1a      	lsrs	r2, r3, #24
 80011fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001200:	3304      	adds	r3, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	3360      	adds	r3, #96	@ 0x60
 8001206:	443b      	add	r3, r7
 8001208:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001212:	3303      	adds	r3, #3
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	3360      	adds	r3, #96	@ 0x60
 8001218:	443b      	add	r3, r7
 800121a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	0a1a      	lsrs	r2, r3, #8
 8001224:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001226:	3302      	adds	r3, #2
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	3360      	adds	r3, #96	@ 0x60
 800122c:	443b      	add	r3, r7
 800122e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	0c1a      	lsrs	r2, r3, #16
 8001238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800123a:	3301      	adds	r3, #1
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	3360      	adds	r3, #96	@ 0x60
 8001240:	443b      	add	r3, r7
 8001242:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	0e1b      	lsrs	r3, r3, #24
 800124c:	b2d9      	uxtb	r1, r3
 800124e:	f107 020c 	add.w	r2, r7, #12
 8001252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001254:	4413      	add	r3, r2
 8001256:	460a      	mov	r2, r1
 8001258:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800125a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800125c:	f103 0208 	add.w	r2, r3, #8
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	4619      	mov	r1, r3
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ff08 	bl	800107c <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 800126c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800126e:	78da      	ldrb	r2, [r3, #3]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	3301      	adds	r3, #1
 8001278:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800127a:	7892      	ldrb	r2, [r2, #2]
 800127c:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3302      	adds	r3, #2
 8001282:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001284:	7852      	ldrb	r2, [r2, #1]
 8001286:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3303      	adds	r3, #3
 800128c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800128e:	7812      	ldrb	r2, [r2, #0]
 8001290:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	3304      	adds	r3, #4
 8001296:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001298:	79d2      	ldrb	r2, [r2, #7]
 800129a:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3305      	adds	r3, #5
 80012a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80012a2:	7992      	ldrb	r2, [r2, #6]
 80012a4:	701a      	strb	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	3760      	adds	r7, #96	@ 0x60
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 80012ba:	79fa      	ldrb	r2, [r7, #7]
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	4a03      	ldr	r2, [pc, #12]	@ (80012d4 <mavlink_get_channel_status+0x24>)
 80012c6:	4413      	add	r3, r2
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	20000eb0 	.word	0x20000eb0

080012d8 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f240 1223 	movw	r2, #291	@ 0x123
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	4a03      	ldr	r2, [pc, #12]	@ (80012fc <mavlink_get_channel_buffer+0x24>)
 80012ee:	4413      	add	r3, r2
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	20000a24 	.word	0x20000a24

08001300 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b0a0      	sub	sp, #128	@ 0x80
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <mavlink_sign_packet+0x20>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <mavlink_sign_packet+0x24>
	    return 0;
 8001320:	2300      	movs	r3, #0
 8001322:	e04f      	b.n	80013c4 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	785a      	ldrb	r2, [r3, #1]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001332:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3301      	adds	r3, #1
 800133a:	f107 0110 	add.w	r1, r7, #16
 800133e:	2206      	movs	r2, #6
 8001340:	4618      	mov	r0, r3
 8001342:	f005 fe6f 	bl	8007024 <memcpy>
	signing->timestamp++;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800134c:	1c54      	adds	r4, r2, #1
 800134e:	f143 0500 	adc.w	r5, r3, #0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fc75 	bl	8000c4c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f103 0110 	add.w	r1, r3, #16
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	2220      	movs	r2, #32
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fe84 	bl	800107c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001374:	78fa      	ldrb	r2, [r7, #3]
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe7d 	bl	800107c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001382:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 8001386:	f107 0318 	add.w	r3, r7, #24
 800138a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe74 	bl	800107c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	2202      	movs	r2, #2
 800139a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fe6c 	bl	800107c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	2207      	movs	r2, #7
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fe65 	bl	800107c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1dda      	adds	r2, r3, #7
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fedf 	bl	8001180 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 80013c2:	230d      	movs	r3, #13
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3780      	adds	r7, #128	@ 0x80
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bdb0      	pop	{r4, r5, r7, pc}

080013cc <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80013d8:	e002      	b.n	80013e0 <_mav_trim_payload+0x14>
		length--;
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	3b01      	subs	r3, #1
 80013de:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d906      	bls.n	80013f4 <_mav_trim_payload+0x28>
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f2      	beq.n	80013da <_mav_trim_payload+0xe>
	}
	return length;
 80013f4:	78fb      	ldrb	r3, [r7, #3]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8001404:	b5b0      	push	{r4, r5, r7, lr}
 8001406:	b0aa      	sub	sp, #168	@ 0xa8
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <mavlink_signature_check+0x16>
		return true;
 8001416:	2301      	movs	r3, #1
 8001418:	e13e      	b.n	8001698 <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3302      	adds	r3, #2
 800141e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	const uint8_t *psig = msg->signature;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8001428:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        const uint8_t *incoming_signature = psig+7;
 800142c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001430:	3307      	adds	r3, #7
 8001432:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8001436:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fc06 	bl	8000c4c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f103 0110 	add.w	r1, r3, #16
 8001446:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800144a:	2220      	movs	r2, #32
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fe15 	bl	800107c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8001452:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001456:	220a      	movs	r2, #10
 8001458:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fe0d 	bl	800107c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f103 010c 	add.w	r1, r3, #12
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	78db      	ldrb	r3, [r3, #3]
 800146c:	461a      	mov	r2, r3
 800146e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fe02 	bl	800107c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f503 718a 	add.w	r1, r3, #276	@ 0x114
 800147e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001482:	2202      	movs	r2, #2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fdf9 	bl	800107c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 800148a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800148e:	2207      	movs	r2, #7
 8001490:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fdf1 	bl	800107c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 800149a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800149e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fe6b 	bl	8001180 <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 80014aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ae:	2206      	movs	r2, #6
 80014b0:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80014b4:	4618      	mov	r0, r3
 80014b6:	f005 fd78 	bl	8006faa <memcmp>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2202      	movs	r2, #2
 80014c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		return false;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e0e5      	b.n	8001698 <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 80014cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	tstamp.t64 = 0;
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 0300 	mov.w	r3, #0
 80014de:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 80014e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014e6:	1c59      	adds	r1, r3, #1
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	2206      	movs	r2, #6
 80014ee:	4618      	mov	r0, r3
 80014f0:	f005 fd98 	bl	8007024 <memcpy>

	if (signing_streams == NULL) {
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2203      	movs	r2, #3
 80014fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                return false;
 8001502:	2300      	movs	r3, #0
 8001504:	e0c8      	b.n	8001698 <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001506:	2300      	movs	r3, #0
 8001508:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800150c:	e02b      	b.n	8001566 <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	79d9      	ldrb	r1, [r3, #7]
 8001512:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001516:	68b8      	ldr	r0, [r7, #8]
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	4403      	add	r3, r0
 8001520:	3303      	adds	r3, #3
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4299      	cmp	r1, r3
 8001526:	d119      	bne.n	800155c <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7a19      	ldrb	r1, [r3, #8]
 800152c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001530:	68b8      	ldr	r0, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4413      	add	r3, r2
 8001538:	4403      	add	r3, r0
 800153a:	3304      	adds	r3, #4
 800153c:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 800153e:	4299      	cmp	r1, r3
 8001540:	d10c      	bne.n	800155c <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8001542:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	440b      	add	r3, r1
 8001550:	3302      	adds	r3, #2
 8001552:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001554:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8001558:	429a      	cmp	r2, r3
 800155a:	d00b      	beq.n	8001574 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800155c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8001560:	3301      	adds	r3, #1
 8001562:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800156e:	429a      	cmp	r2, r3
 8001570:	d3cd      	bcc.n	800150e <mavlink_signature_check+0x10a>
 8001572:	e000      	b.n	8001576 <mavlink_signature_check+0x172>
			break;
 8001574:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800157e:	429a      	cmp	r2, r3
 8001580:	d146      	bne.n	8001610 <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	2b0f      	cmp	r3, #15
 8001588:	d905      	bls.n	8001596 <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2204      	movs	r2, #4
 800158e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 8001592:	2300      	movs	r3, #0
 8001594:	e080      	b.n	8001698 <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001596:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800159a:	4941      	ldr	r1, [pc, #260]	@ (80016a0 <mavlink_signature_check+0x29c>)
 800159c:	1854      	adds	r4, r2, r1
 800159e:	f143 0500 	adc.w	r5, r3, #0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015a8:	4294      	cmp	r4, r2
 80015aa:	eb75 0303 	sbcs.w	r3, r5, r3
 80015ae:	d205      	bcs.n	80015bc <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2205      	movs	r2, #5
 80015b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e06d      	b.n	8001698 <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 80015bc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	79d8      	ldrb	r0, [r3, #7]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4413      	add	r3, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	3303      	adds	r3, #3
 80015d0:	4602      	mov	r2, r0
 80015d2:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 80015d4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7a18      	ldrb	r0, [r3, #8]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	3304      	adds	r3, #4
 80015e8:	4602      	mov	r2, r0
 80015ea:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 80015ec:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	4613      	mov	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4413      	add	r3, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	3302      	adds	r3, #2
 80015fc:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8001600:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	3301      	adds	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	801a      	strh	r2, [r3, #0]
 800160e:	e021      	b.n	8001654 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 800161c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001620:	4613      	mov	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4413      	add	r3, r2
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	4413      	add	r3, r2
 800162a:	1d59      	adds	r1, r3, #5
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	2206      	movs	r2, #6
 8001632:	4618      	mov	r0, r3
 8001634:	f005 fcf6 	bl	8007024 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800163c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001640:	4290      	cmp	r0, r2
 8001642:	eb71 0303 	sbcs.w	r3, r1, r3
 8001646:	d305      	bcc.n	8001654 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2206      	movs	r2, #6
 800164c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 8001650:	2300      	movs	r3, #0
 8001652:	e021      	b.n	8001698 <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001654:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4413      	add	r3, r2
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	4413      	add	r3, r2
 8001662:	1d58      	adds	r0, r3, #5
 8001664:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001668:	3301      	adds	r3, #1
 800166a:	2206      	movs	r2, #6
 800166c:	4619      	mov	r1, r3
 800166e:	f005 fcd9 	bl	8007024 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001676:	68f9      	ldr	r1, [r7, #12]
 8001678:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800167c:	4290      	cmp	r0, r2
 800167e:	eb71 0303 	sbcs.w	r3, r1, r3
 8001682:	d204      	bcs.n	800168e <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 8001684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return true;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	37a8      	adds	r7, #168	@ 0xa8
 800169c:	46bd      	mov	sp, r7
 800169e:	bdb0      	pop	{r4, r5, r7, pc}
 80016a0:	005b8d80 	.word	0x005b8d80

080016a4 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b08f      	sub	sp, #60	@ 0x3c
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	72fb      	strb	r3, [r7, #11]
 80016b2:	4613      	mov	r3, r2
 80016b4:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7b1b      	ldrb	r3, [r3, #12]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf14      	ite	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	2300      	moveq	r3, #0
 80016c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80016ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016ce:	f083 0301 	eor.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00c      	beq.n	80016f2 <mavlink_finalize_message_buffer+0x4e>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <mavlink_finalize_message_buffer+0x4e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <mavlink_finalize_message_buffer+0x4e>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <mavlink_finalize_message_buffer+0x50>
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80016f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001704:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <mavlink_finalize_message_buffer+0x6c>
 800170c:	230d      	movs	r3, #13
 800170e:	e000      	b.n	8001712 <mavlink_finalize_message_buffer+0x6e>
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001716:	230a      	movs	r3, #10
 8001718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 800171c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	22fe      	movs	r2, #254	@ 0xfe
 8001728:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800172a:	2306      	movs	r3, #6
 800172c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001730:	e002      	b.n	8001738 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	22fd      	movs	r2, #253	@ 0xfd
 8001736:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001738:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10a      	bne.n	8001756 <mavlink_finalize_message_buffer+0xb2>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	330c      	adds	r3, #12
 8001744:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fe3e 	bl	80013cc <_mav_trim_payload>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	e001      	b.n	800175a <mavlink_finalize_message_buffer+0xb6>
 8001756:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	7afa      	ldrb	r2, [r7, #11]
 8001762:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	7aba      	ldrb	r2, [r7, #10]
 8001768:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8001770:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	791b      	ldrb	r3, [r3, #4]
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	799a      	ldrb	r2, [r3, #6]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	799b      	ldrb	r3, [r3, #6]
 8001798:	3301      	adds	r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	789b      	ldrb	r3, [r3, #2]
 80017a4:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	78db      	ldrb	r3, [r3, #3]
 80017aa:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 80017ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	799b      	ldrb	r3, [r3, #6]
 80017b8:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	79db      	ldrb	r3, [r3, #7]
 80017be:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	7a1b      	ldrb	r3, [r3, #8]
 80017c4:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	7a5a      	ldrb	r2, [r3, #9]
 80017ca:	7a99      	ldrb	r1, [r3, #10]
 80017cc:	0209      	lsls	r1, r1, #8
 80017ce:	430a      	orrs	r2, r1
 80017d0:	7adb      	ldrb	r3, [r3, #11]
 80017d2:	041b      	lsls	r3, r3, #16
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	777b      	strb	r3, [r7, #29]
 80017da:	e030      	b.n	800183e <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	791b      	ldrb	r3, [r3, #4]
 80017e0:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	795b      	ldrb	r3, [r3, #5]
 80017e6:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	799b      	ldrb	r3, [r3, #6]
 80017ec:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	79db      	ldrb	r3, [r3, #7]
 80017f2:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	7a1b      	ldrb	r3, [r3, #8]
 80017f8:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	7a5a      	ldrb	r2, [r3, #9]
 80017fe:	7a99      	ldrb	r1, [r3, #10]
 8001800:	0209      	lsls	r1, r1, #8
 8001802:	430a      	orrs	r2, r1
 8001804:	7adb      	ldrb	r3, [r3, #11]
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	4313      	orrs	r3, r2
 800180a:	b2db      	uxtb	r3, r3
 800180c:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	7a5a      	ldrb	r2, [r3, #9]
 8001812:	7a99      	ldrb	r1, [r3, #10]
 8001814:	0209      	lsls	r1, r1, #8
 8001816:	430a      	orrs	r2, r1
 8001818:	7adb      	ldrb	r3, [r3, #11]
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	4313      	orrs	r3, r2
 800181e:	121b      	asrs	r3, r3, #8
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	7a5a      	ldrb	r2, [r3, #9]
 800182a:	7a99      	ldrb	r1, [r3, #10]
 800182c:	0209      	lsls	r1, r1, #8
 800182e:	430a      	orrs	r2, r1
 8001830:	7adb      	ldrb	r3, [r3, #11]
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	4313      	orrs	r3, r2
 8001836:	141b      	asrs	r3, r3, #16
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 800183e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001842:	b29b      	uxth	r3, r3
 8001844:	3b01      	subs	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	f107 0318 	add.w	r3, r7, #24
 800184c:	3301      	adds	r3, #1
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff f9bf 	bl	8000bd4 <crc_calculate>
 8001856:	4603      	mov	r3, r0
 8001858:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f103 010c 	add.w	r1, r3, #12
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	78db      	ldrb	r3, [r3, #3]
 8001864:	461a      	mov	r2, r3
 8001866:	f107 0316 	add.w	r3, r7, #22
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f9d2 	bl	8000c14 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001870:	f107 0216 	add.w	r2, r7, #22
 8001874:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f96a 	bl	8000b54 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001880:	8af9      	ldrh	r1, [r7, #22]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	330c      	adds	r3, #12
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	78d2      	ldrb	r2, [r2, #3]
 800188a:	4413      	add	r3, r2
 800188c:	b2ca      	uxtb	r2, r1
 800188e:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001890:	8afb      	ldrh	r3, [r7, #22]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	b299      	uxth	r1, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f103 020c 	add.w	r2, r3, #12
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	78db      	ldrb	r3, [r3, #3]
 80018a0:	3301      	adds	r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	b2ca      	uxtb	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 80018a8:	8afa      	ldrh	r2, [r7, #22]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 80018ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01a      	beq.n	80018ec <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f503 758b 	add.w	r5, r3, #278	@ 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	310c      	adds	r1, #12
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 80018d0:	4401      	add	r1, r0
 80018d2:	f897 6027 	ldrb.w	r6, [r7, #39]	@ 0x27
 80018d6:	f107 0018 	add.w	r0, r7, #24
 80018da:	9102      	str	r1, [sp, #8]
 80018dc:	9201      	str	r2, [sp, #4]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4633      	mov	r3, r6
 80018e2:	4602      	mov	r2, r0
 80018e4:	4629      	mov	r1, r5
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff fd0a 	bl	8001300 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	78db      	ldrb	r3, [r3, #3]
 80018f0:	461a      	mov	r2, r3
 80018f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001900:	b29b      	uxth	r3, r3
 8001902:	4413      	add	r3, r2
 8001904:	b29b      	uxth	r3, r3
 8001906:	3302      	adds	r3, #2
 8001908:	b29b      	uxth	r3, r3
}
 800190a:	4618      	mov	r0, r3
 800190c:	372c      	adds	r7, #44	@ 0x2c
 800190e:	46bd      	mov	sp, r7
 8001910:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001912 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b088      	sub	sp, #32
 8001916:	af04      	add	r7, sp, #16
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	4608      	mov	r0, r1
 800191c:	4611      	mov	r1, r2
 800191e:	461a      	mov	r2, r3
 8001920:	4603      	mov	r3, r0
 8001922:	70fb      	strb	r3, [r7, #3]
 8001924:	460b      	mov	r3, r1
 8001926:	70bb      	strb	r3, [r7, #2]
 8001928:	4613      	mov	r3, r2
 800192a:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 800192c:	787b      	ldrb	r3, [r7, #1]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fcbe 	bl	80012b0 <mavlink_get_channel_status>
 8001934:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8001936:	78ba      	ldrb	r2, [r7, #2]
 8001938:	78f9      	ldrb	r1, [r7, #3]
 800193a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	7f3b      	ldrb	r3, [r7, #28]
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	7e3b      	ldrb	r3, [r7, #24]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff feaa 	bl	80016a4 <mavlink_finalize_message_buffer>
 8001950:	4603      	mov	r3, r0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af04      	add	r7, sp, #16
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	4608      	mov	r0, r1
 8001964:	4611      	mov	r1, r2
 8001966:	461a      	mov	r2, r3
 8001968:	4603      	mov	r3, r0
 800196a:	70fb      	strb	r3, [r7, #3]
 800196c:	460b      	mov	r3, r1
 800196e:	70bb      	strb	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001974:	78ba      	ldrb	r2, [r7, #2]
 8001976:	78f9      	ldrb	r1, [r7, #3]
 8001978:	7d3b      	ldrb	r3, [r7, #20]
 800197a:	9302      	str	r3, [sp, #8]
 800197c:	7c3b      	ldrb	r3, [r7, #16]
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffc3 	bl	8001912 <mavlink_finalize_message_chan>
 800198c:	4603      	mov	r3, r0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	789b      	ldrb	r3, [r3, #2]
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	709a      	strb	r2, [r3, #2]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	78db      	ldrb	r3, [r3, #3]
 80019c4:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	789b      	ldrb	r3, [r3, #2]
 80019ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80019cc:	d13a      	bne.n	8001a44 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80019d2:	2305      	movs	r3, #5
 80019d4:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	789a      	ldrb	r2, [r3, #2]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3301      	adds	r3, #1
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3302      	adds	r3, #2
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	7992      	ldrb	r2, [r2, #6]
 80019ee:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3303      	adds	r3, #3
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	79d2      	ldrb	r2, [r2, #7]
 80019f8:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3304      	adds	r3, #4
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	7a12      	ldrb	r2, [r2, #8]
 8001a02:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	7a5a      	ldrb	r2, [r3, #9]
 8001a08:	7a99      	ldrb	r1, [r3, #10]
 8001a0a:	0209      	lsls	r1, r1, #8
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	7adb      	ldrb	r3, [r3, #11]
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	4313      	orrs	r3, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3305      	adds	r3, #5
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	1d98      	adds	r0, r3, #6
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f103 010c 	add.w	r1, r3, #12
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	78db      	ldrb	r3, [r3, #3]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f005 faf9 	bl	8007024 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001a32:	7dbb      	ldrb	r3, [r7, #22]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	78d2      	ldrb	r2, [r2, #3]
 8001a38:	4413      	add	r3, r2
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	e06c      	b.n	8001b1e <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	330c      	adds	r3, #12
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fcbd 	bl	80013cc <_mav_trim_payload>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001a56:	2309      	movs	r3, #9
 8001a58:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	789a      	ldrb	r2, [r3, #2]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3301      	adds	r3, #1
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	7912      	ldrb	r2, [r2, #4]
 8001a72:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3303      	adds	r3, #3
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	7952      	ldrb	r2, [r2, #5]
 8001a7c:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3304      	adds	r3, #4
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	7992      	ldrb	r2, [r2, #6]
 8001a86:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3305      	adds	r3, #5
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	79d2      	ldrb	r2, [r2, #7]
 8001a90:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3306      	adds	r3, #6
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	7a12      	ldrb	r2, [r2, #8]
 8001a9a:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	7a5a      	ldrb	r2, [r3, #9]
 8001aa0:	7a99      	ldrb	r1, [r3, #10]
 8001aa2:	0209      	lsls	r1, r1, #8
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	7adb      	ldrb	r3, [r3, #11]
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3307      	adds	r3, #7
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	7a5a      	ldrb	r2, [r3, #9]
 8001aba:	7a99      	ldrb	r1, [r3, #10]
 8001abc:	0209      	lsls	r1, r1, #8
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	7adb      	ldrb	r3, [r3, #11]
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	0a1a      	lsrs	r2, r3, #8
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3308      	adds	r3, #8
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	7a5a      	ldrb	r2, [r3, #9]
 8001ad4:	7a99      	ldrb	r1, [r3, #10]
 8001ad6:	0209      	lsls	r1, r1, #8
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	7adb      	ldrb	r3, [r3, #11]
 8001adc:	041b      	lsls	r3, r3, #16
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	0c1a      	lsrs	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3309      	adds	r3, #9
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f103 000a 	add.w	r0, r3, #10
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	330c      	adds	r3, #12
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	4619      	mov	r1, r3
 8001af8:	f005 fa94 	bl	8007024 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001afc:	7dba      	ldrb	r2, [r7, #22]
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	4413      	add	r3, r2
 8001b02:	3301      	adds	r3, #1
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	791b      	ldrb	r3, [r3, #4]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <mavlink_msg_to_send_buffer+0x164>
 8001b16:	230d      	movs	r3, #13
 8001b18:	e000      	b.n	8001b1c <mavlink_msg_to_send_buffer+0x166>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	3301      	adds	r3, #1
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1c98      	adds	r0, r3, #2
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8001b4c:	7dfa      	ldrb	r2, [r7, #23]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f005 fa68 	bl	8007024 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001b54:	7dbb      	ldrb	r3, [r7, #22]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	4413      	add	r3, r2
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3303      	adds	r3, #3
 8001b6a:	b29b      	uxth	r3, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001b80:	f107 030e 	add.w	r3, r7, #14
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f817 	bl	8000bb8 <crc_init>
	msg->checksum = crcTmp;
 8001b8a:	89fa      	ldrh	r2, [r7, #14]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	801a      	strh	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001bac:	f107 020e 	add.w	r2, r7, #14
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe ffcd 	bl	8000b54 <crc_accumulate>
	msg->checksum = checksum;
 8001bba:	89fa      	ldrh	r2, [r7, #14]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	801a      	strh	r2, [r3, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	f240 1373 	movw	r3, #371	@ 0x173
 8001bd8:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001bda:	e025      	b.n	8001c28 <mavlink_get_msg_entry+0x60>
            uint32_t mid = (low+1+high)/2;
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4413      	add	r3, r2
 8001be2:	3301      	adds	r3, #1
 8001be4:	085b      	lsrs	r3, r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001be8:	491e      	ldr	r1, [pc, #120]	@ (8001c64 <mavlink_get_msg_entry+0x9c>)
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d203      	bcs.n	8001c06 <mavlink_get_msg_entry+0x3e>
                high = mid-1;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
                continue;
 8001c04:	e010      	b.n	8001c28 <mavlink_get_msg_entry+0x60>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001c06:	4917      	ldr	r1, [pc, #92]	@ (8001c64 <mavlink_get_msg_entry+0x9c>)
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d902      	bls.n	8001c22 <mavlink_get_msg_entry+0x5a>
                low = mid;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	617b      	str	r3, [r7, #20]
                continue;
 8001c20:	e002      	b.n	8001c28 <mavlink_get_msg_entry+0x60>
            }
            low = mid;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	617b      	str	r3, [r7, #20]
            break;
 8001c26:	e003      	b.n	8001c30 <mavlink_get_msg_entry+0x68>
        while (low < high) {
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d3d5      	bcc.n	8001bdc <mavlink_get_msg_entry+0x14>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8001c30:	490c      	ldr	r1, [pc, #48]	@ (8001c64 <mavlink_get_msg_entry+0x9c>)
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d001      	beq.n	8001c4a <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e006      	b.n	8001c58 <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4a03      	ldr	r2, [pc, #12]	@ (8001c64 <mavlink_get_msg_entry+0x9c>)
 8001c56:	4413      	add	r3, r2
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	371c      	adds	r7, #28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	0800715c 	.word	0x0800715c

08001c68 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	78db      	ldrb	r3, [r3, #3]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f200 8272 	bhi.w	800216c <mavlink_frame_char_buffer+0x504>
 8001c88:	a201      	add	r2, pc, #4	@ (adr r2, 8001c90 <mavlink_frame_char_buffer+0x28>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001cd1 	.word	0x08001cd1
 8001c94:	08001cd1 	.word	0x08001cd1
 8001c98:	08001d2f 	.word	0x08001d2f
 8001c9c:	08001d95 	.word	0x08001d95
 8001ca0:	08001dc9 	.word	0x08001dc9
 8001ca4:	08001de1 	.word	0x08001de1
 8001ca8:	08001df9 	.word	0x08001df9
 8001cac:	08001e11 	.word	0x08001e11
 8001cb0:	08001e29 	.word	0x08001e29
 8001cb4:	08001e83 	.word	0x08001e83
 8001cb8:	08001ecf 	.word	0x08001ecf
 8001cbc:	08001f2b 	.word	0x08001f2b
 8001cc0:	08001f63 	.word	0x08001f63
 8001cc4:	08001ffb 	.word	0x08001ffb
 8001cc8:	08001ffb 	.word	0x08001ffb
 8001ccc:	080020b7 	.word	0x080020b7
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	2bfd      	cmp	r3, #253	@ 0xfd
 8001cd4:	d113      	bne.n	8001cfe <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	79fa      	ldrb	r2, [r7, #7]
 8001ce6:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	7b1b      	ldrb	r3, [r3, #12]
 8001cec:	f023 0301 	bic.w	r3, r3, #1
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7ff ff3c 	bl	8001b74 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001cfc:	e22d      	b.n	800215a <mavlink_frame_char_buffer+0x4f2>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d02:	f040 822a 	bne.w	800215a <mavlink_frame_char_buffer+0x4f2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	79fa      	ldrb	r2, [r7, #7]
 8001d16:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	7b1b      	ldrb	r3, [r3, #12]
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f7ff ff24 	bl	8001b74 <mavlink_start_checksum>
		break;
 8001d2c:	e215      	b.n	800215a <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00f      	beq.n	8001d56 <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	785b      	ldrb	r3, [r3, #1]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8001d42:	68b8      	ldr	r0, [r7, #8]
 8001d44:	f7ff fe27 	bl	8001996 <_mav_parse_error>
			status->msg_received = 0;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2201      	movs	r2, #1
 8001d52:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8001d54:	e20a      	b.n	800216c <mavlink_frame_char_buffer+0x504>
			rxmsg->len = c;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	79fa      	ldrb	r2, [r7, #7]
 8001d5a:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	4619      	mov	r1, r3
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f7ff ff16 	bl	8001b98 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	7b1b      	ldrb	r3, [r3, #12]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d009      	beq.n	8001d8c <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2205      	movs	r2, #5
 8001d88:	70da      	strb	r2, [r3, #3]
		break;
 8001d8a:	e1ef      	b.n	800216c <mavlink_frame_char_buffer+0x504>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	70da      	strb	r2, [r3, #3]
		break;
 8001d92:	e1eb      	b.n	800216c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	79fa      	ldrb	r2, [r7, #7]
 8001d98:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	791b      	ldrb	r3, [r3, #4]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d909      	bls.n	8001db6 <mavlink_frame_char_buffer+0x14e>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001da2:	68b8      	ldr	r0, [r7, #8]
 8001da4:	f7ff fdf7 	bl	8001996 <_mav_parse_error>
			status->msg_received = 0;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2201      	movs	r2, #1
 8001db2:	70da      	strb	r2, [r3, #3]
			break;
 8001db4:	e1da      	b.n	800216c <mavlink_frame_char_buffer+0x504>
		}
		mavlink_update_checksum(rxmsg, c);
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	4619      	mov	r1, r3
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7ff feec 	bl	8001b98 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	70da      	strb	r2, [r3, #3]
		break;
 8001dc6:	e1d1      	b.n	800216c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	79fa      	ldrb	r2, [r7, #7]
 8001dcc:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff fee0 	bl	8001b98 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2205      	movs	r2, #5
 8001ddc:	70da      	strb	r2, [r3, #3]
		break;
 8001dde:	e1c5      	b.n	800216c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	79fa      	ldrb	r2, [r7, #7]
 8001de4:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	4619      	mov	r1, r3
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f7ff fed4 	bl	8001b98 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2206      	movs	r2, #6
 8001df4:	70da      	strb	r2, [r3, #3]
		break;
 8001df6:	e1b9      	b.n	800216c <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	79fa      	ldrb	r2, [r7, #7]
 8001dfc:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	4619      	mov	r1, r3
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7ff fec8 	bl	8001b98 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	70da      	strb	r2, [r3, #3]
		break;
 8001e0e:	e1ad      	b.n	800216c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	79fa      	ldrb	r2, [r7, #7]
 8001e14:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f7ff febc 	bl	8001b98 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2208      	movs	r2, #8
 8001e24:	70da      	strb	r2, [r3, #3]
		break;
 8001e26:	e1a1      	b.n	800216c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	b2d9      	uxtb	r1, r3
 8001e32:	2000      	movs	r0, #0
 8001e34:	4301      	orrs	r1, r0
 8001e36:	7251      	strb	r1, [r2, #9]
 8001e38:	0a19      	lsrs	r1, r3, #8
 8001e3a:	b2c9      	uxtb	r1, r1
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	4301      	orrs	r1, r0
 8001e40:	7291      	strb	r1, [r2, #10]
 8001e42:	0c1b      	lsrs	r3, r3, #16
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2100      	movs	r1, #0
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f7ff fea1 	bl	8001b98 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	7b1b      	ldrb	r3, [r3, #12]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00b      	beq.n	8001e7a <mavlink_frame_char_buffer+0x212>
			if(rxmsg->len > 0) {
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	78db      	ldrb	r3, [r3, #3]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <mavlink_frame_char_buffer+0x20a>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	220b      	movs	r2, #11
 8001e6e:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8001e70:	e17c      	b.n	800216c <mavlink_frame_char_buffer+0x504>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	220c      	movs	r2, #12
 8001e76:	70da      	strb	r2, [r3, #3]
		break;
 8001e78:	e178      	b.n	800216c <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2209      	movs	r2, #9
 8001e7e:	70da      	strb	r2, [r3, #3]
		break;
 8001e80:	e174      	b.n	800216c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= ((uint32_t)c)<<8;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	7a5a      	ldrb	r2, [r3, #9]
 8001e86:	7a99      	ldrb	r1, [r3, #10]
 8001e88:	0209      	lsls	r1, r1, #8
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	7adb      	ldrb	r3, [r3, #11]
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	4313      	orrs	r3, r2
 8001e92:	461a      	mov	r2, r3
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	b2d1      	uxtb	r1, r2
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	4301      	orrs	r1, r0
 8001ea6:	7259      	strb	r1, [r3, #9]
 8001ea8:	0a11      	lsrs	r1, r2, #8
 8001eaa:	b2c9      	uxtb	r1, r1
 8001eac:	2000      	movs	r0, #0
 8001eae:	4301      	orrs	r1, r0
 8001eb0:	7299      	strb	r1, [r3, #10]
 8001eb2:	0c12      	lsrs	r2, r2, #16
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7ff fe69 	bl	8001b98 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	220a      	movs	r2, #10
 8001eca:	70da      	strb	r2, [r3, #3]
		break;
 8001ecc:	e14e      	b.n	800216c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	7a5a      	ldrb	r2, [r3, #9]
 8001ed2:	7a99      	ldrb	r1, [r3, #10]
 8001ed4:	0209      	lsls	r1, r1, #8
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	7adb      	ldrb	r3, [r3, #11]
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	4313      	orrs	r3, r2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	b2d1      	uxtb	r1, r2
 8001eee:	2000      	movs	r0, #0
 8001ef0:	4301      	orrs	r1, r0
 8001ef2:	7259      	strb	r1, [r3, #9]
 8001ef4:	0a11      	lsrs	r1, r2, #8
 8001ef6:	b2c9      	uxtb	r1, r1
 8001ef8:	2000      	movs	r0, #0
 8001efa:	4301      	orrs	r1, r0
 8001efc:	7299      	strb	r1, [r3, #10]
 8001efe:	0c12      	lsrs	r2, r2, #16
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	2100      	movs	r1, #0
 8001f04:	430a      	orrs	r2, r1
 8001f06:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f7ff fe43 	bl	8001b98 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	78db      	ldrb	r3, [r3, #3]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <mavlink_frame_char_buffer+0x2ba>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	220b      	movs	r2, #11
 8001f1e:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8001f20:	e124      	b.n	800216c <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	220c      	movs	r2, #12
 8001f26:	70da      	strb	r2, [r3, #3]
		break;
 8001f28:	e120      	b.n	800216c <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f103 020c 	add.w	r2, r3, #12
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	791b      	ldrb	r3, [r3, #4]
 8001f34:	1c59      	adds	r1, r3, #1
 8001f36:	b2c8      	uxtb	r0, r1
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	7108      	strb	r0, [r1, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	79fa      	ldrb	r2, [r7, #7]
 8001f40:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	4619      	mov	r1, r3
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f7ff fe26 	bl	8001b98 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	791a      	ldrb	r2, [r3, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	78db      	ldrb	r3, [r3, #3]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	f040 8102 	bne.w	800215e <mavlink_frame_char_buffer+0x4f6>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	220c      	movs	r2, #12
 8001f5e:	70da      	strb	r2, [r3, #3]
		}
		break;
 8001f60:	e0fd      	b.n	800215e <mavlink_frame_char_buffer+0x4f6>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	7a5a      	ldrb	r2, [r3, #9]
 8001f66:	7a99      	ldrb	r1, [r3, #10]
 8001f68:	0209      	lsls	r1, r1, #8
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	7adb      	ldrb	r3, [r3, #11]
 8001f6e:	041b      	lsls	r3, r3, #16
 8001f70:	4313      	orrs	r3, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fe28 	bl	8001bc8 <mavlink_get_msg_entry>
 8001f78:	61b8      	str	r0, [r7, #24]
		if (e == NULL) {
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <mavlink_frame_char_buffer+0x328>
			// Message not found in CRC_EXTRA table.
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	220e      	movs	r2, #14
 8001f84:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	79fa      	ldrb	r2, [r7, #7]
 8001f8a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			// zero-fill the packet to cope with short incoming packets
				if (e && status->packet_idx < e->max_msg_len) {
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
			}
		}
		break;
 8001f8e:	e0e8      	b.n	8002162 <mavlink_frame_char_buffer+0x4fa>
			uint8_t crc_extra = e->crc_extra;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	791b      	ldrb	r3, [r3, #4]
 8001f94:	75fb      	strb	r3, [r7, #23]
			mavlink_update_checksum(rxmsg, crc_extra);
 8001f96:	7dfb      	ldrb	r3, [r7, #23]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7ff fdfc 	bl	8001b98 <mavlink_update_checksum>
			if (c != (rxmsg->checksum & 0xFF)) {
 8001fa0:	79fa      	ldrb	r2, [r7, #7]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d003      	beq.n	8001fb6 <mavlink_frame_char_buffer+0x34e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	220e      	movs	r2, #14
 8001fb2:	70da      	strb	r2, [r3, #3]
 8001fb4:	e002      	b.n	8001fbc <mavlink_frame_char_buffer+0x354>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	220d      	movs	r2, #13
 8001fba:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	79fa      	ldrb	r2, [r7, #7]
 8001fc0:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				if (e && status->packet_idx < e->max_msg_len) {
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80cb 	beq.w	8002162 <mavlink_frame_char_buffer+0x4fa>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	791a      	ldrb	r2, [r3, #4]
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	799b      	ldrb	r3, [r3, #6]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f080 80c4 	bcs.w	8002162 <mavlink_frame_char_buffer+0x4fa>
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	330c      	adds	r3, #12
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	7912      	ldrb	r2, [r2, #4]
 8001fe2:	1898      	adds	r0, r3, r2
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	799b      	ldrb	r3, [r3, #6]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	791b      	ldrb	r3, [r3, #4]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	f004 ffe9 	bl	8006fca <memset>
		break;
 8001ff8:	e0b3      	b.n	8002162 <mavlink_frame_char_buffer+0x4fa>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	78db      	ldrb	r3, [r3, #3]
 8001ffe:	2b0e      	cmp	r3, #14
 8002000:	d008      	beq.n	8002014 <mavlink_frame_char_buffer+0x3ac>
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	b29b      	uxth	r3, r3
 8002010:	429a      	cmp	r2, r3
 8002012:	d003      	beq.n	800201c <mavlink_frame_char_buffer+0x3b4>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2202      	movs	r2, #2
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e002      	b.n	8002022 <mavlink_frame_char_buffer+0x3ba>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	791b      	ldrb	r3, [r3, #4]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00e      	beq.n	8002054 <mavlink_frame_char_buffer+0x3ec>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	220f      	movs	r2, #15
 800203a:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	220d      	movs	r2, #13
 8002040:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b02      	cmp	r3, #2
 8002048:	f000 808d 	beq.w	8002166 <mavlink_frame_char_buffer+0x4fe>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8002052:	e088      	b.n	8002166 <mavlink_frame_char_buffer+0x4fe>
			if (status->signing &&
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01f      	beq.n	800209c <mavlink_frame_char_buffer+0x434>
			   	(status->signing->accept_unsigned_callback == NULL ||
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (status->signing &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	d013      	beq.n	800208e <mavlink_frame_char_buffer+0x426>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	7a59      	ldrb	r1, [r3, #9]
 8002070:	7a98      	ldrb	r0, [r3, #10]
 8002072:	0200      	lsls	r0, r0, #8
 8002074:	4301      	orrs	r1, r0
 8002076:	7adb      	ldrb	r3, [r3, #11]
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	430b      	orrs	r3, r1
 800207c:	4619      	mov	r1, r3
 800207e:	68b8      	ldr	r0, [r7, #8]
 8002080:	4790      	blx	r2
 8002082:	4603      	mov	r3, r0
 8002084:	f083 0301 	eor.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <mavlink_frame_char_buffer+0x434>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d002      	beq.n	800209c <mavlink_frame_char_buffer+0x434>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2203      	movs	r2, #3
 800209a:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2201      	movs	r2, #1
 80020a0:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d05e      	beq.n	8002166 <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80020a8:	f240 1223 	movw	r2, #291	@ 0x123
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	6838      	ldr	r0, [r7, #0]
 80020b0:	f004 ffb8 	bl	8007024 <memcpy>
		break;
 80020b4:	e057      	b.n	8002166 <mavlink_frame_char_buffer+0x4fe>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	7b5b      	ldrb	r3, [r3, #13]
 80020ba:	f1c3 030d 	rsb	r3, r3, #13
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4413      	add	r3, r2
 80020c2:	79fa      	ldrb	r2, [r7, #7]
 80020c4:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
		status->signature_wait--;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	7b5b      	ldrb	r3, [r3, #13]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	7b5b      	ldrb	r3, [r3, #13]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d146      	bne.n	800216a <mavlink_frame_char_buffer+0x502>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	6918      	ldr	r0, [r3, #16]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7ff f98c 	bl	8001404 <mavlink_signature_check>
 80020ec:	4603      	mov	r3, r0
 80020ee:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 80020f0:	7ffb      	ldrb	r3, [r7, #31]
 80020f2:	f083 0301 	eor.w	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d017      	beq.n	800212c <mavlink_frame_char_buffer+0x4c4>
			   	(status->signing->accept_unsigned_callback &&
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (!sig_ok &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d012      	beq.n	800212c <mavlink_frame_char_buffer+0x4c4>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	7a59      	ldrb	r1, [r3, #9]
 8002110:	7a98      	ldrb	r0, [r3, #10]
 8002112:	0200      	lsls	r0, r0, #8
 8002114:	4301      	orrs	r1, r0
 8002116:	7adb      	ldrb	r3, [r3, #11]
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	430b      	orrs	r3, r1
 800211c:	4619      	mov	r1, r3
 800211e:	68b8      	ldr	r0, [r7, #8]
 8002120:	4790      	blx	r2
 8002122:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <mavlink_frame_char_buffer+0x4c4>
				// accepted via application level override
				sig_ok = true;
 8002128:	2301      	movs	r3, #1
 800212a:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 800212c:	7ffb      	ldrb	r3, [r7, #31]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <mavlink_frame_char_buffer+0x4d2>
				status->msg_received = MAVLINK_FRAMING_OK;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e002      	b.n	8002140 <mavlink_frame_char_buffer+0x4d8>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2203      	movs	r2, #3
 800213e:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2201      	movs	r2, #1
 8002144:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00e      	beq.n	800216a <mavlink_frame_char_buffer+0x502>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800214c:	f240 1223 	movw	r2, #291	@ 0x123
 8002150:	68f9      	ldr	r1, [r7, #12]
 8002152:	6838      	ldr	r0, [r7, #0]
 8002154:	f004 ff66 	bl	8007024 <memcpy>
			}
		}
		break;
 8002158:	e007      	b.n	800216a <mavlink_frame_char_buffer+0x502>
		break;
 800215a:	bf00      	nop
 800215c:	e006      	b.n	800216c <mavlink_frame_char_buffer+0x504>
		break;
 800215e:	bf00      	nop
 8002160:	e004      	b.n	800216c <mavlink_frame_char_buffer+0x504>
		break;
 8002162:	bf00      	nop
 8002164:	e002      	b.n	800216c <mavlink_frame_char_buffer+0x504>
		break;
 8002166:	bf00      	nop
 8002168:	e000      	b.n	800216c <mavlink_frame_char_buffer+0x504>
		break;
 800216a:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d110      	bne.n	8002196 <mavlink_frame_char_buffer+0x52e>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	799a      	ldrb	r2, [r3, #6]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	891b      	ldrh	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <mavlink_frame_char_buffer+0x522>
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2200      	movs	r2, #0
 8002188:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	891b      	ldrh	r3, [r3, #8]
 800218e:	3301      	adds	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <mavlink_frame_char_buffer+0x53c>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	78da      	ldrb	r2, [r3, #3]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 80021a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d01a      	beq.n	80021e0 <mavlink_frame_char_buffer+0x578>
           r_mavlink_status->parse_state = status->parse_state;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	78da      	ldrb	r2, [r3, #3]
 80021ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b0:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	791a      	ldrb	r2, [r3, #4]
 80021b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b8:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	795b      	ldrb	r3, [r3, #5]
 80021be:	3301      	adds	r3, #1
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c4:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	891a      	ldrh	r2, [r3, #8]
 80021ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021cc:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	789b      	ldrb	r3, [r3, #2]
 80021d2:	461a      	mov	r2, r3
 80021d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d6:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	7b1a      	ldrb	r2, [r3, #12]
 80021dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021de:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2200      	movs	r2, #0
 80021e4:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d110      	bne.n	8002210 <mavlink_frame_char_buffer+0x5a8>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00d      	beq.n	8002210 <mavlink_frame_char_buffer+0x5a8>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	b21b      	sxth	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b21b      	sxth	r3, r3
 800220a:	b29a      	uxth	r2, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	781b      	ldrb	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3720      	adds	r7, #32
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b087      	sub	sp, #28
 8002220:	af02      	add	r7, sp, #8
 8002222:	60ba      	str	r2, [r7, #8]
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	4603      	mov	r3, r0
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	460b      	mov	r3, r1
 800222c:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff f851 	bl	80012d8 <mavlink_get_channel_buffer>
 8002236:	4604      	mov	r4, r0
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f838 	bl	80012b0 <mavlink_get_channel_status>
 8002240:	4601      	mov	r1, r0
 8002242:	7bba      	ldrb	r2, [r7, #14]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4620      	mov	r0, r4
 800224c:	f7ff fd0c 	bl	8001c68 <mavlink_frame_char_buffer>
 8002250:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bd90      	pop	{r4, r7, pc}

0800225a <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b088      	sub	sp, #32
 800225e:	af00      	add	r7, sp, #0
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	460b      	mov	r3, r1
 800226a:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 800226c:	7bb9      	ldrb	r1, [r7, #14]
 800226e:	7bf8      	ldrb	r0, [r7, #15]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	f7ff ffd2 	bl	800221c <mavlink_frame_char>
 8002278:	4603      	mov	r3, r0
 800227a:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 800227c:	7ffb      	ldrb	r3, [r7, #31]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d002      	beq.n	8002288 <mavlink_parse_char+0x2e>
 8002282:	7ffb      	ldrb	r3, [r7, #31]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d120      	bne.n	80022ca <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f824 	bl	80012d8 <mavlink_get_channel_buffer>
 8002290:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff f80b 	bl	80012b0 <mavlink_get_channel_status>
 800229a:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 800229c:	6978      	ldr	r0, [r7, #20]
 800229e:	f7ff fb7a 	bl	8001996 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2201      	movs	r2, #1
 80022ac:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 80022ae:	7bbb      	ldrb	r3, [r7, #14]
 80022b0:	2bfd      	cmp	r3, #253	@ 0xfd
 80022b2:	d108      	bne.n	80022c6 <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2202      	movs	r2, #2
 80022b8:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2200      	movs	r2, #0
 80022be:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 80022c0:	69b8      	ldr	r0, [r7, #24]
 80022c2:	f7ff fc57 	bl	8001b74 <mavlink_start_checksum>
	    }
	    return 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e000      	b.n	80022cc <mavlink_parse_char+0x72>
    }
    return msg_received;
 80022ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <mavlink_msg_sys_status_decode>:
 *
 * @param msg The message to decode
 * @param sys_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_sys_status_decode(const mavlink_message_t* msg, mavlink_sys_status_t* sys_status)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
    sys_status->battery_remaining = mavlink_msg_sys_status_get_battery_remaining(msg);
    sys_status->onboard_control_sensors_present_extended = mavlink_msg_sys_status_get_onboard_control_sensors_present_extended(msg);
    sys_status->onboard_control_sensors_enabled_extended = mavlink_msg_sys_status_get_onboard_control_sensors_enabled_extended(msg);
    sys_status->onboard_control_sensors_health_extended = mavlink_msg_sys_status_get_onboard_control_sensors_health_extended(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SYS_STATUS_LEN? msg->len : MAVLINK_MSG_ID_SYS_STATUS_LEN;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	78db      	ldrb	r3, [r3, #3]
 80022e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80022e4:	bf28      	it	cs
 80022e6:	232b      	movcs	r3, #43	@ 0x2b
 80022e8:	73fb      	strb	r3, [r7, #15]
        memset(sys_status, 0, MAVLINK_MSG_ID_SYS_STATUS_LEN);
 80022ea:	222b      	movs	r2, #43	@ 0x2b
 80022ec:	2100      	movs	r1, #0
 80022ee:	6838      	ldr	r0, [r7, #0]
 80022f0:	f004 fe6b 	bl	8006fca <memset>
    memcpy(sys_status, _MAV_PAYLOAD(msg), len);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	330c      	adds	r3, #12
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	4619      	mov	r1, r3
 80022fc:	6838      	ldr	r0, [r7, #0]
 80022fe:	f004 fe91 	bl	8007024 <memcpy>
#endif
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <mavlink_msg_attitude_decode>:
 *
 * @param msg The message to decode
 * @param attitude C-struct to decode the message contents into
 */
static inline void mavlink_msg_attitude_decode(const mavlink_message_t* msg, mavlink_attitude_t* attitude)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
    attitude->yaw = mavlink_msg_attitude_get_yaw(msg);
    attitude->rollspeed = mavlink_msg_attitude_get_rollspeed(msg);
    attitude->pitchspeed = mavlink_msg_attitude_get_pitchspeed(msg);
    attitude->yawspeed = mavlink_msg_attitude_get_yawspeed(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_ATTITUDE_LEN? msg->len : MAVLINK_MSG_ID_ATTITUDE_LEN;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	78db      	ldrb	r3, [r3, #3]
 8002318:	2b1c      	cmp	r3, #28
 800231a:	bf28      	it	cs
 800231c:	231c      	movcs	r3, #28
 800231e:	73fb      	strb	r3, [r7, #15]
        memset(attitude, 0, MAVLINK_MSG_ID_ATTITUDE_LEN);
 8002320:	221c      	movs	r2, #28
 8002322:	2100      	movs	r1, #0
 8002324:	6838      	ldr	r0, [r7, #0]
 8002326:	f004 fe50 	bl	8006fca <memset>
    memcpy(attitude, _MAV_PAYLOAD(msg), len);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	330c      	adds	r3, #12
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	4619      	mov	r1, r3
 8002332:	6838      	ldr	r0, [r7, #0]
 8002334:	f004 fe76 	bl	8007024 <memcpy>
#endif
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
    global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
    global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
    global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
    global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN? msg->len : MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	78db      	ldrb	r3, [r3, #3]
 800234e:	2b1c      	cmp	r3, #28
 8002350:	bf28      	it	cs
 8002352:	231c      	movcs	r3, #28
 8002354:	73fb      	strb	r3, [r7, #15]
        memset(global_position_int, 0, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
 8002356:	221c      	movs	r2, #28
 8002358:	2100      	movs	r1, #0
 800235a:	6838      	ldr	r0, [r7, #0]
 800235c:	f004 fe35 	bl	8006fca <memset>
    memcpy(global_position_int, _MAV_PAYLOAD(msg), len);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	330c      	adds	r3, #12
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	4619      	mov	r1, r3
 8002368:	6838      	ldr	r0, [r7, #0]
 800236a:	f004 fe5b 	bl	8007024 <memcpy>
#endif
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <mavlink_msg_vfr_hud_decode>:
 *
 * @param msg The message to decode
 * @param vfr_hud C-struct to decode the message contents into
 */
static inline void mavlink_msg_vfr_hud_decode(const mavlink_message_t* msg, mavlink_vfr_hud_t* vfr_hud)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
    vfr_hud->alt = mavlink_msg_vfr_hud_get_alt(msg);
    vfr_hud->climb = mavlink_msg_vfr_hud_get_climb(msg);
    vfr_hud->heading = mavlink_msg_vfr_hud_get_heading(msg);
    vfr_hud->throttle = mavlink_msg_vfr_hud_get_throttle(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_VFR_HUD_LEN? msg->len : MAVLINK_MSG_ID_VFR_HUD_LEN;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	78db      	ldrb	r3, [r3, #3]
 8002384:	2b14      	cmp	r3, #20
 8002386:	bf28      	it	cs
 8002388:	2314      	movcs	r3, #20
 800238a:	73fb      	strb	r3, [r7, #15]
        memset(vfr_hud, 0, MAVLINK_MSG_ID_VFR_HUD_LEN);
 800238c:	2214      	movs	r2, #20
 800238e:	2100      	movs	r1, #0
 8002390:	6838      	ldr	r0, [r7, #0]
 8002392:	f004 fe1a 	bl	8006fca <memset>
    memcpy(vfr_hud, _MAV_PAYLOAD(msg), len);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	330c      	adds	r3, #12
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	4619      	mov	r1, r3
 800239e:	6838      	ldr	r0, [r7, #0]
 80023a0:	f004 fe40 	bl	8007024 <memcpy>
#endif
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <mavlink_msg_command_ack_decode>:
 *
 * @param msg The message to decode
 * @param command_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_ack_decode(const mavlink_message_t* msg, mavlink_command_ack_t* command_ack)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
    command_ack->progress = mavlink_msg_command_ack_get_progress(msg);
    command_ack->result_param2 = mavlink_msg_command_ack_get_result_param2(msg);
    command_ack->target_system = mavlink_msg_command_ack_get_target_system(msg);
    command_ack->target_component = mavlink_msg_command_ack_get_target_component(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMMAND_ACK_LEN? msg->len : MAVLINK_MSG_ID_COMMAND_ACK_LEN;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	78db      	ldrb	r3, [r3, #3]
 80023ba:	2b0a      	cmp	r3, #10
 80023bc:	bf28      	it	cs
 80023be:	230a      	movcs	r3, #10
 80023c0:	73fb      	strb	r3, [r7, #15]
        memset(command_ack, 0, MAVLINK_MSG_ID_COMMAND_ACK_LEN);
 80023c2:	220a      	movs	r2, #10
 80023c4:	2100      	movs	r1, #0
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	f004 fdff 	bl	8006fca <memset>
    memcpy(command_ack, _MAV_PAYLOAD(msg), len);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	330c      	adds	r3, #12
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	4619      	mov	r1, r3
 80023d4:	6838      	ldr	r0, [r7, #0]
 80023d6:	f004 fe25 	bl	8007024 <memcpy>
#endif
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <mavlink_msg_power_status_decode>:
 *
 * @param msg The message to decode
 * @param power_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_power_status_decode(const mavlink_message_t* msg, mavlink_power_status_t* power_status)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    power_status->Vcc = mavlink_msg_power_status_get_Vcc(msg);
    power_status->Vservo = mavlink_msg_power_status_get_Vservo(msg);
    power_status->flags = mavlink_msg_power_status_get_flags(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_POWER_STATUS_LEN? msg->len : MAVLINK_MSG_ID_POWER_STATUS_LEN;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	78db      	ldrb	r3, [r3, #3]
 80023f0:	2b06      	cmp	r3, #6
 80023f2:	bf28      	it	cs
 80023f4:	2306      	movcs	r3, #6
 80023f6:	73fb      	strb	r3, [r7, #15]
        memset(power_status, 0, MAVLINK_MSG_ID_POWER_STATUS_LEN);
 80023f8:	2206      	movs	r2, #6
 80023fa:	2100      	movs	r1, #0
 80023fc:	6838      	ldr	r0, [r7, #0]
 80023fe:	f004 fde4 	bl	8006fca <memset>
    memcpy(power_status, _MAV_PAYLOAD(msg), len);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	330c      	adds	r3, #12
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	4619      	mov	r1, r3
 800240a:	6838      	ldr	r0, [r7, #0]
 800240c:	f004 fe0a 	bl	8007024 <memcpy>
#endif
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <mavlink_msg_battery_status_decode>:
 *
 * @param msg The message to decode
 * @param battery_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_battery_status_decode(const mavlink_message_t* msg, mavlink_battery_status_t* battery_status)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
    battery_status->charge_state = mavlink_msg_battery_status_get_charge_state(msg);
    mavlink_msg_battery_status_get_voltages_ext(msg, battery_status->voltages_ext);
    battery_status->mode = mavlink_msg_battery_status_get_mode(msg);
    battery_status->fault_bitmask = mavlink_msg_battery_status_get_fault_bitmask(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_BATTERY_STATUS_LEN? msg->len : MAVLINK_MSG_ID_BATTERY_STATUS_LEN;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	78db      	ldrb	r3, [r3, #3]
 8002426:	2b36      	cmp	r3, #54	@ 0x36
 8002428:	bf28      	it	cs
 800242a:	2336      	movcs	r3, #54	@ 0x36
 800242c:	73fb      	strb	r3, [r7, #15]
        memset(battery_status, 0, MAVLINK_MSG_ID_BATTERY_STATUS_LEN);
 800242e:	2236      	movs	r2, #54	@ 0x36
 8002430:	2100      	movs	r1, #0
 8002432:	6838      	ldr	r0, [r7, #0]
 8002434:	f004 fdc9 	bl	8006fca <memset>
    memcpy(battery_status, _MAV_PAYLOAD(msg), len);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	330c      	adds	r3, #12
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	4619      	mov	r1, r3
 8002440:	6838      	ldr	r0, [r7, #0]
 8002442:	f004 fdef 	bl	8007024 <memcpy>
#endif
}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <mavlink_msg_autopilot_version_decode>:
 *
 * @param msg The message to decode
 * @param autopilot_version C-struct to decode the message contents into
 */
static inline void mavlink_msg_autopilot_version_decode(const mavlink_message_t* msg, mavlink_autopilot_version_t* autopilot_version)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
    mavlink_msg_autopilot_version_get_flight_custom_version(msg, autopilot_version->flight_custom_version);
    mavlink_msg_autopilot_version_get_middleware_custom_version(msg, autopilot_version->middleware_custom_version);
    mavlink_msg_autopilot_version_get_os_custom_version(msg, autopilot_version->os_custom_version);
    mavlink_msg_autopilot_version_get_uid2(msg, autopilot_version->uid2);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_AUTOPILOT_VERSION_LEN? msg->len : MAVLINK_MSG_ID_AUTOPILOT_VERSION_LEN;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	78db      	ldrb	r3, [r3, #3]
 800245c:	2b4e      	cmp	r3, #78	@ 0x4e
 800245e:	bf28      	it	cs
 8002460:	234e      	movcs	r3, #78	@ 0x4e
 8002462:	73fb      	strb	r3, [r7, #15]
        memset(autopilot_version, 0, MAVLINK_MSG_ID_AUTOPILOT_VERSION_LEN);
 8002464:	224e      	movs	r2, #78	@ 0x4e
 8002466:	2100      	movs	r1, #0
 8002468:	6838      	ldr	r0, [r7, #0]
 800246a:	f004 fdae 	bl	8006fca <memset>
    memcpy(autopilot_version, _MAV_PAYLOAD(msg), len);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	330c      	adds	r3, #12
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	4619      	mov	r1, r3
 8002476:	6838      	ldr	r0, [r7, #0]
 8002478:	f004 fdd4 	bl	8007024 <memcpy>
#endif
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <mavlink_msg_collision_decode>:
 *
 * @param msg The message to decode
 * @param collision C-struct to decode the message contents into
 */
static inline void mavlink_msg_collision_decode(const mavlink_message_t* msg, mavlink_collision_t* collision)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
    collision->horizontal_minimum_delta = mavlink_msg_collision_get_horizontal_minimum_delta(msg);
    collision->src = mavlink_msg_collision_get_src(msg);
    collision->action = mavlink_msg_collision_get_action(msg);
    collision->threat_level = mavlink_msg_collision_get_threat_level(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COLLISION_LEN? msg->len : MAVLINK_MSG_ID_COLLISION_LEN;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	78db      	ldrb	r3, [r3, #3]
 8002492:	2b13      	cmp	r3, #19
 8002494:	bf28      	it	cs
 8002496:	2313      	movcs	r3, #19
 8002498:	73fb      	strb	r3, [r7, #15]
        memset(collision, 0, MAVLINK_MSG_ID_COLLISION_LEN);
 800249a:	2213      	movs	r2, #19
 800249c:	2100      	movs	r1, #0
 800249e:	6838      	ldr	r0, [r7, #0]
 80024a0:	f004 fd93 	bl	8006fca <memset>
    memcpy(collision, _MAV_PAYLOAD(msg), len);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	330c      	adds	r3, #12
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	4619      	mov	r1, r3
 80024ac:	6838      	ldr	r0, [r7, #0]
 80024ae:	f004 fdb9 	bl	8007024 <memcpy>
#endif
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <mavlink_msg_obstacle_distance_decode>:
 *
 * @param msg The message to decode
 * @param obstacle_distance C-struct to decode the message contents into
 */
static inline void mavlink_msg_obstacle_distance_decode(const mavlink_message_t* msg, mavlink_obstacle_distance_t* obstacle_distance)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
    obstacle_distance->increment = mavlink_msg_obstacle_distance_get_increment(msg);
    obstacle_distance->increment_f = mavlink_msg_obstacle_distance_get_increment_f(msg);
    obstacle_distance->angle_offset = mavlink_msg_obstacle_distance_get_angle_offset(msg);
    obstacle_distance->frame = mavlink_msg_obstacle_distance_get_frame(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_OBSTACLE_DISTANCE_LEN? msg->len : MAVLINK_MSG_ID_OBSTACLE_DISTANCE_LEN;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	78db      	ldrb	r3, [r3, #3]
 80024c8:	2ba7      	cmp	r3, #167	@ 0xa7
 80024ca:	bf28      	it	cs
 80024cc:	23a7      	movcs	r3, #167	@ 0xa7
 80024ce:	73fb      	strb	r3, [r7, #15]
        memset(obstacle_distance, 0, MAVLINK_MSG_ID_OBSTACLE_DISTANCE_LEN);
 80024d0:	22a7      	movs	r2, #167	@ 0xa7
 80024d2:	2100      	movs	r1, #0
 80024d4:	6838      	ldr	r0, [r7, #0]
 80024d6:	f004 fd78 	bl	8006fca <memset>
    memcpy(obstacle_distance, _MAV_PAYLOAD(msg), len);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	330c      	adds	r3, #12
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	4619      	mov	r1, r3
 80024e2:	6838      	ldr	r0, [r7, #0]
 80024e4:	f004 fd9e 	bl	8007024 <memcpy>
#endif
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	603a      	str	r2, [r7, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
 80024fe:	460b      	mov	r3, r1
 8002500:	71bb      	strb	r3, [r7, #6]
 8002502:	4613      	mov	r3, r2
 8002504:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8002506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002508:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 800250a:	797b      	ldrb	r3, [r7, #5]
 800250c:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 800250e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002512:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8002514:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002518:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 800251a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800251e:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 8002520:	2303      	movs	r3, #3
 8002522:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	330c      	adds	r3, #12
 8002528:	f107 010c 	add.w	r1, r7, #12
 800252c:	2209      	movs	r2, #9
 800252e:	4618      	mov	r0, r3
 8002530:	f004 fd78 	bl	8007024 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2200      	movs	r2, #0
 8002538:	725a      	strb	r2, [r3, #9]
 800253a:	2200      	movs	r2, #0
 800253c:	729a      	strb	r2, [r3, #10]
 800253e:	2200      	movs	r2, #0
 8002540:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8002542:	79ba      	ldrb	r2, [r7, #6]
 8002544:	79f9      	ldrb	r1, [r7, #7]
 8002546:	2332      	movs	r3, #50	@ 0x32
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	2309      	movs	r3, #9
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2309      	movs	r3, #9
 8002550:	6838      	ldr	r0, [r7, #0]
 8002552:	f7ff fa02 	bl	800195a <mavlink_finalize_message>
 8002556:	4603      	mov	r3, r0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <mavlink_msg_heartbeat_get_type>:
 * @brief Get field type from heartbeat message
 *
 * @return  Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.
 */
static inline uint8_t mavlink_msg_heartbeat_get_type(const mavlink_message_t* msg)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint8_t(msg,  4);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	330c      	adds	r3, #12
 800256c:	3304      	adds	r3, #4
 800256e:	781b      	ldrb	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	78db      	ldrb	r3, [r3, #3]
 800258a:	2b09      	cmp	r3, #9
 800258c:	bf28      	it	cs
 800258e:	2309      	movcs	r3, #9
 8002590:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002592:	2209      	movs	r2, #9
 8002594:	2100      	movs	r1, #0
 8002596:	6838      	ldr	r0, [r7, #0]
 8002598:	f004 fd17 	bl	8006fca <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	330c      	adds	r3, #12
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	4619      	mov	r1, r3
 80025a4:	6838      	ldr	r0, [r7, #0]
 80025a6:	f004 fd3d 	bl	8007024 <memcpy>
#endif
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <decode_mavlink_mssg>:
 *
 * @param byte:		Current byte of the message to decode
 *	@retval			1 if success, 0 if message was not found
 **/
uint8_t decode_mavlink_mssg(const unsigned char* byte, mavlink_message_t* msg)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
	if (mavlink_parse_char(chan, *byte, msg, &status))
 80025be:	4b41      	ldr	r3, [pc, #260]	@ (80026c4 <decode_mavlink_mssg+0x110>)
 80025c0:	7818      	ldrb	r0, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7819      	ldrb	r1, [r3, #0]
 80025c6:	4b40      	ldr	r3, [pc, #256]	@ (80026c8 <decode_mavlink_mssg+0x114>)
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	f7ff fe46 	bl	800225a <mavlink_parse_char>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d071      	beq.n	80026b8 <decode_mavlink_mssg+0x104>
	{
		// ... DECODE THE MESSAGE PAYLOAD HERE ...
		 switch(msg->msgid)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	7a5a      	ldrb	r2, [r3, #9]
 80025d8:	7a99      	ldrb	r1, [r3, #10]
 80025da:	0209      	lsls	r1, r1, #8
 80025dc:	430a      	orrs	r2, r1
 80025de:	7adb      	ldrb	r3, [r3, #11]
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 80025e8:	d05b      	beq.n	80026a2 <decode_mavlink_mssg+0xee>
 80025ea:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 80025ee:	dc61      	bgt.n	80026b4 <decode_mavlink_mssg+0x100>
 80025f0:	2bf7      	cmp	r3, #247	@ 0xf7
 80025f2:	d04c      	beq.n	800268e <decode_mavlink_mssg+0xda>
 80025f4:	2bf7      	cmp	r3, #247	@ 0xf7
 80025f6:	dc5d      	bgt.n	80026b4 <decode_mavlink_mssg+0x100>
 80025f8:	2b94      	cmp	r3, #148	@ 0x94
 80025fa:	d04d      	beq.n	8002698 <decode_mavlink_mssg+0xe4>
 80025fc:	2b94      	cmp	r3, #148	@ 0x94
 80025fe:	dc59      	bgt.n	80026b4 <decode_mavlink_mssg+0x100>
 8002600:	2b93      	cmp	r3, #147	@ 0x93
 8002602:	d03f      	beq.n	8002684 <decode_mavlink_mssg+0xd0>
 8002604:	2b93      	cmp	r3, #147	@ 0x93
 8002606:	dc55      	bgt.n	80026b4 <decode_mavlink_mssg+0x100>
 8002608:	2b7d      	cmp	r3, #125	@ 0x7d
 800260a:	d020      	beq.n	800264e <decode_mavlink_mssg+0x9a>
 800260c:	2b7d      	cmp	r3, #125	@ 0x7d
 800260e:	dc51      	bgt.n	80026b4 <decode_mavlink_mssg+0x100>
 8002610:	2b4d      	cmp	r3, #77	@ 0x4d
 8002612:	d032      	beq.n	800267a <decode_mavlink_mssg+0xc6>
 8002614:	2b4d      	cmp	r3, #77	@ 0x4d
 8002616:	dc4d      	bgt.n	80026b4 <decode_mavlink_mssg+0x100>
 8002618:	2b4a      	cmp	r3, #74	@ 0x4a
 800261a:	d047      	beq.n	80026ac <decode_mavlink_mssg+0xf8>
 800261c:	2b4a      	cmp	r3, #74	@ 0x4a
 800261e:	dc49      	bgt.n	80026b4 <decode_mavlink_mssg+0x100>
 8002620:	2b21      	cmp	r3, #33	@ 0x21
 8002622:	d00a      	beq.n	800263a <decode_mavlink_mssg+0x86>
 8002624:	2b21      	cmp	r3, #33	@ 0x21
 8002626:	dc45      	bgt.n	80026b4 <decode_mavlink_mssg+0x100>
 8002628:	2b1e      	cmp	r3, #30
 800262a:	d021      	beq.n	8002670 <decode_mavlink_mssg+0xbc>
 800262c:	2b1e      	cmp	r3, #30
 800262e:	dc41      	bgt.n	80026b4 <decode_mavlink_mssg+0x100>
 8002630:	2b00      	cmp	r3, #0
 8002632:	d011      	beq.n	8002658 <decode_mavlink_mssg+0xa4>
 8002634:	2b01      	cmp	r3, #1
 8002636:	d005      	beq.n	8002644 <decode_mavlink_mssg+0x90>
 8002638:	e03c      	b.n	80026b4 <decode_mavlink_mssg+0x100>
		 {
			case MAVLINK_MSG_ID_GLOBAL_POSITION_INT:
				mavlink_msg_global_position_int_decode(msg, &global_position);
 800263a:	4924      	ldr	r1, [pc, #144]	@ (80026cc <decode_mavlink_mssg+0x118>)
 800263c:	6838      	ldr	r0, [r7, #0]
 800263e:	f7ff fe7f 	bl	8002340 <mavlink_msg_global_position_int_decode>
				break;
 8002642:	e039      	b.n	80026b8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_SYS_STATUS:
				mavlink_msg_sys_status_decode(msg, &sys_status);
 8002644:	4922      	ldr	r1, [pc, #136]	@ (80026d0 <decode_mavlink_mssg+0x11c>)
 8002646:	6838      	ldr	r0, [r7, #0]
 8002648:	f7ff fe44 	bl	80022d4 <mavlink_msg_sys_status_decode>
				break;
 800264c:	e034      	b.n	80026b8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_POWER_STATUS:
				mavlink_msg_power_status_decode(msg, &pwr_status);
 800264e:	4921      	ldr	r1, [pc, #132]	@ (80026d4 <decode_mavlink_mssg+0x120>)
 8002650:	6838      	ldr	r0, [r7, #0]
 8002652:	f7ff fec6 	bl	80023e2 <mavlink_msg_power_status_decode>
				break;
 8002656:	e02f      	b.n	80026b8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_HEARTBEAT:
				mavlink_msg_heartbeat_decode(msg, &hb);
 8002658:	491f      	ldr	r1, [pc, #124]	@ (80026d8 <decode_mavlink_mssg+0x124>)
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f7ff ff8e 	bl	800257c <mavlink_msg_heartbeat_decode>
			 	device_type=mavlink_msg_heartbeat_get_type(msg);
 8002660:	6838      	ldr	r0, [r7, #0]
 8002662:	f7ff ff7d 	bl	8002560 <mavlink_msg_heartbeat_get_type>
 8002666:	4603      	mov	r3, r0
 8002668:	461a      	mov	r2, r3
 800266a:	4b1c      	ldr	r3, [pc, #112]	@ (80026dc <decode_mavlink_mssg+0x128>)
 800266c:	601a      	str	r2, [r3, #0]
			 	break;
 800266e:	e023      	b.n	80026b8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_ATTITUDE:
				mavlink_msg_attitude_decode(msg, &att);
 8002670:	491b      	ldr	r1, [pc, #108]	@ (80026e0 <decode_mavlink_mssg+0x12c>)
 8002672:	6838      	ldr	r0, [r7, #0]
 8002674:	f7ff fe49 	bl	800230a <mavlink_msg_attitude_decode>
				break;
 8002678:	e01e      	b.n	80026b8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_COMMAND_ACK:
				mavlink_msg_command_ack_decode(msg, &cmd_ack);
 800267a:	491a      	ldr	r1, [pc, #104]	@ (80026e4 <decode_mavlink_mssg+0x130>)
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	f7ff fe95 	bl	80023ac <mavlink_msg_command_ack_decode>
				break;
 8002682:	e019      	b.n	80026b8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_BATTERY_STATUS:
				mavlink_msg_battery_status_decode(msg, &bat_stat);
 8002684:	4918      	ldr	r1, [pc, #96]	@ (80026e8 <decode_mavlink_mssg+0x134>)
 8002686:	6838      	ldr	r0, [r7, #0]
 8002688:	f7ff fec6 	bl	8002418 <mavlink_msg_battery_status_decode>
				break;
 800268c:	e014      	b.n	80026b8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_COLLISION:
				mavlink_msg_collision_decode(msg, &col);
 800268e:	4917      	ldr	r1, [pc, #92]	@ (80026ec <decode_mavlink_mssg+0x138>)
 8002690:	6838      	ldr	r0, [r7, #0]
 8002692:	f7ff fef7 	bl	8002484 <mavlink_msg_collision_decode>
				break;
 8002696:	e00f      	b.n	80026b8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_AUTOPILOT_VERSION:
				mavlink_msg_autopilot_version_decode(msg, &autopilot_v);
 8002698:	4915      	ldr	r1, [pc, #84]	@ (80026f0 <decode_mavlink_mssg+0x13c>)
 800269a:	6838      	ldr	r0, [r7, #0]
 800269c:	f7ff fed7 	bl	800244e <mavlink_msg_autopilot_version_decode>
				break;
 80026a0:	e00a      	b.n	80026b8 <decode_mavlink_mssg+0x104>
			case MAVLINK_MSG_ID_OBSTACLE_DISTANCE:
				mavlink_msg_obstacle_distance_decode(msg, &obstacle_distance);
 80026a2:	4914      	ldr	r1, [pc, #80]	@ (80026f4 <decode_mavlink_mssg+0x140>)
 80026a4:	6838      	ldr	r0, [r7, #0]
 80026a6:	f7ff ff08 	bl	80024ba <mavlink_msg_obstacle_distance_decode>
				break;
 80026aa:	e005      	b.n	80026b8 <decode_mavlink_mssg+0x104>
			case MAVLINK_MSG_ID_VFR_HUD:
				mavlink_msg_vfr_hud_decode(msg, &vfr_hud);
 80026ac:	4912      	ldr	r1, [pc, #72]	@ (80026f8 <decode_mavlink_mssg+0x144>)
 80026ae:	6838      	ldr	r0, [r7, #0]
 80026b0:	f7ff fe61 	bl	8002376 <mavlink_msg_vfr_hud_decode>
			default:return 0;break;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <decode_mavlink_mssg+0x106>

			}
	}
	return 1;
 80026b8:	2301      	movs	r3, #1

}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000082f 	.word	0x2000082f
 80026c8:	20000830 	.word	0x20000830
 80026cc:	20000848 	.word	0x20000848
 80026d0:	20000864 	.word	0x20000864
 80026d4:	20000890 	.word	0x20000890
 80026d8:	20000898 	.word	0x20000898
 80026dc:	20000708 	.word	0x20000708
 80026e0:	200008a4 	.word	0x200008a4
 80026e4:	200008c0 	.word	0x200008c0
 80026e8:	200008cc 	.word	0x200008cc
 80026ec:	20000904 	.word	0x20000904
 80026f0:	20000918 	.word	0x20000918
 80026f4:	20000968 	.word	0x20000968
 80026f8:	20000a10 	.word	0x20000a10

080026fc <mavlink_heartbeat>:
 *
 *	@param	buffer:		Empty array buffer
 * 	@retval 			Length of the HEARTBEAT message in bytes
 */
uint16_t mavlink_heartbeat(uint8_t* buffer)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af04      	add	r7, sp, #16
 8002702:	6078      	str	r0, [r7, #4]
	//prepare message
	mavlink_msg_heartbeat_pack(SYS_ID, MAV_COMP_ID_MISSIONPLANNER,
 8002704:	2300      	movs	r3, #0
 8002706:	9303      	str	r3, [sp, #12]
 8002708:	2300      	movs	r3, #0
 800270a:	9302      	str	r3, [sp, #8]
 800270c:	2300      	movs	r3, #0
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	2308      	movs	r3, #8
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2306      	movs	r3, #6
 8002716:	4a07      	ldr	r2, [pc, #28]	@ (8002734 <mavlink_heartbeat+0x38>)
 8002718:	21be      	movs	r1, #190	@ 0xbe
 800271a:	20ff      	movs	r0, #255	@ 0xff
 800271c:	f7ff fee8 	bl	80024f0 <mavlink_msg_heartbeat_pack>
			&hb_mssg, MAV_TYPE_GCS,	MAV_AUTOPILOT_INVALID, 0, 0, MAV_STATE_UNINIT);

	//translate into bytes
	return mavlink_msg_to_send_buffer(buffer, &hb_mssg);
 8002720:	4904      	ldr	r1, [pc, #16]	@ (8002734 <mavlink_heartbeat+0x38>)
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff f947 	bl	80019b6 <mavlink_msg_to_send_buffer>
 8002728:	4603      	mov	r3, r0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000070c 	.word	0x2000070c

08002738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <HAL_MspInit+0x44>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	4a0e      	ldr	r2, [pc, #56]	@ (800277c <HAL_MspInit+0x44>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002748:	6413      	str	r3, [r2, #64]	@ 0x40
 800274a:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <HAL_MspInit+0x44>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <HAL_MspInit+0x44>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	4a08      	ldr	r2, [pc, #32]	@ (800277c <HAL_MspInit+0x44>)
 800275c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002760:	6453      	str	r3, [r2, #68]	@ 0x44
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_MspInit+0x44>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08e      	sub	sp, #56	@ 0x38
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a4e      	ldr	r2, [pc, #312]	@ (80028d8 <HAL_ETH_MspInit+0x158>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	f040 8096 	bne.w	80028d0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80027a4:	4b4d      	ldr	r3, [pc, #308]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	4a4c      	ldr	r2, [pc, #304]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b0:	4b4a      	ldr	r3, [pc, #296]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b8:	623b      	str	r3, [r7, #32]
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	4b47      	ldr	r3, [pc, #284]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c0:	4a46      	ldr	r2, [pc, #280]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c8:	4b44      	ldr	r3, [pc, #272]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4b41      	ldr	r3, [pc, #260]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	4a40      	ldr	r2, [pc, #256]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80027de:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e0:	4b3e      	ldr	r3, [pc, #248]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ec:	4b3b      	ldr	r3, [pc, #236]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	4a3a      	ldr	r2, [pc, #232]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f8:	4b38      	ldr	r3, [pc, #224]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002804:	4b35      	ldr	r3, [pc, #212]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002808:	4a34      	ldr	r2, [pc, #208]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002810:	4b32      	ldr	r3, [pc, #200]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281c:	4b2f      	ldr	r3, [pc, #188]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	4a2e      	ldr	r2, [pc, #184]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 8002822:	f043 0302 	orr.w	r3, r3, #2
 8002826:	6313      	str	r3, [r2, #48]	@ 0x30
 8002828:	4b2c      	ldr	r3, [pc, #176]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002834:	4b29      	ldr	r3, [pc, #164]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	4a28      	ldr	r2, [pc, #160]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 800283a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800283e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002840:	4b26      	ldr	r3, [pc, #152]	@ (80028dc <HAL_ETH_MspInit+0x15c>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800284c:	2332      	movs	r3, #50	@ 0x32
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800285c:	230b      	movs	r3, #11
 800285e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002864:	4619      	mov	r1, r3
 8002866:	481e      	ldr	r0, [pc, #120]	@ (80028e0 <HAL_ETH_MspInit+0x160>)
 8002868:	f000 ffc6 	bl	80037f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800286c:	2386      	movs	r3, #134	@ 0x86
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800287c:	230b      	movs	r3, #11
 800287e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002884:	4619      	mov	r1, r3
 8002886:	4817      	ldr	r0, [pc, #92]	@ (80028e4 <HAL_ETH_MspInit+0x164>)
 8002888:	f000 ffb6 	bl	80037f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800288c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800289e:	230b      	movs	r3, #11
 80028a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80028a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a6:	4619      	mov	r1, r3
 80028a8:	480f      	ldr	r0, [pc, #60]	@ (80028e8 <HAL_ETH_MspInit+0x168>)
 80028aa:	f000 ffa5 	bl	80037f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80028ae:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028bc:	2303      	movs	r3, #3
 80028be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028c0:	230b      	movs	r3, #11
 80028c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c8:	4619      	mov	r1, r3
 80028ca:	4808      	ldr	r0, [pc, #32]	@ (80028ec <HAL_ETH_MspInit+0x16c>)
 80028cc:	f000 ff94 	bl	80037f8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80028d0:	bf00      	nop
 80028d2:	3738      	adds	r7, #56	@ 0x38
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40028000 	.word	0x40028000
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020800 	.word	0x40020800
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400
 80028ec:	40021800 	.word	0x40021800

080028f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002934 <HAL_TIM_Base_MspInit+0x44>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d113      	bne.n	800292a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002902:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <HAL_TIM_Base_MspInit+0x48>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	4a0c      	ldr	r2, [pc, #48]	@ (8002938 <HAL_TIM_Base_MspInit+0x48>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	6413      	str	r3, [r2, #64]	@ 0x40
 800290e:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <HAL_TIM_Base_MspInit+0x48>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	201e      	movs	r0, #30
 8002920:	f000 fb53 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002924:	201e      	movs	r0, #30
 8002926:	f000 fb6c 	bl	8003002 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40000800 	.word	0x40000800
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b0b0      	sub	sp, #192	@ 0xc0
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002954:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002958:	2284      	movs	r2, #132	@ 0x84
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f004 fb34 	bl	8006fca <memset>
  if(huart->Instance==USART1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a94      	ldr	r2, [pc, #592]	@ (8002bb8 <HAL_UART_MspInit+0x27c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d143      	bne.n	80029f4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800296c:	2340      	movs	r3, #64	@ 0x40
 800296e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002970:	2300      	movs	r3, #0
 8002972:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002974:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002978:	4618      	mov	r0, r3
 800297a:	f001 fdf7 	bl	800456c <HAL_RCCEx_PeriphCLKConfig>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002984:	f7fe f8e0 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002988:	4b8c      	ldr	r3, [pc, #560]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 800298a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298c:	4a8b      	ldr	r2, [pc, #556]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 800298e:	f043 0310 	orr.w	r3, r3, #16
 8002992:	6453      	str	r3, [r2, #68]	@ 0x44
 8002994:	4b89      	ldr	r3, [pc, #548]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	4b86      	ldr	r3, [pc, #536]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a4:	4a85      	ldr	r2, [pc, #532]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ac:	4b83      	ldr	r3, [pc, #524]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	623b      	str	r3, [r7, #32]
 80029b6:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029b8:	2340      	movs	r3, #64	@ 0x40
 80029ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029be:	2312      	movs	r3, #18
 80029c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029d0:	2307      	movs	r3, #7
 80029d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80029da:	4619      	mov	r1, r3
 80029dc:	4878      	ldr	r0, [pc, #480]	@ (8002bc0 <HAL_UART_MspInit+0x284>)
 80029de:	f000 ff0b 	bl	80037f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	2025      	movs	r0, #37	@ 0x25
 80029e8:	f000 faef 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029ec:	2025      	movs	r0, #37	@ 0x25
 80029ee:	f000 fb08 	bl	8003002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80029f2:	e0dd      	b.n	8002bb0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a72      	ldr	r2, [pc, #456]	@ (8002bc4 <HAL_UART_MspInit+0x288>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d143      	bne.n	8002a86 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029fe:	2380      	movs	r3, #128	@ 0x80
 8002a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a02:	2300      	movs	r3, #0
 8002a04:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f001 fdae 	bl	800456c <HAL_RCCEx_PeriphCLKConfig>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8002a16:	f7fe f897 	bl	8000b48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a1a:	4b68      	ldr	r3, [pc, #416]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	4a67      	ldr	r2, [pc, #412]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a26:	4b65      	ldr	r3, [pc, #404]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a32:	4b62      	ldr	r3, [pc, #392]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	4a61      	ldr	r2, [pc, #388]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002a38:	f043 0308 	orr.w	r3, r3, #8
 8002a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a4a:	2320      	movs	r3, #32
 8002a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a50:	2312      	movs	r3, #18
 8002a52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a62:	2307      	movs	r3, #7
 8002a64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a68:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4856      	ldr	r0, [pc, #344]	@ (8002bc8 <HAL_UART_MspInit+0x28c>)
 8002a70:	f000 fec2 	bl	80037f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	2026      	movs	r0, #38	@ 0x26
 8002a7a:	f000 faa6 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a7e:	2026      	movs	r0, #38	@ 0x26
 8002a80:	f000 fabf 	bl	8003002 <HAL_NVIC_EnableIRQ>
}
 8002a84:	e094      	b.n	8002bb0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a50      	ldr	r2, [pc, #320]	@ (8002bcc <HAL_UART_MspInit+0x290>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d145      	bne.n	8002b1c <HAL_UART_MspInit+0x1e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a94:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a96:	2300      	movs	r3, #0
 8002a98:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 fd64 	bl	800456c <HAL_RCCEx_PeriphCLKConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002aaa:	f7fe f84d 	bl	8000b48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002aae:	4b43      	ldr	r3, [pc, #268]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	4a42      	ldr	r2, [pc, #264]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aba:	4b40      	ldr	r3, [pc, #256]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	4a3c      	ldr	r2, [pc, #240]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002ade:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af2:	2303      	movs	r3, #3
 8002af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002af8:	2307      	movs	r3, #7
 8002afa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002afe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b02:	4619      	mov	r1, r3
 8002b04:	4830      	ldr	r0, [pc, #192]	@ (8002bc8 <HAL_UART_MspInit+0x28c>)
 8002b06:	f000 fe77 	bl	80037f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2027      	movs	r0, #39	@ 0x27
 8002b10:	f000 fa5b 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b14:	2027      	movs	r0, #39	@ 0x27
 8002b16:	f000 fa74 	bl	8003002 <HAL_NVIC_EnableIRQ>
}
 8002b1a:	e049      	b.n	8002bb0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART6)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd0 <HAL_UART_MspInit+0x294>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d144      	bne.n	8002bb0 <HAL_UART_MspInit+0x274>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002b26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 fd18 	bl	800456c <HAL_RCCEx_PeriphCLKConfig>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8002b42:	f7fe f801 	bl	8000b48 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b46:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002b4c:	f043 0320 	orr.w	r3, r3, #32
 8002b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b52:	4b1a      	ldr	r3, [pc, #104]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5e:	4b17      	ldr	r3, [pc, #92]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6a:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <HAL_UART_MspInit+0x280>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b76:	23c0      	movs	r3, #192	@ 0xc0
 8002b78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b8e:	2308      	movs	r3, #8
 8002b90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b98:	4619      	mov	r1, r3
 8002b9a:	480e      	ldr	r0, [pc, #56]	@ (8002bd4 <HAL_UART_MspInit+0x298>)
 8002b9c:	f000 fe2c 	bl	80037f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2047      	movs	r0, #71	@ 0x47
 8002ba6:	f000 fa10 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002baa:	2047      	movs	r0, #71	@ 0x47
 8002bac:	f000 fa29 	bl	8003002 <HAL_NVIC_EnableIRQ>
}
 8002bb0:	bf00      	nop
 8002bb2:	37c0      	adds	r7, #192	@ 0xc0
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40011000 	.word	0x40011000
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020400 	.word	0x40020400
 8002bc4:	40004400 	.word	0x40004400
 8002bc8:	40020c00 	.word	0x40020c00
 8002bcc:	40004800 	.word	0x40004800
 8002bd0:	40011400 	.word	0x40011400
 8002bd4:	40020800 	.word	0x40020800

08002bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <NMI_Handler+0x4>

08002be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <HardFault_Handler+0x4>

08002be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <MemManage_Handler+0x4>

08002bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <BusFault_Handler+0x4>

08002bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <UsageFault_Handler+0x4>

08002c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c2e:	f000 f8ad 	bl	8002d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c3c:	4802      	ldr	r0, [pc, #8]	@ (8002c48 <TIM4_IRQHandler+0x10>)
 8002c3e:	f002 f955 	bl	8004eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000254 	.word	0x20000254

08002c4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c50:	4802      	ldr	r0, [pc, #8]	@ (8002c5c <USART1_IRQHandler+0x10>)
 8002c52:	f002 fe39 	bl	80058c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200002a0 	.word	0x200002a0

08002c60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c64:	4802      	ldr	r0, [pc, #8]	@ (8002c70 <USART2_IRQHandler+0x10>)
 8002c66:	f002 fe2f 	bl	80058c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000328 	.word	0x20000328

08002c74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c78:	4802      	ldr	r0, [pc, #8]	@ (8002c84 <USART3_IRQHandler+0x10>)
 8002c7a:	f002 fe25 	bl	80058c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200003b0 	.word	0x200003b0

08002c88 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c8c:	4802      	ldr	r0, [pc, #8]	@ (8002c98 <USART6_IRQHandler+0x10>)
 8002c8e:	f002 fe1b 	bl	80058c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000438 	.word	0x20000438

08002c9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca0:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <SystemInit+0x20>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca6:	4a05      	ldr	r2, [pc, #20]	@ (8002cbc <SystemInit+0x20>)
 8002ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <Reset_Handler>:
 8002cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cf8 <LoopFillZerobss+0xe>
 8002cc4:	f7ff ffea 	bl	8002c9c <SystemInit>
 8002cc8:	480c      	ldr	r0, [pc, #48]	@ (8002cfc <LoopFillZerobss+0x12>)
 8002cca:	490d      	ldr	r1, [pc, #52]	@ (8002d00 <LoopFillZerobss+0x16>)
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d04 <LoopFillZerobss+0x1a>)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e002      	b.n	8002cd8 <LoopCopyDataInit>

08002cd2 <CopyDataInit>:
 8002cd2:	58d4      	ldr	r4, [r2, r3]
 8002cd4:	50c4      	str	r4, [r0, r3]
 8002cd6:	3304      	adds	r3, #4

08002cd8 <LoopCopyDataInit>:
 8002cd8:	18c4      	adds	r4, r0, r3
 8002cda:	428c      	cmp	r4, r1
 8002cdc:	d3f9      	bcc.n	8002cd2 <CopyDataInit>
 8002cde:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <LoopFillZerobss+0x1e>)
 8002ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8002d0c <LoopFillZerobss+0x22>)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e001      	b.n	8002cea <LoopFillZerobss>

08002ce6 <FillZerobss>:
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	3204      	adds	r2, #4

08002cea <LoopFillZerobss>:
 8002cea:	42a2      	cmp	r2, r4
 8002cec:	d3fb      	bcc.n	8002ce6 <FillZerobss>
 8002cee:	f004 f975 	bl	8006fdc <__libc_init_array>
 8002cf2:	f7fd fc73 	bl	80005dc <main>
 8002cf6:	4770      	bx	lr
 8002cf8:	20050000 	.word	0x20050000
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	2000000c 	.word	0x2000000c
 8002d04:	080082f4 	.word	0x080082f4
 8002d08:	20000150 	.word	0x20000150
 8002d0c:	20000f14 	.word	0x20000f14

08002d10 <ADC_IRQHandler>:
 8002d10:	e7fe      	b.n	8002d10 <ADC_IRQHandler>

08002d12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d16:	2003      	movs	r0, #3
 8002d18:	f000 f94c 	bl	8002fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f000 f805 	bl	8002d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d22:	f7ff fd09 	bl	8002738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <HAL_InitTick+0x54>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b12      	ldr	r3, [pc, #72]	@ (8002d84 <HAL_InitTick+0x58>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f967 	bl	800301e <HAL_SYSTICK_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00e      	b.n	8002d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b0f      	cmp	r3, #15
 8002d5e:	d80a      	bhi.n	8002d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d60:	2200      	movs	r2, #0
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	f000 f92f 	bl	8002fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d6c:	4a06      	ldr	r2, [pc, #24]	@ (8002d88 <HAL_InitTick+0x5c>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20000008 	.word	0x20000008
 8002d88:	20000004 	.word	0x20000004

08002d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d90:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <HAL_IncTick+0x20>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <HAL_IncTick+0x24>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	4a04      	ldr	r2, [pc, #16]	@ (8002db0 <HAL_IncTick+0x24>)
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000008 	.word	0x20000008
 8002db0:	20000f10 	.word	0x20000f10

08002db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return uwTick;
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <HAL_GetTick+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000f10 	.word	0x20000f10

08002dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff ffee 	bl	8002db4 <HAL_GetTick>
 8002dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d005      	beq.n	8002df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002de6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <HAL_Delay+0x44>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002df2:	bf00      	nop
 8002df4:	f7ff ffde 	bl	8002db4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d8f7      	bhi.n	8002df4 <HAL_Delay+0x28>
  {
  }
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000008 	.word	0x20000008

08002e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <__NVIC_SetPriorityGrouping+0x40>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e30:	4013      	ands	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <__NVIC_SetPriorityGrouping+0x40>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00
 8002e58:	05fa0000 	.word	0x05fa0000

08002e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <__NVIC_GetPriorityGrouping+0x18>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 0307 	and.w	r3, r3, #7
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	db0b      	blt.n	8002ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	f003 021f 	and.w	r2, r3, #31
 8002e90:	4907      	ldr	r1, [pc, #28]	@ (8002eb0 <__NVIC_EnableIRQ+0x38>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2001      	movs	r0, #1
 8002e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000e100 	.word	0xe000e100

08002eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	6039      	str	r1, [r7, #0]
 8002ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	db0a      	blt.n	8002ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	490c      	ldr	r1, [pc, #48]	@ (8002f00 <__NVIC_SetPriority+0x4c>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	0112      	lsls	r2, r2, #4
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002edc:	e00a      	b.n	8002ef4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	4908      	ldr	r1, [pc, #32]	@ (8002f04 <__NVIC_SetPriority+0x50>)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	3b04      	subs	r3, #4
 8002eec:	0112      	lsls	r2, r2, #4
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	761a      	strb	r2, [r3, #24]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000e100 	.word	0xe000e100
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	@ 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f1c3 0307 	rsb	r3, r3, #7
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	bf28      	it	cs
 8002f26:	2304      	movcs	r3, #4
 8002f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d902      	bls.n	8002f38 <NVIC_EncodePriority+0x30>
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3b03      	subs	r3, #3
 8002f36:	e000      	b.n	8002f3a <NVIC_EncodePriority+0x32>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f50:	f04f 31ff 	mov.w	r1, #4294967295
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	43d9      	mvns	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	4313      	orrs	r3, r2
         );
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3724      	adds	r7, #36	@ 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f80:	d301      	bcc.n	8002f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f82:	2301      	movs	r3, #1
 8002f84:	e00f      	b.n	8002fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f86:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb0 <SysTick_Config+0x40>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f8e:	210f      	movs	r1, #15
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	f7ff ff8e 	bl	8002eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <SysTick_Config+0x40>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f9e:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <SysTick_Config+0x40>)
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	e000e010 	.word	0xe000e010

08002fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ff29 	bl	8002e14 <__NVIC_SetPriorityGrouping>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fdc:	f7ff ff3e 	bl	8002e5c <__NVIC_GetPriorityGrouping>
 8002fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	6978      	ldr	r0, [r7, #20]
 8002fe8:	f7ff ff8e 	bl	8002f08 <NVIC_EncodePriority>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff5d 	bl	8002eb4 <__NVIC_SetPriority>
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800300c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff31 	bl	8002e78 <__NVIC_EnableIRQ>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ffa2 	bl	8002f70 <SysTick_Config>
 800302c:	4603      	mov	r3, r0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003042:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003044:	f7ff feb6 	bl	8002db4 <HAL_GetTick>
 8003048:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d008      	beq.n	8003068 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2280      	movs	r2, #128	@ 0x80
 800305a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e052      	b.n	800310e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0216 	bic.w	r2, r2, #22
 8003076:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003086:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d103      	bne.n	8003098 <HAL_DMA_Abort+0x62>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0208 	bic.w	r2, r2, #8
 80030a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b8:	e013      	b.n	80030e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ba:	f7ff fe7b 	bl	8002db4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d90c      	bls.n	80030e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2203      	movs	r2, #3
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e015      	b.n	800310e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e4      	bne.n	80030ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f4:	223f      	movs	r2, #63	@ 0x3f
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d004      	beq.n	8003134 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2280      	movs	r2, #128	@ 0x80
 800312e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e00c      	b.n	800314e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2205      	movs	r2, #5
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0201 	bic.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e086      	b.n	800327c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003174:	2b00      	cmp	r3, #0
 8003176:	d106      	bne.n	8003186 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2223      	movs	r2, #35	@ 0x23
 800317c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff fafd 	bl	8002780 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	4b3f      	ldr	r3, [pc, #252]	@ (8003284 <HAL_ETH_Init+0x128>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	4a3e      	ldr	r2, [pc, #248]	@ (8003284 <HAL_ETH_Init+0x128>)
 800318c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003190:	6453      	str	r3, [r2, #68]	@ 0x44
 8003192:	4b3c      	ldr	r3, [pc, #240]	@ (8003284 <HAL_ETH_Init+0x128>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800319e:	4b3a      	ldr	r3, [pc, #232]	@ (8003288 <HAL_ETH_Init+0x12c>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4a39      	ldr	r2, [pc, #228]	@ (8003288 <HAL_ETH_Init+0x12c>)
 80031a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80031a8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80031aa:	4b37      	ldr	r3, [pc, #220]	@ (8003288 <HAL_ETH_Init+0x12c>)
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	4935      	ldr	r1, [pc, #212]	@ (8003288 <HAL_ETH_Init+0x12c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80031b8:	4b33      	ldr	r3, [pc, #204]	@ (8003288 <HAL_ETH_Init+0x12c>)
 80031ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031d4:	f7ff fdee 	bl	8002db4 <HAL_GetTick>
 80031d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80031da:	e011      	b.n	8003200 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80031dc:	f7ff fdea 	bl	8002db4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031ea:	d909      	bls.n	8003200 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2204      	movs	r2, #4
 80031f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	22e0      	movs	r2, #224	@ 0xe0
 80031f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e03d      	b.n	800327c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e4      	bne.n	80031dc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f97a 	bl	800350c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fa25 	bl	8003668 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa7b 	bl	800371a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	461a      	mov	r2, r3
 800322a:	2100      	movs	r1, #0
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f9e3 	bl	80035f8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003240:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b0f      	ldr	r3, [pc, #60]	@ (800328c <HAL_ETH_Init+0x130>)
 8003250:	430b      	orrs	r3, r1
 8003252:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003266:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2210      	movs	r2, #16
 8003276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	40013800 	.word	0x40013800
 800328c:	00020060 	.word	0x00020060

08003290 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4b53      	ldr	r3, [pc, #332]	@ (80033f4 <ETH_SetMACConfig+0x164>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	7b9b      	ldrb	r3, [r3, #14]
 80032ae:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	7c12      	ldrb	r2, [r2, #16]
 80032b4:	2a00      	cmp	r2, #0
 80032b6:	d102      	bne.n	80032be <ETH_SetMACConfig+0x2e>
 80032b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032bc:	e000      	b.n	80032c0 <ETH_SetMACConfig+0x30>
 80032be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80032c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	7c52      	ldrb	r2, [r2, #17]
 80032c6:	2a00      	cmp	r2, #0
 80032c8:	d102      	bne.n	80032d0 <ETH_SetMACConfig+0x40>
 80032ca:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80032ce:	e000      	b.n	80032d2 <ETH_SetMACConfig+0x42>
 80032d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	7fdb      	ldrb	r3, [r3, #31]
 80032de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80032e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	7f92      	ldrb	r2, [r2, #30]
 80032ec:	2a00      	cmp	r2, #0
 80032ee:	d102      	bne.n	80032f6 <ETH_SetMACConfig+0x66>
 80032f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032f4:	e000      	b.n	80032f8 <ETH_SetMACConfig+0x68>
 80032f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80032f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	7f1b      	ldrb	r3, [r3, #28]
 80032fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003300:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003306:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	791b      	ldrb	r3, [r3, #4]
 800330c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800330e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003316:	2a00      	cmp	r2, #0
 8003318:	d102      	bne.n	8003320 <ETH_SetMACConfig+0x90>
 800331a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800331e:	e000      	b.n	8003322 <ETH_SetMACConfig+0x92>
 8003320:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003322:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	7bdb      	ldrb	r3, [r3, #15]
 8003328:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800332a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003330:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003338:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800333a:	4313      	orrs	r3, r2
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003352:	2001      	movs	r0, #1
 8003354:	f7ff fd3a 	bl	8002dcc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800336e:	4013      	ands	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003376:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800337e:	2a00      	cmp	r2, #0
 8003380:	d101      	bne.n	8003386 <ETH_SetMACConfig+0xf6>
 8003382:	2280      	movs	r2, #128	@ 0x80
 8003384:	e000      	b.n	8003388 <ETH_SetMACConfig+0xf8>
 8003386:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003388:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800338e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003396:	2a01      	cmp	r2, #1
 8003398:	d101      	bne.n	800339e <ETH_SetMACConfig+0x10e>
 800339a:	2208      	movs	r2, #8
 800339c:	e000      	b.n	80033a0 <ETH_SetMACConfig+0x110>
 800339e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80033a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80033a8:	2a01      	cmp	r2, #1
 80033aa:	d101      	bne.n	80033b0 <ETH_SetMACConfig+0x120>
 80033ac:	2204      	movs	r2, #4
 80033ae:	e000      	b.n	80033b2 <ETH_SetMACConfig+0x122>
 80033b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80033ba:	2a01      	cmp	r2, #1
 80033bc:	d101      	bne.n	80033c2 <ETH_SetMACConfig+0x132>
 80033be:	2202      	movs	r2, #2
 80033c0:	e000      	b.n	80033c4 <ETH_SetMACConfig+0x134>
 80033c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033c4:	4313      	orrs	r3, r2
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033dc:	2001      	movs	r0, #1
 80033de:	f7ff fcf5 	bl	8002dcc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	619a      	str	r2, [r3, #24]
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	fd20810f 	.word	0xfd20810f

080033f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4b3d      	ldr	r3, [pc, #244]	@ (8003508 <ETH_SetDMAConfig+0x110>)
 8003412:	4013      	ands	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	7b1b      	ldrb	r3, [r3, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <ETH_SetDMAConfig+0x2c>
 800341e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003422:	e000      	b.n	8003426 <ETH_SetDMAConfig+0x2e>
 8003424:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	7b5b      	ldrb	r3, [r3, #13]
 800342a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800342c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	7f52      	ldrb	r2, [r2, #29]
 8003432:	2a00      	cmp	r2, #0
 8003434:	d102      	bne.n	800343c <ETH_SetDMAConfig+0x44>
 8003436:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800343a:	e000      	b.n	800343e <ETH_SetDMAConfig+0x46>
 800343c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800343e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	7b9b      	ldrb	r3, [r3, #14]
 8003444:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003446:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800344c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	7f1b      	ldrb	r3, [r3, #28]
 8003452:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003454:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	7f9b      	ldrb	r3, [r3, #30]
 800345a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800345c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003462:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800346a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800346c:	4313      	orrs	r3, r2
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800347c:	461a      	mov	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800348e:	2001      	movs	r0, #1
 8003490:	f7ff fc9c 	bl	8002dcc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800349c:	461a      	mov	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	791b      	ldrb	r3, [r3, #4]
 80034a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80034b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80034c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034ec:	2001      	movs	r0, #1
 80034ee:	f7ff fc6d 	bl	8002dcc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034fa:	461a      	mov	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6013      	str	r3, [r2, #0]
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	f8de3f23 	.word	0xf8de3f23

0800350c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b0a6      	sub	sp, #152	@ 0x98
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003520:	2300      	movs	r3, #0
 8003522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003524:	2300      	movs	r3, #0
 8003526:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003530:	2300      	movs	r3, #0
 8003532:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003542:	2300      	movs	r3, #0
 8003544:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003548:	2300      	movs	r3, #0
 800354a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800354e:	2300      	movs	r3, #0
 8003550:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003558:	2300      	movs	r3, #0
 800355a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003562:	2300      	movs	r3, #0
 8003564:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003568:	2300      	movs	r3, #0
 800356a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800356e:	2300      	movs	r3, #0
 8003570:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003574:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003578:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800357a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800357e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003580:	2300      	movs	r3, #0
 8003582:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003586:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fe7f 	bl	8003290 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003592:	2301      	movs	r3, #1
 8003594:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003596:	2301      	movs	r3, #1
 8003598:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80035b4:	2300      	movs	r3, #0
 80035b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80035be:	2301      	movs	r3, #1
 80035c0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80035c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035c6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80035c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035cc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80035ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035d2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80035e2:	f107 0308 	add.w	r3, r7, #8
 80035e6:	4619      	mov	r1, r3
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff05 	bl	80033f8 <ETH_SetDMAConfig>
}
 80035ee:	bf00      	nop
 80035f0:	3798      	adds	r7, #152	@ 0x98
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3305      	adds	r3, #5
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	3204      	adds	r2, #4
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4b11      	ldr	r3, [pc, #68]	@ (8003660 <ETH_MACAddressConfig+0x68>)
 800361a:	4413      	add	r3, r2
 800361c:	461a      	mov	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3303      	adds	r3, #3
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	061a      	lsls	r2, r3, #24
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3302      	adds	r3, #2
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	041b      	lsls	r3, r3, #16
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3301      	adds	r3, #1
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	4313      	orrs	r3, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	7812      	ldrb	r2, [r2, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <ETH_MACAddressConfig+0x6c>)
 800364a:	4413      	add	r3, r2
 800364c:	461a      	mov	r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	6013      	str	r3, [r2, #0]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40028040 	.word	0x40028040
 8003664:	40028044 	.word	0x40028044

08003668 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	e03e      	b.n	80036f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68d9      	ldr	r1, [r3, #12]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	440b      	add	r3, r1
 8003686:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2200      	movs	r2, #0
 8003692:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2200      	movs	r2, #0
 800369e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	3206      	adds	r2, #6
 80036a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d80c      	bhi.n	80036d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68d9      	ldr	r1, [r3, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	461a      	mov	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	e004      	b.n	80036e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	3301      	adds	r3, #1
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d9bd      	bls.n	8003676 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800370c:	611a      	str	r2, [r3, #16]
}
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	e048      	b.n	80037ba <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6919      	ldr	r1, [r3, #16]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2200      	movs	r2, #0
 8003744:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2200      	movs	r2, #0
 8003756:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2200      	movs	r2, #0
 800375c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003764:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	3212      	adds	r2, #18
 8003786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d80c      	bhi.n	80037aa <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6919      	ldr	r1, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	440b      	add	r3, r1
 80037a2:	461a      	mov	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	60da      	str	r2, [r3, #12]
 80037a8:	e004      	b.n	80037b4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3301      	adds	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d9b3      	bls.n	8003728 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ea:	60da      	str	r2, [r3, #12]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b089      	sub	sp, #36	@ 0x24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	e175      	b.n	8003b04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003818:	2201      	movs	r2, #1
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	429a      	cmp	r2, r3
 8003832:	f040 8164 	bne.w	8003afe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b01      	cmp	r3, #1
 8003840:	d005      	beq.n	800384e <HAL_GPIO_Init+0x56>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d130      	bne.n	80038b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003884:	2201      	movs	r2, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 0201 	and.w	r2, r3, #1
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d017      	beq.n	80038ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	2203      	movs	r2, #3
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d123      	bne.n	8003940 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	08da      	lsrs	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3208      	adds	r2, #8
 8003900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	220f      	movs	r2, #15
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	08da      	lsrs	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3208      	adds	r2, #8
 800393a:	69b9      	ldr	r1, [r7, #24]
 800393c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2203      	movs	r2, #3
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0203 	and.w	r2, r3, #3
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80be 	beq.w	8003afe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003982:	4b66      	ldr	r3, [pc, #408]	@ (8003b1c <HAL_GPIO_Init+0x324>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	4a65      	ldr	r2, [pc, #404]	@ (8003b1c <HAL_GPIO_Init+0x324>)
 8003988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800398c:	6453      	str	r3, [r2, #68]	@ 0x44
 800398e:	4b63      	ldr	r3, [pc, #396]	@ (8003b1c <HAL_GPIO_Init+0x324>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800399a:	4a61      	ldr	r2, [pc, #388]	@ (8003b20 <HAL_GPIO_Init+0x328>)
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	3302      	adds	r3, #2
 80039a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	220f      	movs	r2, #15
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4013      	ands	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a58      	ldr	r2, [pc, #352]	@ (8003b24 <HAL_GPIO_Init+0x32c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d037      	beq.n	8003a36 <HAL_GPIO_Init+0x23e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a57      	ldr	r2, [pc, #348]	@ (8003b28 <HAL_GPIO_Init+0x330>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d031      	beq.n	8003a32 <HAL_GPIO_Init+0x23a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a56      	ldr	r2, [pc, #344]	@ (8003b2c <HAL_GPIO_Init+0x334>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d02b      	beq.n	8003a2e <HAL_GPIO_Init+0x236>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a55      	ldr	r2, [pc, #340]	@ (8003b30 <HAL_GPIO_Init+0x338>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d025      	beq.n	8003a2a <HAL_GPIO_Init+0x232>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a54      	ldr	r2, [pc, #336]	@ (8003b34 <HAL_GPIO_Init+0x33c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01f      	beq.n	8003a26 <HAL_GPIO_Init+0x22e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a53      	ldr	r2, [pc, #332]	@ (8003b38 <HAL_GPIO_Init+0x340>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d019      	beq.n	8003a22 <HAL_GPIO_Init+0x22a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a52      	ldr	r2, [pc, #328]	@ (8003b3c <HAL_GPIO_Init+0x344>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_GPIO_Init+0x226>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a51      	ldr	r2, [pc, #324]	@ (8003b40 <HAL_GPIO_Init+0x348>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00d      	beq.n	8003a1a <HAL_GPIO_Init+0x222>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a50      	ldr	r2, [pc, #320]	@ (8003b44 <HAL_GPIO_Init+0x34c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_GPIO_Init+0x21e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4f      	ldr	r2, [pc, #316]	@ (8003b48 <HAL_GPIO_Init+0x350>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_GPIO_Init+0x21a>
 8003a0e:	2309      	movs	r3, #9
 8003a10:	e012      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a12:	230a      	movs	r3, #10
 8003a14:	e010      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a16:	2308      	movs	r3, #8
 8003a18:	e00e      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a1a:	2307      	movs	r3, #7
 8003a1c:	e00c      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a1e:	2306      	movs	r3, #6
 8003a20:	e00a      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a22:	2305      	movs	r3, #5
 8003a24:	e008      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a26:	2304      	movs	r3, #4
 8003a28:	e006      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e004      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e002      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <HAL_GPIO_Init+0x240>
 8003a36:	2300      	movs	r3, #0
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	f002 0203 	and.w	r2, r2, #3
 8003a3e:	0092      	lsls	r2, r2, #2
 8003a40:	4093      	lsls	r3, r2
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a48:	4935      	ldr	r1, [pc, #212]	@ (8003b20 <HAL_GPIO_Init+0x328>)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	3302      	adds	r3, #2
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a56:	4b3d      	ldr	r3, [pc, #244]	@ (8003b4c <HAL_GPIO_Init+0x354>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a7a:	4a34      	ldr	r2, [pc, #208]	@ (8003b4c <HAL_GPIO_Init+0x354>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a80:	4b32      	ldr	r3, [pc, #200]	@ (8003b4c <HAL_GPIO_Init+0x354>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aa4:	4a29      	ldr	r2, [pc, #164]	@ (8003b4c <HAL_GPIO_Init+0x354>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aaa:	4b28      	ldr	r3, [pc, #160]	@ (8003b4c <HAL_GPIO_Init+0x354>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ace:	4a1f      	ldr	r2, [pc, #124]	@ (8003b4c <HAL_GPIO_Init+0x354>)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b4c <HAL_GPIO_Init+0x354>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af8:	4a14      	ldr	r2, [pc, #80]	@ (8003b4c <HAL_GPIO_Init+0x354>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3301      	adds	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b0f      	cmp	r3, #15
 8003b08:	f67f ae86 	bls.w	8003818 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3724      	adds	r7, #36	@ 0x24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40013800 	.word	0x40013800
 8003b24:	40020000 	.word	0x40020000
 8003b28:	40020400 	.word	0x40020400
 8003b2c:	40020800 	.word	0x40020800
 8003b30:	40020c00 	.word	0x40020c00
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40021400 	.word	0x40021400
 8003b3c:	40021800 	.word	0x40021800
 8003b40:	40021c00 	.word	0x40021c00
 8003b44:	40022000 	.word	0x40022000
 8003b48:	40022400 	.word	0x40022400
 8003b4c:	40013c00 	.word	0x40013c00

08003b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	807b      	strh	r3, [r7, #2]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b60:	787b      	ldrb	r3, [r7, #1]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b6c:	e003      	b.n	8003b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b6e:	887b      	ldrh	r3, [r7, #2]
 8003b70:	041a      	lsls	r2, r3, #16
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	619a      	str	r2, [r3, #24]
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b94:	887a      	ldrh	r2, [r7, #2]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	041a      	lsls	r2, r3, #16
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	43d9      	mvns	r1, r3
 8003ba0:	887b      	ldrh	r3, [r7, #2]
 8003ba2:	400b      	ands	r3, r1
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	619a      	str	r2, [r3, #24]
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bbc:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a04      	ldr	r2, [pc, #16]	@ (8003bd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bc6:	6013      	str	r3, [r2, #0]
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40007000 	.word	0x40007000

08003bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003be0:	2300      	movs	r3, #0
 8003be2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e291      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8087 	beq.w	8003d0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bfc:	4b96      	ldr	r3, [pc, #600]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d00c      	beq.n	8003c22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c08:	4b93      	ldr	r3, [pc, #588]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d112      	bne.n	8003c3a <HAL_RCC_OscConfig+0x62>
 8003c14:	4b90      	ldr	r3, [pc, #576]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c20:	d10b      	bne.n	8003c3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c22:	4b8d      	ldr	r3, [pc, #564]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d06c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x130>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d168      	bne.n	8003d08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e26b      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c42:	d106      	bne.n	8003c52 <HAL_RCC_OscConfig+0x7a>
 8003c44:	4b84      	ldr	r3, [pc, #528]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a83      	ldr	r2, [pc, #524]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	e02e      	b.n	8003cb0 <HAL_RCC_OscConfig+0xd8>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x9c>
 8003c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b7c      	ldr	r3, [pc, #496]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a7b      	ldr	r2, [pc, #492]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e01d      	b.n	8003cb0 <HAL_RCC_OscConfig+0xd8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0xc0>
 8003c7e:	4b76      	ldr	r3, [pc, #472]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a75      	ldr	r2, [pc, #468]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b73      	ldr	r3, [pc, #460]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a72      	ldr	r2, [pc, #456]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCC_OscConfig+0xd8>
 8003c98:	4b6f      	ldr	r3, [pc, #444]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a6b      	ldr	r2, [pc, #428]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d013      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7ff f87c 	bl	8002db4 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7ff f878 	bl	8002db4 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	@ 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e21f      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	4b61      	ldr	r3, [pc, #388]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0xe8>
 8003cde:	e014      	b.n	8003d0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7ff f868 	bl	8002db4 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce8:	f7ff f864 	bl	8002db4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	@ 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e20b      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	4b57      	ldr	r3, [pc, #348]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x110>
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d069      	beq.n	8003dea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d16:	4b50      	ldr	r3, [pc, #320]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d22:	4b4d      	ldr	r3, [pc, #308]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d11c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x190>
 8003d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d116      	bne.n	8003d68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3a:	4b47      	ldr	r3, [pc, #284]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d005      	beq.n	8003d52 <HAL_RCC_OscConfig+0x17a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e1df      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d52:	4b41      	ldr	r3, [pc, #260]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	493d      	ldr	r1, [pc, #244]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d66:	e040      	b.n	8003dea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d023      	beq.n	8003db8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d70:	4b39      	ldr	r3, [pc, #228]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a38      	ldr	r2, [pc, #224]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7ff f81a 	bl	8002db4 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d84:	f7ff f816 	bl	8002db4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e1bd      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b30      	ldr	r3, [pc, #192]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4929      	ldr	r1, [pc, #164]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
 8003db6:	e018      	b.n	8003dea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db8:	4b27      	ldr	r3, [pc, #156]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a26      	ldr	r2, [pc, #152]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fff6 	bl	8002db4 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dcc:	f7fe fff2 	bl	8002db4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e199      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dde:	4b1e      	ldr	r3, [pc, #120]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d038      	beq.n	8003e68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d019      	beq.n	8003e32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dfe:	4b16      	ldr	r3, [pc, #88]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e02:	4a15      	ldr	r2, [pc, #84]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0a:	f7fe ffd3 	bl	8002db4 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e12:	f7fe ffcf 	bl	8002db4 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e176      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e24:	4b0c      	ldr	r3, [pc, #48]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x23a>
 8003e30:	e01a      	b.n	8003e68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e32:	4b09      	ldr	r3, [pc, #36]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e36:	4a08      	ldr	r2, [pc, #32]	@ (8003e58 <HAL_RCC_OscConfig+0x280>)
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3e:	f7fe ffb9 	bl	8002db4 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	e00a      	b.n	8003e5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e46:	f7fe ffb5 	bl	8002db4 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d903      	bls.n	8003e5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e15c      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
 8003e58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	4b91      	ldr	r3, [pc, #580]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ee      	bne.n	8003e46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80a4 	beq.w	8003fbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e76:	4b8b      	ldr	r3, [pc, #556]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	4b88      	ldr	r3, [pc, #544]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	4a87      	ldr	r2, [pc, #540]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e8e:	4b85      	ldr	r3, [pc, #532]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9e:	4b82      	ldr	r3, [pc, #520]	@ (80040a8 <HAL_RCC_OscConfig+0x4d0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d118      	bne.n	8003edc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80040a8 <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a7e      	ldr	r2, [pc, #504]	@ (80040a8 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb6:	f7fe ff7d 	bl	8002db4 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ebe:	f7fe ff79 	bl	8002db4 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	@ 0x64
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e120      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed0:	4b75      	ldr	r3, [pc, #468]	@ (80040a8 <HAL_RCC_OscConfig+0x4d0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d106      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x31a>
 8003ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee8:	4a6e      	ldr	r2, [pc, #440]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef0:	e02d      	b.n	8003f4e <HAL_RCC_OscConfig+0x376>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x33c>
 8003efa:	4b6a      	ldr	r3, [pc, #424]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efe:	4a69      	ldr	r2, [pc, #420]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f06:	4b67      	ldr	r3, [pc, #412]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0a:	4a66      	ldr	r2, [pc, #408]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f12:	e01c      	b.n	8003f4e <HAL_RCC_OscConfig+0x376>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b05      	cmp	r3, #5
 8003f1a:	d10c      	bne.n	8003f36 <HAL_RCC_OscConfig+0x35e>
 8003f1c:	4b61      	ldr	r3, [pc, #388]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f20:	4a60      	ldr	r2, [pc, #384]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	f043 0304 	orr.w	r3, r3, #4
 8003f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f28:	4b5e      	ldr	r3, [pc, #376]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2c:	4a5d      	ldr	r2, [pc, #372]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f34:	e00b      	b.n	8003f4e <HAL_RCC_OscConfig+0x376>
 8003f36:	4b5b      	ldr	r3, [pc, #364]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3a:	4a5a      	ldr	r2, [pc, #360]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f42:	4b58      	ldr	r3, [pc, #352]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f46:	4a57      	ldr	r2, [pc, #348]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f48:	f023 0304 	bic.w	r3, r3, #4
 8003f4c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d015      	beq.n	8003f82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fe ff2d 	bl	8002db4 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fe ff29 	bl	8002db4 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e0ce      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f74:	4b4b      	ldr	r3, [pc, #300]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0ee      	beq.n	8003f5e <HAL_RCC_OscConfig+0x386>
 8003f80:	e014      	b.n	8003fac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f82:	f7fe ff17 	bl	8002db4 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8a:	f7fe ff13 	bl	8002db4 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e0b8      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa0:	4b40      	ldr	r3, [pc, #256]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1ee      	bne.n	8003f8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d105      	bne.n	8003fbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	4a3b      	ldr	r2, [pc, #236]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003fb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fbc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 80a4 	beq.w	8004110 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fc8:	4b36      	ldr	r3, [pc, #216]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d06b      	beq.n	80040ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d149      	bne.n	8004070 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fdc:	4b31      	ldr	r3, [pc, #196]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a30      	ldr	r2, [pc, #192]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8003fe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fee4 	bl	8002db4 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fe fee0 	bl	8002db4 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e087      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	4b28      	ldr	r3, [pc, #160]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	019b      	lsls	r3, r3, #6
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	3b01      	subs	r3, #1
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	4313      	orrs	r3, r2
 8004034:	4a1b      	ldr	r2, [pc, #108]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8004036:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800403a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800403c:	4b19      	ldr	r3, [pc, #100]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a18      	ldr	r2, [pc, #96]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8004042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fe feb4 	bl	8002db4 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004050:	f7fe feb0 	bl	8002db4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e057      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b10      	ldr	r3, [pc, #64]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x478>
 800406e:	e04f      	b.n	8004110 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004070:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0b      	ldr	r2, [pc, #44]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8004076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800407a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fe fe9a 	bl	8002db4 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fe fe96 	bl	8002db4 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e03d      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004096:	4b03      	ldr	r3, [pc, #12]	@ (80040a4 <HAL_RCC_OscConfig+0x4cc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x4ac>
 80040a2:	e035      	b.n	8004110 <HAL_RCC_OscConfig+0x538>
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040ac:	4b1b      	ldr	r3, [pc, #108]	@ (800411c <HAL_RCC_OscConfig+0x544>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d028      	beq.n	800410c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d121      	bne.n	800410c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d11a      	bne.n	800410c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d111      	bne.n	800410c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	3b01      	subs	r3, #1
 80040f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0d0      	b.n	80042da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004138:	4b6a      	ldr	r3, [pc, #424]	@ (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d910      	bls.n	8004168 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004146:	4b67      	ldr	r3, [pc, #412]	@ (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 020f 	bic.w	r2, r3, #15
 800414e:	4965      	ldr	r1, [pc, #404]	@ (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b63      	ldr	r3, [pc, #396]	@ (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0b8      	b.n	80042da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d020      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004180:	4b59      	ldr	r3, [pc, #356]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4a58      	ldr	r2, [pc, #352]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004186:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800418a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004198:	4b53      	ldr	r3, [pc, #332]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a52      	ldr	r2, [pc, #328]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 800419e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a4:	4b50      	ldr	r3, [pc, #320]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	494d      	ldr	r1, [pc, #308]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d040      	beq.n	8004244 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	4b47      	ldr	r3, [pc, #284]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d115      	bne.n	8004202 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e07f      	b.n	80042da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e2:	4b41      	ldr	r3, [pc, #260]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e073      	b.n	80042da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f2:	4b3d      	ldr	r3, [pc, #244]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e06b      	b.n	80042da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004202:	4b39      	ldr	r3, [pc, #228]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f023 0203 	bic.w	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4936      	ldr	r1, [pc, #216]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004210:	4313      	orrs	r3, r2
 8004212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004214:	f7fe fdce 	bl	8002db4 <HAL_GetTick>
 8004218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421a:	e00a      	b.n	8004232 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421c:	f7fe fdca 	bl	8002db4 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e053      	b.n	80042da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004232:	4b2d      	ldr	r3, [pc, #180]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 020c 	and.w	r2, r3, #12
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	429a      	cmp	r2, r3
 8004242:	d1eb      	bne.n	800421c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004244:	4b27      	ldr	r3, [pc, #156]	@ (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d210      	bcs.n	8004274 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b24      	ldr	r3, [pc, #144]	@ (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 020f 	bic.w	r2, r3, #15
 800425a:	4922      	ldr	r1, [pc, #136]	@ (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b20      	ldr	r3, [pc, #128]	@ (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e032      	b.n	80042da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004280:	4b19      	ldr	r3, [pc, #100]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4916      	ldr	r1, [pc, #88]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d009      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800429e:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	490e      	ldr	r1, [pc, #56]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042b2:	f000 f821 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 80042b6:	4602      	mov	r2, r0
 80042b8:	4b0b      	ldr	r3, [pc, #44]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	490a      	ldr	r1, [pc, #40]	@ (80042ec <HAL_RCC_ClockConfig+0x1cc>)
 80042c4:	5ccb      	ldrb	r3, [r1, r3]
 80042c6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ca:	4a09      	ldr	r2, [pc, #36]	@ (80042f0 <HAL_RCC_ClockConfig+0x1d0>)
 80042cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ce:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <HAL_RCC_ClockConfig+0x1d4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fd2a 	bl	8002d2c <HAL_InitTick>

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40023c00 	.word	0x40023c00
 80042e8:	40023800 	.word	0x40023800
 80042ec:	080082cc 	.word	0x080082cc
 80042f0:	20000000 	.word	0x20000000
 80042f4:	20000004 	.word	0x20000004

080042f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042fc:	b094      	sub	sp, #80	@ 0x50
 80042fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	647b      	str	r3, [r7, #68]	@ 0x44
 8004304:	2300      	movs	r3, #0
 8004306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004308:	2300      	movs	r3, #0
 800430a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004310:	4b79      	ldr	r3, [pc, #484]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b08      	cmp	r3, #8
 800431a:	d00d      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x40>
 800431c:	2b08      	cmp	r3, #8
 800431e:	f200 80e1 	bhi.w	80044e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x34>
 8004326:	2b04      	cmp	r3, #4
 8004328:	d003      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x3a>
 800432a:	e0db      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800432c:	4b73      	ldr	r3, [pc, #460]	@ (80044fc <HAL_RCC_GetSysClockFreq+0x204>)
 800432e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004330:	e0db      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004332:	4b73      	ldr	r3, [pc, #460]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x208>)
 8004334:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004336:	e0d8      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004338:	4b6f      	ldr	r3, [pc, #444]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004340:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004342:	4b6d      	ldr	r3, [pc, #436]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d063      	beq.n	8004416 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434e:	4b6a      	ldr	r3, [pc, #424]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	2200      	movs	r2, #0
 8004356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004358:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800435a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004360:	633b      	str	r3, [r7, #48]	@ 0x30
 8004362:	2300      	movs	r3, #0
 8004364:	637b      	str	r3, [r7, #52]	@ 0x34
 8004366:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800436a:	4622      	mov	r2, r4
 800436c:	462b      	mov	r3, r5
 800436e:	f04f 0000 	mov.w	r0, #0
 8004372:	f04f 0100 	mov.w	r1, #0
 8004376:	0159      	lsls	r1, r3, #5
 8004378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800437c:	0150      	lsls	r0, r2, #5
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4621      	mov	r1, r4
 8004384:	1a51      	subs	r1, r2, r1
 8004386:	6139      	str	r1, [r7, #16]
 8004388:	4629      	mov	r1, r5
 800438a:	eb63 0301 	sbc.w	r3, r3, r1
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800439c:	4659      	mov	r1, fp
 800439e:	018b      	lsls	r3, r1, #6
 80043a0:	4651      	mov	r1, sl
 80043a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043a6:	4651      	mov	r1, sl
 80043a8:	018a      	lsls	r2, r1, #6
 80043aa:	4651      	mov	r1, sl
 80043ac:	ebb2 0801 	subs.w	r8, r2, r1
 80043b0:	4659      	mov	r1, fp
 80043b2:	eb63 0901 	sbc.w	r9, r3, r1
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ca:	4690      	mov	r8, r2
 80043cc:	4699      	mov	r9, r3
 80043ce:	4623      	mov	r3, r4
 80043d0:	eb18 0303 	adds.w	r3, r8, r3
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	462b      	mov	r3, r5
 80043d8:	eb49 0303 	adc.w	r3, r9, r3
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	f04f 0300 	mov.w	r3, #0
 80043e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043ea:	4629      	mov	r1, r5
 80043ec:	024b      	lsls	r3, r1, #9
 80043ee:	4621      	mov	r1, r4
 80043f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043f4:	4621      	mov	r1, r4
 80043f6:	024a      	lsls	r2, r1, #9
 80043f8:	4610      	mov	r0, r2
 80043fa:	4619      	mov	r1, r3
 80043fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043fe:	2200      	movs	r2, #0
 8004400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004402:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004404:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004408:	f7fb fefe 	bl	8000208 <__aeabi_uldivmod>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4613      	mov	r3, r2
 8004412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004414:	e058      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004416:	4b38      	ldr	r3, [pc, #224]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	099b      	lsrs	r3, r3, #6
 800441c:	2200      	movs	r2, #0
 800441e:	4618      	mov	r0, r3
 8004420:	4611      	mov	r1, r2
 8004422:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004426:	623b      	str	r3, [r7, #32]
 8004428:	2300      	movs	r3, #0
 800442a:	627b      	str	r3, [r7, #36]	@ 0x24
 800442c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004430:	4642      	mov	r2, r8
 8004432:	464b      	mov	r3, r9
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	0159      	lsls	r1, r3, #5
 800443e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004442:	0150      	lsls	r0, r2, #5
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4641      	mov	r1, r8
 800444a:	ebb2 0a01 	subs.w	sl, r2, r1
 800444e:	4649      	mov	r1, r9
 8004450:	eb63 0b01 	sbc.w	fp, r3, r1
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004460:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004464:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004468:	ebb2 040a 	subs.w	r4, r2, sl
 800446c:	eb63 050b 	sbc.w	r5, r3, fp
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	00eb      	lsls	r3, r5, #3
 800447a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800447e:	00e2      	lsls	r2, r4, #3
 8004480:	4614      	mov	r4, r2
 8004482:	461d      	mov	r5, r3
 8004484:	4643      	mov	r3, r8
 8004486:	18e3      	adds	r3, r4, r3
 8004488:	603b      	str	r3, [r7, #0]
 800448a:	464b      	mov	r3, r9
 800448c:	eb45 0303 	adc.w	r3, r5, r3
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800449e:	4629      	mov	r1, r5
 80044a0:	028b      	lsls	r3, r1, #10
 80044a2:	4621      	mov	r1, r4
 80044a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044a8:	4621      	mov	r1, r4
 80044aa:	028a      	lsls	r2, r1, #10
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044b2:	2200      	movs	r2, #0
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	61fa      	str	r2, [r7, #28]
 80044b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044bc:	f7fb fea4 	bl	8000208 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4613      	mov	r3, r2
 80044c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044c8:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	0c1b      	lsrs	r3, r3, #16
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	3301      	adds	r3, #1
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80044d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044e2:	e002      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044e4:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <HAL_RCC_GetSysClockFreq+0x204>)
 80044e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3750      	adds	r7, #80	@ 0x50
 80044f0:	46bd      	mov	sp, r7
 80044f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f6:	bf00      	nop
 80044f8:	40023800 	.word	0x40023800
 80044fc:	00f42400 	.word	0x00f42400
 8004500:	007a1200 	.word	0x007a1200

08004504 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004508:	4b03      	ldr	r3, [pc, #12]	@ (8004518 <HAL_RCC_GetHCLKFreq+0x14>)
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	4618      	mov	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000000 	.word	0x20000000

0800451c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004520:	f7ff fff0 	bl	8004504 <HAL_RCC_GetHCLKFreq>
 8004524:	4602      	mov	r2, r0
 8004526:	4b05      	ldr	r3, [pc, #20]	@ (800453c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	0a9b      	lsrs	r3, r3, #10
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	4903      	ldr	r1, [pc, #12]	@ (8004540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004532:	5ccb      	ldrb	r3, [r1, r3]
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004538:	4618      	mov	r0, r3
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40023800 	.word	0x40023800
 8004540:	080082dc 	.word	0x080082dc

08004544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004548:	f7ff ffdc 	bl	8004504 <HAL_RCC_GetHCLKFreq>
 800454c:	4602      	mov	r2, r0
 800454e:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	0b5b      	lsrs	r3, r3, #13
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	4903      	ldr	r1, [pc, #12]	@ (8004568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800455a:	5ccb      	ldrb	r3, [r1, r3]
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004560:	4618      	mov	r0, r3
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40023800 	.word	0x40023800
 8004568:	080082dc 	.word	0x080082dc

0800456c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d012      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004594:	4b69      	ldr	r3, [pc, #420]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a68      	ldr	r2, [pc, #416]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800459e:	6093      	str	r3, [r2, #8]
 80045a0:	4b66      	ldr	r3, [pc, #408]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a8:	4964      	ldr	r1, [pc, #400]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045b6:	2301      	movs	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d017      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045c6:	4b5d      	ldr	r3, [pc, #372]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d4:	4959      	ldr	r1, [pc, #356]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045e6:	2301      	movs	r3, #1
 80045e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045f2:	2301      	movs	r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d017      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004602:	4b4e      	ldr	r3, [pc, #312]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004608:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	494a      	ldr	r1, [pc, #296]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004620:	d101      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800462e:	2301      	movs	r3, #1
 8004630:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800463e:	2301      	movs	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 808b 	beq.w	8004766 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004650:	4b3a      	ldr	r3, [pc, #232]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	4a39      	ldr	r2, [pc, #228]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800465a:	6413      	str	r3, [r2, #64]	@ 0x40
 800465c:	4b37      	ldr	r3, [pc, #220]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004668:	4b35      	ldr	r3, [pc, #212]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a34      	ldr	r2, [pc, #208]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800466e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004674:	f7fe fb9e 	bl	8002db4 <HAL_GetTick>
 8004678:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800467a:	e008      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467c:	f7fe fb9a 	bl	8002db4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b64      	cmp	r3, #100	@ 0x64
 8004688:	d901      	bls.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e357      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800468e:	4b2c      	ldr	r3, [pc, #176]	@ (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800469a:	4b28      	ldr	r3, [pc, #160]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d035      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d02e      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b8:	4b20      	ldr	r3, [pc, #128]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046c2:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c6:	4a1d      	ldr	r2, [pc, #116]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046cc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ce:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d2:	4a1a      	ldr	r2, [pc, #104]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046da:	4a18      	ldr	r2, [pc, #96]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046e0:	4b16      	ldr	r3, [pc, #88]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d114      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fe fb62 	bl	8002db4 <HAL_GetTick>
 80046f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f2:	e00a      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fe fb5e 	bl	8002db4 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e319      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470a:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0ee      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800471e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004722:	d111      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004724:	4b05      	ldr	r3, [pc, #20]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004730:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004732:	400b      	ands	r3, r1
 8004734:	4901      	ldr	r1, [pc, #4]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
 800473a:	e00b      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800473c:	40023800 	.word	0x40023800
 8004740:	40007000 	.word	0x40007000
 8004744:	0ffffcff 	.word	0x0ffffcff
 8004748:	4baa      	ldr	r3, [pc, #680]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4aa9      	ldr	r2, [pc, #676]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004752:	6093      	str	r3, [r2, #8]
 8004754:	4ba7      	ldr	r3, [pc, #668]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004756:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	49a4      	ldr	r1, [pc, #656]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004762:	4313      	orrs	r3, r2
 8004764:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	d010      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004772:	4ba0      	ldr	r3, [pc, #640]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004778:	4a9e      	ldr	r2, [pc, #632]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800477a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800477e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004782:	4b9c      	ldr	r3, [pc, #624]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004784:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	4999      	ldr	r1, [pc, #612]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047a0:	4b94      	ldr	r3, [pc, #592]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ae:	4991      	ldr	r1, [pc, #580]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047c2:	4b8c      	ldr	r3, [pc, #560]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047d0:	4988      	ldr	r1, [pc, #544]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047e4:	4b83      	ldr	r3, [pc, #524]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047f2:	4980      	ldr	r1, [pc, #512]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004806:	4b7b      	ldr	r3, [pc, #492]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004814:	4977      	ldr	r1, [pc, #476]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004828:	4b72      	ldr	r3, [pc, #456]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482e:	f023 0203 	bic.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004836:	496f      	ldr	r1, [pc, #444]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800484a:	4b6a      	ldr	r3, [pc, #424]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004850:	f023 020c 	bic.w	r2, r3, #12
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004858:	4966      	ldr	r1, [pc, #408]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800486c:	4b61      	ldr	r3, [pc, #388]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004872:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487a:	495e      	ldr	r1, [pc, #376]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800488e:	4b59      	ldr	r3, [pc, #356]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004894:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489c:	4955      	ldr	r1, [pc, #340]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048b0:	4b50      	ldr	r3, [pc, #320]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048be:	494d      	ldr	r1, [pc, #308]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048d2:	4b48      	ldr	r3, [pc, #288]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e0:	4944      	ldr	r1, [pc, #272]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048f4:	4b3f      	ldr	r3, [pc, #252]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004902:	493c      	ldr	r1, [pc, #240]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004916:	4b37      	ldr	r3, [pc, #220]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004924:	4933      	ldr	r1, [pc, #204]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004938:	4b2e      	ldr	r3, [pc, #184]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004946:	492b      	ldr	r1, [pc, #172]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d011      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800495a:	4b26      	ldr	r3, [pc, #152]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004960:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004968:	4922      	ldr	r1, [pc, #136]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004978:	d101      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800498a:	2301      	movs	r3, #1
 800498c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800499a:	4b16      	ldr	r3, [pc, #88]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a8:	4912      	ldr	r1, [pc, #72]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00b      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049bc:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049cc:	4909      	ldr	r1, [pc, #36]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d006      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80d9 	beq.w	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049e8:	4b02      	ldr	r3, [pc, #8]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a01      	ldr	r2, [pc, #4]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049f2:	e001      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80049f4:	40023800 	.word	0x40023800
 80049f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fa:	f7fe f9db 	bl	8002db4 <HAL_GetTick>
 80049fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a00:	e008      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a02:	f7fe f9d7 	bl	8002db4 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b64      	cmp	r3, #100	@ 0x64
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e194      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a14:	4b6c      	ldr	r3, [pc, #432]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f0      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d021      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d11d      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a34:	4b64      	ldr	r3, [pc, #400]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a3a:	0c1b      	lsrs	r3, r3, #16
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a42:	4b61      	ldr	r3, [pc, #388]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a48:	0e1b      	lsrs	r3, r3, #24
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	019a      	lsls	r2, r3, #6
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	061b      	lsls	r3, r3, #24
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	071b      	lsls	r3, r3, #28
 8004a68:	4957      	ldr	r1, [pc, #348]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d004      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d02e      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a9a:	d129      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a9c:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aa2:	0c1b      	lsrs	r3, r3, #16
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004aaa:	4b47      	ldr	r3, [pc, #284]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ab0:	0f1b      	lsrs	r3, r3, #28
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	019a      	lsls	r2, r3, #6
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	041b      	lsls	r3, r3, #16
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	061b      	lsls	r3, r3, #24
 8004aca:	431a      	orrs	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	071b      	lsls	r3, r3, #28
 8004ad0:	493d      	ldr	r1, [pc, #244]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ade:	f023 021f 	bic.w	r2, r3, #31
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	4937      	ldr	r1, [pc, #220]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d01d      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004afc:	4b32      	ldr	r3, [pc, #200]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b02:	0e1b      	lsrs	r3, r3, #24
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b10:	0f1b      	lsrs	r3, r3, #28
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	019a      	lsls	r2, r3, #6
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	431a      	orrs	r2, r3
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	071b      	lsls	r3, r3, #28
 8004b30:	4925      	ldr	r1, [pc, #148]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d011      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	019a      	lsls	r2, r3, #6
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	061b      	lsls	r3, r3, #24
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	071b      	lsls	r3, r3, #28
 8004b60:	4919      	ldr	r1, [pc, #100]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b68:	4b17      	ldr	r3, [pc, #92]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a16      	ldr	r2, [pc, #88]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b74:	f7fe f91e 	bl	8002db4 <HAL_GetTick>
 8004b78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b7c:	f7fe f91a 	bl	8002db4 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b64      	cmp	r3, #100	@ 0x64
 8004b88:	d901      	bls.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e0d7      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	f040 80cd 	bne.w	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ba2:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a08      	ldr	r2, [pc, #32]	@ (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bae:	f7fe f901 	bl	8002db4 <HAL_GetTick>
 8004bb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bb6:	f7fe f8fd 	bl	8002db4 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b64      	cmp	r3, #100	@ 0x64
 8004bc2:	d903      	bls.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e0ba      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004bc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bd8:	d0ed      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d02e      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d12a      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c02:	4b51      	ldr	r3, [pc, #324]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c10:	4b4d      	ldr	r3, [pc, #308]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c16:	0f1b      	lsrs	r3, r3, #28
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	019a      	lsls	r2, r3, #6
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	061b      	lsls	r3, r3, #24
 8004c30:	431a      	orrs	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	071b      	lsls	r3, r3, #28
 8004c36:	4944      	ldr	r1, [pc, #272]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c3e:	4b42      	ldr	r3, [pc, #264]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c44:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	493d      	ldr	r1, [pc, #244]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d022      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c6c:	d11d      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c6e:	4b36      	ldr	r3, [pc, #216]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c74:	0e1b      	lsrs	r3, r3, #24
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c7c:	4b32      	ldr	r3, [pc, #200]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	0f1b      	lsrs	r3, r3, #28
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	019a      	lsls	r2, r3, #6
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	431a      	orrs	r2, r3
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	061b      	lsls	r3, r3, #24
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	071b      	lsls	r3, r3, #28
 8004ca2:	4929      	ldr	r1, [pc, #164]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d028      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cb6:	4b24      	ldr	r3, [pc, #144]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbc:	0e1b      	lsrs	r3, r3, #24
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cc4:	4b20      	ldr	r3, [pc, #128]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cca:	0c1b      	lsrs	r3, r3, #16
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	019a      	lsls	r2, r3, #6
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	041b      	lsls	r3, r3, #16
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	071b      	lsls	r3, r3, #28
 8004cea:	4917      	ldr	r1, [pc, #92]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004cf2:	4b15      	ldr	r3, [pc, #84]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cf8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	4911      	ldr	r1, [pc, #68]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d08:	4b0f      	ldr	r3, [pc, #60]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d14:	f7fe f84e 	bl	8002db4 <HAL_GetTick>
 8004d18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d1c:	f7fe f84a 	bl	8002db4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	@ 0x64
 8004d28:	d901      	bls.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e007      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d2e:	4b06      	ldr	r3, [pc, #24]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d3a:	d1ef      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800

08004d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e049      	b.n	8004df2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fd fdbc 	bl	80028f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	f000 faa8 	bl	80052e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d001      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e054      	b.n	8004ebe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a26      	ldr	r2, [pc, #152]	@ (8004ecc <HAL_TIM_Base_Start_IT+0xd0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d022      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x80>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3e:	d01d      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x80>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a22      	ldr	r2, [pc, #136]	@ (8004ed0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d018      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x80>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a21      	ldr	r2, [pc, #132]	@ (8004ed4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x80>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x80>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1e      	ldr	r2, [pc, #120]	@ (8004edc <HAL_TIM_Base_Start_IT+0xe0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x80>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0x80>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d115      	bne.n	8004ea8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	4b19      	ldr	r3, [pc, #100]	@ (8004ee8 <HAL_TIM_Base_Start_IT+0xec>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d015      	beq.n	8004eba <HAL_TIM_Base_Start_IT+0xbe>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e94:	d011      	beq.n	8004eba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0201 	orr.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea6:	e008      	b.n	8004eba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	e000      	b.n	8004ebc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00
 8004edc:	40010400 	.word	0x40010400
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	40001800 	.word	0x40001800
 8004ee8:	00010007 	.word	0x00010007

08004eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d020      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01b      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0202 	mvn.w	r2, #2
 8004f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f9b4 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 8004f3c:	e005      	b.n	8004f4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f9a6 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f9b7 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d020      	beq.n	8004f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01b      	beq.n	8004f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0204 	mvn.w	r2, #4
 8004f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f98e 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 8004f88:	e005      	b.n	8004f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f980 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f991 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d020      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01b      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0208 	mvn.w	r2, #8
 8004fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f968 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 8004fd4:	e005      	b.n	8004fe2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f95a 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f96b 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 0310 	and.w	r3, r3, #16
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d020      	beq.n	8005034 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01b      	beq.n	8005034 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0210 	mvn.w	r2, #16
 8005004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2208      	movs	r2, #8
 800500a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f942 	bl	80052a4 <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f934 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f945 	bl	80052b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00c      	beq.n	8005058 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0201 	mvn.w	r2, #1
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fb fa94 	bl	8000580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00c      	beq.n	8005086 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800507e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fb0b 	bl	800569c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fb03 	bl	80056b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00c      	beq.n	80050ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f8ff 	bl	80052cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00c      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 0320 	and.w	r3, r3, #32
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f06f 0220 	mvn.w	r2, #32
 80050ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 facb 	bl	8005688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_TIM_ConfigClockSource+0x1c>
 8005114:	2302      	movs	r3, #2
 8005116:	e0b4      	b.n	8005282 <HAL_TIM_ConfigClockSource+0x186>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	4b56      	ldr	r3, [pc, #344]	@ (800528c <HAL_TIM_ConfigClockSource+0x190>)
 8005134:	4013      	ands	r3, r2
 8005136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800513e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005150:	d03e      	beq.n	80051d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005156:	f200 8087 	bhi.w	8005268 <HAL_TIM_ConfigClockSource+0x16c>
 800515a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800515e:	f000 8086 	beq.w	800526e <HAL_TIM_ConfigClockSource+0x172>
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005166:	d87f      	bhi.n	8005268 <HAL_TIM_ConfigClockSource+0x16c>
 8005168:	2b70      	cmp	r3, #112	@ 0x70
 800516a:	d01a      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0xa6>
 800516c:	2b70      	cmp	r3, #112	@ 0x70
 800516e:	d87b      	bhi.n	8005268 <HAL_TIM_ConfigClockSource+0x16c>
 8005170:	2b60      	cmp	r3, #96	@ 0x60
 8005172:	d050      	beq.n	8005216 <HAL_TIM_ConfigClockSource+0x11a>
 8005174:	2b60      	cmp	r3, #96	@ 0x60
 8005176:	d877      	bhi.n	8005268 <HAL_TIM_ConfigClockSource+0x16c>
 8005178:	2b50      	cmp	r3, #80	@ 0x50
 800517a:	d03c      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0xfa>
 800517c:	2b50      	cmp	r3, #80	@ 0x50
 800517e:	d873      	bhi.n	8005268 <HAL_TIM_ConfigClockSource+0x16c>
 8005180:	2b40      	cmp	r3, #64	@ 0x40
 8005182:	d058      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0x13a>
 8005184:	2b40      	cmp	r3, #64	@ 0x40
 8005186:	d86f      	bhi.n	8005268 <HAL_TIM_ConfigClockSource+0x16c>
 8005188:	2b30      	cmp	r3, #48	@ 0x30
 800518a:	d064      	beq.n	8005256 <HAL_TIM_ConfigClockSource+0x15a>
 800518c:	2b30      	cmp	r3, #48	@ 0x30
 800518e:	d86b      	bhi.n	8005268 <HAL_TIM_ConfigClockSource+0x16c>
 8005190:	2b20      	cmp	r3, #32
 8005192:	d060      	beq.n	8005256 <HAL_TIM_ConfigClockSource+0x15a>
 8005194:	2b20      	cmp	r3, #32
 8005196:	d867      	bhi.n	8005268 <HAL_TIM_ConfigClockSource+0x16c>
 8005198:	2b00      	cmp	r3, #0
 800519a:	d05c      	beq.n	8005256 <HAL_TIM_ConfigClockSource+0x15a>
 800519c:	2b10      	cmp	r3, #16
 800519e:	d05a      	beq.n	8005256 <HAL_TIM_ConfigClockSource+0x15a>
 80051a0:	e062      	b.n	8005268 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051b2:	f000 f9bb 	bl	800552c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	609a      	str	r2, [r3, #8]
      break;
 80051ce:	e04f      	b.n	8005270 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051e0:	f000 f9a4 	bl	800552c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051f2:	609a      	str	r2, [r3, #8]
      break;
 80051f4:	e03c      	b.n	8005270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005202:	461a      	mov	r2, r3
 8005204:	f000 f918 	bl	8005438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2150      	movs	r1, #80	@ 0x50
 800520e:	4618      	mov	r0, r3
 8005210:	f000 f971 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8005214:	e02c      	b.n	8005270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005222:	461a      	mov	r2, r3
 8005224:	f000 f937 	bl	8005496 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2160      	movs	r1, #96	@ 0x60
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f961 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8005234:	e01c      	b.n	8005270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005242:	461a      	mov	r2, r3
 8005244:	f000 f8f8 	bl	8005438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2140      	movs	r1, #64	@ 0x40
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f951 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8005254:	e00c      	b.n	8005270 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f000 f948 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8005266:	e003      	b.n	8005270 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	73fb      	strb	r3, [r7, #15]
      break;
 800526c:	e000      	b.n	8005270 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800526e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	fffeff88 	.word	0xfffeff88

08005290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a46      	ldr	r2, [pc, #280]	@ (800540c <TIM_Base_SetConfig+0x12c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fe:	d00f      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a43      	ldr	r2, [pc, #268]	@ (8005410 <TIM_Base_SetConfig+0x130>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00b      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a42      	ldr	r2, [pc, #264]	@ (8005414 <TIM_Base_SetConfig+0x134>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d007      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a41      	ldr	r2, [pc, #260]	@ (8005418 <TIM_Base_SetConfig+0x138>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a40      	ldr	r2, [pc, #256]	@ (800541c <TIM_Base_SetConfig+0x13c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d108      	bne.n	8005332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a35      	ldr	r2, [pc, #212]	@ (800540c <TIM_Base_SetConfig+0x12c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d02b      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005340:	d027      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a32      	ldr	r2, [pc, #200]	@ (8005410 <TIM_Base_SetConfig+0x130>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d023      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a31      	ldr	r2, [pc, #196]	@ (8005414 <TIM_Base_SetConfig+0x134>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01f      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a30      	ldr	r2, [pc, #192]	@ (8005418 <TIM_Base_SetConfig+0x138>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01b      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a2f      	ldr	r2, [pc, #188]	@ (800541c <TIM_Base_SetConfig+0x13c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d017      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a2e      	ldr	r2, [pc, #184]	@ (8005420 <TIM_Base_SetConfig+0x140>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d013      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a2d      	ldr	r2, [pc, #180]	@ (8005424 <TIM_Base_SetConfig+0x144>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00f      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a2c      	ldr	r2, [pc, #176]	@ (8005428 <TIM_Base_SetConfig+0x148>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00b      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a2b      	ldr	r2, [pc, #172]	@ (800542c <TIM_Base_SetConfig+0x14c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2a      	ldr	r2, [pc, #168]	@ (8005430 <TIM_Base_SetConfig+0x150>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a29      	ldr	r2, [pc, #164]	@ (8005434 <TIM_Base_SetConfig+0x154>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d108      	bne.n	80053a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a10      	ldr	r2, [pc, #64]	@ (800540c <TIM_Base_SetConfig+0x12c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_Base_SetConfig+0xf8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a12      	ldr	r2, [pc, #72]	@ (800541c <TIM_Base_SetConfig+0x13c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d103      	bne.n	80053e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d105      	bne.n	80053fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f023 0201 	bic.w	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	611a      	str	r2, [r3, #16]
  }
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000
 8005410:	40000400 	.word	0x40000400
 8005414:	40000800 	.word	0x40000800
 8005418:	40000c00 	.word	0x40000c00
 800541c:	40010400 	.word	0x40010400
 8005420:	40014000 	.word	0x40014000
 8005424:	40014400 	.word	0x40014400
 8005428:	40014800 	.word	0x40014800
 800542c:	40001800 	.word	0x40001800
 8005430:	40001c00 	.word	0x40001c00
 8005434:	40002000 	.word	0x40002000

08005438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f023 0201 	bic.w	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 030a 	bic.w	r3, r3, #10
 8005474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005496:	b480      	push	{r7}
 8005498:	b087      	sub	sp, #28
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f023 0210 	bic.w	r2, r3, #16
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	031b      	lsls	r3, r3, #12
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	f043 0307 	orr.w	r3, r3, #7
 8005518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	609a      	str	r2, [r3, #8]
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	021a      	lsls	r2, r3, #8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	431a      	orrs	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	609a      	str	r2, [r3, #8]
}
 8005560:	bf00      	nop
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005580:	2302      	movs	r3, #2
 8005582:	e06d      	b.n	8005660 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a30      	ldr	r2, [pc, #192]	@ (800566c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005670 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d108      	bne.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80055be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a20      	ldr	r2, [pc, #128]	@ (800566c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d022      	beq.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f6:	d01d      	beq.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005674 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d018      	beq.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a1c      	ldr	r2, [pc, #112]	@ (8005678 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d013      	beq.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1a      	ldr	r2, [pc, #104]	@ (800567c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00e      	beq.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a15      	ldr	r2, [pc, #84]	@ (8005670 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d009      	beq.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a16      	ldr	r2, [pc, #88]	@ (8005680 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a15      	ldr	r2, [pc, #84]	@ (8005684 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d10c      	bne.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800563a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40010000 	.word	0x40010000
 8005670:	40010400 	.word	0x40010400
 8005674:	40000400 	.word	0x40000400
 8005678:	40000800 	.word	0x40000800
 800567c:	40000c00 	.word	0x40000c00
 8005680:	40014000 	.word	0x40014000
 8005684:	40001800 	.word	0x40001800

08005688 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e040      	b.n	8005758 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fd f928 	bl	800293c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2224      	movs	r2, #36	@ 0x24
 80056f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0201 	bic.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 feca 	bl	80064a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fc63 	bl	8005fdc <UART_SetConfig>
 8005716:	4603      	mov	r3, r0
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e01b      	b.n	8005758 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800572e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800573e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 ff49 	bl	80065e8 <UART_CheckIdleState>
 8005756:	4603      	mov	r3, r0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e048      	b.n	8005804 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fd f8da 	bl	800293c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2224      	movs	r2, #36	@ 0x24
 800578c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0201 	bic.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fe7c 	bl	80064a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fc15 	bl	8005fdc <UART_SetConfig>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e023      	b.n	8005804 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80057da:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0208 	orr.w	r2, r2, #8
 80057ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fef3 	bl	80065e8 <UART_CheckIdleState>
 8005802:	4603      	mov	r3, r0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800580c:	b480      	push	{r7}
 800580e:	b08b      	sub	sp, #44	@ 0x2c
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800581e:	2b20      	cmp	r3, #32
 8005820:	d147      	bne.n	80058b2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <HAL_UART_Transmit_IT+0x22>
 8005828:	88fb      	ldrh	r3, [r7, #6]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e040      	b.n	80058b4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2221      	movs	r2, #33	@ 0x21
 800585a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005864:	d107      	bne.n	8005876 <HAL_UART_Transmit_IT+0x6a>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4a13      	ldr	r2, [pc, #76]	@ (80058c0 <HAL_UART_Transmit_IT+0xb4>)
 8005872:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005874:	e002      	b.n	800587c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a12      	ldr	r2, [pc, #72]	@ (80058c4 <HAL_UART_Transmit_IT+0xb8>)
 800587a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	613b      	str	r3, [r7, #16]
   return(result);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	69f9      	ldr	r1, [r7, #28]
 80058a0:	6a3a      	ldr	r2, [r7, #32]
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e6      	bne.n	800587c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e000      	b.n	80058b4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
  }
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	372c      	adds	r7, #44	@ 0x2c
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	08006aa7 	.word	0x08006aa7
 80058c4:	080069f1 	.word	0x080069f1

080058c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b0ba      	sub	sp, #232	@ 0xe8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80058f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80058f6:	4013      	ands	r3, r2
 80058f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80058fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d115      	bne.n	8005930 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00f      	beq.n	8005930 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d009      	beq.n	8005930 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8297 	beq.w	8005e54 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
      }
      return;
 800592e:	e291      	b.n	8005e54 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8117 	beq.w	8005b68 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800593a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005946:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800594a:	4b85      	ldr	r3, [pc, #532]	@ (8005b60 <HAL_UART_IRQHandler+0x298>)
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 810a 	beq.w	8005b68 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d011      	beq.n	8005984 <HAL_UART_IRQHandler+0xbc>
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800597a:	f043 0201 	orr.w	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d011      	beq.n	80059b4 <HAL_UART_IRQHandler+0xec>
 8005990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2202      	movs	r2, #2
 80059a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059aa:	f043 0204 	orr.w	r2, r3, #4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d011      	beq.n	80059e4 <HAL_UART_IRQHandler+0x11c>
 80059c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2204      	movs	r2, #4
 80059d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059da:	f043 0202 	orr.w	r2, r3, #2
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d017      	beq.n	8005a20 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d105      	bne.n	8005a08 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00b      	beq.n	8005a20 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a16:	f043 0208 	orr.w	r2, r3, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d012      	beq.n	8005a52 <HAL_UART_IRQHandler+0x18a>
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00c      	beq.n	8005a52 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 81fd 	beq.w	8005e58 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00d      	beq.n	8005a86 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9a:	2b40      	cmp	r3, #64	@ 0x40
 8005a9c:	d005      	beq.n	8005aaa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aa2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d04f      	beq.n	8005b4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 ff26 	bl	80068fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aba:	2b40      	cmp	r3, #64	@ 0x40
 8005abc:	d141      	bne.n	8005b42 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005aea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005aee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005af6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1d9      	bne.n	8005abe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d013      	beq.n	8005b3a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b16:	4a13      	ldr	r2, [pc, #76]	@ (8005b64 <HAL_UART_IRQHandler+0x29c>)
 8005b18:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fd faf9 	bl	8003116 <HAL_DMA_Abort_IT>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d017      	beq.n	8005b5a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b34:	4610      	mov	r0, r2
 8005b36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	e00f      	b.n	8005b5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9a0 	bl	8005e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e00b      	b.n	8005b5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f99c 	bl	8005e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e007      	b.n	8005b5a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f998 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005b58:	e17e      	b.n	8005e58 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5a:	bf00      	nop
    return;
 8005b5c:	e17c      	b.n	8005e58 <HAL_UART_IRQHandler+0x590>
 8005b5e:	bf00      	nop
 8005b60:	04000120 	.word	0x04000120
 8005b64:	080069c5 	.word	0x080069c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	f040 814c 	bne.w	8005e0a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8145 	beq.w	8005e0a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 813e 	beq.w	8005e0a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2210      	movs	r2, #16
 8005b94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba0:	2b40      	cmp	r3, #64	@ 0x40
 8005ba2:	f040 80b6 	bne.w	8005d12 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bb2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 8150 	beq.w	8005e5c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	f080 8148 	bcs.w	8005e5c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005be0:	f000 8086 	beq.w	8005cf0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005c0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c12:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1da      	bne.n	8005be4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3308      	adds	r3, #8
 8005c34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c40:	f023 0301 	bic.w	r3, r3, #1
 8005c44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e1      	bne.n	8005c2e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e3      	bne.n	8005c6a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc0:	f023 0310 	bic.w	r3, r3, #16
 8005cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cd4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e4      	bne.n	8005cb0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fd f9a3 	bl	8003036 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fa fbf4 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d10:	e0a4      	b.n	8005e5c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 8096 	beq.w	8005e60 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8091 	beq.w	8005e60 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e4      	bne.n	8005d3e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	623b      	str	r3, [r7, #32]
   return(result);
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	f023 0301 	bic.w	r3, r3, #1
 8005d8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3308      	adds	r3, #8
 8005d94:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d98:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e3      	bne.n	8005d74 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f023 0310 	bic.w	r3, r3, #16
 8005dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	69b9      	ldr	r1, [r7, #24]
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	617b      	str	r3, [r7, #20]
   return(result);
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e4      	bne.n	8005dc0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e00:	4619      	mov	r1, r3
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fa fb78 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e08:	e02a      	b.n	8005e60 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00e      	beq.n	8005e34 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d008      	beq.n	8005e34 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01c      	beq.n	8005e64 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	4798      	blx	r3
    }
    return;
 8005e32:	e017      	b.n	8005e64 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d012      	beq.n	8005e66 <HAL_UART_IRQHandler+0x59e>
 8005e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00c      	beq.n	8005e66 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fe8a 	bl	8006b66 <UART_EndTransmit_IT>
    return;
 8005e52:	e008      	b.n	8005e66 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e54:	bf00      	nop
 8005e56:	e006      	b.n	8005e66 <HAL_UART_IRQHandler+0x59e>
    return;
 8005e58:	bf00      	nop
 8005e5a:	e004      	b.n	8005e66 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e5c:	bf00      	nop
 8005e5e:	e002      	b.n	8005e66 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e60:	bf00      	nop
 8005e62:	e000      	b.n	8005e66 <HAL_UART_IRQHandler+0x59e>
    return;
 8005e64:	bf00      	nop
  }

}
 8005e66:	37e8      	adds	r7, #232	@ 0xe8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b08f      	sub	sp, #60	@ 0x3c
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_HalfDuplex_EnableTransmitter+0x16>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e040      	b.n	8005f2c <HAL_HalfDuplex_EnableTransmitter+0x98>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_BUSY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2224      	movs	r2, #36	@ 0x24
 8005eb6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f023 030c 	bic.w	r3, r3, #12
 8005ecc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ed8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e6      	bne.n	8005eb8 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f043 0308 	orr.w	r3, r3, #8
 8005efe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6979      	ldr	r1, [r7, #20]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	613b      	str	r3, [r7, #16]
   return(result);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e6      	bne.n	8005eea <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UNLOCK(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	373c      	adds	r7, #60	@ 0x3c
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b08f      	sub	sp, #60	@ 0x3c
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_HalfDuplex_EnableReceiver+0x16>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e040      	b.n	8005fd0 <HAL_HalfDuplex_EnableReceiver+0x98>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2224      	movs	r2, #36	@ 0x24
 8005f5a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f023 030c 	bic.w	r3, r3, #12
 8005f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f7c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e6      	bne.n	8005f5c <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f043 0304 	orr.w	r3, r3, #4
 8005fa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	6979      	ldr	r1, [r7, #20]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	e841 2300 	strex	r3, r2, [r1]
 8005fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1e6      	bne.n	8005f8e <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UNLOCK(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	373c      	adds	r7, #60	@ 0x3c
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4ba6      	ldr	r3, [pc, #664]	@ (80062a0 <UART_SetConfig+0x2c4>)
 8006008:	4013      	ands	r3, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	6979      	ldr	r1, [r7, #20]
 8006010:	430b      	orrs	r3, r1
 8006012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	430a      	orrs	r2, r1
 800604c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a94      	ldr	r2, [pc, #592]	@ (80062a4 <UART_SetConfig+0x2c8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d120      	bne.n	800609a <UART_SetConfig+0xbe>
 8006058:	4b93      	ldr	r3, [pc, #588]	@ (80062a8 <UART_SetConfig+0x2cc>)
 800605a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b03      	cmp	r3, #3
 8006064:	d816      	bhi.n	8006094 <UART_SetConfig+0xb8>
 8006066:	a201      	add	r2, pc, #4	@ (adr r2, 800606c <UART_SetConfig+0x90>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	0800607d 	.word	0x0800607d
 8006070:	08006089 	.word	0x08006089
 8006074:	08006083 	.word	0x08006083
 8006078:	0800608f 	.word	0x0800608f
 800607c:	2301      	movs	r3, #1
 800607e:	77fb      	strb	r3, [r7, #31]
 8006080:	e150      	b.n	8006324 <UART_SetConfig+0x348>
 8006082:	2302      	movs	r3, #2
 8006084:	77fb      	strb	r3, [r7, #31]
 8006086:	e14d      	b.n	8006324 <UART_SetConfig+0x348>
 8006088:	2304      	movs	r3, #4
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e14a      	b.n	8006324 <UART_SetConfig+0x348>
 800608e:	2308      	movs	r3, #8
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e147      	b.n	8006324 <UART_SetConfig+0x348>
 8006094:	2310      	movs	r3, #16
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e144      	b.n	8006324 <UART_SetConfig+0x348>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a83      	ldr	r2, [pc, #524]	@ (80062ac <UART_SetConfig+0x2d0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d132      	bne.n	800610a <UART_SetConfig+0x12e>
 80060a4:	4b80      	ldr	r3, [pc, #512]	@ (80062a8 <UART_SetConfig+0x2cc>)
 80060a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b0c      	cmp	r3, #12
 80060b0:	d828      	bhi.n	8006104 <UART_SetConfig+0x128>
 80060b2:	a201      	add	r2, pc, #4	@ (adr r2, 80060b8 <UART_SetConfig+0xdc>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060ed 	.word	0x080060ed
 80060bc:	08006105 	.word	0x08006105
 80060c0:	08006105 	.word	0x08006105
 80060c4:	08006105 	.word	0x08006105
 80060c8:	080060f9 	.word	0x080060f9
 80060cc:	08006105 	.word	0x08006105
 80060d0:	08006105 	.word	0x08006105
 80060d4:	08006105 	.word	0x08006105
 80060d8:	080060f3 	.word	0x080060f3
 80060dc:	08006105 	.word	0x08006105
 80060e0:	08006105 	.word	0x08006105
 80060e4:	08006105 	.word	0x08006105
 80060e8:	080060ff 	.word	0x080060ff
 80060ec:	2300      	movs	r3, #0
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	e118      	b.n	8006324 <UART_SetConfig+0x348>
 80060f2:	2302      	movs	r3, #2
 80060f4:	77fb      	strb	r3, [r7, #31]
 80060f6:	e115      	b.n	8006324 <UART_SetConfig+0x348>
 80060f8:	2304      	movs	r3, #4
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e112      	b.n	8006324 <UART_SetConfig+0x348>
 80060fe:	2308      	movs	r3, #8
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e10f      	b.n	8006324 <UART_SetConfig+0x348>
 8006104:	2310      	movs	r3, #16
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e10c      	b.n	8006324 <UART_SetConfig+0x348>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a68      	ldr	r2, [pc, #416]	@ (80062b0 <UART_SetConfig+0x2d4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d120      	bne.n	8006156 <UART_SetConfig+0x17a>
 8006114:	4b64      	ldr	r3, [pc, #400]	@ (80062a8 <UART_SetConfig+0x2cc>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800611e:	2b30      	cmp	r3, #48	@ 0x30
 8006120:	d013      	beq.n	800614a <UART_SetConfig+0x16e>
 8006122:	2b30      	cmp	r3, #48	@ 0x30
 8006124:	d814      	bhi.n	8006150 <UART_SetConfig+0x174>
 8006126:	2b20      	cmp	r3, #32
 8006128:	d009      	beq.n	800613e <UART_SetConfig+0x162>
 800612a:	2b20      	cmp	r3, #32
 800612c:	d810      	bhi.n	8006150 <UART_SetConfig+0x174>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <UART_SetConfig+0x15c>
 8006132:	2b10      	cmp	r3, #16
 8006134:	d006      	beq.n	8006144 <UART_SetConfig+0x168>
 8006136:	e00b      	b.n	8006150 <UART_SetConfig+0x174>
 8006138:	2300      	movs	r3, #0
 800613a:	77fb      	strb	r3, [r7, #31]
 800613c:	e0f2      	b.n	8006324 <UART_SetConfig+0x348>
 800613e:	2302      	movs	r3, #2
 8006140:	77fb      	strb	r3, [r7, #31]
 8006142:	e0ef      	b.n	8006324 <UART_SetConfig+0x348>
 8006144:	2304      	movs	r3, #4
 8006146:	77fb      	strb	r3, [r7, #31]
 8006148:	e0ec      	b.n	8006324 <UART_SetConfig+0x348>
 800614a:	2308      	movs	r3, #8
 800614c:	77fb      	strb	r3, [r7, #31]
 800614e:	e0e9      	b.n	8006324 <UART_SetConfig+0x348>
 8006150:	2310      	movs	r3, #16
 8006152:	77fb      	strb	r3, [r7, #31]
 8006154:	e0e6      	b.n	8006324 <UART_SetConfig+0x348>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a56      	ldr	r2, [pc, #344]	@ (80062b4 <UART_SetConfig+0x2d8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d120      	bne.n	80061a2 <UART_SetConfig+0x1c6>
 8006160:	4b51      	ldr	r3, [pc, #324]	@ (80062a8 <UART_SetConfig+0x2cc>)
 8006162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006166:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800616a:	2bc0      	cmp	r3, #192	@ 0xc0
 800616c:	d013      	beq.n	8006196 <UART_SetConfig+0x1ba>
 800616e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006170:	d814      	bhi.n	800619c <UART_SetConfig+0x1c0>
 8006172:	2b80      	cmp	r3, #128	@ 0x80
 8006174:	d009      	beq.n	800618a <UART_SetConfig+0x1ae>
 8006176:	2b80      	cmp	r3, #128	@ 0x80
 8006178:	d810      	bhi.n	800619c <UART_SetConfig+0x1c0>
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <UART_SetConfig+0x1a8>
 800617e:	2b40      	cmp	r3, #64	@ 0x40
 8006180:	d006      	beq.n	8006190 <UART_SetConfig+0x1b4>
 8006182:	e00b      	b.n	800619c <UART_SetConfig+0x1c0>
 8006184:	2300      	movs	r3, #0
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e0cc      	b.n	8006324 <UART_SetConfig+0x348>
 800618a:	2302      	movs	r3, #2
 800618c:	77fb      	strb	r3, [r7, #31]
 800618e:	e0c9      	b.n	8006324 <UART_SetConfig+0x348>
 8006190:	2304      	movs	r3, #4
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e0c6      	b.n	8006324 <UART_SetConfig+0x348>
 8006196:	2308      	movs	r3, #8
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e0c3      	b.n	8006324 <UART_SetConfig+0x348>
 800619c:	2310      	movs	r3, #16
 800619e:	77fb      	strb	r3, [r7, #31]
 80061a0:	e0c0      	b.n	8006324 <UART_SetConfig+0x348>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a44      	ldr	r2, [pc, #272]	@ (80062b8 <UART_SetConfig+0x2dc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d125      	bne.n	80061f8 <UART_SetConfig+0x21c>
 80061ac:	4b3e      	ldr	r3, [pc, #248]	@ (80062a8 <UART_SetConfig+0x2cc>)
 80061ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061ba:	d017      	beq.n	80061ec <UART_SetConfig+0x210>
 80061bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061c0:	d817      	bhi.n	80061f2 <UART_SetConfig+0x216>
 80061c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061c6:	d00b      	beq.n	80061e0 <UART_SetConfig+0x204>
 80061c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061cc:	d811      	bhi.n	80061f2 <UART_SetConfig+0x216>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <UART_SetConfig+0x1fe>
 80061d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061d6:	d006      	beq.n	80061e6 <UART_SetConfig+0x20a>
 80061d8:	e00b      	b.n	80061f2 <UART_SetConfig+0x216>
 80061da:	2300      	movs	r3, #0
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e0a1      	b.n	8006324 <UART_SetConfig+0x348>
 80061e0:	2302      	movs	r3, #2
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e09e      	b.n	8006324 <UART_SetConfig+0x348>
 80061e6:	2304      	movs	r3, #4
 80061e8:	77fb      	strb	r3, [r7, #31]
 80061ea:	e09b      	b.n	8006324 <UART_SetConfig+0x348>
 80061ec:	2308      	movs	r3, #8
 80061ee:	77fb      	strb	r3, [r7, #31]
 80061f0:	e098      	b.n	8006324 <UART_SetConfig+0x348>
 80061f2:	2310      	movs	r3, #16
 80061f4:	77fb      	strb	r3, [r7, #31]
 80061f6:	e095      	b.n	8006324 <UART_SetConfig+0x348>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a2f      	ldr	r2, [pc, #188]	@ (80062bc <UART_SetConfig+0x2e0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d125      	bne.n	800624e <UART_SetConfig+0x272>
 8006202:	4b29      	ldr	r3, [pc, #164]	@ (80062a8 <UART_SetConfig+0x2cc>)
 8006204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006208:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800620c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006210:	d017      	beq.n	8006242 <UART_SetConfig+0x266>
 8006212:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006216:	d817      	bhi.n	8006248 <UART_SetConfig+0x26c>
 8006218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800621c:	d00b      	beq.n	8006236 <UART_SetConfig+0x25a>
 800621e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006222:	d811      	bhi.n	8006248 <UART_SetConfig+0x26c>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <UART_SetConfig+0x254>
 8006228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800622c:	d006      	beq.n	800623c <UART_SetConfig+0x260>
 800622e:	e00b      	b.n	8006248 <UART_SetConfig+0x26c>
 8006230:	2301      	movs	r3, #1
 8006232:	77fb      	strb	r3, [r7, #31]
 8006234:	e076      	b.n	8006324 <UART_SetConfig+0x348>
 8006236:	2302      	movs	r3, #2
 8006238:	77fb      	strb	r3, [r7, #31]
 800623a:	e073      	b.n	8006324 <UART_SetConfig+0x348>
 800623c:	2304      	movs	r3, #4
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e070      	b.n	8006324 <UART_SetConfig+0x348>
 8006242:	2308      	movs	r3, #8
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e06d      	b.n	8006324 <UART_SetConfig+0x348>
 8006248:	2310      	movs	r3, #16
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e06a      	b.n	8006324 <UART_SetConfig+0x348>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1b      	ldr	r2, [pc, #108]	@ (80062c0 <UART_SetConfig+0x2e4>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d138      	bne.n	80062ca <UART_SetConfig+0x2ee>
 8006258:	4b13      	ldr	r3, [pc, #76]	@ (80062a8 <UART_SetConfig+0x2cc>)
 800625a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800625e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006262:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006266:	d017      	beq.n	8006298 <UART_SetConfig+0x2bc>
 8006268:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800626c:	d82a      	bhi.n	80062c4 <UART_SetConfig+0x2e8>
 800626e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006272:	d00b      	beq.n	800628c <UART_SetConfig+0x2b0>
 8006274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006278:	d824      	bhi.n	80062c4 <UART_SetConfig+0x2e8>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <UART_SetConfig+0x2aa>
 800627e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006282:	d006      	beq.n	8006292 <UART_SetConfig+0x2b6>
 8006284:	e01e      	b.n	80062c4 <UART_SetConfig+0x2e8>
 8006286:	2300      	movs	r3, #0
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e04b      	b.n	8006324 <UART_SetConfig+0x348>
 800628c:	2302      	movs	r3, #2
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e048      	b.n	8006324 <UART_SetConfig+0x348>
 8006292:	2304      	movs	r3, #4
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e045      	b.n	8006324 <UART_SetConfig+0x348>
 8006298:	2308      	movs	r3, #8
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e042      	b.n	8006324 <UART_SetConfig+0x348>
 800629e:	bf00      	nop
 80062a0:	efff69f3 	.word	0xefff69f3
 80062a4:	40011000 	.word	0x40011000
 80062a8:	40023800 	.word	0x40023800
 80062ac:	40004400 	.word	0x40004400
 80062b0:	40004800 	.word	0x40004800
 80062b4:	40004c00 	.word	0x40004c00
 80062b8:	40005000 	.word	0x40005000
 80062bc:	40011400 	.word	0x40011400
 80062c0:	40007800 	.word	0x40007800
 80062c4:	2310      	movs	r3, #16
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e02c      	b.n	8006324 <UART_SetConfig+0x348>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a72      	ldr	r2, [pc, #456]	@ (8006498 <UART_SetConfig+0x4bc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d125      	bne.n	8006320 <UART_SetConfig+0x344>
 80062d4:	4b71      	ldr	r3, [pc, #452]	@ (800649c <UART_SetConfig+0x4c0>)
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80062de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80062e2:	d017      	beq.n	8006314 <UART_SetConfig+0x338>
 80062e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80062e8:	d817      	bhi.n	800631a <UART_SetConfig+0x33e>
 80062ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ee:	d00b      	beq.n	8006308 <UART_SetConfig+0x32c>
 80062f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062f4:	d811      	bhi.n	800631a <UART_SetConfig+0x33e>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <UART_SetConfig+0x326>
 80062fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062fe:	d006      	beq.n	800630e <UART_SetConfig+0x332>
 8006300:	e00b      	b.n	800631a <UART_SetConfig+0x33e>
 8006302:	2300      	movs	r3, #0
 8006304:	77fb      	strb	r3, [r7, #31]
 8006306:	e00d      	b.n	8006324 <UART_SetConfig+0x348>
 8006308:	2302      	movs	r3, #2
 800630a:	77fb      	strb	r3, [r7, #31]
 800630c:	e00a      	b.n	8006324 <UART_SetConfig+0x348>
 800630e:	2304      	movs	r3, #4
 8006310:	77fb      	strb	r3, [r7, #31]
 8006312:	e007      	b.n	8006324 <UART_SetConfig+0x348>
 8006314:	2308      	movs	r3, #8
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e004      	b.n	8006324 <UART_SetConfig+0x348>
 800631a:	2310      	movs	r3, #16
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e001      	b.n	8006324 <UART_SetConfig+0x348>
 8006320:	2310      	movs	r3, #16
 8006322:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800632c:	d15b      	bne.n	80063e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800632e:	7ffb      	ldrb	r3, [r7, #31]
 8006330:	2b08      	cmp	r3, #8
 8006332:	d828      	bhi.n	8006386 <UART_SetConfig+0x3aa>
 8006334:	a201      	add	r2, pc, #4	@ (adr r2, 800633c <UART_SetConfig+0x360>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	08006361 	.word	0x08006361
 8006340:	08006369 	.word	0x08006369
 8006344:	08006371 	.word	0x08006371
 8006348:	08006387 	.word	0x08006387
 800634c:	08006377 	.word	0x08006377
 8006350:	08006387 	.word	0x08006387
 8006354:	08006387 	.word	0x08006387
 8006358:	08006387 	.word	0x08006387
 800635c:	0800637f 	.word	0x0800637f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006360:	f7fe f8dc 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 8006364:	61b8      	str	r0, [r7, #24]
        break;
 8006366:	e013      	b.n	8006390 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006368:	f7fe f8ec 	bl	8004544 <HAL_RCC_GetPCLK2Freq>
 800636c:	61b8      	str	r0, [r7, #24]
        break;
 800636e:	e00f      	b.n	8006390 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006370:	4b4b      	ldr	r3, [pc, #300]	@ (80064a0 <UART_SetConfig+0x4c4>)
 8006372:	61bb      	str	r3, [r7, #24]
        break;
 8006374:	e00c      	b.n	8006390 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006376:	f7fd ffbf 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 800637a:	61b8      	str	r0, [r7, #24]
        break;
 800637c:	e008      	b.n	8006390 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800637e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006382:	61bb      	str	r3, [r7, #24]
        break;
 8006384:	e004      	b.n	8006390 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	77bb      	strb	r3, [r7, #30]
        break;
 800638e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d074      	beq.n	8006480 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	005a      	lsls	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	085b      	lsrs	r3, r3, #1
 80063a0:	441a      	add	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b0f      	cmp	r3, #15
 80063b0:	d916      	bls.n	80063e0 <UART_SetConfig+0x404>
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b8:	d212      	bcs.n	80063e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	f023 030f 	bic.w	r3, r3, #15
 80063c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	085b      	lsrs	r3, r3, #1
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	89fb      	ldrh	r3, [r7, #14]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	89fa      	ldrh	r2, [r7, #14]
 80063dc:	60da      	str	r2, [r3, #12]
 80063de:	e04f      	b.n	8006480 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	77bb      	strb	r3, [r7, #30]
 80063e4:	e04c      	b.n	8006480 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063e6:	7ffb      	ldrb	r3, [r7, #31]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d828      	bhi.n	800643e <UART_SetConfig+0x462>
 80063ec:	a201      	add	r2, pc, #4	@ (adr r2, 80063f4 <UART_SetConfig+0x418>)
 80063ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f2:	bf00      	nop
 80063f4:	08006419 	.word	0x08006419
 80063f8:	08006421 	.word	0x08006421
 80063fc:	08006429 	.word	0x08006429
 8006400:	0800643f 	.word	0x0800643f
 8006404:	0800642f 	.word	0x0800642f
 8006408:	0800643f 	.word	0x0800643f
 800640c:	0800643f 	.word	0x0800643f
 8006410:	0800643f 	.word	0x0800643f
 8006414:	08006437 	.word	0x08006437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006418:	f7fe f880 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 800641c:	61b8      	str	r0, [r7, #24]
        break;
 800641e:	e013      	b.n	8006448 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006420:	f7fe f890 	bl	8004544 <HAL_RCC_GetPCLK2Freq>
 8006424:	61b8      	str	r0, [r7, #24]
        break;
 8006426:	e00f      	b.n	8006448 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006428:	4b1d      	ldr	r3, [pc, #116]	@ (80064a0 <UART_SetConfig+0x4c4>)
 800642a:	61bb      	str	r3, [r7, #24]
        break;
 800642c:	e00c      	b.n	8006448 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642e:	f7fd ff63 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 8006432:	61b8      	str	r0, [r7, #24]
        break;
 8006434:	e008      	b.n	8006448 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800643a:	61bb      	str	r3, [r7, #24]
        break;
 800643c:	e004      	b.n	8006448 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	77bb      	strb	r3, [r7, #30]
        break;
 8006446:	bf00      	nop
    }

    if (pclk != 0U)
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d018      	beq.n	8006480 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	085a      	lsrs	r2, r3, #1
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	441a      	add	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006460:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b0f      	cmp	r3, #15
 8006466:	d909      	bls.n	800647c <UART_SetConfig+0x4a0>
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800646e:	d205      	bcs.n	800647c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	b29a      	uxth	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60da      	str	r2, [r3, #12]
 800647a:	e001      	b.n	8006480 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800648c:	7fbb      	ldrb	r3, [r7, #30]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40007c00 	.word	0x40007c00
 800649c:	40023800 	.word	0x40023800
 80064a0:	00f42400 	.word	0x00f42400

080064a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d01a      	beq.n	80065ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065a2:	d10a      	bne.n	80065ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	605a      	str	r2, [r3, #4]
  }
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08c      	sub	sp, #48	@ 0x30
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065f8:	f7fc fbdc 	bl	8002db4 <HAL_GetTick>
 80065fc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b08      	cmp	r3, #8
 800660a:	d12e      	bne.n	800666a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800660c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	2200      	movs	r2, #0
 8006616:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f83b 	bl	8006696 <UART_WaitOnFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d021      	beq.n	800666a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	60fb      	str	r3, [r7, #12]
   return(result);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800663a:	623b      	str	r3, [r7, #32]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	69b9      	ldr	r1, [r7, #24]
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	617b      	str	r3, [r7, #20]
   return(result);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e6      	bne.n	8006626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e011      	b.n	800668e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2220      	movs	r2, #32
 800666e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3728      	adds	r7, #40	@ 0x28
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	603b      	str	r3, [r7, #0]
 80066a2:	4613      	mov	r3, r2
 80066a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a6:	e04f      	b.n	8006748 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d04b      	beq.n	8006748 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b0:	f7fc fb80 	bl	8002db4 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d302      	bcc.n	80066c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e04e      	b.n	8006768 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d037      	beq.n	8006748 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b80      	cmp	r3, #128	@ 0x80
 80066dc:	d034      	beq.n	8006748 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b40      	cmp	r3, #64	@ 0x40
 80066e2:	d031      	beq.n	8006748 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b08      	cmp	r3, #8
 80066f0:	d110      	bne.n	8006714 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2208      	movs	r2, #8
 80066f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f8fe 	bl	80068fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2208      	movs	r2, #8
 8006704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e029      	b.n	8006768 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800671e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006722:	d111      	bne.n	8006748 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800672c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f8e4 	bl	80068fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2220      	movs	r2, #32
 8006738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e00f      	b.n	8006768 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69da      	ldr	r2, [r3, #28]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4013      	ands	r3, r2
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	429a      	cmp	r2, r3
 8006756:	bf0c      	ite	eq
 8006758:	2301      	moveq	r3, #1
 800675a:	2300      	movne	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	79fb      	ldrb	r3, [r7, #7]
 8006762:	429a      	cmp	r2, r3
 8006764:	d0a0      	beq.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006770:	b480      	push	{r7}
 8006772:	b097      	sub	sp, #92	@ 0x5c
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	4613      	mov	r3, r2
 800677c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	88fa      	ldrh	r2, [r7, #6]
 8006790:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a2:	d10e      	bne.n	80067c2 <UART_Start_Receive_IT+0x52>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d105      	bne.n	80067b8 <UART_Start_Receive_IT+0x48>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80067b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067b6:	e02d      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	22ff      	movs	r2, #255	@ 0xff
 80067bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067c0:	e028      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10d      	bne.n	80067e6 <UART_Start_Receive_IT+0x76>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <UART_Start_Receive_IT+0x6c>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	22ff      	movs	r2, #255	@ 0xff
 80067d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067da:	e01b      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	227f      	movs	r2, #127	@ 0x7f
 80067e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80067e4:	e016      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067ee:	d10d      	bne.n	800680c <UART_Start_Receive_IT+0x9c>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <UART_Start_Receive_IT+0x92>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	227f      	movs	r2, #127	@ 0x7f
 80067fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006800:	e008      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	223f      	movs	r2, #63	@ 0x3f
 8006806:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800680a:	e003      	b.n	8006814 <UART_Start_Receive_IT+0xa4>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2222      	movs	r2, #34	@ 0x22
 8006820:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3308      	adds	r3, #8
 800682a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682e:	e853 3f00 	ldrex	r3, [r3]
 8006832:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	657b      	str	r3, [r7, #84]	@ 0x54
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3308      	adds	r3, #8
 8006842:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006844:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006846:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800684a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e5      	bne.n	8006824 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006860:	d107      	bne.n	8006872 <UART_Start_Receive_IT+0x102>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d103      	bne.n	8006872 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4a21      	ldr	r2, [pc, #132]	@ (80068f4 <UART_Start_Receive_IT+0x184>)
 800686e:	669a      	str	r2, [r3, #104]	@ 0x68
 8006870:	e002      	b.n	8006878 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4a20      	ldr	r2, [pc, #128]	@ (80068f8 <UART_Start_Receive_IT+0x188>)
 8006876:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d019      	beq.n	80068b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006894:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800689e:	637b      	str	r3, [r7, #52]	@ 0x34
 80068a0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80068a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80068ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e6      	bne.n	8006880 <UART_Start_Receive_IT+0x110>
 80068b2:	e018      	b.n	80068e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	613b      	str	r3, [r7, #16]
   return(result);
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f043 0320 	orr.w	r3, r3, #32
 80068c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068d2:	623b      	str	r3, [r7, #32]
 80068d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	69f9      	ldr	r1, [r7, #28]
 80068d8:	6a3a      	ldr	r2, [r7, #32]
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	61bb      	str	r3, [r7, #24]
   return(result);
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e6      	bne.n	80068b4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	375c      	adds	r7, #92	@ 0x5c
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	08006d63 	.word	0x08006d63
 80068f8:	08006bbb 	.word	0x08006bbb

080068fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b095      	sub	sp, #84	@ 0x54
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006918:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006922:	643b      	str	r3, [r7, #64]	@ 0x40
 8006924:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006928:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e6      	bne.n	8006904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3308      	adds	r3, #8
 800693c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	61fb      	str	r3, [r7, #28]
   return(result);
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3308      	adds	r3, #8
 8006954:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006956:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006958:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800695c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e5      	bne.n	8006936 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800696e:	2b01      	cmp	r3, #1
 8006970:	d118      	bne.n	80069a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f023 0310 	bic.w	r3, r3, #16
 8006986:	647b      	str	r3, [r7, #68]	@ 0x44
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6979      	ldr	r1, [r7, #20]
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	613b      	str	r3, [r7, #16]
   return(result);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e6      	bne.n	8006972 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80069b8:	bf00      	nop
 80069ba:	3754      	adds	r7, #84	@ 0x54
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7ff fa4c 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b08f      	sub	sp, #60	@ 0x3c
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069fc:	2b21      	cmp	r3, #33	@ 0x21
 80069fe:	d14c      	bne.n	8006a9a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d132      	bne.n	8006a72 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a2c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e6      	bne.n	8006a0c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a52:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	6979      	ldr	r1, [r7, #20]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	613b      	str	r3, [r7, #16]
   return(result);
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e6      	bne.n	8006a3e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006a70:	e013      	b.n	8006a9a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a76:	781a      	ldrb	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006a9a:	bf00      	nop
 8006a9c:	373c      	adds	r7, #60	@ 0x3c
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b091      	sub	sp, #68	@ 0x44
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ab2:	2b21      	cmp	r3, #33	@ 0x21
 8006ab4:	d151      	bne.n	8006b5a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d132      	bne.n	8006b28 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ae2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e6      	bne.n	8006ac2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b12:	61fb      	str	r3, [r7, #28]
 8006b14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	69b9      	ldr	r1, [r7, #24]
 8006b18:	69fa      	ldr	r2, [r7, #28]
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e6      	bne.n	8006af4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006b26:	e018      	b.n	8006b5a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b3c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006b5a:	bf00      	nop
 8006b5c:	3744      	adds	r7, #68	@ 0x44
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b088      	sub	sp, #32
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6979      	ldr	r1, [r7, #20]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	613b      	str	r3, [r7, #16]
   return(result);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e6      	bne.n	8006b6e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7f9 fcc9 	bl	8000544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bb2:	bf00      	nop
 8006bb4:	3720      	adds	r7, #32
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b09c      	sub	sp, #112	@ 0x70
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bc8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bd2:	2b22      	cmp	r3, #34	@ 0x22
 8006bd4:	f040 80b9 	bne.w	8006d4a <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bde:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006be2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006be6:	b2d9      	uxtb	r1, r3
 8006be8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf2:	400a      	ands	r2, r1
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f040 809c 	bne.w	8006d5a <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c42:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e6      	bne.n	8006c22 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c66:	f023 0301 	bic.w	r3, r3, #1
 8006c6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3308      	adds	r3, #8
 8006c72:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c74:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c76:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e5      	bne.n	8006c54 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d018      	beq.n	8006cdc <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e6      	bne.n	8006caa <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d12e      	bne.n	8006d42 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0310 	bic.w	r3, r3, #16
 8006cfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d08:	61fb      	str	r3, [r7, #28]
 8006d0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	69b9      	ldr	r1, [r7, #24]
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	617b      	str	r3, [r7, #20]
   return(result);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e6      	bne.n	8006cea <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	f003 0310 	and.w	r3, r3, #16
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d103      	bne.n	8006d32 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2210      	movs	r2, #16
 8006d30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7f9 fbdc 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d40:	e00b      	b.n	8006d5a <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff f892 	bl	8005e6c <HAL_UART_RxCpltCallback>
}
 8006d48:	e007      	b.n	8006d5a <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699a      	ldr	r2, [r3, #24]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0208 	orr.w	r2, r2, #8
 8006d58:	619a      	str	r2, [r3, #24]
}
 8006d5a:	bf00      	nop
 8006d5c:	3770      	adds	r7, #112	@ 0x70
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b09c      	sub	sp, #112	@ 0x70
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d70:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d7a:	2b22      	cmp	r3, #34	@ 0x22
 8006d7c:	f040 80b9 	bne.w	8006ef2 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d90:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006d94:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d98:	4013      	ands	r3, r2
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d9e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da4:	1c9a      	adds	r2, r3, #2
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f040 809c 	bne.w	8006f02 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dde:	667b      	str	r3, [r7, #100]	@ 0x64
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006de8:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dea:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006dee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006df6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e6      	bne.n	8006dca <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3308      	adds	r3, #8
 8006e02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	f023 0301 	bic.w	r3, r3, #1
 8006e12:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3308      	adds	r3, #8
 8006e1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e5      	bne.n	8006dfc <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d018      	beq.n	8006e84 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e72:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e6      	bne.n	8006e52 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d12e      	bne.n	8006eea <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f023 0310 	bic.w	r3, r3, #16
 8006ea6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6979      	ldr	r1, [r7, #20]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e6      	bne.n	8006e92 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	f003 0310 	and.w	r3, r3, #16
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d103      	bne.n	8006eda <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7f9 fb08 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ee8:	e00b      	b.n	8006f02 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fe ffbe 	bl	8005e6c <HAL_UART_RxCpltCallback>
}
 8006ef0:	e007      	b.n	8006f02 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0208 	orr.w	r2, r2, #8
 8006f00:	619a      	str	r2, [r3, #24]
}
 8006f02:	bf00      	nop
 8006f04:	3770      	adds	r7, #112	@ 0x70
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b08c      	sub	sp, #48	@ 0x30
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	4613      	mov	r3, r2
 8006f16:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d13b      	bne.n	8006fa0 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e034      	b.n	8006fa2 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	461a      	mov	r2, r3
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f7ff fc10 	bl	8006770 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d11d      	bne.n	8006f94 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2210      	movs	r2, #16
 8006f5e:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f043 0310 	orr.w	r3, r3, #16
 8006f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f80:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6a39      	ldr	r1, [r7, #32]
 8006f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e6      	bne.n	8006f60 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8006f92:	e002      	b.n	8006f9a <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8006f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006f9e:	e000      	b.n	8006fa2 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
  }
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3730      	adds	r7, #48	@ 0x30
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <memcmp>:
 8006faa:	b510      	push	{r4, lr}
 8006fac:	3901      	subs	r1, #1
 8006fae:	4402      	add	r2, r0
 8006fb0:	4290      	cmp	r0, r2
 8006fb2:	d101      	bne.n	8006fb8 <memcmp+0xe>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e005      	b.n	8006fc4 <memcmp+0x1a>
 8006fb8:	7803      	ldrb	r3, [r0, #0]
 8006fba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006fbe:	42a3      	cmp	r3, r4
 8006fc0:	d001      	beq.n	8006fc6 <memcmp+0x1c>
 8006fc2:	1b18      	subs	r0, r3, r4
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	e7f2      	b.n	8006fb0 <memcmp+0x6>

08006fca <memset>:
 8006fca:	4402      	add	r2, r0
 8006fcc:	4603      	mov	r3, r0
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d100      	bne.n	8006fd4 <memset+0xa>
 8006fd2:	4770      	bx	lr
 8006fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd8:	e7f9      	b.n	8006fce <memset+0x4>
	...

08006fdc <__libc_init_array>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4d0d      	ldr	r5, [pc, #52]	@ (8007014 <__libc_init_array+0x38>)
 8006fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8007018 <__libc_init_array+0x3c>)
 8006fe2:	1b64      	subs	r4, r4, r5
 8006fe4:	10a4      	asrs	r4, r4, #2
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	42a6      	cmp	r6, r4
 8006fea:	d109      	bne.n	8007000 <__libc_init_array+0x24>
 8006fec:	4d0b      	ldr	r5, [pc, #44]	@ (800701c <__libc_init_array+0x40>)
 8006fee:	4c0c      	ldr	r4, [pc, #48]	@ (8007020 <__libc_init_array+0x44>)
 8006ff0:	f000 f826 	bl	8007040 <_init>
 8006ff4:	1b64      	subs	r4, r4, r5
 8006ff6:	10a4      	asrs	r4, r4, #2
 8006ff8:	2600      	movs	r6, #0
 8006ffa:	42a6      	cmp	r6, r4
 8006ffc:	d105      	bne.n	800700a <__libc_init_array+0x2e>
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	f855 3b04 	ldr.w	r3, [r5], #4
 8007004:	4798      	blx	r3
 8007006:	3601      	adds	r6, #1
 8007008:	e7ee      	b.n	8006fe8 <__libc_init_array+0xc>
 800700a:	f855 3b04 	ldr.w	r3, [r5], #4
 800700e:	4798      	blx	r3
 8007010:	3601      	adds	r6, #1
 8007012:	e7f2      	b.n	8006ffa <__libc_init_array+0x1e>
 8007014:	080082ec 	.word	0x080082ec
 8007018:	080082ec 	.word	0x080082ec
 800701c:	080082ec 	.word	0x080082ec
 8007020:	080082f0 	.word	0x080082f0

08007024 <memcpy>:
 8007024:	440a      	add	r2, r1
 8007026:	4291      	cmp	r1, r2
 8007028:	f100 33ff 	add.w	r3, r0, #4294967295
 800702c:	d100      	bne.n	8007030 <memcpy+0xc>
 800702e:	4770      	bx	lr
 8007030:	b510      	push	{r4, lr}
 8007032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800703a:	4291      	cmp	r1, r2
 800703c:	d1f9      	bne.n	8007032 <memcpy+0xe>
 800703e:	bd10      	pop	{r4, pc}

08007040 <_init>:
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	bf00      	nop
 8007044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007046:	bc08      	pop	{r3}
 8007048:	469e      	mov	lr, r3
 800704a:	4770      	bx	lr

0800704c <_fini>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	bf00      	nop
 8007050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007052:	bc08      	pop	{r3}
 8007054:	469e      	mov	lr, r3
 8007056:	4770      	bx	lr

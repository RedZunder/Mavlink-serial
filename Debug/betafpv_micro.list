
betafpv_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd0  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001288  08005198  08005198  00006198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006420  08006420  000084b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006420  08006420  00007420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006428  08006428  000084b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006428  08006428  00007428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800642c  0800642c  0000742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000378  20000000  08006430  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000378  080067a8  00008378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000418  08006848  00008418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008b0  200004b8  080068e8  000084b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000d68  080068e8  00008d68  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000084b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f6cb  00000000  00000000  000084e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021a0  00000000  00000000  00017bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae0  00000000  00000000  00019d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000086c  00000000  00000000  0001a838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e6ae  00000000  00000000  0001b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001581d  00000000  00000000  00049752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00163af0  00000000  00000000  0005ef6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001c2a5f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002cc4  00000000  00000000  001c2aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  001c5768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200004b8 	.word	0x200004b8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005180 	.word	0x08005180

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200004bc 	.word	0x200004bc
 8000204:	08005180 	.word	0x08005180

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 fdef 	bl	80020de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f822 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f936 	bl	8000774 <MX_GPIO_Init>
  MX_ETH_Init();
 8000508:	f000 f886 	bl	8000618 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800050c:	f000 f902 	bl	8000714 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000510:	f000 f8d0 	bl	80006b4 <MX_USART1_UART_Init>

	  //show answer in serial terminal
		//HAL_UART_Transmit(&huart3,(uint8_t *) 255,1,100);
		//HAL_UART_Transmit(&huart1, (uint8_t *)rx,sizeof(rx),100);

		decode_mavlink_mssg(mssgBytes[i]);
 8000514:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <main+0x48>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	@ (8000544 <main+0x4c>)
 800051a:	5cd3      	ldrb	r3, [r2, r3]
 800051c:	4618      	mov	r0, r3
 800051e:	f001 fb75 	bl	8001c0c <decode_mavlink_mssg>

		if(i<sizeof(mssgBytes))
 8000522:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <main+0x48>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f240 326a 	movw	r2, #874	@ 0x36a
 800052a:	4293      	cmp	r3, r2
 800052c:	d804      	bhi.n	8000538 <main+0x40>
			i++;
 800052e:	4b04      	ldr	r3, [pc, #16]	@ (8000540 <main+0x48>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	4a02      	ldr	r2, [pc, #8]	@ (8000540 <main+0x48>)
 8000536:	6013      	str	r3, [r2, #0]




		HAL_Delay(10);
 8000538:	200a      	movs	r0, #10
 800053a:	f001 fe2d 	bl	8002198 <HAL_Delay>
		decode_mavlink_mssg(mssgBytes[i]);
 800053e:	e7e9      	b.n	8000514 <main+0x1c>
 8000540:	200006cc 	.word	0x200006cc
 8000544:	20000000 	.word	0x20000000

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	@ 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	@ 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f004 fdd8 	bl	800510c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800056c:	f002 fcf0 	bl	8002f50 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	4b27      	ldr	r3, [pc, #156]	@ (8000610 <SystemClock_Config+0xc8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	4a26      	ldr	r2, [pc, #152]	@ (8000610 <SystemClock_Config+0xc8>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	@ 0x40
 800057c:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <SystemClock_Config+0xc8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000588:	4b22      	ldr	r3, [pc, #136]	@ (8000614 <SystemClock_Config+0xcc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000590:	4a20      	ldr	r2, [pc, #128]	@ (8000614 <SystemClock_Config+0xcc>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <SystemClock_Config+0xcc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005bc:	2348      	movs	r3, #72	@ 0x48
 80005be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c4:	2303      	movs	r3, #3
 80005c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fccf 	bl	8002f70 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d8:	f000 f99e 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2102      	movs	r1, #2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 ff5d 	bl	80034b8 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000604:	f000 f988 	bl	8000918 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3750      	adds	r7, #80	@ 0x50
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_ETH_Init+0x84>)
 800061e:	4a20      	ldr	r2, [pc, #128]	@ (80006a0 <MX_ETH_Init+0x88>)
 8000620:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000622:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <MX_ETH_Init+0x8c>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000628:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <MX_ETH_Init+0x8c>)
 800062a:	2280      	movs	r2, #128	@ 0x80
 800062c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800062e:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <MX_ETH_Init+0x8c>)
 8000630:	22e1      	movs	r2, #225	@ 0xe1
 8000632:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000634:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <MX_ETH_Init+0x8c>)
 8000636:	2200      	movs	r2, #0
 8000638:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800063a:	4b1a      	ldr	r3, [pc, #104]	@ (80006a4 <MX_ETH_Init+0x8c>)
 800063c:	2200      	movs	r2, #0
 800063e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000640:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <MX_ETH_Init+0x8c>)
 8000642:	2200      	movs	r2, #0
 8000644:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_ETH_Init+0x84>)
 8000648:	4a16      	ldr	r2, [pc, #88]	@ (80006a4 <MX_ETH_Init+0x8c>)
 800064a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800064c:	4b13      	ldr	r3, [pc, #76]	@ (800069c <MX_ETH_Init+0x84>)
 800064e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000652:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_ETH_Init+0x84>)
 8000656:	4a14      	ldr	r2, [pc, #80]	@ (80006a8 <MX_ETH_Init+0x90>)
 8000658:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <MX_ETH_Init+0x84>)
 800065c:	4a13      	ldr	r2, [pc, #76]	@ (80006ac <MX_ETH_Init+0x94>)
 800065e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_ETH_Init+0x84>)
 8000662:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000666:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <MX_ETH_Init+0x84>)
 800066a:	f001 ff5d 	bl	8002528 <HAL_ETH_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000674:	f000 f950 	bl	8000918 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000678:	2238      	movs	r2, #56	@ 0x38
 800067a:	2100      	movs	r1, #0
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <MX_ETH_Init+0x98>)
 800067e:	f004 fd45 	bl	800510c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_ETH_Init+0x98>)
 8000684:	2221      	movs	r2, #33	@ 0x21
 8000686:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_ETH_Init+0x98>)
 800068a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800068e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <MX_ETH_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000050c 	.word	0x2000050c
 80006a0:	40028000 	.word	0x40028000
 80006a4:	200006d0 	.word	0x200006d0
 80006a8:	20000418 	.word	0x20000418
 80006ac:	20000378 	.word	0x20000378
 80006b0:	200004d4 	.word	0x200004d4

080006b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	@ (8000710 <MX_USART1_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80006be:	4b13      	ldr	r3, [pc, #76]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006c0:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80006c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006da:	2208      	movs	r2, #8
 80006dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_USART1_UART_Init+0x58>)
 80006f8:	f003 fd42 	bl	8004180 <HAL_HalfDuplex_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 f909 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200005bc 	.word	0x200005bc
 8000710:	40011000 	.word	0x40011000

08000714 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_USART3_UART_Init+0x58>)
 800071a:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <MX_USART3_UART_Init+0x5c>)
 800071c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071e:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_USART3_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_USART3_UART_Init+0x58>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_USART3_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_USART3_UART_Init+0x58>)
 8000758:	f003 fcc4 	bl	80040e4 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000762:	f000 f8d9 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000644 	.word	0x20000644
 8000770:	40004800 	.word	0x40004800

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	@ 0x30
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b5e      	ldr	r3, [pc, #376]	@ (8000904 <MX_GPIO_Init+0x190>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a5d      	ldr	r2, [pc, #372]	@ (8000904 <MX_GPIO_Init+0x190>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b5b      	ldr	r3, [pc, #364]	@ (8000904 <MX_GPIO_Init+0x190>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	4b58      	ldr	r3, [pc, #352]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a57      	ldr	r2, [pc, #348]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b55      	ldr	r3, [pc, #340]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b52      	ldr	r3, [pc, #328]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a51      	ldr	r2, [pc, #324]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a4b      	ldr	r2, [pc, #300]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b49      	ldr	r3, [pc, #292]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	4b46      	ldr	r3, [pc, #280]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a45      	ldr	r2, [pc, #276]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b43      	ldr	r3, [pc, #268]	@ (8000904 <MX_GPIO_Init+0x190>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	4b40      	ldr	r3, [pc, #256]	@ (8000904 <MX_GPIO_Init+0x190>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a3f      	ldr	r2, [pc, #252]	@ (8000904 <MX_GPIO_Init+0x190>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b3d      	ldr	r3, [pc, #244]	@ (8000904 <MX_GPIO_Init+0x190>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000820:	4839      	ldr	r0, [pc, #228]	@ (8000908 <MX_GPIO_Init+0x194>)
 8000822:	f002 fb7b 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2140      	movs	r1, #64	@ 0x40
 800082a:	4838      	ldr	r0, [pc, #224]	@ (800090c <MX_GPIO_Init+0x198>)
 800082c:	f002 fb76 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000830:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4832      	ldr	r0, [pc, #200]	@ (8000910 <MX_GPIO_Init+0x19c>)
 8000848:	f002 f9bc 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800084c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4828      	ldr	r0, [pc, #160]	@ (8000908 <MX_GPIO_Init+0x194>)
 8000866:	f002 f9ad 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800086a:	2340      	movs	r3, #64	@ 0x40
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4822      	ldr	r0, [pc, #136]	@ (800090c <MX_GPIO_Init+0x198>)
 8000882:	f002 f99f 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000886:	2380      	movs	r3, #128	@ 0x80
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	481c      	ldr	r0, [pc, #112]	@ (800090c <MX_GPIO_Init+0x198>)
 800089a:	f002 f993 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800089e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008b0:	230a      	movs	r3, #10
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4816      	ldr	r0, [pc, #88]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 80008bc:	f002 f982 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	@ (8000908 <MX_GPIO_Init+0x194>)
 80008d6:	f002 f975 	bl	8002bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e0:	2312      	movs	r3, #18
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ec:	2304      	movs	r3, #4
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4804      	ldr	r0, [pc, #16]	@ (8000908 <MX_GPIO_Init+0x194>)
 80008f8:	f002 f964 	bl	8002bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008fc:	bf00      	nop
 80008fe:	3730      	adds	r7, #48	@ 0x30
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400
 800090c:	40021800 	.word	0x40021800
 8000910:	40020800 	.word	0x40020800
 8000914:	40020000 	.word	0x40020000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	4053      	eors	r3, r2
 800093a:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	b25a      	sxtb	r2, r3
 8000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000946:	4053      	eors	r3, r2
 8000948:	b25b      	sxtb	r3, r3
 800094a:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	b29b      	uxth	r3, r3
 8000954:	b21a      	sxth	r2, r3
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21b      	sxth	r3, r3
 800095c:	4053      	eors	r3, r2
 800095e:	b21a      	sxth	r2, r3
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	b21b      	sxth	r3, r3
 8000966:	4053      	eors	r3, r2
 8000968:	b21a      	sxth	r2, r3
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	091b      	lsrs	r3, r3, #4
 800096e:	b2db      	uxtb	r3, r3
 8000970:	b21b      	sxth	r3, r3
 8000972:	4053      	eors	r3, r2
 8000974:	b21b      	sxth	r3, r3
 8000976:	b29a      	uxth	r2, r3
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	801a      	strh	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000996:	801a      	strh	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a0e      	ldr	r2, [pc, #56]	@ (80009f4 <mavlink_sha256_init+0x50>)
 80009bc:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a0d      	ldr	r2, [pc, #52]	@ (80009f8 <mavlink_sha256_init+0x54>)
 80009c2:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <mavlink_sha256_init+0x58>)
 80009c8:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000a00 <mavlink_sha256_init+0x5c>)
 80009ce:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000a04 <mavlink_sha256_init+0x60>)
 80009d4:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000a08 <mavlink_sha256_init+0x64>)
 80009da:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <mavlink_sha256_init+0x68>)
 80009e0:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <mavlink_sha256_init+0x6c>)
 80009e6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	6a09e667 	.word	0x6a09e667
 80009f8:	bb67ae85 	.word	0xbb67ae85
 80009fc:	3c6ef372 	.word	0x3c6ef372
 8000a00:	a54ff53a 	.word	0xa54ff53a
 8000a04:	510e527f 	.word	0x510e527f
 8000a08:	9b05688c 	.word	0x9b05688c
 8000a0c:	1f83d9ab 	.word	0x1f83d9ab
 8000a10:	5be0cd19 	.word	0x5be0cd19

08000a14 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b0cf      	sub	sp, #316	@ 0x13c
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000a1e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000a22:	6018      	str	r0, [r3, #0]
 8000a24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000a28:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000a2c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8000a2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000a32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    BB = m->counter[1];
 8000a3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000a42:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    CC = m->counter[2];
 8000a4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000a52:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    DD = m->counter[3];
 8000a5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000a62:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    EE = m->counter[4];
 8000a6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000a72:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    FF = m->counter[5];
 8000a7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000a82:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GG = m->counter[6];
 8000a8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000a92:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6a1b      	ldr	r3, [r3, #32]
 8000a9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HH = m->counter[7];
 8000a9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000aa2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aaa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    for (i = 0; i < 16; ++i)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000ab4:	e016      	b.n	8000ae4 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 8000ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000ac0:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	6819      	ldr	r1, [r3, #0]
 8000aca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ace:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ad2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ade:	3301      	adds	r3, #1
 8000ae0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	dde4      	ble.n	8000ab6 <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8000aec:	2310      	movs	r3, #16
 8000aee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000af2:	e069      	b.n	8000bc8 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000af8:	1e9a      	subs	r2, r3, #2
 8000afa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000afe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b06:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b0e:	1e99      	subs	r1, r3, #2
 8000b10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b1c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000b20:	405a      	eors	r2, r3
 8000b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b26:	1e99      	subs	r1, r3, #2
 8000b28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b34:	0a9b      	lsrs	r3, r3, #10
 8000b36:	405a      	eors	r2, r3
 8000b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b3c:	1fd9      	subs	r1, r3, #7
 8000b3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b4a:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b50:	f1a3 010f 	sub.w	r1, r3, #15
 8000b54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b60:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b68:	f1a3 000f 	sub.w	r0, r3, #15
 8000b6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b78:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000b7c:	4059      	eors	r1, r3
 8000b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b82:	f1a3 000f 	sub.w	r0, r3, #15
 8000b86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b8e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000b96:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b9c:	f1a3 0110 	sub.w	r1, r3, #16
 8000ba0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ba4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ba8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000bac:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000bae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000bb6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000bcc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bce:	dd91      	ble.n	8000af4 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000bd6:	e078      	b.n	8000cca <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000bd8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bdc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000be0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000be4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000be8:	405a      	eors	r2, r3
 8000bea:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bee:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000bf2:	405a      	eors	r2, r3
 8000bf4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000bf8:	441a      	add	r2, r3
 8000bfa:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8000bfe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c02:	4019      	ands	r1, r3
 8000c04:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c08:	43d8      	mvns	r0, r3
 8000c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000c0e:	4003      	ands	r3, r0
 8000c10:	404b      	eors	r3, r1
 8000c12:	441a      	add	r2, r3
 8000c14:	496e      	ldr	r1, [pc, #440]	@ (8000dd0 <mavlink_sha256_calc+0x3bc>)
 8000c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c1e:	441a      	add	r2, r3
 8000c20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c28:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8000c2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c30:	4413      	add	r3, r2
 8000c32:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000c36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000c3a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000c3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000c42:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000c46:	405a      	eors	r2, r3
 8000c48:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000c4c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000c50:	405a      	eors	r2, r3
 8000c52:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8000c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000c5a:	4059      	eors	r1, r3
 8000c5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000c60:	4019      	ands	r1, r3
 8000c62:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000c6a:	4003      	ands	r3, r0
 8000c6c:	404b      	eors	r3, r1
 8000c6e:	4413      	add	r3, r2
 8000c70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			     
	HH = GG;
 8000c74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000c78:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	GG = FF;
 8000c7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	FF = EE;
 8000c84:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000c88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	EE = DD + T1;
 8000c8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000c90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000c94:	4413      	add	r3, r2
 8000c96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	DD = CC;
 8000c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000c9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	CC = BB;
 8000ca2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000ca6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	BB = AA;
 8000caa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000cae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	AA = T1 + T2;
 8000cb2:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cba:	4413      	add	r3, r2
 8000cbc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (i = 0; i < 64; i++) {
 8000cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cce:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cd0:	dd82      	ble.n	8000bd8 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 8000cd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cd6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000ce2:	441a      	add	r2, r3
 8000ce4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ce8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8000cf0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cf4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000d00:	441a      	add	r2, r3
 8000d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d06:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8000d0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d12:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000d1e:	441a      	add	r2, r3
 8000d20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8000d2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d30:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	695a      	ldr	r2, [r3, #20]
 8000d38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000d3c:	441a      	add	r2, r3
 8000d3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d42:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8000d4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d4e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	699a      	ldr	r2, [r3, #24]
 8000d56:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d5a:	441a      	add	r2, r3
 8000d5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8000d68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	69da      	ldr	r2, [r3, #28]
 8000d74:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d78:	441a      	add	r2, r3
 8000d7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d7e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8000d86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d8a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6a1a      	ldr	r2, [r3, #32]
 8000d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000d96:	441a      	add	r2, r3
 8000d98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d9c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8000da4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000da8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000db0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000db4:	441a      	add	r2, r3
 8000db6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000dc2:	bf00      	nop
 8000dc4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	08005198 	.word	0x08005198

08000dd4 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b09c      	sub	sp, #112	@ 0x70
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	441a      	add	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d904      	bls.n	8000e0c <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e0e:	08db      	lsrs	r3, r3, #3
 8000e10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e14:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8000e16:	e057      	b.n	8000ec8 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 8000e18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e1a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000e1e:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d201      	bcs.n	8000e2c <mavlink_sha256_update+0x58>
            l = len;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000e32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e34:	4413      	add	r3, r2
 8000e36:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000e38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 f992 	bl	8005164 <memcpy>
	offset += l;
 8000e40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000e42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e44:	4413      	add	r3, r2
 8000e46:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 8000e48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000e4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e4c:	4413      	add	r3, r2
 8000e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000e58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e5a:	2b40      	cmp	r3, #64	@ 0x40
 8000e5c:	d134      	bne.n	8000ec8 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	3328      	adds	r3, #40	@ 0x28
 8000e62:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 8000e64:	2300      	movs	r3, #0
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	e023      	b.n	8000eb2 <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000e6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000e70:	4413      	add	r3, r2
 8000e72:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000e74:	f107 0210 	add.w	r2, r7, #16
 8000e78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 8000e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e82:	3303      	adds	r3, #3
 8000e84:	781a      	ldrb	r2, [r3, #0]
 8000e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e88:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e8c:	1c9a      	adds	r2, r3, #2
 8000e8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e90:	3301      	adds	r3, #1
 8000e92:	7812      	ldrb	r2, [r2, #0]
 8000e94:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	7812      	ldrb	r2, [r2, #0]
 8000ea0:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000ea8:	7812      	ldrb	r2, [r2, #0]
 8000eaa:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8000eac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000eae:	3301      	adds	r3, #1
 8000eb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8000eb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	ddd8      	ble.n	8000e6a <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff fda8 	bl	8000a14 <mavlink_sha256_calc>
	    offset = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1a4      	bne.n	8000e18 <mavlink_sha256_update+0x44>
	}
    }
}
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	3770      	adds	r7, #112	@ 0x70
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b098      	sub	sp, #96	@ 0x60
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	08db      	lsrs	r3, r3, #3
 8000ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000eee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ef0:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8000ef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ef8:	3301      	adds	r3, #1
 8000efa:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3308      	adds	r3, #8
 8000f00:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 8000f02:	2380      	movs	r3, #128	@ 0x80
 8000f04:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	2247      	movs	r2, #71	@ 0x47
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f004 f8fb 	bl	800510c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f1c:	3307      	adds	r3, #7
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	3360      	adds	r3, #96	@ 0x60
 8000f22:	443b      	add	r3, r7
 8000f24:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0a1a      	lsrs	r2, r3, #8
 8000f2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f30:	3306      	adds	r3, #6
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	3360      	adds	r3, #96	@ 0x60
 8000f36:	443b      	add	r3, r7
 8000f38:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	0c1a      	lsrs	r2, r3, #16
 8000f42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f44:	3305      	adds	r3, #5
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	3360      	adds	r3, #96	@ 0x60
 8000f4a:	443b      	add	r3, r7
 8000f4c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	0e1a      	lsrs	r2, r3, #24
 8000f56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f58:	3304      	adds	r3, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	3360      	adds	r3, #96	@ 0x60
 8000f5e:	443b      	add	r3, r7
 8000f60:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f6a:	3303      	adds	r3, #3
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	3360      	adds	r3, #96	@ 0x60
 8000f70:	443b      	add	r3, r7
 8000f72:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	0a1a      	lsrs	r2, r3, #8
 8000f7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f7e:	3302      	adds	r3, #2
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	3360      	adds	r3, #96	@ 0x60
 8000f84:	443b      	add	r3, r7
 8000f86:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	0c1a      	lsrs	r2, r3, #16
 8000f90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f92:	3301      	adds	r3, #1
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	3360      	adds	r3, #96	@ 0x60
 8000f98:	443b      	add	r3, r7
 8000f9a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	0e1b      	lsrs	r3, r3, #24
 8000fa4:	b2d9      	uxtb	r1, r3
 8000fa6:	f107 020c 	add.w	r2, r7, #12
 8000faa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000fac:	4413      	add	r3, r2
 8000fae:	460a      	mov	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000fb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000fb4:	f103 0208 	add.w	r2, r3, #8
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff08 	bl	8000dd4 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fc6:	78da      	ldrb	r2, [r3, #3]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000fd2:	7892      	ldrb	r2, [r2, #2]
 8000fd4:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000fdc:	7852      	ldrb	r2, [r2, #1]
 8000fde:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	3303      	adds	r3, #3
 8000fe4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000fe6:	7812      	ldrb	r2, [r2, #0]
 8000fe8:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	3304      	adds	r3, #4
 8000fee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000ff0:	79d2      	ldrb	r2, [r2, #7]
 8000ff2:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	3305      	adds	r3, #5
 8000ff8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000ffa:	7992      	ldrb	r2, [r2, #6]
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	3760      	adds	r7, #96	@ 0x60
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8001012:	79fa      	ldrb	r2, [r7, #7]
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4a03      	ldr	r2, [pc, #12]	@ (800102c <mavlink_get_channel_status+0x24>)
 800101e:	4413      	add	r3, r2
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	20000d04 	.word	0x20000d04

08001030 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f240 1223 	movw	r2, #291	@ 0x123
 8001040:	fb02 f303 	mul.w	r3, r2, r3
 8001044:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <mavlink_get_channel_buffer+0x24>)
 8001046:	4413      	add	r3, r2
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	20000878 	.word	0x20000878

08001058 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b0aa      	sub	sp, #168	@ 0xa8
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <mavlink_signature_check+0x16>
		return true;
 800106a:	2301      	movs	r3, #1
 800106c:	e13e      	b.n	80012ec <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3302      	adds	r3, #2
 8001072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	const uint8_t *psig = msg->signature;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 800107c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001084:	3307      	adds	r3, #7
 8001086:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 800108a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fc88 	bl	80009a4 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f103 0110 	add.w	r1, r3, #16
 800109a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800109e:	2220      	movs	r2, #32
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fe97 	bl	8000dd4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 80010a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010aa:	220a      	movs	r2, #10
 80010ac:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fe8f 	bl	8000dd4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f103 010c 	add.w	r1, r3, #12
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	78db      	ldrb	r3, [r3, #3]
 80010c0:	461a      	mov	r2, r3
 80010c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe84 	bl	8000dd4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f503 718a 	add.w	r1, r3, #276	@ 0x114
 80010d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d6:	2202      	movs	r2, #2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fe7b 	bl	8000dd4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 80010de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e2:	2207      	movs	r2, #7
 80010e4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fe73 	bl	8000dd4 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 80010ee:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80010f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff feed 	bl	8000ed8 <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 80010fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001102:	2206      	movs	r2, #6
 8001104:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001108:	4618      	mov	r0, r3
 800110a:	f003 ffef 	bl	80050ec <memcmp>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2202      	movs	r2, #2
 8001118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		return false;
 800111c:	2300      	movs	r3, #0
 800111e:	e0e5      	b.n	80012ec <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8001120:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	tstamp.t64 = 0;
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8001136:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800113a:	1c59      	adds	r1, r3, #1
 800113c:	f107 0318 	add.w	r3, r7, #24
 8001140:	2206      	movs	r2, #6
 8001142:	4618      	mov	r0, r3
 8001144:	f004 f80e 	bl	8005164 <memcpy>

	if (signing_streams == NULL) {
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d105      	bne.n	800115a <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2203      	movs	r2, #3
 8001152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                return false;
 8001156:	2300      	movs	r3, #0
 8001158:	e0c8      	b.n	80012ec <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800115a:	2300      	movs	r3, #0
 800115c:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8001160:	e02b      	b.n	80011ba <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	79d9      	ldrb	r1, [r3, #7]
 8001166:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800116a:	68b8      	ldr	r0, [r7, #8]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4413      	add	r3, r2
 8001172:	4403      	add	r3, r0
 8001174:	3303      	adds	r3, #3
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4299      	cmp	r1, r3
 800117a:	d119      	bne.n	80011b0 <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7a19      	ldrb	r1, [r3, #8]
 8001180:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	4613      	mov	r3, r2
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	4413      	add	r3, r2
 800118c:	4403      	add	r3, r0
 800118e:	3304      	adds	r3, #4
 8001190:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001192:	4299      	cmp	r1, r3
 8001194:	d10c      	bne.n	80011b0 <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8001196:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	4613      	mov	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4413      	add	r3, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	3302      	adds	r3, #2
 80011a6:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 80011a8:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d00b      	beq.n	80011c8 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80011b0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80011b4:	3301      	adds	r3, #1
 80011b6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3cd      	bcc.n	8001162 <mavlink_signature_check+0x10a>
 80011c6:	e000      	b.n	80011ca <mavlink_signature_check+0x172>
			break;
 80011c8:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d146      	bne.n	8001264 <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	2b0f      	cmp	r3, #15
 80011dc:	d905      	bls.n	80011ea <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2204      	movs	r2, #4
 80011e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e080      	b.n	80012ec <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 80011ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011ee:	4941      	ldr	r1, [pc, #260]	@ (80012f4 <mavlink_signature_check+0x29c>)
 80011f0:	1854      	adds	r4, r2, r1
 80011f2:	f143 0500 	adc.w	r5, r3, #0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011fc:	4294      	cmp	r4, r2
 80011fe:	eb75 0303 	sbcs.w	r3, r5, r3
 8001202:	d205      	bcs.n	8001210 <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2205      	movs	r2, #5
 8001208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 800120c:	2300      	movs	r3, #0
 800120e:	e06d      	b.n	80012ec <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8001210:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	79d8      	ldrb	r0, [r3, #7]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	440b      	add	r3, r1
 8001222:	3303      	adds	r3, #3
 8001224:	4602      	mov	r2, r0
 8001226:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001228:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7a18      	ldrb	r0, [r3, #8]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	440b      	add	r3, r1
 800123a:	3304      	adds	r3, #4
 800123c:	4602      	mov	r2, r0
 800123e:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001240:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4413      	add	r3, r2
 800124c:	440b      	add	r3, r1
 800124e:	3302      	adds	r3, #2
 8001250:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8001254:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	b29a      	uxth	r2, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	801a      	strh	r2, [r3, #0]
 8001262:	e021      	b.n	80012a8 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001270:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001274:	4613      	mov	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4413      	add	r3, r2
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	4413      	add	r3, r2
 800127e:	1d59      	adds	r1, r3, #5
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2206      	movs	r2, #6
 8001286:	4618      	mov	r0, r3
 8001288:	f003 ff6c 	bl	8005164 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 800128c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001290:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001294:	4290      	cmp	r0, r2
 8001296:	eb71 0303 	sbcs.w	r3, r1, r3
 800129a:	d305      	bcc.n	80012a8 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2206      	movs	r2, #6
 80012a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e021      	b.n	80012ec <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 80012a8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80012ac:	4613      	mov	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	4413      	add	r3, r2
 80012b6:	1d58      	adds	r0, r3, #5
 80012b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80012bc:	3301      	adds	r3, #1
 80012be:	2206      	movs	r2, #6
 80012c0:	4619      	mov	r1, r3
 80012c2:	f003 ff4f 	bl	8005164 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 80012c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ca:	68f9      	ldr	r1, [r7, #12]
 80012cc:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80012d0:	4290      	cmp	r0, r2
 80012d2:	eb71 0303 	sbcs.w	r3, r1, r3
 80012d6:	d204      	bcs.n	80012e2 <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 80012d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012dc:	68f9      	ldr	r1, [r7, #12]
 80012de:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return true;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	37a8      	adds	r7, #168	@ 0xa8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bdb0      	pop	{r4, r5, r7, pc}
 80012f4:	005b8d80 	.word	0x005b8d80

080012f8 <_mav_parse_error>:
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}

static inline void _mav_parse_error(mavlink_status_t *status)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	789b      	ldrb	r3, [r3, #2]
 8001304:	3301      	adds	r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	709a      	strb	r2, [r3, #2]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001324:	f107 030e 	add.w	r3, r7, #14
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fb2d 	bl	8000988 <crc_init>
	msg->checksum = crcTmp;
 800132e:	89fa      	ldrh	r2, [r7, #14]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	801a      	strh	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001350:	f107 020e 	add.w	r2, r7, #14
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fae3 	bl	8000924 <crc_accumulate>
	msg->checksum = checksum;
 800135e:	89fa      	ldrh	r2, [r7, #14]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	801a      	strh	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	f240 1373 	movw	r3, #371	@ 0x173
 800137c:	613b      	str	r3, [r7, #16]
        while (low < high) {
 800137e:	e025      	b.n	80013cc <mavlink_get_msg_entry+0x60>
            uint32_t mid = (low+1+high)/2;
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4413      	add	r3, r2
 8001386:	3301      	adds	r3, #1
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 800138c:	491e      	ldr	r1, [pc, #120]	@ (8001408 <mavlink_get_msg_entry+0x9c>)
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d203      	bcs.n	80013aa <mavlink_get_msg_entry+0x3e>
                high = mid-1;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
                continue;
 80013a8:	e010      	b.n	80013cc <mavlink_get_msg_entry+0x60>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80013aa:	4917      	ldr	r1, [pc, #92]	@ (8001408 <mavlink_get_msg_entry+0x9c>)
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d902      	bls.n	80013c6 <mavlink_get_msg_entry+0x5a>
                low = mid;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	617b      	str	r3, [r7, #20]
                continue;
 80013c4:	e002      	b.n	80013cc <mavlink_get_msg_entry+0x60>
            }
            low = mid;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	617b      	str	r3, [r7, #20]
            break;
 80013ca:	e003      	b.n	80013d4 <mavlink_get_msg_entry+0x68>
        while (low < high) {
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3d5      	bcc.n	8001380 <mavlink_get_msg_entry+0x14>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 80013d4:	490c      	ldr	r1, [pc, #48]	@ (8001408 <mavlink_get_msg_entry+0x9c>)
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d001      	beq.n	80013ee <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e006      	b.n	80013fc <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4a03      	ldr	r2, [pc, #12]	@ (8001408 <mavlink_get_msg_entry+0x9c>)
 80013fa:	4413      	add	r3, r2
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	08005298 	.word	0x08005298

0800140c <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	4613      	mov	r3, r2
 800141a:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	78db      	ldrb	r3, [r3, #3]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f200 8272 	bhi.w	8001910 <mavlink_frame_char_buffer+0x504>
 800142c:	a201      	add	r2, pc, #4	@ (adr r2, 8001434 <mavlink_frame_char_buffer+0x28>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	08001475 	.word	0x08001475
 8001438:	08001475 	.word	0x08001475
 800143c:	080014d3 	.word	0x080014d3
 8001440:	08001539 	.word	0x08001539
 8001444:	0800156d 	.word	0x0800156d
 8001448:	08001585 	.word	0x08001585
 800144c:	0800159d 	.word	0x0800159d
 8001450:	080015b5 	.word	0x080015b5
 8001454:	080015cd 	.word	0x080015cd
 8001458:	08001627 	.word	0x08001627
 800145c:	08001673 	.word	0x08001673
 8001460:	080016cf 	.word	0x080016cf
 8001464:	08001707 	.word	0x08001707
 8001468:	0800179f 	.word	0x0800179f
 800146c:	0800179f 	.word	0x0800179f
 8001470:	0800185b 	.word	0x0800185b
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2bfd      	cmp	r3, #253	@ 0xfd
 8001478:	d113      	bne.n	80014a2 <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	2202      	movs	r2, #2
 800147e:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	7b1b      	ldrb	r3, [r3, #12]
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	b2da      	uxtb	r2, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff ff3c 	bl	8001318 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 80014a0:	e22d      	b.n	80018fe <mavlink_frame_char_buffer+0x4f2>
		} else if (c == MAVLINK_STX_MAVLINK1)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2bfe      	cmp	r3, #254	@ 0xfe
 80014a6:	f040 822a 	bne.w	80018fe <mavlink_frame_char_buffer+0x4f2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2202      	movs	r2, #2
 80014ae:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	79fa      	ldrb	r2, [r7, #7]
 80014ba:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	7b1b      	ldrb	r3, [r3, #12]
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f7ff ff24 	bl	8001318 <mavlink_start_checksum>
		break;
 80014d0:	e215      	b.n	80018fe <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00f      	beq.n	80014fa <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	785b      	ldrb	r3, [r3, #1]
 80014de:	3301      	adds	r3, #1
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 80014e6:	68b8      	ldr	r0, [r7, #8]
 80014e8:	f7ff ff06 	bl	80012f8 <_mav_parse_error>
			status->msg_received = 0;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2201      	movs	r2, #1
 80014f6:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 80014f8:	e20a      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
			rxmsg->len = c;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2200      	movs	r2, #0
 8001504:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4619      	mov	r1, r3
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f7ff ff16 	bl	800133c <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	7b1b      	ldrb	r3, [r3, #12]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d009      	beq.n	8001530 <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2205      	movs	r2, #5
 800152c:	70da      	strb	r2, [r3, #3]
		break;
 800152e:	e1ef      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2203      	movs	r2, #3
 8001534:	70da      	strb	r2, [r3, #3]
		break;
 8001536:	e1eb      	b.n	8001910 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	791b      	ldrb	r3, [r3, #4]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d909      	bls.n	800155a <mavlink_frame_char_buffer+0x14e>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001546:	68b8      	ldr	r0, [r7, #8]
 8001548:	f7ff fed6 	bl	80012f8 <_mav_parse_error>
			status->msg_received = 0;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2201      	movs	r2, #1
 8001556:	70da      	strb	r2, [r3, #3]
			break;
 8001558:	e1da      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
		}
		mavlink_update_checksum(rxmsg, c);
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4619      	mov	r1, r3
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff feec 	bl	800133c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2204      	movs	r2, #4
 8001568:	70da      	strb	r2, [r3, #3]
		break;
 800156a:	e1d1      	b.n	8001910 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	4619      	mov	r1, r3
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7ff fee0 	bl	800133c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2205      	movs	r2, #5
 8001580:	70da      	strb	r2, [r3, #3]
		break;
 8001582:	e1c5      	b.n	8001910 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4619      	mov	r1, r3
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f7ff fed4 	bl	800133c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2206      	movs	r2, #6
 8001598:	70da      	strb	r2, [r3, #3]
		break;
 800159a:	e1b9      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4619      	mov	r1, r3
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f7ff fec8 	bl	800133c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2207      	movs	r2, #7
 80015b0:	70da      	strb	r2, [r3, #3]
		break;
 80015b2:	e1ad      	b.n	8001910 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4619      	mov	r1, r3
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f7ff febc 	bl	800133c <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2208      	movs	r2, #8
 80015c8:	70da      	strb	r2, [r3, #3]
		break;
 80015ca:	e1a1      	b.n	8001910 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	b2d9      	uxtb	r1, r3
 80015d6:	2000      	movs	r0, #0
 80015d8:	4301      	orrs	r1, r0
 80015da:	7251      	strb	r1, [r2, #9]
 80015dc:	0a19      	lsrs	r1, r3, #8
 80015de:	b2c9      	uxtb	r1, r1
 80015e0:	2000      	movs	r0, #0
 80015e2:	4301      	orrs	r1, r0
 80015e4:	7291      	strb	r1, [r2, #10]
 80015e6:	0c1b      	lsrs	r3, r3, #16
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2100      	movs	r1, #0
 80015ec:	430b      	orrs	r3, r1
 80015ee:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4619      	mov	r1, r3
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f7ff fea1 	bl	800133c <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	7b1b      	ldrb	r3, [r3, #12]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <mavlink_frame_char_buffer+0x212>
			if(rxmsg->len > 0) {
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	78db      	ldrb	r3, [r3, #3]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <mavlink_frame_char_buffer+0x20a>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	220b      	movs	r2, #11
 8001612:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8001614:	e17c      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	220c      	movs	r2, #12
 800161a:	70da      	strb	r2, [r3, #3]
		break;
 800161c:	e178      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2209      	movs	r2, #9
 8001622:	70da      	strb	r2, [r3, #3]
		break;
 8001624:	e174      	b.n	8001910 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= ((uint32_t)c)<<8;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	7a5a      	ldrb	r2, [r3, #9]
 800162a:	7a99      	ldrb	r1, [r3, #10]
 800162c:	0209      	lsls	r1, r1, #8
 800162e:	430a      	orrs	r2, r1
 8001630:	7adb      	ldrb	r3, [r3, #11]
 8001632:	041b      	lsls	r3, r3, #16
 8001634:	4313      	orrs	r3, r2
 8001636:	461a      	mov	r2, r3
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	4313      	orrs	r3, r2
 800163e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	b2d1      	uxtb	r1, r2
 8001646:	2000      	movs	r0, #0
 8001648:	4301      	orrs	r1, r0
 800164a:	7259      	strb	r1, [r3, #9]
 800164c:	0a11      	lsrs	r1, r2, #8
 800164e:	b2c9      	uxtb	r1, r1
 8001650:	2000      	movs	r0, #0
 8001652:	4301      	orrs	r1, r0
 8001654:	7299      	strb	r1, [r3, #10]
 8001656:	0c12      	lsrs	r2, r2, #16
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	2100      	movs	r1, #0
 800165c:	430a      	orrs	r2, r1
 800165e:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	4619      	mov	r1, r3
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fe69 	bl	800133c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	220a      	movs	r2, #10
 800166e:	70da      	strb	r2, [r3, #3]
		break;
 8001670:	e14e      	b.n	8001910 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	7a5a      	ldrb	r2, [r3, #9]
 8001676:	7a99      	ldrb	r1, [r3, #10]
 8001678:	0209      	lsls	r1, r1, #8
 800167a:	430a      	orrs	r2, r1
 800167c:	7adb      	ldrb	r3, [r3, #11]
 800167e:	041b      	lsls	r3, r3, #16
 8001680:	4313      	orrs	r3, r2
 8001682:	461a      	mov	r2, r3
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	4313      	orrs	r3, r2
 800168a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	b2d1      	uxtb	r1, r2
 8001692:	2000      	movs	r0, #0
 8001694:	4301      	orrs	r1, r0
 8001696:	7259      	strb	r1, [r3, #9]
 8001698:	0a11      	lsrs	r1, r2, #8
 800169a:	b2c9      	uxtb	r1, r1
 800169c:	2000      	movs	r0, #0
 800169e:	4301      	orrs	r1, r0
 80016a0:	7299      	strb	r1, [r3, #10]
 80016a2:	0c12      	lsrs	r2, r2, #16
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	2100      	movs	r1, #0
 80016a8:	430a      	orrs	r2, r1
 80016aa:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	4619      	mov	r1, r3
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff fe43 	bl	800133c <mavlink_update_checksum>
		if(rxmsg->len > 0){
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	78db      	ldrb	r3, [r3, #3]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <mavlink_frame_char_buffer+0x2ba>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	220b      	movs	r2, #11
 80016c2:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 80016c4:	e124      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	220c      	movs	r2, #12
 80016ca:	70da      	strb	r2, [r3, #3]
		break;
 80016cc:	e120      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f103 020c 	add.w	r2, r3, #12
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	791b      	ldrb	r3, [r3, #4]
 80016d8:	1c59      	adds	r1, r3, #1
 80016da:	b2c8      	uxtb	r0, r1
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	7108      	strb	r0, [r1, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	79fa      	ldrb	r2, [r7, #7]
 80016e4:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	4619      	mov	r1, r3
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff fe26 	bl	800133c <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	791a      	ldrb	r2, [r3, #4]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	78db      	ldrb	r3, [r3, #3]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f040 8102 	bne.w	8001902 <mavlink_frame_char_buffer+0x4f6>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	220c      	movs	r2, #12
 8001702:	70da      	strb	r2, [r3, #3]
		}
		break;
 8001704:	e0fd      	b.n	8001902 <mavlink_frame_char_buffer+0x4f6>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	7a5a      	ldrb	r2, [r3, #9]
 800170a:	7a99      	ldrb	r1, [r3, #10]
 800170c:	0209      	lsls	r1, r1, #8
 800170e:	430a      	orrs	r2, r1
 8001710:	7adb      	ldrb	r3, [r3, #11]
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	4313      	orrs	r3, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fe28 	bl	800136c <mavlink_get_msg_entry>
 800171c:	61b8      	str	r0, [r7, #24]
		if (e == NULL) {
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d107      	bne.n	8001734 <mavlink_frame_char_buffer+0x328>
			// Message not found in CRC_EXTRA table.
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	220e      	movs	r2, #14
 8001728:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			// zero-fill the packet to cope with short incoming packets
				if (e && status->packet_idx < e->max_msg_len) {
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
			}
		}
		break;
 8001732:	e0e8      	b.n	8001906 <mavlink_frame_char_buffer+0x4fa>
			uint8_t crc_extra = e->crc_extra;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	791b      	ldrb	r3, [r3, #4]
 8001738:	75fb      	strb	r3, [r7, #23]
			mavlink_update_checksum(rxmsg, crc_extra);
 800173a:	7dfb      	ldrb	r3, [r7, #23]
 800173c:	4619      	mov	r1, r3
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff fdfc 	bl	800133c <mavlink_update_checksum>
			if (c != (rxmsg->checksum & 0xFF)) {
 8001744:	79fa      	ldrb	r2, [r7, #7]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	429a      	cmp	r2, r3
 8001750:	d003      	beq.n	800175a <mavlink_frame_char_buffer+0x34e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	220e      	movs	r2, #14
 8001756:	70da      	strb	r2, [r3, #3]
 8001758:	e002      	b.n	8001760 <mavlink_frame_char_buffer+0x354>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	220d      	movs	r2, #13
 800175e:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	79fa      	ldrb	r2, [r7, #7]
 8001764:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				if (e && status->packet_idx < e->max_msg_len) {
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80cb 	beq.w	8001906 <mavlink_frame_char_buffer+0x4fa>
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	791a      	ldrb	r2, [r3, #4]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	799b      	ldrb	r3, [r3, #6]
 8001778:	429a      	cmp	r2, r3
 800177a:	f080 80c4 	bcs.w	8001906 <mavlink_frame_char_buffer+0x4fa>
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	330c      	adds	r3, #12
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	7912      	ldrb	r2, [r2, #4]
 8001786:	1898      	adds	r0, r3, r2
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	799b      	ldrb	r3, [r3, #6]
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	791b      	ldrb	r3, [r3, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	461a      	mov	r2, r3
 8001796:	2100      	movs	r1, #0
 8001798:	f003 fcb8 	bl	800510c <memset>
		break;
 800179c:	e0b3      	b.n	8001906 <mavlink_frame_char_buffer+0x4fa>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	78db      	ldrb	r3, [r3, #3]
 80017a2:	2b0e      	cmp	r3, #14
 80017a4:	d008      	beq.n	80017b8 <mavlink_frame_char_buffer+0x3ac>
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d003      	beq.n	80017c0 <mavlink_frame_char_buffer+0x3b4>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2202      	movs	r2, #2
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	e002      	b.n	80017c6 <mavlink_frame_char_buffer+0x3ba>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	79fa      	ldrb	r2, [r7, #7]
 80017ca:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	791b      	ldrb	r3, [r3, #4]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <mavlink_frame_char_buffer+0x3ec>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	220f      	movs	r2, #15
 80017de:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	220d      	movs	r2, #13
 80017e4:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	f000 808d 	beq.w	800190a <mavlink_frame_char_buffer+0x4fe>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 80017f6:	e088      	b.n	800190a <mavlink_frame_char_buffer+0x4fe>
			if (status->signing &&
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d01f      	beq.n	8001840 <mavlink_frame_char_buffer+0x434>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (status->signing &&
 8001806:	2b00      	cmp	r3, #0
 8001808:	d013      	beq.n	8001832 <mavlink_frame_char_buffer+0x426>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	7a59      	ldrb	r1, [r3, #9]
 8001814:	7a98      	ldrb	r0, [r3, #10]
 8001816:	0200      	lsls	r0, r0, #8
 8001818:	4301      	orrs	r1, r0
 800181a:	7adb      	ldrb	r3, [r3, #11]
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	430b      	orrs	r3, r1
 8001820:	4619      	mov	r1, r3
 8001822:	68b8      	ldr	r0, [r7, #8]
 8001824:	4790      	blx	r2
 8001826:	4603      	mov	r3, r0
 8001828:	f083 0301 	eor.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <mavlink_frame_char_buffer+0x434>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d002      	beq.n	8001840 <mavlink_frame_char_buffer+0x434>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2203      	movs	r2, #3
 800183e:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2201      	movs	r2, #1
 8001844:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d05e      	beq.n	800190a <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800184c:	f240 1223 	movw	r2, #291	@ 0x123
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	6838      	ldr	r0, [r7, #0]
 8001854:	f003 fc86 	bl	8005164 <memcpy>
		break;
 8001858:	e057      	b.n	800190a <mavlink_frame_char_buffer+0x4fe>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	7b5b      	ldrb	r3, [r3, #13]
 800185e:	f1c3 030d 	rsb	r3, r3, #13
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4413      	add	r3, r2
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
		status->signature_wait--;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	7b5b      	ldrb	r3, [r3, #13]
 8001870:	3b01      	subs	r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	7b5b      	ldrb	r3, [r3, #13]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d146      	bne.n	800190e <mavlink_frame_char_buffer+0x502>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	6918      	ldr	r0, [r3, #16]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff fbe4 	bl	8001058 <mavlink_signature_check>
 8001890:	4603      	mov	r3, r0
 8001892:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8001894:	7ffb      	ldrb	r3, [r7, #31]
 8001896:	f083 0301 	eor.w	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d017      	beq.n	80018d0 <mavlink_frame_char_buffer+0x4c4>
			   	(status->signing->accept_unsigned_callback &&
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (!sig_ok &&
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d012      	beq.n	80018d0 <mavlink_frame_char_buffer+0x4c4>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	7a59      	ldrb	r1, [r3, #9]
 80018b4:	7a98      	ldrb	r0, [r3, #10]
 80018b6:	0200      	lsls	r0, r0, #8
 80018b8:	4301      	orrs	r1, r0
 80018ba:	7adb      	ldrb	r3, [r3, #11]
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	430b      	orrs	r3, r1
 80018c0:	4619      	mov	r1, r3
 80018c2:	68b8      	ldr	r0, [r7, #8]
 80018c4:	4790      	blx	r2
 80018c6:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <mavlink_frame_char_buffer+0x4c4>
				// accepted via application level override
				sig_ok = true;
 80018cc:	2301      	movs	r3, #1
 80018ce:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 80018d0:	7ffb      	ldrb	r3, [r7, #31]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <mavlink_frame_char_buffer+0x4d2>
				status->msg_received = MAVLINK_FRAMING_OK;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	e002      	b.n	80018e4 <mavlink_frame_char_buffer+0x4d8>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2203      	movs	r2, #3
 80018e2:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2201      	movs	r2, #1
 80018e8:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00e      	beq.n	800190e <mavlink_frame_char_buffer+0x502>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80018f0:	f240 1223 	movw	r2, #291	@ 0x123
 80018f4:	68f9      	ldr	r1, [r7, #12]
 80018f6:	6838      	ldr	r0, [r7, #0]
 80018f8:	f003 fc34 	bl	8005164 <memcpy>
			}
		}
		break;
 80018fc:	e007      	b.n	800190e <mavlink_frame_char_buffer+0x502>
		break;
 80018fe:	bf00      	nop
 8001900:	e006      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
		break;
 8001902:	bf00      	nop
 8001904:	e004      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
		break;
 8001906:	bf00      	nop
 8001908:	e002      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
		break;
 800190a:	bf00      	nop
 800190c:	e000      	b.n	8001910 <mavlink_frame_char_buffer+0x504>
		break;
 800190e:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d110      	bne.n	800193a <mavlink_frame_char_buffer+0x52e>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	799a      	ldrb	r2, [r3, #6]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	891b      	ldrh	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <mavlink_frame_char_buffer+0x522>
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	2200      	movs	r2, #0
 800192c:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	891b      	ldrh	r3, [r3, #8]
 8001932:	3301      	adds	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <mavlink_frame_char_buffer+0x53c>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	78da      	ldrb	r2, [r3, #3]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8001948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800194a:	2b00      	cmp	r3, #0
 800194c:	d01a      	beq.n	8001984 <mavlink_frame_char_buffer+0x578>
           r_mavlink_status->parse_state = status->parse_state;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	78da      	ldrb	r2, [r3, #3]
 8001952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001954:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	791a      	ldrb	r2, [r3, #4]
 800195a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800195c:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	795b      	ldrb	r3, [r3, #5]
 8001962:	3301      	adds	r3, #1
 8001964:	b2da      	uxtb	r2, r3
 8001966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001968:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	891a      	ldrh	r2, [r3, #8]
 800196e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001970:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	789b      	ldrb	r3, [r3, #2]
 8001976:	461a      	mov	r2, r3
 8001978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197a:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	7b1a      	ldrb	r2, [r3, #12]
 8001980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001982:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2200      	movs	r2, #0
 8001988:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d110      	bne.n	80019b4 <mavlink_frame_char_buffer+0x5a8>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00d      	beq.n	80019b4 <mavlink_frame_char_buffer+0x5a8>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800199e:	b21a      	sxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	781b      	ldrb	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	460b      	mov	r3, r1
 80019d0:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fb2b 	bl	8001030 <mavlink_get_channel_buffer>
 80019da:	4604      	mov	r4, r0
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fb12 	bl	8001008 <mavlink_get_channel_status>
 80019e4:	4601      	mov	r1, r0
 80019e6:	7bba      	ldrb	r2, [r7, #14]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff fd0c 	bl	800140c <mavlink_frame_char_buffer>
 80019f4:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}

080019fe <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b088      	sub	sp, #32
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	4603      	mov	r3, r0
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8001a10:	7bb9      	ldrb	r1, [r7, #14]
 8001a12:	7bf8      	ldrb	r0, [r7, #15]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f7ff ffd2 	bl	80019c0 <mavlink_frame_char>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001a20:	7ffb      	ldrb	r3, [r7, #31]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d002      	beq.n	8001a2c <mavlink_parse_char+0x2e>
 8001a26:	7ffb      	ldrb	r3, [r7, #31]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d120      	bne.n	8001a6e <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fafe 	bl	8001030 <mavlink_get_channel_buffer>
 8001a34:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fae5 	bl	8001008 <mavlink_get_channel_status>
 8001a3e:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8001a40:	6978      	ldr	r0, [r7, #20]
 8001a42:	f7ff fc59 	bl	80012f8 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	2bfd      	cmp	r3, #253	@ 0xfd
 8001a56:	d108      	bne.n	8001a6a <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2200      	movs	r2, #0
 8001a62:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8001a64:	69b8      	ldr	r0, [r7, #24]
 8001a66:	f7ff fc57 	bl	8001318 <mavlink_start_checksum>
	    }
	    return 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8001a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_MAV_RETURN_uint16_t>:
#else // nicely aligned, no swap
#define _MAV_MSG_RETURN_TYPE(TYPE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ return *(const TYPE *)(&_MAV_PAYLOAD(msg)[ofs]);}

_MAV_MSG_RETURN_TYPE(uint16_t)
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f103 020c 	add.w	r2, r3, #12
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(int16_t)
_MAV_MSG_RETURN_TYPE(uint32_t)
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f103 020c 	add.w	r2, r3, #12
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_MAV_RETURN_int32_t>:
_MAV_MSG_RETURN_TYPE(int32_t)
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	70fb      	strb	r3, [r7, #3]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f103 020c 	add.w	r2, r3, #12
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <mavlink_msg_sys_status_get_onboard_control_sensors_health>:
 * @brief Get field onboard_control_sensors_health from sys_status message
 *
 * @return  Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy.
 */
static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_health(const mavlink_message_t* msg)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint32_t(msg,  8);
 8001aec:	2108      	movs	r1, #8
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffd4 	bl	8001a9c <_MAV_RETURN_uint32_t>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <mavlink_msg_sys_status_decode>:
 *
 * @param msg The message to decode
 * @param sys_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_sys_status_decode(const mavlink_message_t* msg, mavlink_sys_status_t* sys_status)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
    sys_status->battery_remaining = mavlink_msg_sys_status_get_battery_remaining(msg);
    sys_status->onboard_control_sensors_present_extended = mavlink_msg_sys_status_get_onboard_control_sensors_present_extended(msg);
    sys_status->onboard_control_sensors_enabled_extended = mavlink_msg_sys_status_get_onboard_control_sensors_enabled_extended(msg);
    sys_status->onboard_control_sensors_health_extended = mavlink_msg_sys_status_get_onboard_control_sensors_health_extended(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SYS_STATUS_LEN? msg->len : MAVLINK_MSG_ID_SYS_STATUS_LEN;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	78db      	ldrb	r3, [r3, #3]
 8001b0c:	2b2b      	cmp	r3, #43	@ 0x2b
 8001b0e:	bf28      	it	cs
 8001b10:	232b      	movcs	r3, #43	@ 0x2b
 8001b12:	73fb      	strb	r3, [r7, #15]
        memset(sys_status, 0, MAVLINK_MSG_ID_SYS_STATUS_LEN);
 8001b14:	222b      	movs	r2, #43	@ 0x2b
 8001b16:	2100      	movs	r1, #0
 8001b18:	6838      	ldr	r0, [r7, #0]
 8001b1a:	f003 faf7 	bl	800510c <memset>
    memcpy(sys_status, _MAV_PAYLOAD(msg), len);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	330c      	adds	r3, #12
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	4619      	mov	r1, r3
 8001b26:	6838      	ldr	r0, [r7, #0]
 8001b28:	f003 fb1c 	bl	8005164 <memcpy>
#endif
}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <mavlink_msg_global_position_int_get_lat>:
 * @brief Get field lat from global_position_int message
 *
 * @return [degE7] Latitude, expressed
 */
static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_int32_t(msg,  4);
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffbe 	bl	8001ac0 <_MAV_RETURN_int32_t>
 8001b44:	4603      	mov	r3, r0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <mavlink_msg_global_position_int_get_alt>:
 * @brief Get field alt from global_position_int message
 *
 * @return [mm] Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL.
 */
static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_int32_t(msg,  12);
 8001b56:	210c      	movs	r1, #12
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ffb1 	bl	8001ac0 <_MAV_RETURN_int32_t>
 8001b5e:	4603      	mov	r3, r0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
    global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
    global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
    global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
    global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN? msg->len : MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	78db      	ldrb	r3, [r3, #3]
 8001b76:	2b1c      	cmp	r3, #28
 8001b78:	bf28      	it	cs
 8001b7a:	231c      	movcs	r3, #28
 8001b7c:	73fb      	strb	r3, [r7, #15]
        memset(global_position_int, 0, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
 8001b7e:	221c      	movs	r2, #28
 8001b80:	2100      	movs	r1, #0
 8001b82:	6838      	ldr	r0, [r7, #0]
 8001b84:	f003 fac2 	bl	800510c <memset>
    memcpy(global_position_int, _MAV_PAYLOAD(msg), len);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	330c      	adds	r3, #12
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6838      	ldr	r0, [r7, #0]
 8001b92:	f003 fae7 	bl	8005164 <memcpy>
#endif
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <mavlink_msg_power_status_get_Vcc>:
 * @brief Get field Vcc from power_status message
 *
 * @return [mV] 5V rail voltage.
 */
static inline uint16_t mavlink_msg_power_status_get_Vcc(const mavlink_message_t* msg)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint16_t(msg,  0);
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff65 	bl	8001a78 <_MAV_RETURN_uint16_t>
 8001bae:	4603      	mov	r3, r0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <mavlink_msg_power_status_decode>:
 *
 * @param msg The message to decode
 * @param power_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_power_status_decode(const mavlink_message_t* msg, mavlink_power_status_t* power_status)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    power_status->Vcc = mavlink_msg_power_status_get_Vcc(msg);
    power_status->Vservo = mavlink_msg_power_status_get_Vservo(msg);
    power_status->flags = mavlink_msg_power_status_get_flags(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_POWER_STATUS_LEN? msg->len : MAVLINK_MSG_ID_POWER_STATUS_LEN;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	78db      	ldrb	r3, [r3, #3]
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	bf28      	it	cs
 8001bca:	2306      	movcs	r3, #6
 8001bcc:	73fb      	strb	r3, [r7, #15]
        memset(power_status, 0, MAVLINK_MSG_ID_POWER_STATUS_LEN);
 8001bce:	2206      	movs	r2, #6
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f003 fa9a 	bl	800510c <memset>
    memcpy(power_status, _MAV_PAYLOAD(msg), len);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	330c      	adds	r3, #12
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	4619      	mov	r1, r3
 8001be0:	6838      	ldr	r0, [r7, #0]
 8001be2:	f003 fabf 	bl	8005164 <memcpy>
#endif
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <mavlink_msg_heartbeat_get_type>:
 * @brief Get field type from heartbeat message
 *
 * @return  Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.
 */
static inline uint8_t mavlink_msg_heartbeat_get_type(const mavlink_message_t* msg)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint8_t(msg,  4);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	781b      	ldrb	r3, [r3, #0]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <decode_mavlink_mssg>:
 *
 * @param byte:		Current byte of the message to decode
 *
 **/
void decode_mavlink_mssg(const unsigned char* byte)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	if (mavlink_parse_char(chan, byte, &msg, &status))
 8001c14:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <decode_mavlink_mssg+0xac>)
 8001c16:	7818      	ldrb	r0, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	b2d9      	uxtb	r1, r3
 8001c1c:	4b27      	ldr	r3, [pc, #156]	@ (8001cbc <decode_mavlink_mssg+0xb0>)
 8001c1e:	4a28      	ldr	r2, [pc, #160]	@ (8001cc0 <decode_mavlink_mssg+0xb4>)
 8001c20:	f7ff feed 	bl	80019fe <mavlink_parse_char>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d042      	beq.n	8001cb0 <decode_mavlink_mssg+0xa4>

		HAL_UART_Transmit(&huart3, msg.msgid, 24, 100);
		HAL_UART_Transmit(&huart3, "\n", 1, 100);*/

		// ... DECODE THE MESSAGE PAYLOAD HERE ...
		 switch(msg.msgid) {
 8001c2a:	4b25      	ldr	r3, [pc, #148]	@ (8001cc0 <decode_mavlink_mssg+0xb4>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001c32:	2b7d      	cmp	r3, #125	@ 0x7d
 8001c34:	d02f      	beq.n	8001c96 <decode_mavlink_mssg+0x8a>
 8001c36:	2b7d      	cmp	r3, #125	@ 0x7d
 8001c38:	dc39      	bgt.n	8001cae <decode_mavlink_mssg+0xa2>
 8001c3a:	2b21      	cmp	r3, #33	@ 0x21
 8001c3c:	d00e      	beq.n	8001c5c <decode_mavlink_mssg+0x50>
 8001c3e:	2b21      	cmp	r3, #33	@ 0x21
 8001c40:	dc35      	bgt.n	8001cae <decode_mavlink_mssg+0xa2>
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <decode_mavlink_mssg+0x40>
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d019      	beq.n	8001c7e <decode_mavlink_mssg+0x72>
				power = mavlink_msg_power_status_get_Vcc(&msg);
			break;


			default:
			break;
 8001c4a:	e030      	b.n	8001cae <decode_mavlink_mssg+0xa2>
			 	device_type=mavlink_msg_heartbeat_get_type(&msg);
 8001c4c:	481c      	ldr	r0, [pc, #112]	@ (8001cc0 <decode_mavlink_mssg+0xb4>)
 8001c4e:	f7ff ffce 	bl	8001bee <mavlink_msg_heartbeat_get_type>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <decode_mavlink_mssg+0xb8>)
 8001c58:	601a      	str	r2, [r3, #0]
			 break;
 8001c5a:	e029      	b.n	8001cb0 <decode_mavlink_mssg+0xa4>
				mavlink_msg_global_position_int_decode(&msg, &global_position);
 8001c5c:	491a      	ldr	r1, [pc, #104]	@ (8001cc8 <decode_mavlink_mssg+0xbc>)
 8001c5e:	4818      	ldr	r0, [pc, #96]	@ (8001cc0 <decode_mavlink_mssg+0xb4>)
 8001c60:	f7ff ff82 	bl	8001b68 <mavlink_msg_global_position_int_decode>
				mav_alt=mavlink_msg_global_position_int_get_alt(&msg);
 8001c64:	4816      	ldr	r0, [pc, #88]	@ (8001cc0 <decode_mavlink_mssg+0xb4>)
 8001c66:	f7ff ff72 	bl	8001b4e <mavlink_msg_global_position_int_get_alt>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a17      	ldr	r2, [pc, #92]	@ (8001ccc <decode_mavlink_mssg+0xc0>)
 8001c6e:	6013      	str	r3, [r2, #0]
				mav_lat=mavlink_msg_global_position_int_get_lat(&msg);
 8001c70:	4813      	ldr	r0, [pc, #76]	@ (8001cc0 <decode_mavlink_mssg+0xb4>)
 8001c72:	f7ff ff5f 	bl	8001b34 <mavlink_msg_global_position_int_get_lat>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a15      	ldr	r2, [pc, #84]	@ (8001cd0 <decode_mavlink_mssg+0xc4>)
 8001c7a:	6013      	str	r3, [r2, #0]
			break;
 8001c7c:	e018      	b.n	8001cb0 <decode_mavlink_mssg+0xa4>
				mavlink_msg_sys_status_decode(&msg, &sys_status);
 8001c7e:	4915      	ldr	r1, [pc, #84]	@ (8001cd4 <decode_mavlink_mssg+0xc8>)
 8001c80:	480f      	ldr	r0, [pc, #60]	@ (8001cc0 <decode_mavlink_mssg+0xb4>)
 8001c82:	f7ff ff3c 	bl	8001afe <mavlink_msg_sys_status_decode>
				health = mavlink_msg_sys_status_get_onboard_control_sensors_health(&msg);
 8001c86:	480e      	ldr	r0, [pc, #56]	@ (8001cc0 <decode_mavlink_mssg+0xb4>)
 8001c88:	f7ff ff2c 	bl	8001ae4 <mavlink_msg_sys_status_get_onboard_control_sensors_health>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <decode_mavlink_mssg+0xcc>)
 8001c92:	601a      	str	r2, [r3, #0]
			break;
 8001c94:	e00c      	b.n	8001cb0 <decode_mavlink_mssg+0xa4>
				mavlink_msg_power_status_decode(&msg, &pwr_status);
 8001c96:	4911      	ldr	r1, [pc, #68]	@ (8001cdc <decode_mavlink_mssg+0xd0>)
 8001c98:	4809      	ldr	r0, [pc, #36]	@ (8001cc0 <decode_mavlink_mssg+0xb4>)
 8001c9a:	f7ff ff8d 	bl	8001bb8 <mavlink_msg_power_status_decode>
				power = mavlink_msg_power_status_get_Vcc(&msg);
 8001c9e:	4808      	ldr	r0, [pc, #32]	@ (8001cc0 <decode_mavlink_mssg+0xb4>)
 8001ca0:	f7ff ff7d 	bl	8001b9e <mavlink_msg_power_status_get_Vcc>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <decode_mavlink_mssg+0xd4>)
 8001caa:	601a      	str	r2, [r3, #0]
			break;
 8001cac:	e000      	b.n	8001cb0 <decode_mavlink_mssg+0xa4>
			break;
 8001cae:	bf00      	nop
			}
	}

}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000073a 	.word	0x2000073a
 8001cbc:	2000073c 	.word	0x2000073c
 8001cc0:	20000754 	.word	0x20000754
 8001cc4:	20000704 	.word	0x20000704
 8001cc8:	200006d8 	.word	0x200006d8
 8001ccc:	200006f8 	.word	0x200006f8
 8001cd0:	200006fc 	.word	0x200006fc
 8001cd4:	20000708 	.word	0x20000708
 8001cd8:	200006f4 	.word	0x200006f4
 8001cdc:	20000734 	.word	0x20000734
 8001ce0:	20000700 	.word	0x20000700

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <HAL_MspInit+0x44>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	4a0e      	ldr	r2, [pc, #56]	@ (8001d28 <HAL_MspInit+0x44>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <HAL_MspInit+0x44>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <HAL_MspInit+0x44>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	4a08      	ldr	r2, [pc, #32]	@ (8001d28 <HAL_MspInit+0x44>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_MspInit+0x44>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08e      	sub	sp, #56	@ 0x38
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a4e      	ldr	r2, [pc, #312]	@ (8001e84 <HAL_ETH_MspInit+0x158>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	f040 8096 	bne.w	8001e7c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001d50:	4b4d      	ldr	r3, [pc, #308]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	4a4c      	ldr	r2, [pc, #304]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	4b47      	ldr	r3, [pc, #284]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6c:	4a46      	ldr	r2, [pc, #280]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d72:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d74:	4b44      	ldr	r3, [pc, #272]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	4b41      	ldr	r3, [pc, #260]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	4a40      	ldr	r2, [pc, #256]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d98:	4b3b      	ldr	r3, [pc, #236]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da4:	4b38      	ldr	r3, [pc, #224]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b35      	ldr	r3, [pc, #212]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	4a34      	ldr	r2, [pc, #208]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbc:	4b32      	ldr	r3, [pc, #200]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001dce:	f043 0302 	orr.w	r3, r3, #2
 8001dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de0:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de4:	4a28      	ldr	r2, [pc, #160]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dea:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dec:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <HAL_ETH_MspInit+0x15c>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001df8:	2332      	movs	r3, #50	@ 0x32
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e08:	230b      	movs	r3, #11
 8001e0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e10:	4619      	mov	r1, r3
 8001e12:	481e      	ldr	r0, [pc, #120]	@ (8001e8c <HAL_ETH_MspInit+0x160>)
 8001e14:	f000 fed6 	bl	8002bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e18:	2386      	movs	r3, #134	@ 0x86
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e28:	230b      	movs	r3, #11
 8001e2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e30:	4619      	mov	r1, r3
 8001e32:	4817      	ldr	r0, [pc, #92]	@ (8001e90 <HAL_ETH_MspInit+0x164>)
 8001e34:	f000 fec6 	bl	8002bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e4a:	230b      	movs	r3, #11
 8001e4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e52:	4619      	mov	r1, r3
 8001e54:	480f      	ldr	r0, [pc, #60]	@ (8001e94 <HAL_ETH_MspInit+0x168>)
 8001e56:	f000 feb5 	bl	8002bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001e5a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e6c:	230b      	movs	r3, #11
 8001e6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4808      	ldr	r0, [pc, #32]	@ (8001e98 <HAL_ETH_MspInit+0x16c>)
 8001e78:	f000 fea4 	bl	8002bc4 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3738      	adds	r7, #56	@ 0x38
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40028000 	.word	0x40028000
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020800 	.word	0x40020800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40021800 	.word	0x40021800

08001e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0ac      	sub	sp, #176	@ 0xb0
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	2284      	movs	r2, #132	@ 0x84
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f925 	bl	800510c <memset>
  if(huart->Instance==USART1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a46      	ldr	r2, [pc, #280]	@ (8001fe0 <HAL_UART_MspInit+0x144>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d143      	bne.n	8001f54 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ecc:	2340      	movs	r3, #64	@ 0x40
 8001ece:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f001 fd13 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ee4:	f7fe fd18 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eec:	4a3d      	ldr	r2, [pc, #244]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001eee:	f043 0310 	orr.w	r3, r3, #16
 8001ef2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f00:	4b38      	ldr	r3, [pc, #224]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f04:	4a37      	ldr	r2, [pc, #220]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0c:	4b35      	ldr	r3, [pc, #212]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f18:	2340      	movs	r3, #64	@ 0x40
 8001f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1e:	2312      	movs	r3, #18
 8001f20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f24:	2301      	movs	r3, #1
 8001f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f30:	2307      	movs	r3, #7
 8001f32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	482a      	ldr	r0, [pc, #168]	@ (8001fe8 <HAL_UART_MspInit+0x14c>)
 8001f3e:	f000 fe41 	bl	8002bc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2025      	movs	r0, #37	@ 0x25
 8001f48:	f000 fa25 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f4c:	2025      	movs	r0, #37	@ 0x25
 8001f4e:	f000 fa3e 	bl	80023ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f52:	e041      	b.n	8001fd8 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a24      	ldr	r2, [pc, #144]	@ (8001fec <HAL_UART_MspInit+0x150>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d13c      	bne.n	8001fd8 <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f68:	f107 0318 	add.w	r3, r7, #24
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 fcc9 	bl	8003904 <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001f78:	f7fe fcce 	bl	8000918 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001f82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f94:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f98:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001f9a:	f043 0308 	orr.w	r3, r3, #8
 8001f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa0:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_UART_MspInit+0x148>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001fac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fcc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4807      	ldr	r0, [pc, #28]	@ (8001ff0 <HAL_UART_MspInit+0x154>)
 8001fd4:	f000 fdf6 	bl	8002bc4 <HAL_GPIO_Init>
}
 8001fd8:	bf00      	nop
 8001fda:	37b0      	adds	r7, #176	@ 0xb0
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	40004800 	.word	0x40004800
 8001ff0:	40020c00 	.word	0x40020c00

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <MemManage_Handler+0x4>

0800200c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <UsageFault_Handler+0x4>

0800201c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204a:	f000 f885 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002058:	4802      	ldr	r0, [pc, #8]	@ (8002064 <USART1_IRQHandler+0x10>)
 800205a:	f002 f8e7 	bl	800422c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200005bc 	.word	0x200005bc

08002068 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <SystemInit+0x20>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <SystemInit+0x20>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <Reset_Handler>:
 800208c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020c4 <LoopFillZerobss+0xe>
 8002090:	f7ff ffea 	bl	8002068 <SystemInit>
 8002094:	480c      	ldr	r0, [pc, #48]	@ (80020c8 <LoopFillZerobss+0x12>)
 8002096:	490d      	ldr	r1, [pc, #52]	@ (80020cc <LoopFillZerobss+0x16>)
 8002098:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <LoopFillZerobss+0x1a>)
 800209a:	2300      	movs	r3, #0
 800209c:	e002      	b.n	80020a4 <LoopCopyDataInit>

0800209e <CopyDataInit>:
 800209e:	58d4      	ldr	r4, [r2, r3]
 80020a0:	50c4      	str	r4, [r0, r3]
 80020a2:	3304      	adds	r3, #4

080020a4 <LoopCopyDataInit>:
 80020a4:	18c4      	adds	r4, r0, r3
 80020a6:	428c      	cmp	r4, r1
 80020a8:	d3f9      	bcc.n	800209e <CopyDataInit>
 80020aa:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <LoopFillZerobss+0x1e>)
 80020ac:	4c0a      	ldr	r4, [pc, #40]	@ (80020d8 <LoopFillZerobss+0x22>)
 80020ae:	2300      	movs	r3, #0
 80020b0:	e001      	b.n	80020b6 <LoopFillZerobss>

080020b2 <FillZerobss>:
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	3204      	adds	r2, #4

080020b6 <LoopFillZerobss>:
 80020b6:	42a2      	cmp	r2, r4
 80020b8:	d3fb      	bcc.n	80020b2 <FillZerobss>
 80020ba:	f003 f82f 	bl	800511c <__libc_init_array>
 80020be:	f7fe fa1b 	bl	80004f8 <main>
 80020c2:	4770      	bx	lr
 80020c4:	20050000 	.word	0x20050000
 80020c8:	20000000 	.word	0x20000000
 80020cc:	20000378 	.word	0x20000378
 80020d0:	08006430 	.word	0x08006430
 80020d4:	200004b8 	.word	0x200004b8
 80020d8:	20000d68 	.word	0x20000d68

080020dc <ADC_IRQHandler>:
 80020dc:	e7fe      	b.n	80020dc <ADC_IRQHandler>

080020de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e2:	2003      	movs	r0, #3
 80020e4:	f000 f94c 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f000 f805 	bl	80020f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ee:	f7ff fdf9 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_InitTick+0x54>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <HAL_InitTick+0x58>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f967 	bl	80023ea <HAL_SYSTICK_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00e      	b.n	8002144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d80a      	bhi.n	8002142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212c:	2200      	movs	r2, #0
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f000 f92f 	bl	8002396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <HAL_InitTick+0x5c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000036c 	.word	0x2000036c
 8002150:	20000374 	.word	0x20000374
 8002154:	20000370 	.word	0x20000370

08002158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_IncTick+0x20>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_IncTick+0x24>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a04      	ldr	r2, [pc, #16]	@ (800217c <HAL_IncTick+0x24>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000374 	.word	0x20000374
 800217c:	20000d64 	.word	0x20000d64

08002180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return uwTick;
 8002184:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <HAL_GetTick+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000d64 	.word	0x20000d64

08002198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff ffee 	bl	8002180 <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <HAL_Delay+0x44>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021be:	bf00      	nop
 80021c0:	f7ff ffde 	bl	8002180 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000374 	.word	0x20000374

080021e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002220 <__NVIC_SetPriorityGrouping+0x40>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	4313      	orrs	r3, r2
 800220c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220e:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <__NVIC_SetPriorityGrouping+0x40>)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60d3      	str	r3, [r2, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00
 8002224:	05fa0000 	.word	0x05fa0000

08002228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	@ (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	@ (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	@ (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	@ (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	@ 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	@ 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f7ff ff8e 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	@ (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	@ (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff29 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a8:	f7ff ff3e 	bl	8002228 <__NVIC_GetPriorityGrouping>
 80023ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f7ff ff8e 	bl	80022d4 <NVIC_EncodePriority>
 80023b8:	4602      	mov	r2, r0
 80023ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff5d 	bl	8002280 <__NVIC_SetPriority>
}
 80023c6:	bf00      	nop
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	4603      	mov	r3, r0
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff31 	bl	8002244 <__NVIC_EnableIRQ>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffa2 	bl	800233c <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff feb6 	bl	8002180 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d008      	beq.n	8002434 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2280      	movs	r2, #128	@ 0x80
 8002426:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e052      	b.n	80024da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0216 	bic.w	r2, r2, #22
 8002442:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002452:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d103      	bne.n	8002464 <HAL_DMA_Abort+0x62>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0208 	bic.w	r2, r2, #8
 8002472:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002484:	e013      	b.n	80024ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002486:	f7ff fe7b 	bl	8002180 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b05      	cmp	r3, #5
 8002492:	d90c      	bls.n	80024ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2203      	movs	r2, #3
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e015      	b.n	80024da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e4      	bne.n	8002486 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c0:	223f      	movs	r2, #63	@ 0x3f
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d004      	beq.n	8002500 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2280      	movs	r2, #128	@ 0x80
 80024fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e00c      	b.n	800251a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2205      	movs	r2, #5
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e086      	b.n	8002648 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2223      	movs	r2, #35	@ 0x23
 8002548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff fbed 	bl	8001d2c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	4b3f      	ldr	r3, [pc, #252]	@ (8002650 <HAL_ETH_Init+0x128>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002556:	4a3e      	ldr	r2, [pc, #248]	@ (8002650 <HAL_ETH_Init+0x128>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800255c:	6453      	str	r3, [r2, #68]	@ 0x44
 800255e:	4b3c      	ldr	r3, [pc, #240]	@ (8002650 <HAL_ETH_Init+0x128>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800256a:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <HAL_ETH_Init+0x12c>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4a39      	ldr	r2, [pc, #228]	@ (8002654 <HAL_ETH_Init+0x12c>)
 8002570:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002574:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002576:	4b37      	ldr	r3, [pc, #220]	@ (8002654 <HAL_ETH_Init+0x12c>)
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	4935      	ldr	r1, [pc, #212]	@ (8002654 <HAL_ETH_Init+0x12c>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002584:	4b33      	ldr	r3, [pc, #204]	@ (8002654 <HAL_ETH_Init+0x12c>)
 8002586:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800259e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a0:	f7ff fdee 	bl	8002180 <HAL_GetTick>
 80025a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025a6:	e011      	b.n	80025cc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025a8:	f7ff fdea 	bl	8002180 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025b6:	d909      	bls.n	80025cc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2204      	movs	r2, #4
 80025bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	22e0      	movs	r2, #224	@ 0xe0
 80025c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e03d      	b.n	8002648 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1e4      	bne.n	80025a8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f97a 	bl	80028d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fa25 	bl	8002a34 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa7b 	bl	8002ae6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	461a      	mov	r2, r3
 80025f6:	2100      	movs	r1, #0
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f9e3 	bl	80029c4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800260c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b0f      	ldr	r3, [pc, #60]	@ (8002658 <HAL_ETH_Init+0x130>)
 800261c:	430b      	orrs	r3, r1
 800261e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002632:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2210      	movs	r2, #16
 8002642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	40013800 	.word	0x40013800
 8002658:	00020060 	.word	0x00020060

0800265c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4b53      	ldr	r3, [pc, #332]	@ (80027c0 <ETH_SetMACConfig+0x164>)
 8002672:	4013      	ands	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	7b9b      	ldrb	r3, [r3, #14]
 800267a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	7c12      	ldrb	r2, [r2, #16]
 8002680:	2a00      	cmp	r2, #0
 8002682:	d102      	bne.n	800268a <ETH_SetMACConfig+0x2e>
 8002684:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002688:	e000      	b.n	800268c <ETH_SetMACConfig+0x30>
 800268a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800268c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	7c52      	ldrb	r2, [r2, #17]
 8002692:	2a00      	cmp	r2, #0
 8002694:	d102      	bne.n	800269c <ETH_SetMACConfig+0x40>
 8002696:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800269a:	e000      	b.n	800269e <ETH_SetMACConfig+0x42>
 800269c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800269e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	7fdb      	ldrb	r3, [r3, #31]
 80026aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80026ac:	431a      	orrs	r2, r3
                        macconf->Speed |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	7f92      	ldrb	r2, [r2, #30]
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	d102      	bne.n	80026c2 <ETH_SetMACConfig+0x66>
 80026bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026c0:	e000      	b.n	80026c4 <ETH_SetMACConfig+0x68>
 80026c2:	2200      	movs	r2, #0
                        macconf->Speed |
 80026c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	7f1b      	ldrb	r3, [r3, #28]
 80026ca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026cc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026e2:	2a00      	cmp	r2, #0
 80026e4:	d102      	bne.n	80026ec <ETH_SetMACConfig+0x90>
 80026e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ea:	e000      	b.n	80026ee <ETH_SetMACConfig+0x92>
 80026ec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	7bdb      	ldrb	r3, [r3, #15]
 80026f4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026f6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002704:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002706:	4313      	orrs	r3, r2
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800271e:	2001      	movs	r0, #1
 8002720:	f7ff fd3a 	bl	8002198 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800273a:	4013      	ands	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002742:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800274a:	2a00      	cmp	r2, #0
 800274c:	d101      	bne.n	8002752 <ETH_SetMACConfig+0xf6>
 800274e:	2280      	movs	r2, #128	@ 0x80
 8002750:	e000      	b.n	8002754 <ETH_SetMACConfig+0xf8>
 8002752:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002754:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800275a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002762:	2a01      	cmp	r2, #1
 8002764:	d101      	bne.n	800276a <ETH_SetMACConfig+0x10e>
 8002766:	2208      	movs	r2, #8
 8002768:	e000      	b.n	800276c <ETH_SetMACConfig+0x110>
 800276a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800276c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002774:	2a01      	cmp	r2, #1
 8002776:	d101      	bne.n	800277c <ETH_SetMACConfig+0x120>
 8002778:	2204      	movs	r2, #4
 800277a:	e000      	b.n	800277e <ETH_SetMACConfig+0x122>
 800277c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800277e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002786:	2a01      	cmp	r2, #1
 8002788:	d101      	bne.n	800278e <ETH_SetMACConfig+0x132>
 800278a:	2202      	movs	r2, #2
 800278c:	e000      	b.n	8002790 <ETH_SetMACConfig+0x134>
 800278e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002790:	4313      	orrs	r3, r2
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7ff fcf5 	bl	8002198 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	619a      	str	r2, [r3, #24]
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	fd20810f 	.word	0xfd20810f

080027c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4b3d      	ldr	r3, [pc, #244]	@ (80028d4 <ETH_SetDMAConfig+0x110>)
 80027de:	4013      	ands	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	7b1b      	ldrb	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <ETH_SetDMAConfig+0x2c>
 80027ea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027ee:	e000      	b.n	80027f2 <ETH_SetDMAConfig+0x2e>
 80027f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	7b5b      	ldrb	r3, [r3, #13]
 80027f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	7f52      	ldrb	r2, [r2, #29]
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d102      	bne.n	8002808 <ETH_SetDMAConfig+0x44>
 8002802:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002806:	e000      	b.n	800280a <ETH_SetDMAConfig+0x46>
 8002808:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800280a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	7b9b      	ldrb	r3, [r3, #14]
 8002810:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002812:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002818:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	7f1b      	ldrb	r3, [r3, #28]
 800281e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002820:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	7f9b      	ldrb	r3, [r3, #30]
 8002826:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002828:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800282e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002836:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002838:	4313      	orrs	r3, r2
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002848:	461a      	mov	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800285a:	2001      	movs	r0, #1
 800285c:	f7ff fc9c 	bl	8002198 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002868:	461a      	mov	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	791b      	ldrb	r3, [r3, #4]
 8002872:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002878:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800287e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002884:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800288c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800288e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002894:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002896:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800289c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f7ff fc6d 	bl	8002198 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028c6:	461a      	mov	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	f8de3f23 	.word	0xf8de3f23

080028d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0a6      	sub	sp, #152	@ 0x98
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028ec:	2300      	movs	r3, #0
 80028ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002902:	2301      	movs	r3, #1
 8002904:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800291a:	2300      	movs	r3, #0
 800291c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002924:	2300      	movs	r3, #0
 8002926:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002940:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002944:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002946:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800294a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002952:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002956:	4619      	mov	r1, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fe7f 	bl	800265c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800295e:	2301      	movs	r3, #1
 8002960:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002962:	2301      	movs	r3, #1
 8002964:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002966:	2301      	movs	r3, #1
 8002968:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800296c:	2301      	movs	r3, #1
 800296e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002980:	2300      	movs	r3, #0
 8002982:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002984:	2301      	movs	r3, #1
 8002986:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800298a:	2301      	movs	r3, #1
 800298c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800298e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002992:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002994:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002998:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800299a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800299e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029ae:	f107 0308 	add.w	r3, r7, #8
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff05 	bl	80027c4 <ETH_SetDMAConfig>
}
 80029ba:	bf00      	nop
 80029bc:	3798      	adds	r7, #152	@ 0x98
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3305      	adds	r3, #5
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	3204      	adds	r2, #4
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <ETH_MACAddressConfig+0x68>)
 80029e6:	4413      	add	r3, r2
 80029e8:	461a      	mov	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3303      	adds	r3, #3
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	061a      	lsls	r2, r3, #24
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3302      	adds	r3, #2
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3301      	adds	r3, #1
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <ETH_MACAddressConfig+0x6c>)
 8002a16:	4413      	add	r3, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	6013      	str	r3, [r2, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40028040 	.word	0x40028040
 8002a30:	40028044 	.word	0x40028044

08002a34 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e03e      	b.n	8002ac0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68d9      	ldr	r1, [r3, #12]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	3206      	adds	r2, #6
 8002a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d80c      	bhi.n	8002aa4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68d9      	ldr	r1, [r3, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	440b      	add	r3, r1
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	e004      	b.n	8002aae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3301      	adds	r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d9bd      	bls.n	8002a42 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad8:	611a      	str	r2, [r3, #16]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e048      	b.n	8002b86 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6919      	ldr	r1, [r3, #16]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b30:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	3212      	adds	r2, #18
 8002b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d80c      	bhi.n	8002b76 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6919      	ldr	r1, [r3, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	440b      	add	r3, r1
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	e004      	b.n	8002b80 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3301      	adds	r3, #1
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d9b3      	bls.n	8002af4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb6:	60da      	str	r2, [r3, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	@ 0x24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e175      	b.n	8002ed0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002be4:	2201      	movs	r2, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	f040 8164 	bne.w	8002eca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d005      	beq.n	8002c1a <HAL_GPIO_Init+0x56>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d130      	bne.n	8002c7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2203      	movs	r2, #3
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c50:	2201      	movs	r2, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 0201 	and.w	r2, r3, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d017      	beq.n	8002cb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	2203      	movs	r2, #3
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d123      	bne.n	8002d0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	08da      	lsrs	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3208      	adds	r2, #8
 8002ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	220f      	movs	r2, #15
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	69b9      	ldr	r1, [r7, #24]
 8002d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80be 	beq.w	8002eca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4e:	4b66      	ldr	r3, [pc, #408]	@ (8002ee8 <HAL_GPIO_Init+0x324>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	4a65      	ldr	r2, [pc, #404]	@ (8002ee8 <HAL_GPIO_Init+0x324>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d5a:	4b63      	ldr	r3, [pc, #396]	@ (8002ee8 <HAL_GPIO_Init+0x324>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d66:	4a61      	ldr	r2, [pc, #388]	@ (8002eec <HAL_GPIO_Init+0x328>)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a58      	ldr	r2, [pc, #352]	@ (8002ef0 <HAL_GPIO_Init+0x32c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d037      	beq.n	8002e02 <HAL_GPIO_Init+0x23e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a57      	ldr	r2, [pc, #348]	@ (8002ef4 <HAL_GPIO_Init+0x330>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d031      	beq.n	8002dfe <HAL_GPIO_Init+0x23a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a56      	ldr	r2, [pc, #344]	@ (8002ef8 <HAL_GPIO_Init+0x334>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d02b      	beq.n	8002dfa <HAL_GPIO_Init+0x236>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a55      	ldr	r2, [pc, #340]	@ (8002efc <HAL_GPIO_Init+0x338>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d025      	beq.n	8002df6 <HAL_GPIO_Init+0x232>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a54      	ldr	r2, [pc, #336]	@ (8002f00 <HAL_GPIO_Init+0x33c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01f      	beq.n	8002df2 <HAL_GPIO_Init+0x22e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a53      	ldr	r2, [pc, #332]	@ (8002f04 <HAL_GPIO_Init+0x340>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d019      	beq.n	8002dee <HAL_GPIO_Init+0x22a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	@ (8002f08 <HAL_GPIO_Init+0x344>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <HAL_GPIO_Init+0x226>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a51      	ldr	r2, [pc, #324]	@ (8002f0c <HAL_GPIO_Init+0x348>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00d      	beq.n	8002de6 <HAL_GPIO_Init+0x222>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a50      	ldr	r2, [pc, #320]	@ (8002f10 <HAL_GPIO_Init+0x34c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d007      	beq.n	8002de2 <HAL_GPIO_Init+0x21e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4f      	ldr	r2, [pc, #316]	@ (8002f14 <HAL_GPIO_Init+0x350>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <HAL_GPIO_Init+0x21a>
 8002dda:	2309      	movs	r3, #9
 8002ddc:	e012      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002dde:	230a      	movs	r3, #10
 8002de0:	e010      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002de2:	2308      	movs	r3, #8
 8002de4:	e00e      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002de6:	2307      	movs	r3, #7
 8002de8:	e00c      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002dea:	2306      	movs	r3, #6
 8002dec:	e00a      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002dee:	2305      	movs	r3, #5
 8002df0:	e008      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002df2:	2304      	movs	r3, #4
 8002df4:	e006      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002df6:	2303      	movs	r3, #3
 8002df8:	e004      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e002      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_GPIO_Init+0x240>
 8002e02:	2300      	movs	r3, #0
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	f002 0203 	and.w	r2, r2, #3
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	4093      	lsls	r3, r2
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e14:	4935      	ldr	r1, [pc, #212]	@ (8002eec <HAL_GPIO_Init+0x328>)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	089b      	lsrs	r3, r3, #2
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e22:	4b3d      	ldr	r3, [pc, #244]	@ (8002f18 <HAL_GPIO_Init+0x354>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e46:	4a34      	ldr	r2, [pc, #208]	@ (8002f18 <HAL_GPIO_Init+0x354>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e4c:	4b32      	ldr	r3, [pc, #200]	@ (8002f18 <HAL_GPIO_Init+0x354>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e70:	4a29      	ldr	r2, [pc, #164]	@ (8002f18 <HAL_GPIO_Init+0x354>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e76:	4b28      	ldr	r3, [pc, #160]	@ (8002f18 <HAL_GPIO_Init+0x354>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002f18 <HAL_GPIO_Init+0x354>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <HAL_GPIO_Init+0x354>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec4:	4a14      	ldr	r2, [pc, #80]	@ (8002f18 <HAL_GPIO_Init+0x354>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	f67f ae86 	bls.w	8002be4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	3724      	adds	r7, #36	@ 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40020800 	.word	0x40020800
 8002efc:	40020c00 	.word	0x40020c00
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40021400 	.word	0x40021400
 8002f08:	40021800 	.word	0x40021800
 8002f0c:	40021c00 	.word	0x40021c00
 8002f10:	40022000 	.word	0x40022000
 8002f14:	40022400 	.word	0x40022400
 8002f18:	40013c00 	.word	0x40013c00

08002f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f2c:	787b      	ldrb	r3, [r7, #1]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f38:	e003      	b.n	8002f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	041a      	lsls	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	619a      	str	r2, [r3, #24]
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a04      	ldr	r2, [pc, #16]	@ (8002f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f5e:	6013      	str	r3, [r2, #0]
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40007000 	.word	0x40007000

08002f70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e291      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8087 	beq.w	80030a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f94:	4b96      	ldr	r3, [pc, #600]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d00c      	beq.n	8002fba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fa0:	4b93      	ldr	r3, [pc, #588]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d112      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x62>
 8002fac:	4b90      	ldr	r3, [pc, #576]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fba:	4b8d      	ldr	r3, [pc, #564]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d06c      	beq.n	80030a0 <HAL_RCC_OscConfig+0x130>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d168      	bne.n	80030a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e26b      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fda:	d106      	bne.n	8002fea <HAL_RCC_OscConfig+0x7a>
 8002fdc:	4b84      	ldr	r3, [pc, #528]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a83      	ldr	r2, [pc, #524]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8002fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	e02e      	b.n	8003048 <HAL_RCC_OscConfig+0xd8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10c      	bne.n	800300c <HAL_RCC_OscConfig+0x9c>
 8002ff2:	4b7f      	ldr	r3, [pc, #508]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7e      	ldr	r2, [pc, #504]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7b      	ldr	r2, [pc, #492]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003004:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e01d      	b.n	8003048 <HAL_RCC_OscConfig+0xd8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0xc0>
 8003016:	4b76      	ldr	r3, [pc, #472]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a75      	ldr	r2, [pc, #468]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 800301c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b73      	ldr	r3, [pc, #460]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a72      	ldr	r2, [pc, #456]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e00b      	b.n	8003048 <HAL_RCC_OscConfig+0xd8>
 8003030:	4b6f      	ldr	r3, [pc, #444]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a6e      	ldr	r2, [pc, #440]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	4b6c      	ldr	r3, [pc, #432]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a6b      	ldr	r2, [pc, #428]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003042:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7ff f896 	bl	8002180 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003058:	f7ff f892 	bl	8002180 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	@ 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e21f      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4b61      	ldr	r3, [pc, #388]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0xe8>
 8003076:	e014      	b.n	80030a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7ff f882 	bl	8002180 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003080:	f7ff f87e 	bl	8002180 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	@ 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e20b      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003092:	4b57      	ldr	r3, [pc, #348]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x110>
 800309e:	e000      	b.n	80030a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d069      	beq.n	8003182 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ae:	4b50      	ldr	r3, [pc, #320]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ba:	4b4d      	ldr	r3, [pc, #308]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d11c      	bne.n	8003100 <HAL_RCC_OscConfig+0x190>
 80030c6:	4b4a      	ldr	r3, [pc, #296]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d116      	bne.n	8003100 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d2:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_RCC_OscConfig+0x17a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d001      	beq.n	80030ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e1df      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ea:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	493d      	ldr	r1, [pc, #244]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fe:	e040      	b.n	8003182 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d023      	beq.n	8003150 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003108:	4b39      	ldr	r3, [pc, #228]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a38      	ldr	r2, [pc, #224]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7ff f834 	bl	8002180 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311c:	f7ff f830 	bl	8002180 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e1bd      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	4b30      	ldr	r3, [pc, #192]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	4b2d      	ldr	r3, [pc, #180]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4929      	ldr	r1, [pc, #164]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
 800314e:	e018      	b.n	8003182 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003150:	4b27      	ldr	r3, [pc, #156]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a26      	ldr	r2, [pc, #152]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003156:	f023 0301 	bic.w	r3, r3, #1
 800315a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7ff f810 	bl	8002180 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003164:	f7ff f80c 	bl	8002180 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e199      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	4b1e      	ldr	r3, [pc, #120]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d038      	beq.n	8003200 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d019      	beq.n	80031ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003196:	4b16      	ldr	r3, [pc, #88]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 8003198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800319a:	4a15      	ldr	r2, [pc, #84]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fe ffed 	bl	8002180 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031aa:	f7fe ffe9 	bl	8002180 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e176      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031bc:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 80031be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x23a>
 80031c8:	e01a      	b.n	8003200 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ca:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 80031cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ce:	4a08      	ldr	r2, [pc, #32]	@ (80031f0 <HAL_RCC_OscConfig+0x280>)
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d6:	f7fe ffd3 	bl	8002180 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031de:	f7fe ffcf 	bl	8002180 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d903      	bls.n	80031f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e15c      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
 80031f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f4:	4b91      	ldr	r3, [pc, #580]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80031f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ee      	bne.n	80031de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80a4 	beq.w	8003356 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320e:	4b8b      	ldr	r3, [pc, #556]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10d      	bne.n	8003236 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4b88      	ldr	r3, [pc, #544]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	4a87      	ldr	r2, [pc, #540]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003224:	6413      	str	r3, [r2, #64]	@ 0x40
 8003226:	4b85      	ldr	r3, [pc, #532]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003236:	4b82      	ldr	r3, [pc, #520]	@ (8003440 <HAL_RCC_OscConfig+0x4d0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d118      	bne.n	8003274 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003242:	4b7f      	ldr	r3, [pc, #508]	@ (8003440 <HAL_RCC_OscConfig+0x4d0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a7e      	ldr	r2, [pc, #504]	@ (8003440 <HAL_RCC_OscConfig+0x4d0>)
 8003248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800324c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324e:	f7fe ff97 	bl	8002180 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003256:	f7fe ff93 	bl	8002180 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b64      	cmp	r3, #100	@ 0x64
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e120      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003268:	4b75      	ldr	r3, [pc, #468]	@ (8003440 <HAL_RCC_OscConfig+0x4d0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d106      	bne.n	800328a <HAL_RCC_OscConfig+0x31a>
 800327c:	4b6f      	ldr	r3, [pc, #444]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 800327e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003280:	4a6e      	ldr	r2, [pc, #440]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6713      	str	r3, [r2, #112]	@ 0x70
 8003288:	e02d      	b.n	80032e6 <HAL_RCC_OscConfig+0x376>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10c      	bne.n	80032ac <HAL_RCC_OscConfig+0x33c>
 8003292:	4b6a      	ldr	r3, [pc, #424]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003296:	4a69      	ldr	r2, [pc, #420]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 8003298:	f023 0301 	bic.w	r3, r3, #1
 800329c:	6713      	str	r3, [r2, #112]	@ 0x70
 800329e:	4b67      	ldr	r3, [pc, #412]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a2:	4a66      	ldr	r2, [pc, #408]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80032a4:	f023 0304 	bic.w	r3, r3, #4
 80032a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032aa:	e01c      	b.n	80032e6 <HAL_RCC_OscConfig+0x376>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d10c      	bne.n	80032ce <HAL_RCC_OscConfig+0x35e>
 80032b4:	4b61      	ldr	r3, [pc, #388]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b8:	4a60      	ldr	r2, [pc, #384]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c0:	4b5e      	ldr	r3, [pc, #376]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c4:	4a5d      	ldr	r2, [pc, #372]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80032cc:	e00b      	b.n	80032e6 <HAL_RCC_OscConfig+0x376>
 80032ce:	4b5b      	ldr	r3, [pc, #364]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d2:	4a5a      	ldr	r2, [pc, #360]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032da:	4b58      	ldr	r3, [pc, #352]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032de:	4a57      	ldr	r2, [pc, #348]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d015      	beq.n	800331a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fe ff47 	bl	8002180 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f6:	f7fe ff43 	bl	8002180 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e0ce      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330c:	4b4b      	ldr	r3, [pc, #300]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ee      	beq.n	80032f6 <HAL_RCC_OscConfig+0x386>
 8003318:	e014      	b.n	8003344 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331a:	f7fe ff31 	bl	8002180 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fe ff2d 	bl	8002180 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0b8      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003338:	4b40      	ldr	r3, [pc, #256]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1ee      	bne.n	8003322 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d105      	bne.n	8003356 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800334a:	4b3c      	ldr	r3, [pc, #240]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	4a3b      	ldr	r2, [pc, #236]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 8003350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003354:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80a4 	beq.w	80034a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003360:	4b36      	ldr	r3, [pc, #216]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d06b      	beq.n	8003444 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d149      	bne.n	8003408 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003374:	4b31      	ldr	r3, [pc, #196]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a30      	ldr	r2, [pc, #192]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 800337a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800337e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe fefe 	bl	8002180 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe fefa 	bl	8002180 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e087      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b28      	ldr	r3, [pc, #160]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	4313      	orrs	r3, r2
 80033cc:	4a1b      	ldr	r2, [pc, #108]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80033ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80033d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d4:	4b19      	ldr	r3, [pc, #100]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a18      	ldr	r2, [pc, #96]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80033da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fece 	bl	8002180 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe feca 	bl	8002180 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e057      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	4b10      	ldr	r3, [pc, #64]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x478>
 8003406:	e04f      	b.n	80034a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003408:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0b      	ldr	r2, [pc, #44]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 800340e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe feb4 	bl	8002180 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341c:	f7fe feb0 	bl	8002180 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e03d      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	4b03      	ldr	r3, [pc, #12]	@ (800343c <HAL_RCC_OscConfig+0x4cc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x4ac>
 800343a:	e035      	b.n	80034a8 <HAL_RCC_OscConfig+0x538>
 800343c:	40023800 	.word	0x40023800
 8003440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003444:	4b1b      	ldr	r3, [pc, #108]	@ (80034b4 <HAL_RCC_OscConfig+0x544>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d028      	beq.n	80034a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d121      	bne.n	80034a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d11a      	bne.n	80034a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800347a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800347c:	4293      	cmp	r3, r2
 800347e:	d111      	bne.n	80034a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	3b01      	subs	r3, #1
 800348e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800

080034b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0d0      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d0:	4b6a      	ldr	r3, [pc, #424]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d910      	bls.n	8003500 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b67      	ldr	r3, [pc, #412]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 020f 	bic.w	r2, r3, #15
 80034e6:	4965      	ldr	r1, [pc, #404]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b63      	ldr	r3, [pc, #396]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0b8      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003518:	4b59      	ldr	r3, [pc, #356]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a58      	ldr	r2, [pc, #352]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800351e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003522:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003530:	4b53      	ldr	r3, [pc, #332]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a52      	ldr	r2, [pc, #328]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003536:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800353a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b50      	ldr	r3, [pc, #320]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	494d      	ldr	r1, [pc, #308]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d040      	beq.n	80035dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b47      	ldr	r3, [pc, #284]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d115      	bne.n	800359a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e07f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357a:	4b41      	ldr	r3, [pc, #260]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e073      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	4b3d      	ldr	r3, [pc, #244]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e06b      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359a:	4b39      	ldr	r3, [pc, #228]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 0203 	bic.w	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4936      	ldr	r1, [pc, #216]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7fe fde8 	bl	8002180 <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b4:	f7fe fde4 	bl	8002180 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e053      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 020c 	and.w	r2, r3, #12
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1eb      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035dc:	4b27      	ldr	r3, [pc, #156]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d210      	bcs.n	800360c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b24      	ldr	r3, [pc, #144]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 020f 	bic.w	r2, r3, #15
 80035f2:	4922      	ldr	r1, [pc, #136]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b20      	ldr	r3, [pc, #128]	@ (800367c <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e032      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b19      	ldr	r3, [pc, #100]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4916      	ldr	r1, [pc, #88]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003636:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	490e      	ldr	r1, [pc, #56]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800364a:	f000 f821 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 800364e:	4602      	mov	r2, r0
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	490a      	ldr	r1, [pc, #40]	@ (8003684 <HAL_RCC_ClockConfig+0x1cc>)
 800365c:	5ccb      	ldrb	r3, [r1, r3]
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	4a09      	ldr	r2, [pc, #36]	@ (8003688 <HAL_RCC_ClockConfig+0x1d0>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003666:	4b09      	ldr	r3, [pc, #36]	@ (800368c <HAL_RCC_ClockConfig+0x1d4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fd44 	bl	80020f8 <HAL_InitTick>

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023c00 	.word	0x40023c00
 8003680:	40023800 	.word	0x40023800
 8003684:	08006408 	.word	0x08006408
 8003688:	2000036c 	.word	0x2000036c
 800368c:	20000370 	.word	0x20000370

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003694:	b094      	sub	sp, #80	@ 0x50
 8003696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	647b      	str	r3, [r7, #68]	@ 0x44
 800369c:	2300      	movs	r3, #0
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036a0:	2300      	movs	r3, #0
 80036a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a8:	4b79      	ldr	r3, [pc, #484]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d00d      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x40>
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	f200 80e1 	bhi.w	800387c <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x34>
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0x3a>
 80036c2:	e0db      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036c4:	4b73      	ldr	r3, [pc, #460]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x204>)
 80036c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036c8:	e0db      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ca:	4b73      	ldr	r3, [pc, #460]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x208>)
 80036cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036ce:	e0d8      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036da:	4b6d      	ldr	r3, [pc, #436]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d063      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	099b      	lsrs	r3, r3, #6
 80036ec:	2200      	movs	r2, #0
 80036ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fa:	2300      	movs	r3, #0
 80036fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80036fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003702:	4622      	mov	r2, r4
 8003704:	462b      	mov	r3, r5
 8003706:	f04f 0000 	mov.w	r0, #0
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	0159      	lsls	r1, r3, #5
 8003710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003714:	0150      	lsls	r0, r2, #5
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4621      	mov	r1, r4
 800371c:	1a51      	subs	r1, r2, r1
 800371e:	6139      	str	r1, [r7, #16]
 8003720:	4629      	mov	r1, r5
 8003722:	eb63 0301 	sbc.w	r3, r3, r1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003734:	4659      	mov	r1, fp
 8003736:	018b      	lsls	r3, r1, #6
 8003738:	4651      	mov	r1, sl
 800373a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800373e:	4651      	mov	r1, sl
 8003740:	018a      	lsls	r2, r1, #6
 8003742:	4651      	mov	r1, sl
 8003744:	ebb2 0801 	subs.w	r8, r2, r1
 8003748:	4659      	mov	r1, fp
 800374a:	eb63 0901 	sbc.w	r9, r3, r1
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800375a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800375e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003762:	4690      	mov	r8, r2
 8003764:	4699      	mov	r9, r3
 8003766:	4623      	mov	r3, r4
 8003768:	eb18 0303 	adds.w	r3, r8, r3
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	462b      	mov	r3, r5
 8003770:	eb49 0303 	adc.w	r3, r9, r3
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003782:	4629      	mov	r1, r5
 8003784:	024b      	lsls	r3, r1, #9
 8003786:	4621      	mov	r1, r4
 8003788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800378c:	4621      	mov	r1, r4
 800378e:	024a      	lsls	r2, r1, #9
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003796:	2200      	movs	r2, #0
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800379a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800379c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037a0:	f7fc fd32 	bl	8000208 <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4613      	mov	r3, r2
 80037aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ac:	e058      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b38      	ldr	r3, [pc, #224]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	2200      	movs	r2, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	4611      	mov	r1, r2
 80037ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	f04f 0000 	mov.w	r0, #0
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	0159      	lsls	r1, r3, #5
 80037d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037da:	0150      	lsls	r0, r2, #5
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4641      	mov	r1, r8
 80037e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80037e6:	4649      	mov	r1, r9
 80037e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003800:	ebb2 040a 	subs.w	r4, r2, sl
 8003804:	eb63 050b 	sbc.w	r5, r3, fp
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	00eb      	lsls	r3, r5, #3
 8003812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003816:	00e2      	lsls	r2, r4, #3
 8003818:	4614      	mov	r4, r2
 800381a:	461d      	mov	r5, r3
 800381c:	4643      	mov	r3, r8
 800381e:	18e3      	adds	r3, r4, r3
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	464b      	mov	r3, r9
 8003824:	eb45 0303 	adc.w	r3, r5, r3
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003836:	4629      	mov	r1, r5
 8003838:	028b      	lsls	r3, r1, #10
 800383a:	4621      	mov	r1, r4
 800383c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003840:	4621      	mov	r1, r4
 8003842:	028a      	lsls	r2, r1, #10
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800384a:	2200      	movs	r2, #0
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	61fa      	str	r2, [r7, #28]
 8003850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003854:	f7fc fcd8 	bl	8000208 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4613      	mov	r3, r2
 800385e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003860:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	3301      	adds	r3, #1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003870:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800387a:	e002      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x204>)
 800387e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003884:	4618      	mov	r0, r3
 8003886:	3750      	adds	r7, #80	@ 0x50
 8003888:	46bd      	mov	sp, r7
 800388a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	00f42400 	.word	0x00f42400
 8003898:	007a1200 	.word	0x007a1200

0800389c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b03      	ldr	r3, [pc, #12]	@ (80038b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2000036c 	.word	0x2000036c

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b8:	f7ff fff0 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0a9b      	lsrs	r3, r3, #10
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	@ (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	08006418 	.word	0x08006418

080038dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038e0:	f7ff ffdc 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	0b5b      	lsrs	r3, r3, #13
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4903      	ldr	r1, [pc, #12]	@ (8003900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	08006418 	.word	0x08006418

08003904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d012      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800392c:	4b69      	ldr	r3, [pc, #420]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a68      	ldr	r2, [pc, #416]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003932:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003936:	6093      	str	r3, [r2, #8]
 8003938:	4b66      	ldr	r3, [pc, #408]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003940:	4964      	ldr	r1, [pc, #400]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d017      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800395e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003964:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396c:	4959      	ldr	r1, [pc, #356]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003978:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800397c:	d101      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800397e:	2301      	movs	r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800398a:	2301      	movs	r3, #1
 800398c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d017      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800399a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	494a      	ldr	r1, [pc, #296]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039b8:	d101      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039c6:	2301      	movs	r3, #1
 80039c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039d6:	2301      	movs	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 808b 	beq.w	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	4a39      	ldr	r2, [pc, #228]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f4:	4b37      	ldr	r3, [pc, #220]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a00:	4b35      	ldr	r3, [pc, #212]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a34      	ldr	r2, [pc, #208]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a0c:	f7fe fbb8 	bl	8002180 <HAL_GetTick>
 8003a10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a14:	f7fe fbb4 	bl	8002180 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	@ 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e357      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a26:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a32:	4b28      	ldr	r3, [pc, #160]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d035      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d02e      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a50:	4b20      	ldr	r3, [pc, #128]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a66:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a72:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a78:	4b16      	ldr	r3, [pc, #88]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d114      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fe fb7c 	bl	8002180 <HAL_GetTick>
 8003a88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8c:	f7fe fb78 	bl	8002180 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e319      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0ee      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aba:	d111      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003abc:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ac8:	4b04      	ldr	r3, [pc, #16]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aca:	400b      	ands	r3, r1
 8003acc:	4901      	ldr	r1, [pc, #4]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
 8003ad2:	e00b      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	0ffffcff 	.word	0x0ffffcff
 8003ae0:	4baa      	ldr	r3, [pc, #680]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4aa9      	ldr	r2, [pc, #676]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003aea:	6093      	str	r3, [r2, #8]
 8003aec:	4ba7      	ldr	r3, [pc, #668]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af8:	49a4      	ldr	r1, [pc, #656]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d010      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b0a:	4ba0      	ldr	r3, [pc, #640]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b10:	4a9e      	ldr	r2, [pc, #632]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b1a:	4b9c      	ldr	r3, [pc, #624]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	4999      	ldr	r1, [pc, #612]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b38:	4b94      	ldr	r3, [pc, #592]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b46:	4991      	ldr	r1, [pc, #580]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b5a:	4b8c      	ldr	r3, [pc, #560]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b68:	4988      	ldr	r1, [pc, #544]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b7c:	4b83      	ldr	r3, [pc, #524]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b8a:	4980      	ldr	r1, [pc, #512]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b9e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bac:	4977      	ldr	r1, [pc, #476]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bc0:	4b72      	ldr	r3, [pc, #456]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc6:	f023 0203 	bic.w	r2, r3, #3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bce:	496f      	ldr	r1, [pc, #444]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003be2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be8:	f023 020c 	bic.w	r2, r3, #12
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf0:	4966      	ldr	r1, [pc, #408]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c04:	4b61      	ldr	r3, [pc, #388]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c12:	495e      	ldr	r1, [pc, #376]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c26:	4b59      	ldr	r3, [pc, #356]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c34:	4955      	ldr	r1, [pc, #340]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c48:	4b50      	ldr	r3, [pc, #320]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c56:	494d      	ldr	r1, [pc, #308]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c6a:	4b48      	ldr	r3, [pc, #288]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c78:	4944      	ldr	r1, [pc, #272]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c92:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9a:	493c      	ldr	r1, [pc, #240]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cae:	4b37      	ldr	r3, [pc, #220]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cbc:	4933      	ldr	r1, [pc, #204]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cde:	492b      	ldr	r1, [pc, #172]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d011      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003cf2:	4b26      	ldr	r3, [pc, #152]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d00:	4922      	ldr	r1, [pc, #136]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d10:	d101      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d12:	2301      	movs	r3, #1
 8003d14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d22:	2301      	movs	r3, #1
 8003d24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d32:	4b16      	ldr	r3, [pc, #88]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d38:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d40:	4912      	ldr	r1, [pc, #72]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d54:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d64:	4909      	ldr	r1, [pc, #36]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d006      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 80d9 	beq.w	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d80:	4b02      	ldr	r3, [pc, #8]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a01      	ldr	r2, [pc, #4]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d8a:	e001      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d92:	f7fe f9f5 	bl	8002180 <HAL_GetTick>
 8003d96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d98:	e008      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d9a:	f7fe f9f1 	bl	8002180 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b64      	cmp	r3, #100	@ 0x64
 8003da6:	d901      	bls.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e194      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dac:	4b6c      	ldr	r3, [pc, #432]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1f0      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d021      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d11d      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dcc:	4b64      	ldr	r3, [pc, #400]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dda:	4b61      	ldr	r3, [pc, #388]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003de0:	0e1b      	lsrs	r3, r3, #24
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	019a      	lsls	r2, r3, #6
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	041b      	lsls	r3, r3, #16
 8003df2:	431a      	orrs	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	061b      	lsls	r3, r3, #24
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	071b      	lsls	r3, r3, #28
 8003e00:	4957      	ldr	r1, [pc, #348]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d02e      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e32:	d129      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e34:	4b4a      	ldr	r3, [pc, #296]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e3a:	0c1b      	lsrs	r3, r3, #16
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e42:	4b47      	ldr	r3, [pc, #284]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e48:	0f1b      	lsrs	r3, r3, #28
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	019a      	lsls	r2, r3, #6
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	061b      	lsls	r3, r3, #24
 8003e62:	431a      	orrs	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	071b      	lsls	r3, r3, #28
 8003e68:	493d      	ldr	r1, [pc, #244]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e70:	4b3b      	ldr	r3, [pc, #236]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e76:	f023 021f 	bic.w	r2, r3, #31
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	4937      	ldr	r1, [pc, #220]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01d      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e94:	4b32      	ldr	r3, [pc, #200]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e9a:	0e1b      	lsrs	r3, r3, #24
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea8:	0f1b      	lsrs	r3, r3, #28
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	019a      	lsls	r2, r3, #6
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	071b      	lsls	r3, r3, #28
 8003ec8:	4925      	ldr	r1, [pc, #148]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d011      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	019a      	lsls	r2, r3, #6
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	071b      	lsls	r3, r3, #28
 8003ef8:	4919      	ldr	r1, [pc, #100]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f00:	4b17      	ldr	r3, [pc, #92]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a16      	ldr	r2, [pc, #88]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0c:	f7fe f938 	bl	8002180 <HAL_GetTick>
 8003f10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f14:	f7fe f934 	bl	8002180 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	@ 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0d7      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f26:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	f040 80cd 	bne.w	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f3a:	4b09      	ldr	r3, [pc, #36]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a08      	ldr	r2, [pc, #32]	@ (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f46:	f7fe f91b 	bl	8002180 <HAL_GetTick>
 8003f4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f4e:	f7fe f917 	bl	8002180 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b64      	cmp	r3, #100	@ 0x64
 8003f5a:	d903      	bls.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e0ba      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f64:	4b5e      	ldr	r3, [pc, #376]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f70:	d0ed      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d02e      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d12a      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f9a:	4b51      	ldr	r3, [pc, #324]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	0f1b      	lsrs	r3, r3, #28
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	019a      	lsls	r2, r3, #6
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	041b      	lsls	r3, r3, #16
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	061b      	lsls	r3, r3, #24
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	071b      	lsls	r3, r3, #28
 8003fce:	4944      	ldr	r1, [pc, #272]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fd6:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fdc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	493d      	ldr	r1, [pc, #244]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d022      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004000:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004004:	d11d      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004006:	4b36      	ldr	r3, [pc, #216]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400c:	0e1b      	lsrs	r3, r3, #24
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004014:	4b32      	ldr	r3, [pc, #200]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	0f1b      	lsrs	r3, r3, #28
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	019a      	lsls	r2, r3, #6
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	431a      	orrs	r2, r3
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	061b      	lsls	r3, r3, #24
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	071b      	lsls	r3, r3, #28
 800403a:	4929      	ldr	r1, [pc, #164]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d028      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800404e:	4b24      	ldr	r3, [pc, #144]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004054:	0e1b      	lsrs	r3, r3, #24
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800405c:	4b20      	ldr	r3, [pc, #128]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004062:	0c1b      	lsrs	r3, r3, #16
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	019a      	lsls	r2, r3, #6
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	431a      	orrs	r2, r3
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	061b      	lsls	r3, r3, #24
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	071b      	lsls	r3, r3, #28
 8004082:	4917      	ldr	r1, [pc, #92]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800408a:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800408c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004090:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004098:	4911      	ldr	r1, [pc, #68]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040a0:	4b0f      	ldr	r3, [pc, #60]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0e      	ldr	r2, [pc, #56]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ac:	f7fe f868 	bl	8002180 <HAL_GetTick>
 80040b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040b4:	f7fe f864 	bl	8002180 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b64      	cmp	r3, #100	@ 0x64
 80040c0:	d901      	bls.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e007      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040c6:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d2:	d1ef      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800

080040e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e040      	b.n	8004178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd fec8 	bl	8001e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	@ 0x24
 8004110:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fdd4 	bl	8004cd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fb6d 	bl	8004810 <UART_SetConfig>
 8004136:	4603      	mov	r3, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e01b      	b.n	8004178 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800414e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800415e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fe53 	bl	8004e1c <UART_CheckIdleState>
 8004176:	4603      	mov	r3, r0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e048      	b.n	8004224 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fd fe7a 	bl	8001e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	@ 0x24
 80041ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fd86 	bl	8004cd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fb1f 	bl	8004810 <UART_SetConfig>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e023      	b.n	8004224 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80041fa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0208 	orr.w	r2, r2, #8
 800420a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0201 	orr.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fdfd 	bl	8004e1c <UART_CheckIdleState>
 8004222:	4603      	mov	r3, r0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b0ba      	sub	sp, #232	@ 0xe8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004252:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004256:	f640 030f 	movw	r3, #2063	@ 0x80f
 800425a:	4013      	ands	r3, r2
 800425c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d115      	bne.n	8004294 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00f      	beq.n	8004294 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8297 	beq.w	80047b8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4798      	blx	r3
      }
      return;
 8004292:	e291      	b.n	80047b8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8117 	beq.w	80044cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800429e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80042ae:	4b85      	ldr	r3, [pc, #532]	@ (80044c4 <HAL_UART_IRQHandler+0x298>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 810a 	beq.w	80044cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d011      	beq.n	80042e8 <HAL_UART_IRQHandler+0xbc>
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00b      	beq.n	80042e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2201      	movs	r2, #1
 80042d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d011      	beq.n	8004318 <HAL_UART_IRQHandler+0xec>
 80042f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2202      	movs	r2, #2
 8004306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800430e:	f043 0204 	orr.w	r2, r3, #4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d011      	beq.n	8004348 <HAL_UART_IRQHandler+0x11c>
 8004324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2204      	movs	r2, #4
 8004336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800433e:	f043 0202 	orr.w	r2, r3, #2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d017      	beq.n	8004384 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d105      	bne.n	800436c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004364:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2208      	movs	r2, #8
 8004372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800437a:	f043 0208 	orr.w	r2, r3, #8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800438c:	2b00      	cmp	r3, #0
 800438e:	d012      	beq.n	80043b6 <HAL_UART_IRQHandler+0x18a>
 8004390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00c      	beq.n	80043b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 81fd 	beq.w	80047bc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fe:	2b40      	cmp	r3, #64	@ 0x40
 8004400:	d005      	beq.n	800440e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004406:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800440a:	2b00      	cmp	r3, #0
 800440c:	d04f      	beq.n	80044ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fdc8 	bl	8004fa4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441e:	2b40      	cmp	r3, #64	@ 0x40
 8004420:	d141      	bne.n	80044a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004438:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800443c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800444e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800445a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1d9      	bne.n	8004422 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004472:	2b00      	cmp	r3, #0
 8004474:	d013      	beq.n	800449e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800447a:	4a13      	ldr	r2, [pc, #76]	@ (80044c8 <HAL_UART_IRQHandler+0x29c>)
 800447c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe f82d 	bl	80024e2 <HAL_DMA_Abort_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d017      	beq.n	80044be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004498:	4610      	mov	r0, r2
 800449a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	e00f      	b.n	80044be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9a0 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	e00b      	b.n	80044be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f99c 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	e007      	b.n	80044be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f998 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80044bc:	e17e      	b.n	80047bc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044be:	bf00      	nop
    return;
 80044c0:	e17c      	b.n	80047bc <HAL_UART_IRQHandler+0x590>
 80044c2:	bf00      	nop
 80044c4:	04000120 	.word	0x04000120
 80044c8:	0800506d 	.word	0x0800506d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	f040 814c 	bne.w	800476e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8145 	beq.w	800476e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 813e 	beq.w	800476e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2210      	movs	r2, #16
 80044f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004504:	2b40      	cmp	r3, #64	@ 0x40
 8004506:	f040 80b6 	bne.w	8004676 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004516:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8150 	beq.w	80047c0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800452a:	429a      	cmp	r2, r3
 800452c:	f080 8148 	bcs.w	80047c0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004536:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004544:	f000 8086 	beq.w	8004654 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800455c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004572:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004576:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800457e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800458a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1da      	bne.n	8004548 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3308      	adds	r3, #8
 8004598:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3308      	adds	r3, #8
 80045b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e1      	bne.n	8004592 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3308      	adds	r3, #8
 80045d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3308      	adds	r3, #8
 80045ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e3      	bne.n	80045ce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004624:	f023 0310 	bic.w	r3, r3, #16
 8004628:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004636:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004638:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800463c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e4      	bne.n	8004614 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd fed7 	bl	8002402 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004666:	b29b      	uxth	r3, r3
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	b29b      	uxth	r3, r3
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8c2 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004674:	e0a4      	b.n	80047c0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004682:	b29b      	uxth	r3, r3
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8096 	beq.w	80047c4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8091 	beq.w	80047c4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80046c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e4      	bne.n	80046a2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	623b      	str	r3, [r7, #32]
   return(result);
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80046fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800470a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e3      	bne.n	80046d8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	60fb      	str	r3, [r7, #12]
   return(result);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f023 0310 	bic.w	r3, r3, #16
 8004738:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	617b      	str	r3, [r7, #20]
   return(result);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e4      	bne.n	8004724 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2202      	movs	r2, #2
 800475e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004760:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004764:	4619      	mov	r1, r3
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f846 	bl	80047f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800476c:	e02a      	b.n	80047c4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800476e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00e      	beq.n	8004798 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800477a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800477e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01c      	beq.n	80047c8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	4798      	blx	r3
    }
    return;
 8004796:	e017      	b.n	80047c8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d012      	beq.n	80047ca <HAL_UART_IRQHandler+0x59e>
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00c      	beq.n	80047ca <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fc71 	bl	8005098 <UART_EndTransmit_IT>
    return;
 80047b6:	e008      	b.n	80047ca <HAL_UART_IRQHandler+0x59e>
      return;
 80047b8:	bf00      	nop
 80047ba:	e006      	b.n	80047ca <HAL_UART_IRQHandler+0x59e>
    return;
 80047bc:	bf00      	nop
 80047be:	e004      	b.n	80047ca <HAL_UART_IRQHandler+0x59e>
      return;
 80047c0:	bf00      	nop
 80047c2:	e002      	b.n	80047ca <HAL_UART_IRQHandler+0x59e>
      return;
 80047c4:	bf00      	nop
 80047c6:	e000      	b.n	80047ca <HAL_UART_IRQHandler+0x59e>
    return;
 80047c8:	bf00      	nop
  }

}
 80047ca:	37e8      	adds	r7, #232	@ 0xe8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4ba6      	ldr	r3, [pc, #664]	@ (8004ad4 <UART_SetConfig+0x2c4>)
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	6979      	ldr	r1, [r7, #20]
 8004844:	430b      	orrs	r3, r1
 8004846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	430a      	orrs	r2, r1
 8004880:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a94      	ldr	r2, [pc, #592]	@ (8004ad8 <UART_SetConfig+0x2c8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d120      	bne.n	80048ce <UART_SetConfig+0xbe>
 800488c:	4b93      	ldr	r3, [pc, #588]	@ (8004adc <UART_SetConfig+0x2cc>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b03      	cmp	r3, #3
 8004898:	d816      	bhi.n	80048c8 <UART_SetConfig+0xb8>
 800489a:	a201      	add	r2, pc, #4	@ (adr r2, 80048a0 <UART_SetConfig+0x90>)
 800489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a0:	080048b1 	.word	0x080048b1
 80048a4:	080048bd 	.word	0x080048bd
 80048a8:	080048b7 	.word	0x080048b7
 80048ac:	080048c3 	.word	0x080048c3
 80048b0:	2301      	movs	r3, #1
 80048b2:	77fb      	strb	r3, [r7, #31]
 80048b4:	e150      	b.n	8004b58 <UART_SetConfig+0x348>
 80048b6:	2302      	movs	r3, #2
 80048b8:	77fb      	strb	r3, [r7, #31]
 80048ba:	e14d      	b.n	8004b58 <UART_SetConfig+0x348>
 80048bc:	2304      	movs	r3, #4
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e14a      	b.n	8004b58 <UART_SetConfig+0x348>
 80048c2:	2308      	movs	r3, #8
 80048c4:	77fb      	strb	r3, [r7, #31]
 80048c6:	e147      	b.n	8004b58 <UART_SetConfig+0x348>
 80048c8:	2310      	movs	r3, #16
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e144      	b.n	8004b58 <UART_SetConfig+0x348>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a83      	ldr	r2, [pc, #524]	@ (8004ae0 <UART_SetConfig+0x2d0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d132      	bne.n	800493e <UART_SetConfig+0x12e>
 80048d8:	4b80      	ldr	r3, [pc, #512]	@ (8004adc <UART_SetConfig+0x2cc>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b0c      	cmp	r3, #12
 80048e4:	d828      	bhi.n	8004938 <UART_SetConfig+0x128>
 80048e6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <UART_SetConfig+0xdc>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004921 	.word	0x08004921
 80048f0:	08004939 	.word	0x08004939
 80048f4:	08004939 	.word	0x08004939
 80048f8:	08004939 	.word	0x08004939
 80048fc:	0800492d 	.word	0x0800492d
 8004900:	08004939 	.word	0x08004939
 8004904:	08004939 	.word	0x08004939
 8004908:	08004939 	.word	0x08004939
 800490c:	08004927 	.word	0x08004927
 8004910:	08004939 	.word	0x08004939
 8004914:	08004939 	.word	0x08004939
 8004918:	08004939 	.word	0x08004939
 800491c:	08004933 	.word	0x08004933
 8004920:	2300      	movs	r3, #0
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e118      	b.n	8004b58 <UART_SetConfig+0x348>
 8004926:	2302      	movs	r3, #2
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e115      	b.n	8004b58 <UART_SetConfig+0x348>
 800492c:	2304      	movs	r3, #4
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e112      	b.n	8004b58 <UART_SetConfig+0x348>
 8004932:	2308      	movs	r3, #8
 8004934:	77fb      	strb	r3, [r7, #31]
 8004936:	e10f      	b.n	8004b58 <UART_SetConfig+0x348>
 8004938:	2310      	movs	r3, #16
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e10c      	b.n	8004b58 <UART_SetConfig+0x348>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a68      	ldr	r2, [pc, #416]	@ (8004ae4 <UART_SetConfig+0x2d4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d120      	bne.n	800498a <UART_SetConfig+0x17a>
 8004948:	4b64      	ldr	r3, [pc, #400]	@ (8004adc <UART_SetConfig+0x2cc>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004952:	2b30      	cmp	r3, #48	@ 0x30
 8004954:	d013      	beq.n	800497e <UART_SetConfig+0x16e>
 8004956:	2b30      	cmp	r3, #48	@ 0x30
 8004958:	d814      	bhi.n	8004984 <UART_SetConfig+0x174>
 800495a:	2b20      	cmp	r3, #32
 800495c:	d009      	beq.n	8004972 <UART_SetConfig+0x162>
 800495e:	2b20      	cmp	r3, #32
 8004960:	d810      	bhi.n	8004984 <UART_SetConfig+0x174>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <UART_SetConfig+0x15c>
 8004966:	2b10      	cmp	r3, #16
 8004968:	d006      	beq.n	8004978 <UART_SetConfig+0x168>
 800496a:	e00b      	b.n	8004984 <UART_SetConfig+0x174>
 800496c:	2300      	movs	r3, #0
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e0f2      	b.n	8004b58 <UART_SetConfig+0x348>
 8004972:	2302      	movs	r3, #2
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e0ef      	b.n	8004b58 <UART_SetConfig+0x348>
 8004978:	2304      	movs	r3, #4
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e0ec      	b.n	8004b58 <UART_SetConfig+0x348>
 800497e:	2308      	movs	r3, #8
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e0e9      	b.n	8004b58 <UART_SetConfig+0x348>
 8004984:	2310      	movs	r3, #16
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e0e6      	b.n	8004b58 <UART_SetConfig+0x348>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a56      	ldr	r2, [pc, #344]	@ (8004ae8 <UART_SetConfig+0x2d8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d120      	bne.n	80049d6 <UART_SetConfig+0x1c6>
 8004994:	4b51      	ldr	r3, [pc, #324]	@ (8004adc <UART_SetConfig+0x2cc>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800499e:	2bc0      	cmp	r3, #192	@ 0xc0
 80049a0:	d013      	beq.n	80049ca <UART_SetConfig+0x1ba>
 80049a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80049a4:	d814      	bhi.n	80049d0 <UART_SetConfig+0x1c0>
 80049a6:	2b80      	cmp	r3, #128	@ 0x80
 80049a8:	d009      	beq.n	80049be <UART_SetConfig+0x1ae>
 80049aa:	2b80      	cmp	r3, #128	@ 0x80
 80049ac:	d810      	bhi.n	80049d0 <UART_SetConfig+0x1c0>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <UART_SetConfig+0x1a8>
 80049b2:	2b40      	cmp	r3, #64	@ 0x40
 80049b4:	d006      	beq.n	80049c4 <UART_SetConfig+0x1b4>
 80049b6:	e00b      	b.n	80049d0 <UART_SetConfig+0x1c0>
 80049b8:	2300      	movs	r3, #0
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e0cc      	b.n	8004b58 <UART_SetConfig+0x348>
 80049be:	2302      	movs	r3, #2
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e0c9      	b.n	8004b58 <UART_SetConfig+0x348>
 80049c4:	2304      	movs	r3, #4
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e0c6      	b.n	8004b58 <UART_SetConfig+0x348>
 80049ca:	2308      	movs	r3, #8
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e0c3      	b.n	8004b58 <UART_SetConfig+0x348>
 80049d0:	2310      	movs	r3, #16
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e0c0      	b.n	8004b58 <UART_SetConfig+0x348>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a44      	ldr	r2, [pc, #272]	@ (8004aec <UART_SetConfig+0x2dc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d125      	bne.n	8004a2c <UART_SetConfig+0x21c>
 80049e0:	4b3e      	ldr	r3, [pc, #248]	@ (8004adc <UART_SetConfig+0x2cc>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049ee:	d017      	beq.n	8004a20 <UART_SetConfig+0x210>
 80049f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049f4:	d817      	bhi.n	8004a26 <UART_SetConfig+0x216>
 80049f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049fa:	d00b      	beq.n	8004a14 <UART_SetConfig+0x204>
 80049fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a00:	d811      	bhi.n	8004a26 <UART_SetConfig+0x216>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <UART_SetConfig+0x1fe>
 8004a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a0a:	d006      	beq.n	8004a1a <UART_SetConfig+0x20a>
 8004a0c:	e00b      	b.n	8004a26 <UART_SetConfig+0x216>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e0a1      	b.n	8004b58 <UART_SetConfig+0x348>
 8004a14:	2302      	movs	r3, #2
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e09e      	b.n	8004b58 <UART_SetConfig+0x348>
 8004a1a:	2304      	movs	r3, #4
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e09b      	b.n	8004b58 <UART_SetConfig+0x348>
 8004a20:	2308      	movs	r3, #8
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e098      	b.n	8004b58 <UART_SetConfig+0x348>
 8004a26:	2310      	movs	r3, #16
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e095      	b.n	8004b58 <UART_SetConfig+0x348>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2f      	ldr	r2, [pc, #188]	@ (8004af0 <UART_SetConfig+0x2e0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d125      	bne.n	8004a82 <UART_SetConfig+0x272>
 8004a36:	4b29      	ldr	r3, [pc, #164]	@ (8004adc <UART_SetConfig+0x2cc>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a44:	d017      	beq.n	8004a76 <UART_SetConfig+0x266>
 8004a46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a4a:	d817      	bhi.n	8004a7c <UART_SetConfig+0x26c>
 8004a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a50:	d00b      	beq.n	8004a6a <UART_SetConfig+0x25a>
 8004a52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a56:	d811      	bhi.n	8004a7c <UART_SetConfig+0x26c>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <UART_SetConfig+0x254>
 8004a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a60:	d006      	beq.n	8004a70 <UART_SetConfig+0x260>
 8004a62:	e00b      	b.n	8004a7c <UART_SetConfig+0x26c>
 8004a64:	2301      	movs	r3, #1
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e076      	b.n	8004b58 <UART_SetConfig+0x348>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e073      	b.n	8004b58 <UART_SetConfig+0x348>
 8004a70:	2304      	movs	r3, #4
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e070      	b.n	8004b58 <UART_SetConfig+0x348>
 8004a76:	2308      	movs	r3, #8
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e06d      	b.n	8004b58 <UART_SetConfig+0x348>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e06a      	b.n	8004b58 <UART_SetConfig+0x348>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1b      	ldr	r2, [pc, #108]	@ (8004af4 <UART_SetConfig+0x2e4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d138      	bne.n	8004afe <UART_SetConfig+0x2ee>
 8004a8c:	4b13      	ldr	r3, [pc, #76]	@ (8004adc <UART_SetConfig+0x2cc>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a9a:	d017      	beq.n	8004acc <UART_SetConfig+0x2bc>
 8004a9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004aa0:	d82a      	bhi.n	8004af8 <UART_SetConfig+0x2e8>
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa6:	d00b      	beq.n	8004ac0 <UART_SetConfig+0x2b0>
 8004aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aac:	d824      	bhi.n	8004af8 <UART_SetConfig+0x2e8>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <UART_SetConfig+0x2aa>
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab6:	d006      	beq.n	8004ac6 <UART_SetConfig+0x2b6>
 8004ab8:	e01e      	b.n	8004af8 <UART_SetConfig+0x2e8>
 8004aba:	2300      	movs	r3, #0
 8004abc:	77fb      	strb	r3, [r7, #31]
 8004abe:	e04b      	b.n	8004b58 <UART_SetConfig+0x348>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e048      	b.n	8004b58 <UART_SetConfig+0x348>
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e045      	b.n	8004b58 <UART_SetConfig+0x348>
 8004acc:	2308      	movs	r3, #8
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e042      	b.n	8004b58 <UART_SetConfig+0x348>
 8004ad2:	bf00      	nop
 8004ad4:	efff69f3 	.word	0xefff69f3
 8004ad8:	40011000 	.word	0x40011000
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40004400 	.word	0x40004400
 8004ae4:	40004800 	.word	0x40004800
 8004ae8:	40004c00 	.word	0x40004c00
 8004aec:	40005000 	.word	0x40005000
 8004af0:	40011400 	.word	0x40011400
 8004af4:	40007800 	.word	0x40007800
 8004af8:	2310      	movs	r3, #16
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e02c      	b.n	8004b58 <UART_SetConfig+0x348>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a72      	ldr	r2, [pc, #456]	@ (8004ccc <UART_SetConfig+0x4bc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d125      	bne.n	8004b54 <UART_SetConfig+0x344>
 8004b08:	4b71      	ldr	r3, [pc, #452]	@ (8004cd0 <UART_SetConfig+0x4c0>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b16:	d017      	beq.n	8004b48 <UART_SetConfig+0x338>
 8004b18:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b1c:	d817      	bhi.n	8004b4e <UART_SetConfig+0x33e>
 8004b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b22:	d00b      	beq.n	8004b3c <UART_SetConfig+0x32c>
 8004b24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b28:	d811      	bhi.n	8004b4e <UART_SetConfig+0x33e>
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <UART_SetConfig+0x326>
 8004b2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b32:	d006      	beq.n	8004b42 <UART_SetConfig+0x332>
 8004b34:	e00b      	b.n	8004b4e <UART_SetConfig+0x33e>
 8004b36:	2300      	movs	r3, #0
 8004b38:	77fb      	strb	r3, [r7, #31]
 8004b3a:	e00d      	b.n	8004b58 <UART_SetConfig+0x348>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e00a      	b.n	8004b58 <UART_SetConfig+0x348>
 8004b42:	2304      	movs	r3, #4
 8004b44:	77fb      	strb	r3, [r7, #31]
 8004b46:	e007      	b.n	8004b58 <UART_SetConfig+0x348>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e004      	b.n	8004b58 <UART_SetConfig+0x348>
 8004b4e:	2310      	movs	r3, #16
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e001      	b.n	8004b58 <UART_SetConfig+0x348>
 8004b54:	2310      	movs	r3, #16
 8004b56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b60:	d15b      	bne.n	8004c1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b62:	7ffb      	ldrb	r3, [r7, #31]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d828      	bhi.n	8004bba <UART_SetConfig+0x3aa>
 8004b68:	a201      	add	r2, pc, #4	@ (adr r2, 8004b70 <UART_SetConfig+0x360>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004b95 	.word	0x08004b95
 8004b74:	08004b9d 	.word	0x08004b9d
 8004b78:	08004ba5 	.word	0x08004ba5
 8004b7c:	08004bbb 	.word	0x08004bbb
 8004b80:	08004bab 	.word	0x08004bab
 8004b84:	08004bbb 	.word	0x08004bbb
 8004b88:	08004bbb 	.word	0x08004bbb
 8004b8c:	08004bbb 	.word	0x08004bbb
 8004b90:	08004bb3 	.word	0x08004bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b94:	f7fe fe8e 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8004b98:	61b8      	str	r0, [r7, #24]
        break;
 8004b9a:	e013      	b.n	8004bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b9c:	f7fe fe9e 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8004ba0:	61b8      	str	r0, [r7, #24]
        break;
 8004ba2:	e00f      	b.n	8004bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba4:	4b4b      	ldr	r3, [pc, #300]	@ (8004cd4 <UART_SetConfig+0x4c4>)
 8004ba6:	61bb      	str	r3, [r7, #24]
        break;
 8004ba8:	e00c      	b.n	8004bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004baa:	f7fe fd71 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8004bae:	61b8      	str	r0, [r7, #24]
        break;
 8004bb0:	e008      	b.n	8004bc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bb6:	61bb      	str	r3, [r7, #24]
        break;
 8004bb8:	e004      	b.n	8004bc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	77bb      	strb	r3, [r7, #30]
        break;
 8004bc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d074      	beq.n	8004cb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	005a      	lsls	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	441a      	add	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b0f      	cmp	r3, #15
 8004be4:	d916      	bls.n	8004c14 <UART_SetConfig+0x404>
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bec:	d212      	bcs.n	8004c14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f023 030f 	bic.w	r3, r3, #15
 8004bf6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	085b      	lsrs	r3, r3, #1
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	89fb      	ldrh	r3, [r7, #14]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	89fa      	ldrh	r2, [r7, #14]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	e04f      	b.n	8004cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	77bb      	strb	r3, [r7, #30]
 8004c18:	e04c      	b.n	8004cb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c1a:	7ffb      	ldrb	r3, [r7, #31]
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d828      	bhi.n	8004c72 <UART_SetConfig+0x462>
 8004c20:	a201      	add	r2, pc, #4	@ (adr r2, 8004c28 <UART_SetConfig+0x418>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c4d 	.word	0x08004c4d
 8004c2c:	08004c55 	.word	0x08004c55
 8004c30:	08004c5d 	.word	0x08004c5d
 8004c34:	08004c73 	.word	0x08004c73
 8004c38:	08004c63 	.word	0x08004c63
 8004c3c:	08004c73 	.word	0x08004c73
 8004c40:	08004c73 	.word	0x08004c73
 8004c44:	08004c73 	.word	0x08004c73
 8004c48:	08004c6b 	.word	0x08004c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c4c:	f7fe fe32 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8004c50:	61b8      	str	r0, [r7, #24]
        break;
 8004c52:	e013      	b.n	8004c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c54:	f7fe fe42 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8004c58:	61b8      	str	r0, [r7, #24]
        break;
 8004c5a:	e00f      	b.n	8004c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd4 <UART_SetConfig+0x4c4>)
 8004c5e:	61bb      	str	r3, [r7, #24]
        break;
 8004c60:	e00c      	b.n	8004c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c62:	f7fe fd15 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8004c66:	61b8      	str	r0, [r7, #24]
        break;
 8004c68:	e008      	b.n	8004c7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c6e:	61bb      	str	r3, [r7, #24]
        break;
 8004c70:	e004      	b.n	8004c7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	77bb      	strb	r3, [r7, #30]
        break;
 8004c7a:	bf00      	nop
    }

    if (pclk != 0U)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d018      	beq.n	8004cb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	085a      	lsrs	r2, r3, #1
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	441a      	add	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b0f      	cmp	r3, #15
 8004c9a:	d909      	bls.n	8004cb0 <UART_SetConfig+0x4a0>
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca2:	d205      	bcs.n	8004cb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	e001      	b.n	8004cb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004cc0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40007c00 	.word	0x40007c00
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	00f42400 	.word	0x00f42400

08004cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01a      	beq.n	8004dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dd6:	d10a      	bne.n	8004dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08c      	sub	sp, #48	@ 0x30
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e2c:	f7fd f9a8 	bl	8002180 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d12e      	bne.n	8004e9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f83b 	bl	8004eca <UART_WaitOnFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d021      	beq.n	8004e9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	e853 3f00 	ldrex	r3, [r3]
 8004e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e6e:	623b      	str	r3, [r7, #32]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	61fb      	str	r3, [r7, #28]
 8004e7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	69b9      	ldr	r1, [r7, #24]
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	617b      	str	r3, [r7, #20]
   return(result);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e6      	bne.n	8004e5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e011      	b.n	8004ec2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3728      	adds	r7, #40	@ 0x28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eda:	e04f      	b.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d04b      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee4:	f7fd f94c 	bl	8002180 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d302      	bcc.n	8004efa <UART_WaitOnFlagUntilTimeout+0x30>
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e04e      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d037      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b80      	cmp	r3, #128	@ 0x80
 8004f10:	d034      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b40      	cmp	r3, #64	@ 0x40
 8004f16:	d031      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d110      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f838 	bl	8004fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2208      	movs	r2, #8
 8004f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e029      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f56:	d111      	bne.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f81e 	bl	8004fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e00f      	b.n	8004f9c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69da      	ldr	r2, [r3, #28]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d0a0      	beq.n	8004edc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b095      	sub	sp, #84	@ 0x54
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fca:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e6      	bne.n	8004fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005000:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e5      	bne.n	8004fde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005016:	2b01      	cmp	r3, #1
 8005018:	d118      	bne.n	800504c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	60bb      	str	r3, [r7, #8]
   return(result);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f023 0310 	bic.w	r3, r3, #16
 800502e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6979      	ldr	r1, [r7, #20]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	613b      	str	r3, [r7, #16]
   return(result);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e6      	bne.n	800501a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005060:	bf00      	nop
 8005062:	3754      	adds	r7, #84	@ 0x54
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff fbaa 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6979      	ldr	r1, [r7, #20]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	613b      	str	r3, [r7, #16]
   return(result);
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e6      	bne.n	80050a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff fb76 	bl	80047d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050e4:	bf00      	nop
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <memcmp>:
 80050ec:	b510      	push	{r4, lr}
 80050ee:	3901      	subs	r1, #1
 80050f0:	4402      	add	r2, r0
 80050f2:	4290      	cmp	r0, r2
 80050f4:	d101      	bne.n	80050fa <memcmp+0xe>
 80050f6:	2000      	movs	r0, #0
 80050f8:	e005      	b.n	8005106 <memcmp+0x1a>
 80050fa:	7803      	ldrb	r3, [r0, #0]
 80050fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005100:	42a3      	cmp	r3, r4
 8005102:	d001      	beq.n	8005108 <memcmp+0x1c>
 8005104:	1b18      	subs	r0, r3, r4
 8005106:	bd10      	pop	{r4, pc}
 8005108:	3001      	adds	r0, #1
 800510a:	e7f2      	b.n	80050f2 <memcmp+0x6>

0800510c <memset>:
 800510c:	4402      	add	r2, r0
 800510e:	4603      	mov	r3, r0
 8005110:	4293      	cmp	r3, r2
 8005112:	d100      	bne.n	8005116 <memset+0xa>
 8005114:	4770      	bx	lr
 8005116:	f803 1b01 	strb.w	r1, [r3], #1
 800511a:	e7f9      	b.n	8005110 <memset+0x4>

0800511c <__libc_init_array>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	4d0d      	ldr	r5, [pc, #52]	@ (8005154 <__libc_init_array+0x38>)
 8005120:	4c0d      	ldr	r4, [pc, #52]	@ (8005158 <__libc_init_array+0x3c>)
 8005122:	1b64      	subs	r4, r4, r5
 8005124:	10a4      	asrs	r4, r4, #2
 8005126:	2600      	movs	r6, #0
 8005128:	42a6      	cmp	r6, r4
 800512a:	d109      	bne.n	8005140 <__libc_init_array+0x24>
 800512c:	4d0b      	ldr	r5, [pc, #44]	@ (800515c <__libc_init_array+0x40>)
 800512e:	4c0c      	ldr	r4, [pc, #48]	@ (8005160 <__libc_init_array+0x44>)
 8005130:	f000 f826 	bl	8005180 <_init>
 8005134:	1b64      	subs	r4, r4, r5
 8005136:	10a4      	asrs	r4, r4, #2
 8005138:	2600      	movs	r6, #0
 800513a:	42a6      	cmp	r6, r4
 800513c:	d105      	bne.n	800514a <__libc_init_array+0x2e>
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	f855 3b04 	ldr.w	r3, [r5], #4
 8005144:	4798      	blx	r3
 8005146:	3601      	adds	r6, #1
 8005148:	e7ee      	b.n	8005128 <__libc_init_array+0xc>
 800514a:	f855 3b04 	ldr.w	r3, [r5], #4
 800514e:	4798      	blx	r3
 8005150:	3601      	adds	r6, #1
 8005152:	e7f2      	b.n	800513a <__libc_init_array+0x1e>
 8005154:	08006428 	.word	0x08006428
 8005158:	08006428 	.word	0x08006428
 800515c:	08006428 	.word	0x08006428
 8005160:	0800642c 	.word	0x0800642c

08005164 <memcpy>:
 8005164:	440a      	add	r2, r1
 8005166:	4291      	cmp	r1, r2
 8005168:	f100 33ff 	add.w	r3, r0, #4294967295
 800516c:	d100      	bne.n	8005170 <memcpy+0xc>
 800516e:	4770      	bx	lr
 8005170:	b510      	push	{r4, lr}
 8005172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800517a:	4291      	cmp	r1, r2
 800517c:	d1f9      	bne.n	8005172 <memcpy+0xe>
 800517e:	bd10      	pop	{r4, pc}

08005180 <_init>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	bf00      	nop
 8005184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005186:	bc08      	pop	{r3}
 8005188:	469e      	mov	lr, r3
 800518a:	4770      	bx	lr

0800518c <_fini>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr

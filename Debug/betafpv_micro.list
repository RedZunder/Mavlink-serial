
betafpv_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061d0  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001288  08006398  08006398  00007398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007620  08007620  000094b8  2**0
                  CONTENTS
  4 .ARM          00000008  08007620  08007620  00008620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007628  08007628  000094b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007628  08007628  00008628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800762c  0800762c  0000862c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000378  20000000  08007630  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000378  080079a8  00009378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000418  08007a48  00009418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b50  200004b8  08007ae8  000094b8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20001008  08007ae8  0000a008  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000094b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014f69  00000000  00000000  000094e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002721  00000000  00000000  0001e451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001078  00000000  00000000  00020b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cfb  00000000  00000000  00021bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f689  00000000  00000000  000228eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b7f0  00000000  00000000  00051f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016edb9  00000000  00000000  0006d764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001dc51d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000046a0  00000000  00000000  001dc560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  001e0c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200004b8 	.word	0x200004b8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006380 	.word	0x08006380

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200004bc 	.word	0x200004bc
 8000204:	08006380 	.word	0x08006380

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_TIM_PeriodElapsedCallback>:
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)rx, 6);

}*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim4 )
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a05      	ldr	r2, [pc, #20]	@ (8000518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d103      	bne.n	8000510 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		broadcast_heartbeat(&buffer, &mssg);
 8000508:	4904      	ldr	r1, [pc, #16]	@ (800051c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800050a:	4805      	ldr	r0, [pc, #20]	@ (8000520 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800050c:	f001 ffe2 	bl	80024d4 <broadcast_heartbeat>
	}
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	200005bc 	.word	0x200005bc
 800051c:	20000724 	.word	0x20000724
 8000520:	2000071c 	.word	0x2000071c

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b0c8      	sub	sp, #288	@ 0x120
 8000528:	af46      	add	r7, sp, #280	@ 0x118
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f002 fa1c 	bl	8002966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f83d 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f9a1 	bl	8000878 <MX_GPIO_Init>
  MX_ETH_Init();
 8000536:	f000 f8a1 	bl	800067c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800053a:	f000 f96d 	bl	8000818 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800053e:	f000 f93b 	bl	80007b8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000542:	f000 f8e9 	bl	8000718 <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start_IT(&htim4);
 8000546:	4815      	ldr	r0, [pc, #84]	@ (800059c <main+0x78>)
 8000548:	f004 fa68 	bl	8004a1c <HAL_TIM_Base_Start_IT>

  uint8_t x=0;
 800054c:	2300      	movs	r3, #0
 800054e:	71fb      	strb	r3, [r7, #7]
  encode_mavlink_mssg(x);
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	4618      	mov	r0, r3
 8000554:	f001 ff8e 	bl	8002474 <encode_mavlink_mssg>

	  //show answer in serial terminal
		//HAL_UART_Transmit(&huart3,(uint8_t *) 255,1,100);
		//HAL_UART_Transmit(&huart1, (uint8_t *)rx,sizeof(rx),100);

		decode_mavlink_mssg(mssgBytes[i], rx_msg);
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <main+0x7c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a11      	ldr	r2, [pc, #68]	@ (80005a4 <main+0x80>)
 800055e:	5cd3      	ldrb	r3, [r2, r3]
 8000560:	461d      	mov	r5, r3
 8000562:	4c11      	ldr	r4, [pc, #68]	@ (80005a8 <main+0x84>)
 8000564:	4668      	mov	r0, sp
 8000566:	f104 030c 	add.w	r3, r4, #12
 800056a:	f240 1217 	movw	r2, #279	@ 0x117
 800056e:	4619      	mov	r1, r3
 8000570:	f005 fef8 	bl	8006364 <memcpy>
 8000574:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000578:	4628      	mov	r0, r5
 800057a:	f001 ff09 	bl	8002390 <decode_mavlink_mssg>

		if(i<sizeof(mssgBytes))
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <main+0x7c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f240 326a 	movw	r2, #874	@ 0x36a
 8000586:	4293      	cmp	r3, r2
 8000588:	d804      	bhi.n	8000594 <main+0x70>
			i++;
 800058a:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <main+0x7c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	4a03      	ldr	r2, [pc, #12]	@ (80005a0 <main+0x7c>)
 8000592:	6013      	str	r3, [r2, #0]




		HAL_Delay(10);
 8000594:	200a      	movs	r0, #10
 8000596:	f002 fa43 	bl	8002a20 <HAL_Delay>
		decode_mavlink_mssg(mssgBytes[i], rx_msg);
 800059a:	e7dd      	b.n	8000558 <main+0x34>
 800059c:	200005bc 	.word	0x200005bc
 80005a0:	20000718 	.word	0x20000718
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000848 	.word	0x20000848

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	@ 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 fea6 	bl	800630c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d0:	f003 f902 	bl	80037d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	4b27      	ldr	r3, [pc, #156]	@ (8000674 <SystemClock_Config+0xc8>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	4a26      	ldr	r2, [pc, #152]	@ (8000674 <SystemClock_Config+0xc8>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e0:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ec:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <SystemClock_Config+0xcc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f4:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <SystemClock_Config+0xcc>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000608:	2301      	movs	r3, #1
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800060c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800061a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000620:	2348      	movs	r3, #72	@ 0x48
 8000622:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000628:	2303      	movs	r3, #3
 800062a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f003 f8e1 	bl	80037f8 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800063c:	f000 f9ee 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	2102      	movs	r1, #2
 800065c:	4618      	mov	r0, r3
 800065e:	f003 fb6f 	bl	8003d40 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000668:	f000 f9d8 	bl	8000a1c <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	@ 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <MX_ETH_Init+0x84>)
 8000682:	4a20      	ldr	r2, [pc, #128]	@ (8000704 <MX_ETH_Init+0x88>)
 8000684:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000686:	4b20      	ldr	r3, [pc, #128]	@ (8000708 <MX_ETH_Init+0x8c>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800068c:	4b1e      	ldr	r3, [pc, #120]	@ (8000708 <MX_ETH_Init+0x8c>)
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000692:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <MX_ETH_Init+0x8c>)
 8000694:	22e1      	movs	r2, #225	@ 0xe1
 8000696:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000698:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <MX_ETH_Init+0x8c>)
 800069a:	2200      	movs	r2, #0
 800069c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800069e:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <MX_ETH_Init+0x8c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <MX_ETH_Init+0x8c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_ETH_Init+0x84>)
 80006ac:	4a16      	ldr	r2, [pc, #88]	@ (8000708 <MX_ETH_Init+0x8c>)
 80006ae:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <MX_ETH_Init+0x84>)
 80006b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006b6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006b8:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_ETH_Init+0x84>)
 80006ba:	4a14      	ldr	r2, [pc, #80]	@ (800070c <MX_ETH_Init+0x90>)
 80006bc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <MX_ETH_Init+0x84>)
 80006c0:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <MX_ETH_Init+0x94>)
 80006c2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_ETH_Init+0x84>)
 80006c6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006ca:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <MX_ETH_Init+0x84>)
 80006ce:	f002 fb6f 	bl	8002db0 <HAL_ETH_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006d8:	f000 f9a0 	bl	8000a1c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006dc:	2238      	movs	r2, #56	@ 0x38
 80006de:	2100      	movs	r1, #0
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <MX_ETH_Init+0x98>)
 80006e2:	f005 fe13 	bl	800630c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_ETH_Init+0x98>)
 80006e8:	2221      	movs	r2, #33	@ 0x21
 80006ea:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_ETH_Init+0x98>)
 80006ee:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80006f2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <MX_ETH_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000050c 	.word	0x2000050c
 8000704:	40028000 	.word	0x40028000
 8000708:	2000096c 	.word	0x2000096c
 800070c:	20000418 	.word	0x20000418
 8000710:	20000378 	.word	0x20000378
 8000714:	200004d4 	.word	0x200004d4

08000718 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000736:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_TIM4_Init+0x98>)
 8000738:	4a1e      	ldr	r2, [pc, #120]	@ (80007b4 <MX_TIM4_Init+0x9c>)
 800073a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_TIM4_Init+0x98>)
 800073e:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000742:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_TIM4_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_TIM4_Init+0x98>)
 800074c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000750:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_TIM4_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_TIM4_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800075e:	4814      	ldr	r0, [pc, #80]	@ (80007b0 <MX_TIM4_Init+0x98>)
 8000760:	f004 f904 	bl	800496c <HAL_TIM_Base_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800076a:	f000 f957 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <MX_TIM4_Init+0x98>)
 800077c:	f004 face 	bl	8004d1c <HAL_TIM_ConfigClockSource>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000786:	f000 f949 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	@ (80007b0 <MX_TIM4_Init+0x98>)
 8000798:	f004 fcf8 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80007a2:	f000 f93b 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3720      	adds	r7, #32
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200005bc 	.word	0x200005bc
 80007b4:	40000800 	.word	0x40000800

080007b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_USART1_UART_Init+0x58>)
 80007be:	4a15      	ldr	r2, [pc, #84]	@ (8000814 <MX_USART1_UART_Init+0x5c>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <MX_USART1_UART_Init+0x58>)
 80007c4:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80007c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_USART1_UART_Init+0x58>)
 80007de:	2208      	movs	r2, #8
 80007e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_USART1_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_USART1_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_USART1_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_USART1_UART_Init+0x58>)
 80007fc:	f004 fdc0 	bl	8005380 <HAL_HalfDuplex_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000806:	f000 f909 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000608 	.word	0x20000608
 8000814:	40011000 	.word	0x40011000

08000818 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800081c:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_USART3_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	@ (8000874 <MX_USART3_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000822:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_USART3_UART_Init+0x58>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_USART3_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_USART3_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_USART3_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_USART3_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_USART3_UART_Init+0x58>)
 800085c:	f004 fd42 	bl	80052e4 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f8d9 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000690 	.word	0x20000690
 8000874:	40004800 	.word	0x40004800

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	@ 0x30
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b5e      	ldr	r3, [pc, #376]	@ (8000a08 <MX_GPIO_Init+0x190>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a5d      	ldr	r2, [pc, #372]	@ (8000a08 <MX_GPIO_Init+0x190>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b5b      	ldr	r3, [pc, #364]	@ (8000a08 <MX_GPIO_Init+0x190>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	61bb      	str	r3, [r7, #24]
 80008a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b58      	ldr	r3, [pc, #352]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a57      	ldr	r2, [pc, #348]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b55      	ldr	r3, [pc, #340]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b52      	ldr	r3, [pc, #328]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a51      	ldr	r2, [pc, #324]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b4f      	ldr	r3, [pc, #316]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b4c      	ldr	r3, [pc, #304]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a4b      	ldr	r2, [pc, #300]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b49      	ldr	r3, [pc, #292]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	4b46      	ldr	r3, [pc, #280]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a45      	ldr	r2, [pc, #276]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b43      	ldr	r3, [pc, #268]	@ (8000a08 <MX_GPIO_Init+0x190>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000906:	4b40      	ldr	r3, [pc, #256]	@ (8000a08 <MX_GPIO_Init+0x190>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a08 <MX_GPIO_Init+0x190>)
 800090c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b3d      	ldr	r3, [pc, #244]	@ (8000a08 <MX_GPIO_Init+0x190>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000924:	4839      	ldr	r0, [pc, #228]	@ (8000a0c <MX_GPIO_Init+0x194>)
 8000926:	f002 ff3d 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2140      	movs	r1, #64	@ 0x40
 800092e:	4838      	ldr	r0, [pc, #224]	@ (8000a10 <MX_GPIO_Init+0x198>)
 8000930:	f002 ff38 	bl	80037a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000934:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4832      	ldr	r0, [pc, #200]	@ (8000a14 <MX_GPIO_Init+0x19c>)
 800094c:	f002 fd7e 	bl	800344c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000950:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4828      	ldr	r0, [pc, #160]	@ (8000a0c <MX_GPIO_Init+0x194>)
 800096a:	f002 fd6f 	bl	800344c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800096e:	2340      	movs	r3, #64	@ 0x40
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4822      	ldr	r0, [pc, #136]	@ (8000a10 <MX_GPIO_Init+0x198>)
 8000986:	f002 fd61 	bl	800344c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	481c      	ldr	r0, [pc, #112]	@ (8000a10 <MX_GPIO_Init+0x198>)
 800099e:	f002 fd55 	bl	800344c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80009a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009b4:	230a      	movs	r3, #10
 80009b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4816      	ldr	r0, [pc, #88]	@ (8000a18 <MX_GPIO_Init+0x1a0>)
 80009c0:	f002 fd44 	bl	800344c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	480c      	ldr	r0, [pc, #48]	@ (8000a0c <MX_GPIO_Init+0x194>)
 80009da:	f002 fd37 	bl	800344c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e4:	2312      	movs	r3, #18
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f0:	2304      	movs	r3, #4
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_GPIO_Init+0x194>)
 80009fc:	f002 fd26 	bl	800344c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a00:	bf00      	nop
 8000a02:	3730      	adds	r7, #48	@ 0x30
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	40021800 	.word	0x40021800
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40020000 	.word	0x40020000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4053      	eors	r3, r2
 8000a3e:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	011b      	lsls	r3, r3, #4
 8000a44:	b25a      	sxtb	r2, r3
 8000a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4a:	4053      	eors	r3, r2
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b21a      	sxth	r2, r3
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	021b      	lsls	r3, r3, #8
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	4053      	eors	r3, r2
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4053      	eors	r3, r2
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	091b      	lsrs	r3, r3, #4
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	4053      	eors	r3, r2
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	801a      	strh	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a9a:	801a      	strh	r2, [r3, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000ab4:	f107 030e 	add.w	r3, r7, #14
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ffe7 	bl	8000a8c <crc_init>
	while (length--) {
 8000abe:	e009      	b.n	8000ad4 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	f107 020e 	add.w	r2, r7, #14
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ffaa 	bl	8000a28 <crc_accumulate>
	while (length--) {
 8000ad4:	887b      	ldrh	r3, [r7, #2]
 8000ad6:	1e5a      	subs	r2, r3, #1
 8000ad8:	807a      	strh	r2, [r7, #2]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1f0      	bne.n	8000ac0 <crc_calculate+0x18>
        }
        return crcTmp;
 8000ade:	89fb      	ldrh	r3, [r7, #14]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	4613      	mov	r3, r2
 8000af4:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	617b      	str	r3, [r7, #20]
	while (length--) {
 8000afa:	e007      	b.n	8000b0c <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	617a      	str	r2, [r7, #20]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	68f9      	ldr	r1, [r7, #12]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff8e 	bl	8000a28 <crc_accumulate>
	while (length--) {
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	80fa      	strh	r2, [r7, #6]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1f2      	bne.n	8000afc <crc_accumulate_buffer+0x14>
        }
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a0e      	ldr	r2, [pc, #56]	@ (8000b70 <mavlink_sha256_init+0x50>)
 8000b38:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b74 <mavlink_sha256_init+0x54>)
 8000b3e:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <mavlink_sha256_init+0x58>)
 8000b44:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a0c      	ldr	r2, [pc, #48]	@ (8000b7c <mavlink_sha256_init+0x5c>)
 8000b4a:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000b80 <mavlink_sha256_init+0x60>)
 8000b50:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a0b      	ldr	r2, [pc, #44]	@ (8000b84 <mavlink_sha256_init+0x64>)
 8000b56:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b88 <mavlink_sha256_init+0x68>)
 8000b5c:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <mavlink_sha256_init+0x6c>)
 8000b62:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	6a09e667 	.word	0x6a09e667
 8000b74:	bb67ae85 	.word	0xbb67ae85
 8000b78:	3c6ef372 	.word	0x3c6ef372
 8000b7c:	a54ff53a 	.word	0xa54ff53a
 8000b80:	510e527f 	.word	0x510e527f
 8000b84:	9b05688c 	.word	0x9b05688c
 8000b88:	1f83d9ab 	.word	0x1f83d9ab
 8000b8c:	5be0cd19 	.word	0x5be0cd19

08000b90 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b0cf      	sub	sp, #316	@ 0x13c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000b9a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000b9e:	6018      	str	r0, [r3, #0]
 8000ba0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ba4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000ba8:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8000baa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    BB = m->counter[1];
 8000bba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bbe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    CC = m->counter[2];
 8000bca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	691b      	ldr	r3, [r3, #16]
 8000bd6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    DD = m->counter[3];
 8000bda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bde:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    EE = m->counter[4];
 8000bea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    FF = m->counter[5];
 8000bfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000bfe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GG = m->counter[6];
 8000c0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c0e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6a1b      	ldr	r3, [r3, #32]
 8000c16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HH = m->counter[7];
 8000c1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c1e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    for (i = 0; i < 16; ++i)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000c30:	e016      	b.n	8000c60 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 8000c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000c3c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	6819      	ldr	r1, [r3, #0]
 8000c46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	dde4      	ble.n	8000c32 <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8000c68:	2310      	movs	r3, #16
 8000c6a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000c6e:	e069      	b.n	8000d44 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c74:	1e9a      	subs	r2, r3, #2
 8000c76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c82:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c8a:	1e99      	subs	r1, r3, #2
 8000c8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c98:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000c9c:	405a      	eors	r2, r3
 8000c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ca2:	1e99      	subs	r1, r3, #2
 8000ca4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ca8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cb0:	0a9b      	lsrs	r3, r3, #10
 8000cb2:	405a      	eors	r2, r3
 8000cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cb8:	1fd9      	subs	r1, r3, #7
 8000cba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cc6:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ccc:	f1a3 010f 	sub.w	r1, r3, #15
 8000cd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cdc:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ce4:	f1a3 000f 	sub.w	r0, r3, #15
 8000ce8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cf0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000cf4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000cf8:	4059      	eors	r1, r3
 8000cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cfe:	f1a3 000f 	sub.w	r0, r3, #15
 8000d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000d12:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d18:	f1a3 0110 	sub.w	r1, r3, #16
 8000d1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d28:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000d2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d32:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d3e:	3301      	adds	r3, #1
 8000d40:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d48:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d4a:	dd91      	ble.n	8000c70 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000d52:	e078      	b.n	8000e46 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000d54:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d58:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000d5c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d60:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000d64:	405a      	eors	r2, r3
 8000d66:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d6a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000d6e:	405a      	eors	r2, r3
 8000d70:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000d74:	441a      	add	r2, r3
 8000d76:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8000d7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d7e:	4019      	ands	r1, r3
 8000d80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000d84:	43d8      	mvns	r0, r3
 8000d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000d8a:	4003      	ands	r3, r0
 8000d8c:	404b      	eors	r3, r1
 8000d8e:	441a      	add	r2, r3
 8000d90:	496e      	ldr	r1, [pc, #440]	@ (8000f4c <mavlink_sha256_calc+0x3bc>)
 8000d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d9a:	441a      	add	r2, r3
 8000d9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000da0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000da4:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8000da8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000dac:	4413      	add	r3, r2
 8000dae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000db2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000db6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000dba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000dbe:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000dc2:	405a      	eors	r2, r3
 8000dc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000dc8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000dcc:	405a      	eors	r2, r3
 8000dce:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8000dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000dd6:	4059      	eors	r1, r3
 8000dd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000ddc:	4019      	ands	r1, r3
 8000dde:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000de6:	4003      	ands	r3, r0
 8000de8:	404b      	eors	r3, r1
 8000dea:	4413      	add	r3, r2
 8000dec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			     
	HH = GG;
 8000df0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000df4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	GG = FF;
 8000df8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000dfc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	FF = EE;
 8000e00:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e04:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	EE = DD + T1;
 8000e08:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000e0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e10:	4413      	add	r3, r2
 8000e12:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	DD = CC;
 8000e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	CC = BB;
 8000e1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000e22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	BB = AA;
 8000e26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000e2a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	AA = T1 + T2;
 8000e2e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000e36:	4413      	add	r3, r2
 8000e38:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (i = 0; i < 64; i++) {
 8000e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e40:	3301      	adds	r3, #1
 8000e42:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e4c:	dd82      	ble.n	8000d54 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 8000e4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e52:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000e5e:	441a      	add	r2, r3
 8000e60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e64:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8000e6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e70:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000e7c:	441a      	add	r2, r3
 8000e7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e82:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8000e8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e9a:	441a      	add	r2, r3
 8000e9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ea0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8000ea8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000eac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	695a      	ldr	r2, [r3, #20]
 8000eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000eb8:	441a      	add	r2, r3
 8000eba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ebe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8000ec6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000eca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	699a      	ldr	r2, [r3, #24]
 8000ed2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ed6:	441a      	add	r2, r3
 8000ed8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000edc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8000ee4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ee8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	69da      	ldr	r2, [r3, #28]
 8000ef0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000ef4:	441a      	add	r2, r3
 8000ef6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000efa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8000f02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f06:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6a1a      	ldr	r2, [r3, #32]
 8000f0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000f12:	441a      	add	r2, r3
 8000f14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f18:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8000f20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f30:	441a      	add	r2, r3
 8000f32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f36:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000f3e:	bf00      	nop
 8000f40:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	08006398 	.word	0x08006398

08000f50 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09c      	sub	sp, #112	@ 0x70
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	441a      	add	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d904      	bls.n	8000f88 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000f88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f8a:	08db      	lsrs	r3, r3, #3
 8000f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000f90:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8000f92:	e057      	b.n	8001044 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 8000f94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f96:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000f9a:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d201      	bcs.n	8000fa8 <mavlink_sha256_update+0x58>
            l = len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fb0:	4413      	add	r3, r2
 8000fb2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000fb4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f005 f9d4 	bl	8006364 <memcpy>
	offset += l;
 8000fbc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000fbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fc0:	4413      	add	r3, r2
 8000fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 8000fc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000fc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fc8:	4413      	add	r3, r2
 8000fca:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000fd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000fd6:	2b40      	cmp	r3, #64	@ 0x40
 8000fd8:	d134      	bne.n	8001044 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3328      	adds	r3, #40	@ 0x28
 8000fde:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	663b      	str	r3, [r7, #96]	@ 0x60
 8000fe4:	e023      	b.n	800102e <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000fe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000fec:	4413      	add	r3, r2
 8000fee:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000ff0:	f107 0210 	add.w	r2, r7, #16
 8000ff4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 8000ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ffe:	3303      	adds	r3, #3
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001004:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001008:	1c9a      	adds	r2, r3, #2
 800100a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800100c:	3301      	adds	r3, #1
 800100e:	7812      	ldrb	r2, [r2, #0]
 8001010:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8001012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001014:	1c5a      	adds	r2, r3, #1
 8001016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001018:	3302      	adds	r3, #2
 800101a:	7812      	ldrb	r2, [r2, #0]
 800101c:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 800101e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001020:	3303      	adds	r3, #3
 8001022:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001028:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800102a:	3301      	adds	r3, #1
 800102c:	663b      	str	r3, [r7, #96]	@ 0x60
 800102e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001030:	2b0f      	cmp	r3, #15
 8001032:	ddd8      	ble.n	8000fe6 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4619      	mov	r1, r3
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff fda8 	bl	8000b90 <mavlink_sha256_calc>
	    offset = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1a4      	bne.n	8000f94 <mavlink_sha256_update+0x44>
	}
    }
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	3770      	adds	r7, #112	@ 0x70
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b098      	sub	sp, #96	@ 0x60
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	08db      	lsrs	r3, r3, #3
 8001064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001068:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 800106a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800106c:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001074:	3301      	adds	r3, #1
 8001076:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3308      	adds	r3, #8
 800107c:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 800107e:	2380      	movs	r3, #128	@ 0x80
 8001080:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	3301      	adds	r3, #1
 8001088:	2247      	movs	r2, #71	@ 0x47
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f005 f93d 	bl	800630c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001098:	3307      	adds	r3, #7
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	3360      	adds	r3, #96	@ 0x60
 800109e:	443b      	add	r3, r7
 80010a0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	0a1a      	lsrs	r2, r3, #8
 80010aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010ac:	3306      	adds	r3, #6
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	3360      	adds	r3, #96	@ 0x60
 80010b2:	443b      	add	r3, r7
 80010b4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0c1a      	lsrs	r2, r3, #16
 80010be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010c0:	3305      	adds	r3, #5
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	3360      	adds	r3, #96	@ 0x60
 80010c6:	443b      	add	r3, r7
 80010c8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	0e1a      	lsrs	r2, r3, #24
 80010d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010d4:	3304      	adds	r3, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	3360      	adds	r3, #96	@ 0x60
 80010da:	443b      	add	r3, r7
 80010dc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010e6:	3303      	adds	r3, #3
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	3360      	adds	r3, #96	@ 0x60
 80010ec:	443b      	add	r3, r7
 80010ee:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	0a1a      	lsrs	r2, r3, #8
 80010f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010fa:	3302      	adds	r3, #2
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	3360      	adds	r3, #96	@ 0x60
 8001100:	443b      	add	r3, r7
 8001102:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	0c1a      	lsrs	r2, r3, #16
 800110c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800110e:	3301      	adds	r3, #1
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	3360      	adds	r3, #96	@ 0x60
 8001114:	443b      	add	r3, r7
 8001116:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	0e1b      	lsrs	r3, r3, #24
 8001120:	b2d9      	uxtb	r1, r3
 8001122:	f107 020c 	add.w	r2, r7, #12
 8001126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001128:	4413      	add	r3, r2
 800112a:	460a      	mov	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800112e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001130:	f103 0208 	add.w	r2, r3, #8
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff08 	bl	8000f50 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8001140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001142:	78da      	ldrb	r2, [r3, #3]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800114e:	7892      	ldrb	r2, [r2, #2]
 8001150:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	3302      	adds	r3, #2
 8001156:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001158:	7852      	ldrb	r2, [r2, #1]
 800115a:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	3303      	adds	r3, #3
 8001160:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	3304      	adds	r3, #4
 800116a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800116c:	79d2      	ldrb	r2, [r2, #7]
 800116e:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	3305      	adds	r3, #5
 8001174:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001176:	7992      	ldrb	r2, [r2, #6]
 8001178:	701a      	strb	r2, [r3, #0]
}
 800117a:	bf00      	nop
 800117c:	3760      	adds	r7, #96	@ 0x60
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4a03      	ldr	r2, [pc, #12]	@ (80011a8 <mavlink_get_channel_status+0x24>)
 800119a:	4413      	add	r3, r2
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	20000fa4 	.word	0x20000fa4

080011ac <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f240 1223 	movw	r2, #291	@ 0x123
 80011bc:	fb02 f303 	mul.w	r3, r2, r3
 80011c0:	4a03      	ldr	r2, [pc, #12]	@ (80011d0 <mavlink_get_channel_buffer+0x24>)
 80011c2:	4413      	add	r3, r2
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	20000b18 	.word	0x20000b18

080011d4 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b0a0      	sub	sp, #128	@ 0x80
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <mavlink_sign_packet+0x20>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <mavlink_sign_packet+0x24>
	    return 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	e04f      	b.n	8001298 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	785a      	ldrb	r2, [r3, #1]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001206:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	3301      	adds	r3, #1
 800120e:	f107 0110 	add.w	r1, r7, #16
 8001212:	2206      	movs	r2, #6
 8001214:	4618      	mov	r0, r3
 8001216:	f005 f8a5 	bl	8006364 <memcpy>
	signing->timestamp++;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001220:	1c54      	adds	r4, r2, #1
 8001222:	f143 0500 	adc.w	r5, r3, #0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fc75 	bl	8000b20 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f103 0110 	add.w	r1, r3, #16
 800123c:	f107 0318 	add.w	r3, r7, #24
 8001240:	2220      	movs	r2, #32
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe84 	bl	8000f50 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001248:	78fa      	ldrb	r2, [r7, #3]
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe7d 	bl	8000f50 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001256:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fe74 	bl	8000f50 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	2202      	movs	r2, #2
 800126e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fe6c 	bl	8000f50 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	2207      	movs	r2, #7
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fe65 	bl	8000f50 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1dda      	adds	r2, r3, #7
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fedf 	bl	8001054 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8001296:	230d      	movs	r3, #13
}
 8001298:	4618      	mov	r0, r3
 800129a:	3780      	adds	r7, #128	@ 0x80
 800129c:	46bd      	mov	sp, r7
 800129e:	bdb0      	pop	{r4, r5, r7, pc}

080012a0 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80012ac:	e002      	b.n	80012b4 <_mav_trim_payload+0x14>
		length--;
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d906      	bls.n	80012c8 <_mav_trim_payload+0x28>
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	3b01      	subs	r3, #1
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f2      	beq.n	80012ae <_mav_trim_payload+0xe>
	}
	return length;
 80012c8:	78fb      	ldrb	r3, [r7, #3]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b0aa      	sub	sp, #168	@ 0xa8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <mavlink_signature_check+0x16>
		return true;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e13e      	b.n	800156c <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3302      	adds	r3, #2
 80012f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	const uint8_t *psig = msg->signature;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 80012fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001300:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001304:	3307      	adds	r3, #7
 8001306:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 800130a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fc06 	bl	8000b20 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f103 0110 	add.w	r1, r3, #16
 800131a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800131e:	2220      	movs	r2, #32
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe15 	bl	8000f50 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8001326:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132a:	220a      	movs	r2, #10
 800132c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe0d 	bl	8000f50 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f103 010c 	add.w	r1, r3, #12
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	78db      	ldrb	r3, [r3, #3]
 8001340:	461a      	mov	r2, r3
 8001342:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe02 	bl	8000f50 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f503 718a 	add.w	r1, r3, #276	@ 0x114
 8001352:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001356:	2202      	movs	r2, #2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fdf9 	bl	8000f50 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 800135e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001362:	2207      	movs	r2, #7
 8001364:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fdf1 	bl	8000f50 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 800136e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001372:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe6b 	bl	8001054 <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 800137e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001382:	2206      	movs	r2, #6
 8001384:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001388:	4618      	mov	r0, r3
 800138a:	f004 ffaf 	bl	80062ec <memcmp>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2202      	movs	r2, #2
 8001398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		return false;
 800139c:	2300      	movs	r3, #0
 800139e:	e0e5      	b.n	800156c <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 80013a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	tstamp.t64 = 0;
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 80013b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013ba:	1c59      	adds	r1, r3, #1
 80013bc:	f107 0318 	add.w	r3, r7, #24
 80013c0:	2206      	movs	r2, #6
 80013c2:	4618      	mov	r0, r3
 80013c4:	f004 ffce 	bl	8006364 <memcpy>

	if (signing_streams == NULL) {
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d105      	bne.n	80013da <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2203      	movs	r2, #3
 80013d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                return false;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e0c8      	b.n	800156c <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 80013e0:	e02b      	b.n	800143a <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	79d9      	ldrb	r1, [r3, #7]
 80013e6:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	4613      	mov	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4413      	add	r3, r2
 80013f2:	4403      	add	r3, r0
 80013f4:	3303      	adds	r3, #3
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4299      	cmp	r1, r3
 80013fa:	d119      	bne.n	8001430 <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7a19      	ldrb	r1, [r3, #8]
 8001400:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001404:	68b8      	ldr	r0, [r7, #8]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	4403      	add	r3, r0
 800140e:	3304      	adds	r3, #4
 8001410:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001412:	4299      	cmp	r1, r3
 8001414:	d10c      	bne.n	8001430 <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8001416:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	4613      	mov	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	4413      	add	r3, r2
 8001422:	440b      	add	r3, r1
 8001424:	3302      	adds	r3, #2
 8001426:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001428:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800142c:	429a      	cmp	r2, r3
 800142e:	d00b      	beq.n	8001448 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001430:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8001434:	3301      	adds	r3, #1
 8001436:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001442:	429a      	cmp	r2, r3
 8001444:	d3cd      	bcc.n	80013e2 <mavlink_signature_check+0x10a>
 8001446:	e000      	b.n	800144a <mavlink_signature_check+0x172>
			break;
 8001448:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001452:	429a      	cmp	r2, r3
 8001454:	d146      	bne.n	80014e4 <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	2b0f      	cmp	r3, #15
 800145c:	d905      	bls.n	800146a <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2204      	movs	r2, #4
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 8001466:	2300      	movs	r3, #0
 8001468:	e080      	b.n	800156c <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 800146a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800146e:	4941      	ldr	r1, [pc, #260]	@ (8001574 <mavlink_signature_check+0x29c>)
 8001470:	1854      	adds	r4, r2, r1
 8001472:	f143 0500 	adc.w	r5, r3, #0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800147c:	4294      	cmp	r4, r2
 800147e:	eb75 0303 	sbcs.w	r3, r5, r3
 8001482:	d205      	bcs.n	8001490 <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2205      	movs	r2, #5
 8001488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 800148c:	2300      	movs	r3, #0
 800148e:	e06d      	b.n	800156c <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8001490:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	79d8      	ldrb	r0, [r3, #7]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	3303      	adds	r3, #3
 80014a4:	4602      	mov	r2, r0
 80014a6:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 80014a8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7a18      	ldrb	r0, [r3, #8]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	4613      	mov	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	4413      	add	r3, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	3304      	adds	r3, #4
 80014bc:	4602      	mov	r2, r0
 80014be:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 80014c0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	3302      	adds	r3, #2
 80014d0:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80014d4:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	b29a      	uxth	r2, r3
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	801a      	strh	r2, [r3, #0]
 80014e2:	e021      	b.n	8001528 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 80014f0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	4413      	add	r3, r2
 80014fe:	1d59      	adds	r1, r3, #5
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	2206      	movs	r2, #6
 8001506:	4618      	mov	r0, r3
 8001508:	f004 ff2c 	bl	8006364 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 800150c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001510:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001514:	4290      	cmp	r0, r2
 8001516:	eb71 0303 	sbcs.w	r3, r1, r3
 800151a:	d305      	bcc.n	8001528 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2206      	movs	r2, #6
 8001520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 8001524:	2300      	movs	r3, #0
 8001526:	e021      	b.n	800156c <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001528:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4413      	add	r3, r2
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	4413      	add	r3, r2
 8001536:	1d58      	adds	r0, r3, #5
 8001538:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800153c:	3301      	adds	r3, #1
 800153e:	2206      	movs	r2, #6
 8001540:	4619      	mov	r1, r3
 8001542:	f004 ff0f 	bl	8006364 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800154a:	68f9      	ldr	r1, [r7, #12]
 800154c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8001550:	4290      	cmp	r0, r2
 8001552:	eb71 0303 	sbcs.w	r3, r1, r3
 8001556:	d204      	bcs.n	8001562 <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 8001558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800155c:	68f9      	ldr	r1, [r7, #12]
 800155e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return true;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	37a8      	adds	r7, #168	@ 0xa8
 8001570:	46bd      	mov	sp, r7
 8001572:	bdb0      	pop	{r4, r5, r7, pc}
 8001574:	005b8d80 	.word	0x005b8d80

08001578 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157a:	b08f      	sub	sp, #60	@ 0x3c
 800157c:	af04      	add	r7, sp, #16
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	72fb      	strb	r3, [r7, #11]
 8001586:	4613      	mov	r3, r2
 8001588:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7b1b      	ldrb	r3, [r3, #12]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf14      	ite	ne
 8001596:	2301      	movne	r3, #1
 8001598:	2300      	moveq	r3, #0
 800159a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800159e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015a2:	f083 0301 	eor.w	r3, r3, #1
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00c      	beq.n	80015c6 <mavlink_finalize_message_buffer+0x4e>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <mavlink_finalize_message_buffer+0x4e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <mavlink_finalize_message_buffer+0x4e>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <mavlink_finalize_message_buffer+0x50>
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80015cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 80015d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <mavlink_finalize_message_buffer+0x6c>
 80015e0:	230d      	movs	r3, #13
 80015e2:	e000      	b.n	80015e6 <mavlink_finalize_message_buffer+0x6e>
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 80015ea:	230a      	movs	r3, #10
 80015ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 80015f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	22fe      	movs	r2, #254	@ 0xfe
 80015fc:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 80015fe:	2306      	movs	r3, #6
 8001600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001604:	e002      	b.n	800160c <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	22fd      	movs	r2, #253	@ 0xfd
 800160a:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800160c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10a      	bne.n	800162a <mavlink_finalize_message_buffer+0xb2>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	330c      	adds	r3, #12
 8001618:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fe3e 	bl	80012a0 <_mav_trim_payload>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	e001      	b.n	800162e <mavlink_finalize_message_buffer+0xb6>
 800162a:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	7afa      	ldrb	r2, [r7, #11]
 8001636:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	7aba      	ldrb	r2, [r7, #10]
 800163c:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8001644:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	791b      	ldrb	r3, [r3, #4]
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	b2da      	uxtb	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	799a      	ldrb	r2, [r3, #6]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	799b      	ldrb	r3, [r3, #6]
 800166c:	3301      	adds	r3, #1
 800166e:	b2da      	uxtb	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	789b      	ldrb	r3, [r3, #2]
 8001678:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	78db      	ldrb	r3, [r3, #3]
 800167e:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8001680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001684:	2b00      	cmp	r3, #0
 8001686:	d013      	beq.n	80016b0 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	799b      	ldrb	r3, [r3, #6]
 800168c:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	79db      	ldrb	r3, [r3, #7]
 8001692:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	7a1b      	ldrb	r3, [r3, #8]
 8001698:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	7a5a      	ldrb	r2, [r3, #9]
 800169e:	7a99      	ldrb	r1, [r3, #10]
 80016a0:	0209      	lsls	r1, r1, #8
 80016a2:	430a      	orrs	r2, r1
 80016a4:	7adb      	ldrb	r3, [r3, #11]
 80016a6:	041b      	lsls	r3, r3, #16
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	777b      	strb	r3, [r7, #29]
 80016ae:	e030      	b.n	8001712 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	791b      	ldrb	r3, [r3, #4]
 80016b4:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	795b      	ldrb	r3, [r3, #5]
 80016ba:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	799b      	ldrb	r3, [r3, #6]
 80016c0:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	79db      	ldrb	r3, [r3, #7]
 80016c6:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	7a1b      	ldrb	r3, [r3, #8]
 80016cc:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	7a5a      	ldrb	r2, [r3, #9]
 80016d2:	7a99      	ldrb	r1, [r3, #10]
 80016d4:	0209      	lsls	r1, r1, #8
 80016d6:	430a      	orrs	r2, r1
 80016d8:	7adb      	ldrb	r3, [r3, #11]
 80016da:	041b      	lsls	r3, r3, #16
 80016dc:	4313      	orrs	r3, r2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	7a5a      	ldrb	r2, [r3, #9]
 80016e6:	7a99      	ldrb	r1, [r3, #10]
 80016e8:	0209      	lsls	r1, r1, #8
 80016ea:	430a      	orrs	r2, r1
 80016ec:	7adb      	ldrb	r3, [r3, #11]
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	4313      	orrs	r3, r2
 80016f2:	121b      	asrs	r3, r3, #8
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	7a5a      	ldrb	r2, [r3, #9]
 80016fe:	7a99      	ldrb	r1, [r3, #10]
 8001700:	0209      	lsls	r1, r1, #8
 8001702:	430a      	orrs	r2, r1
 8001704:	7adb      	ldrb	r3, [r3, #11]
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	4313      	orrs	r3, r2
 800170a:	141b      	asrs	r3, r3, #16
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8001712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001716:	b29b      	uxth	r3, r3
 8001718:	3b01      	subs	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	f107 0318 	add.w	r3, r7, #24
 8001720:	3301      	adds	r3, #1
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff f9bf 	bl	8000aa8 <crc_calculate>
 800172a:	4603      	mov	r3, r0
 800172c:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f103 010c 	add.w	r1, r3, #12
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	78db      	ldrb	r3, [r3, #3]
 8001738:	461a      	mov	r2, r3
 800173a:	f107 0316 	add.w	r3, r7, #22
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f9d2 	bl	8000ae8 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001744:	f107 0216 	add.w	r2, r7, #22
 8001748:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f96a 	bl	8000a28 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001754:	8af9      	ldrh	r1, [r7, #22]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	330c      	adds	r3, #12
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	78d2      	ldrb	r2, [r2, #3]
 800175e:	4413      	add	r3, r2
 8001760:	b2ca      	uxtb	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 8001764:	8afb      	ldrh	r3, [r7, #22]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	b299      	uxth	r1, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f103 020c 	add.w	r2, r3, #12
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	78db      	ldrb	r3, [r3, #3]
 8001774:	3301      	adds	r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	b2ca      	uxtb	r2, r1
 800177a:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 800177c:	8afa      	ldrh	r2, [r7, #22]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 8001782:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001786:	2b00      	cmp	r3, #0
 8001788:	d01a      	beq.n	80017c0 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f503 758b 	add.w	r5, r3, #278	@ 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	310c      	adds	r1, #12
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 80017a4:	4401      	add	r1, r0
 80017a6:	f897 6027 	ldrb.w	r6, [r7, #39]	@ 0x27
 80017aa:	f107 0018 	add.w	r0, r7, #24
 80017ae:	9102      	str	r1, [sp, #8]
 80017b0:	9201      	str	r2, [sp, #4]
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	4633      	mov	r3, r6
 80017b6:	4602      	mov	r2, r0
 80017b8:	4629      	mov	r1, r5
 80017ba:	4620      	mov	r0, r4
 80017bc:	f7ff fd0a 	bl	80011d4 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	78db      	ldrb	r3, [r3, #3]
 80017c4:	461a      	mov	r2, r3
 80017c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4413      	add	r3, r2
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3302      	adds	r3, #2
 80017dc:	b29b      	uxth	r3, r3
}
 80017de:	4618      	mov	r0, r3
 80017e0:	372c      	adds	r7, #44	@ 0x2c
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017e6 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b088      	sub	sp, #32
 80017ea:	af04      	add	r7, sp, #16
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	4608      	mov	r0, r1
 80017f0:	4611      	mov	r1, r2
 80017f2:	461a      	mov	r2, r3
 80017f4:	4603      	mov	r3, r0
 80017f6:	70fb      	strb	r3, [r7, #3]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70bb      	strb	r3, [r7, #2]
 80017fc:	4613      	mov	r3, r2
 80017fe:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8001800:	787b      	ldrb	r3, [r7, #1]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fcbe 	bl	8001184 <mavlink_get_channel_status>
 8001808:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 800180a:	78ba      	ldrb	r2, [r7, #2]
 800180c:	78f9      	ldrb	r1, [r7, #3]
 800180e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001812:	9302      	str	r3, [sp, #8]
 8001814:	7f3b      	ldrb	r3, [r7, #28]
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	7e3b      	ldrb	r3, [r7, #24]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff feaa 	bl	8001578 <mavlink_finalize_message_buffer>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af04      	add	r7, sp, #16
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	4608      	mov	r0, r1
 8001838:	4611      	mov	r1, r2
 800183a:	461a      	mov	r2, r3
 800183c:	4603      	mov	r3, r0
 800183e:	70fb      	strb	r3, [r7, #3]
 8001840:	460b      	mov	r3, r1
 8001842:	70bb      	strb	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001848:	78ba      	ldrb	r2, [r7, #2]
 800184a:	78f9      	ldrb	r1, [r7, #3]
 800184c:	7d3b      	ldrb	r3, [r7, #20]
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	7c3b      	ldrb	r3, [r7, #16]
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2300      	movs	r3, #0
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ffc3 	bl	80017e6 <mavlink_finalize_message_chan>
 8001860:	4603      	mov	r3, r0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	789b      	ldrb	r3, [r3, #2]
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	709a      	strb	r2, [r3, #2]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	78db      	ldrb	r3, [r3, #3]
 8001898:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	789b      	ldrb	r3, [r3, #2]
 800189e:	2bfe      	cmp	r3, #254	@ 0xfe
 80018a0:	d13a      	bne.n	8001918 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80018a6:	2305      	movs	r3, #5
 80018a8:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	789a      	ldrb	r2, [r3, #2]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3301      	adds	r3, #1
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3302      	adds	r3, #2
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	7992      	ldrb	r2, [r2, #6]
 80018c2:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3303      	adds	r3, #3
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	79d2      	ldrb	r2, [r2, #7]
 80018cc:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3304      	adds	r3, #4
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	7a12      	ldrb	r2, [r2, #8]
 80018d6:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	7a5a      	ldrb	r2, [r3, #9]
 80018dc:	7a99      	ldrb	r1, [r3, #10]
 80018de:	0209      	lsls	r1, r1, #8
 80018e0:	430a      	orrs	r2, r1
 80018e2:	7adb      	ldrb	r3, [r3, #11]
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	4313      	orrs	r3, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3305      	adds	r3, #5
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	1d98      	adds	r0, r3, #6
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f103 010c 	add.w	r1, r3, #12
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	78db      	ldrb	r3, [r3, #3]
 8001900:	461a      	mov	r2, r3
 8001902:	f004 fd2f 	bl	8006364 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001906:	7dbb      	ldrb	r3, [r7, #22]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	78d2      	ldrb	r2, [r2, #3]
 800190c:	4413      	add	r3, r2
 800190e:	3301      	adds	r3, #1
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	e06c      	b.n	80019f2 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	330c      	adds	r3, #12
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fcbd 	bl	80012a0 <_mav_trim_payload>
 8001926:	4603      	mov	r3, r0
 8001928:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800192a:	2309      	movs	r3, #9
 800192c:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	789a      	ldrb	r2, [r3, #2]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3301      	adds	r3, #1
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3302      	adds	r3, #2
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	7912      	ldrb	r2, [r2, #4]
 8001946:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3303      	adds	r3, #3
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	7952      	ldrb	r2, [r2, #5]
 8001950:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3304      	adds	r3, #4
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	7992      	ldrb	r2, [r2, #6]
 800195a:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3305      	adds	r3, #5
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	79d2      	ldrb	r2, [r2, #7]
 8001964:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3306      	adds	r3, #6
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	7a12      	ldrb	r2, [r2, #8]
 800196e:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7a5a      	ldrb	r2, [r3, #9]
 8001974:	7a99      	ldrb	r1, [r3, #10]
 8001976:	0209      	lsls	r1, r1, #8
 8001978:	430a      	orrs	r2, r1
 800197a:	7adb      	ldrb	r3, [r3, #11]
 800197c:	041b      	lsls	r3, r3, #16
 800197e:	4313      	orrs	r3, r2
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3307      	adds	r3, #7
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	7a5a      	ldrb	r2, [r3, #9]
 800198e:	7a99      	ldrb	r1, [r3, #10]
 8001990:	0209      	lsls	r1, r1, #8
 8001992:	430a      	orrs	r2, r1
 8001994:	7adb      	ldrb	r3, [r3, #11]
 8001996:	041b      	lsls	r3, r3, #16
 8001998:	4313      	orrs	r3, r2
 800199a:	0a1a      	lsrs	r2, r3, #8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3308      	adds	r3, #8
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	7a5a      	ldrb	r2, [r3, #9]
 80019a8:	7a99      	ldrb	r1, [r3, #10]
 80019aa:	0209      	lsls	r1, r1, #8
 80019ac:	430a      	orrs	r2, r1
 80019ae:	7adb      	ldrb	r3, [r3, #11]
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	4313      	orrs	r3, r2
 80019b4:	0c1a      	lsrs	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3309      	adds	r3, #9
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f103 000a 	add.w	r0, r3, #10
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	330c      	adds	r3, #12
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	4619      	mov	r1, r3
 80019cc:	f004 fcca 	bl	8006364 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80019d0:	7dba      	ldrb	r2, [r7, #22]
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	4413      	add	r3, r2
 80019d6:	3301      	adds	r3, #1
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	4413      	add	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	791b      	ldrb	r3, [r3, #4]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <mavlink_msg_to_send_buffer+0x164>
 80019ea:	230d      	movs	r3, #13
 80019ec:	e000      	b.n	80019f0 <mavlink_msg_to_send_buffer+0x166>
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1c98      	adds	r0, r3, #2
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8001a20:	7dfa      	ldrb	r2, [r7, #23]
 8001a22:	4619      	mov	r1, r3
 8001a24:	f004 fc9e 	bl	8006364 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001a28:	7dbb      	ldrb	r3, [r7, #22]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3303      	adds	r3, #3
 8001a3e:	b29b      	uxth	r3, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001a54:	f107 030e 	add.w	r3, r7, #14
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f817 	bl	8000a8c <crc_init>
	msg->checksum = crcTmp;
 8001a5e:	89fa      	ldrh	r2, [r7, #14]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	801a      	strh	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001a80:	f107 020e 	add.w	r2, r7, #14
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe ffcd 	bl	8000a28 <crc_accumulate>
	msg->checksum = checksum;
 8001a8e:	89fa      	ldrh	r2, [r7, #14]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	801a      	strh	r2, [r3, #0]
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	f240 1373 	movw	r3, #371	@ 0x173
 8001aac:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001aae:	e025      	b.n	8001afc <mavlink_get_msg_entry+0x60>
            uint32_t mid = (low+1+high)/2;
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001abc:	491e      	ldr	r1, [pc, #120]	@ (8001b38 <mavlink_get_msg_entry+0x9c>)
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d203      	bcs.n	8001ada <mavlink_get_msg_entry+0x3e>
                high = mid-1;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
                continue;
 8001ad8:	e010      	b.n	8001afc <mavlink_get_msg_entry+0x60>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001ada:	4917      	ldr	r1, [pc, #92]	@ (8001b38 <mavlink_get_msg_entry+0x9c>)
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d902      	bls.n	8001af6 <mavlink_get_msg_entry+0x5a>
                low = mid;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	617b      	str	r3, [r7, #20]
                continue;
 8001af4:	e002      	b.n	8001afc <mavlink_get_msg_entry+0x60>
            }
            low = mid;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	617b      	str	r3, [r7, #20]
            break;
 8001afa:	e003      	b.n	8001b04 <mavlink_get_msg_entry+0x68>
        while (low < high) {
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d3d5      	bcc.n	8001ab0 <mavlink_get_msg_entry+0x14>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8001b04:	490c      	ldr	r1, [pc, #48]	@ (8001b38 <mavlink_get_msg_entry+0x9c>)
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e006      	b.n	8001b2c <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4a03      	ldr	r2, [pc, #12]	@ (8001b38 <mavlink_get_msg_entry+0x9c>)
 8001b2a:	4413      	add	r3, r2
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	08006498 	.word	0x08006498

08001b3c <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	78db      	ldrb	r3, [r3, #3]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	f200 8272 	bhi.w	8002040 <mavlink_frame_char_buffer+0x504>
 8001b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b64 <mavlink_frame_char_buffer+0x28>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001ba5 	.word	0x08001ba5
 8001b68:	08001ba5 	.word	0x08001ba5
 8001b6c:	08001c03 	.word	0x08001c03
 8001b70:	08001c69 	.word	0x08001c69
 8001b74:	08001c9d 	.word	0x08001c9d
 8001b78:	08001cb5 	.word	0x08001cb5
 8001b7c:	08001ccd 	.word	0x08001ccd
 8001b80:	08001ce5 	.word	0x08001ce5
 8001b84:	08001cfd 	.word	0x08001cfd
 8001b88:	08001d57 	.word	0x08001d57
 8001b8c:	08001da3 	.word	0x08001da3
 8001b90:	08001dff 	.word	0x08001dff
 8001b94:	08001e37 	.word	0x08001e37
 8001b98:	08001ecf 	.word	0x08001ecf
 8001b9c:	08001ecf 	.word	0x08001ecf
 8001ba0:	08001f8b 	.word	0x08001f8b
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2bfd      	cmp	r3, #253	@ 0xfd
 8001ba8:	d113      	bne.n	8001bd2 <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2202      	movs	r2, #2
 8001bae:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	79fa      	ldrb	r2, [r7, #7]
 8001bba:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	7b1b      	ldrb	r3, [r3, #12]
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f7ff ff3c 	bl	8001a48 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001bd0:	e22d      	b.n	800202e <mavlink_frame_char_buffer+0x4f2>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2bfe      	cmp	r3, #254	@ 0xfe
 8001bd6:	f040 822a 	bne.w	800202e <mavlink_frame_char_buffer+0x4f2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	79fa      	ldrb	r2, [r7, #7]
 8001bea:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	7b1b      	ldrb	r3, [r3, #12]
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7ff ff24 	bl	8001a48 <mavlink_start_checksum>
		break;
 8001c00:	e215      	b.n	800202e <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00f      	beq.n	8001c2a <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	785b      	ldrb	r3, [r3, #1]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8001c16:	68b8      	ldr	r0, [r7, #8]
 8001c18:	f7ff fe27 	bl	800186a <_mav_parse_error>
			status->msg_received = 0;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2201      	movs	r2, #1
 8001c26:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8001c28:	e20a      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
			rxmsg->len = c;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	79fa      	ldrb	r2, [r7, #7]
 8001c2e:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2200      	movs	r2, #0
 8001c34:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff ff16 	bl	8001a6c <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	7b1b      	ldrb	r3, [r3, #12]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d009      	beq.n	8001c60 <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	70da      	strb	r2, [r3, #3]
		break;
 8001c5e:	e1ef      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2203      	movs	r2, #3
 8001c64:	70da      	strb	r2, [r3, #3]
		break;
 8001c66:	e1eb      	b.n	8002040 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	79fa      	ldrb	r2, [r7, #7]
 8001c6c:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	791b      	ldrb	r3, [r3, #4]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d909      	bls.n	8001c8a <mavlink_frame_char_buffer+0x14e>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001c76:	68b8      	ldr	r0, [r7, #8]
 8001c78:	f7ff fdf7 	bl	800186a <_mav_parse_error>
			status->msg_received = 0;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2201      	movs	r2, #1
 8001c86:	70da      	strb	r2, [r3, #3]
			break;
 8001c88:	e1da      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
		}
		mavlink_update_checksum(rxmsg, c);
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f7ff feec 	bl	8001a6c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2204      	movs	r2, #4
 8001c98:	70da      	strb	r2, [r3, #3]
		break;
 8001c9a:	e1d1      	b.n	8002040 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	79fa      	ldrb	r2, [r7, #7]
 8001ca0:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f7ff fee0 	bl	8001a6c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2205      	movs	r2, #5
 8001cb0:	70da      	strb	r2, [r3, #3]
		break;
 8001cb2:	e1c5      	b.n	8002040 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	79fa      	ldrb	r2, [r7, #7]
 8001cb8:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7ff fed4 	bl	8001a6c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2206      	movs	r2, #6
 8001cc8:	70da      	strb	r2, [r3, #3]
		break;
 8001cca:	e1b9      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	79fa      	ldrb	r2, [r7, #7]
 8001cd0:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff fec8 	bl	8001a6c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2207      	movs	r2, #7
 8001ce0:	70da      	strb	r2, [r3, #3]
		break;
 8001ce2:	e1ad      	b.n	8002040 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4619      	mov	r1, r3
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff febc 	bl	8001a6c <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	70da      	strb	r2, [r3, #3]
		break;
 8001cfa:	e1a1      	b.n	8002040 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	b2d9      	uxtb	r1, r3
 8001d06:	2000      	movs	r0, #0
 8001d08:	4301      	orrs	r1, r0
 8001d0a:	7251      	strb	r1, [r2, #9]
 8001d0c:	0a19      	lsrs	r1, r3, #8
 8001d0e:	b2c9      	uxtb	r1, r1
 8001d10:	2000      	movs	r0, #0
 8001d12:	4301      	orrs	r1, r0
 8001d14:	7291      	strb	r1, [r2, #10]
 8001d16:	0c1b      	lsrs	r3, r3, #16
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4619      	mov	r1, r3
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f7ff fea1 	bl	8001a6c <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	7b1b      	ldrb	r3, [r3, #12]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <mavlink_frame_char_buffer+0x212>
			if(rxmsg->len > 0) {
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	78db      	ldrb	r3, [r3, #3]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <mavlink_frame_char_buffer+0x20a>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	220b      	movs	r2, #11
 8001d42:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8001d44:	e17c      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	220c      	movs	r2, #12
 8001d4a:	70da      	strb	r2, [r3, #3]
		break;
 8001d4c:	e178      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2209      	movs	r2, #9
 8001d52:	70da      	strb	r2, [r3, #3]
		break;
 8001d54:	e174      	b.n	8002040 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= ((uint32_t)c)<<8;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	7a5a      	ldrb	r2, [r3, #9]
 8001d5a:	7a99      	ldrb	r1, [r3, #10]
 8001d5c:	0209      	lsls	r1, r1, #8
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	7adb      	ldrb	r3, [r3, #11]
 8001d62:	041b      	lsls	r3, r3, #16
 8001d64:	4313      	orrs	r3, r2
 8001d66:	461a      	mov	r2, r3
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	b2d1      	uxtb	r1, r2
 8001d76:	2000      	movs	r0, #0
 8001d78:	4301      	orrs	r1, r0
 8001d7a:	7259      	strb	r1, [r3, #9]
 8001d7c:	0a11      	lsrs	r1, r2, #8
 8001d7e:	b2c9      	uxtb	r1, r1
 8001d80:	2000      	movs	r0, #0
 8001d82:	4301      	orrs	r1, r0
 8001d84:	7299      	strb	r1, [r3, #10]
 8001d86:	0c12      	lsrs	r2, r2, #16
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	4619      	mov	r1, r3
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7ff fe69 	bl	8001a6c <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	220a      	movs	r2, #10
 8001d9e:	70da      	strb	r2, [r3, #3]
		break;
 8001da0:	e14e      	b.n	8002040 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	7a5a      	ldrb	r2, [r3, #9]
 8001da6:	7a99      	ldrb	r1, [r3, #10]
 8001da8:	0209      	lsls	r1, r1, #8
 8001daa:	430a      	orrs	r2, r1
 8001dac:	7adb      	ldrb	r3, [r3, #11]
 8001dae:	041b      	lsls	r3, r3, #16
 8001db0:	4313      	orrs	r3, r2
 8001db2:	461a      	mov	r2, r3
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	041b      	lsls	r3, r3, #16
 8001db8:	4313      	orrs	r3, r2
 8001dba:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	b2d1      	uxtb	r1, r2
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	4301      	orrs	r1, r0
 8001dc6:	7259      	strb	r1, [r3, #9]
 8001dc8:	0a11      	lsrs	r1, r2, #8
 8001dca:	b2c9      	uxtb	r1, r1
 8001dcc:	2000      	movs	r0, #0
 8001dce:	4301      	orrs	r1, r0
 8001dd0:	7299      	strb	r1, [r3, #10]
 8001dd2:	0c12      	lsrs	r2, r2, #16
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	4619      	mov	r1, r3
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7ff fe43 	bl	8001a6c <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	78db      	ldrb	r3, [r3, #3]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <mavlink_frame_char_buffer+0x2ba>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	220b      	movs	r2, #11
 8001df2:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8001df4:	e124      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	220c      	movs	r2, #12
 8001dfa:	70da      	strb	r2, [r3, #3]
		break;
 8001dfc:	e120      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f103 020c 	add.w	r2, r3, #12
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	791b      	ldrb	r3, [r3, #4]
 8001e08:	1c59      	adds	r1, r3, #1
 8001e0a:	b2c8      	uxtb	r0, r1
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	7108      	strb	r0, [r1, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	79fa      	ldrb	r2, [r7, #7]
 8001e14:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f7ff fe26 	bl	8001a6c <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	791a      	ldrb	r2, [r3, #4]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	78db      	ldrb	r3, [r3, #3]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	f040 8102 	bne.w	8002032 <mavlink_frame_char_buffer+0x4f6>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	220c      	movs	r2, #12
 8001e32:	70da      	strb	r2, [r3, #3]
		}
		break;
 8001e34:	e0fd      	b.n	8002032 <mavlink_frame_char_buffer+0x4f6>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	7a5a      	ldrb	r2, [r3, #9]
 8001e3a:	7a99      	ldrb	r1, [r3, #10]
 8001e3c:	0209      	lsls	r1, r1, #8
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	7adb      	ldrb	r3, [r3, #11]
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	4313      	orrs	r3, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fe28 	bl	8001a9c <mavlink_get_msg_entry>
 8001e4c:	61b8      	str	r0, [r7, #24]
		if (e == NULL) {
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d107      	bne.n	8001e64 <mavlink_frame_char_buffer+0x328>
			// Message not found in CRC_EXTRA table.
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	220e      	movs	r2, #14
 8001e58:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	79fa      	ldrb	r2, [r7, #7]
 8001e5e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			// zero-fill the packet to cope with short incoming packets
				if (e && status->packet_idx < e->max_msg_len) {
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
			}
		}
		break;
 8001e62:	e0e8      	b.n	8002036 <mavlink_frame_char_buffer+0x4fa>
			uint8_t crc_extra = e->crc_extra;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	791b      	ldrb	r3, [r3, #4]
 8001e68:	75fb      	strb	r3, [r7, #23]
			mavlink_update_checksum(rxmsg, crc_extra);
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f7ff fdfc 	bl	8001a6c <mavlink_update_checksum>
			if (c != (rxmsg->checksum & 0xFF)) {
 8001e74:	79fa      	ldrb	r2, [r7, #7]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d003      	beq.n	8001e8a <mavlink_frame_char_buffer+0x34e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	220e      	movs	r2, #14
 8001e86:	70da      	strb	r2, [r3, #3]
 8001e88:	e002      	b.n	8001e90 <mavlink_frame_char_buffer+0x354>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	220d      	movs	r2, #13
 8001e8e:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	79fa      	ldrb	r2, [r7, #7]
 8001e94:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				if (e && status->packet_idx < e->max_msg_len) {
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80cb 	beq.w	8002036 <mavlink_frame_char_buffer+0x4fa>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	791a      	ldrb	r2, [r3, #4]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	799b      	ldrb	r3, [r3, #6]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f080 80c4 	bcs.w	8002036 <mavlink_frame_char_buffer+0x4fa>
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	7912      	ldrb	r2, [r2, #4]
 8001eb6:	1898      	adds	r0, r3, r2
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	799b      	ldrb	r3, [r3, #6]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	791b      	ldrb	r3, [r3, #4]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	f004 fa20 	bl	800630c <memset>
		break;
 8001ecc:	e0b3      	b.n	8002036 <mavlink_frame_char_buffer+0x4fa>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	78db      	ldrb	r3, [r3, #3]
 8001ed2:	2b0e      	cmp	r3, #14
 8001ed4:	d008      	beq.n	8001ee8 <mavlink_frame_char_buffer+0x3ac>
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d003      	beq.n	8001ef0 <mavlink_frame_char_buffer+0x3b4>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2202      	movs	r2, #2
 8001eec:	701a      	strb	r2, [r3, #0]
 8001eee:	e002      	b.n	8001ef6 <mavlink_frame_char_buffer+0x3ba>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	79fa      	ldrb	r2, [r7, #7]
 8001efa:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	791b      	ldrb	r3, [r3, #4]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00e      	beq.n	8001f28 <mavlink_frame_char_buffer+0x3ec>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	220d      	movs	r2, #13
 8001f14:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	f000 808d 	beq.w	800203a <mavlink_frame_char_buffer+0x4fe>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8001f26:	e088      	b.n	800203a <mavlink_frame_char_buffer+0x4fe>
			if (status->signing &&
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01f      	beq.n	8001f70 <mavlink_frame_char_buffer+0x434>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (status->signing &&
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d013      	beq.n	8001f62 <mavlink_frame_char_buffer+0x426>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	7a59      	ldrb	r1, [r3, #9]
 8001f44:	7a98      	ldrb	r0, [r3, #10]
 8001f46:	0200      	lsls	r0, r0, #8
 8001f48:	4301      	orrs	r1, r0
 8001f4a:	7adb      	ldrb	r3, [r3, #11]
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	4619      	mov	r1, r3
 8001f52:	68b8      	ldr	r0, [r7, #8]
 8001f54:	4790      	blx	r2
 8001f56:	4603      	mov	r3, r0
 8001f58:	f083 0301 	eor.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d006      	beq.n	8001f70 <mavlink_frame_char_buffer+0x434>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d002      	beq.n	8001f70 <mavlink_frame_char_buffer+0x434>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2201      	movs	r2, #1
 8001f74:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d05e      	beq.n	800203a <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001f7c:	f240 1223 	movw	r2, #291	@ 0x123
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	6838      	ldr	r0, [r7, #0]
 8001f84:	f004 f9ee 	bl	8006364 <memcpy>
		break;
 8001f88:	e057      	b.n	800203a <mavlink_frame_char_buffer+0x4fe>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	7b5b      	ldrb	r3, [r3, #13]
 8001f8e:	f1c3 030d 	rsb	r3, r3, #13
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	79fa      	ldrb	r2, [r7, #7]
 8001f98:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
		status->signature_wait--;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	7b5b      	ldrb	r3, [r3, #13]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	7b5b      	ldrb	r3, [r3, #13]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d146      	bne.n	800203e <mavlink_frame_char_buffer+0x502>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	6918      	ldr	r0, [r3, #16]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7ff f98c 	bl	80012d8 <mavlink_signature_check>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8001fc4:	7ffb      	ldrb	r3, [r7, #31]
 8001fc6:	f083 0301 	eor.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d017      	beq.n	8002000 <mavlink_frame_char_buffer+0x4c4>
			   	(status->signing->accept_unsigned_callback &&
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (!sig_ok &&
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d012      	beq.n	8002000 <mavlink_frame_char_buffer+0x4c4>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	7a59      	ldrb	r1, [r3, #9]
 8001fe4:	7a98      	ldrb	r0, [r3, #10]
 8001fe6:	0200      	lsls	r0, r0, #8
 8001fe8:	4301      	orrs	r1, r0
 8001fea:	7adb      	ldrb	r3, [r3, #11]
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	430b      	orrs	r3, r1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	68b8      	ldr	r0, [r7, #8]
 8001ff4:	4790      	blx	r2
 8001ff6:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <mavlink_frame_char_buffer+0x4c4>
				// accepted via application level override
				sig_ok = true;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8002000:	7ffb      	ldrb	r3, [r7, #31]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <mavlink_frame_char_buffer+0x4d2>
				status->msg_received = MAVLINK_FRAMING_OK;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e002      	b.n	8002014 <mavlink_frame_char_buffer+0x4d8>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2203      	movs	r2, #3
 8002012:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2201      	movs	r2, #1
 8002018:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <mavlink_frame_char_buffer+0x502>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8002020:	f240 1223 	movw	r2, #291	@ 0x123
 8002024:	68f9      	ldr	r1, [r7, #12]
 8002026:	6838      	ldr	r0, [r7, #0]
 8002028:	f004 f99c 	bl	8006364 <memcpy>
			}
		}
		break;
 800202c:	e007      	b.n	800203e <mavlink_frame_char_buffer+0x502>
		break;
 800202e:	bf00      	nop
 8002030:	e006      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
		break;
 8002032:	bf00      	nop
 8002034:	e004      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
		break;
 8002036:	bf00      	nop
 8002038:	e002      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
		break;
 800203a:	bf00      	nop
 800203c:	e000      	b.n	8002040 <mavlink_frame_char_buffer+0x504>
		break;
 800203e:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d110      	bne.n	800206a <mavlink_frame_char_buffer+0x52e>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	799a      	ldrb	r2, [r3, #6]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	891b      	ldrh	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <mavlink_frame_char_buffer+0x522>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2200      	movs	r2, #0
 800205c:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	891b      	ldrh	r3, [r3, #8]
 8002062:	3301      	adds	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <mavlink_frame_char_buffer+0x53c>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	78da      	ldrb	r2, [r3, #3]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8002078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01a      	beq.n	80020b4 <mavlink_frame_char_buffer+0x578>
           r_mavlink_status->parse_state = status->parse_state;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	78da      	ldrb	r2, [r3, #3]
 8002082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002084:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	791a      	ldrb	r2, [r3, #4]
 800208a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208c:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	795b      	ldrb	r3, [r3, #5]
 8002092:	3301      	adds	r3, #1
 8002094:	b2da      	uxtb	r2, r3
 8002096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002098:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	891a      	ldrh	r2, [r3, #8]
 800209e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a0:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	789b      	ldrb	r3, [r3, #2]
 80020a6:	461a      	mov	r2, r3
 80020a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020aa:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	7b1a      	ldrb	r2, [r3, #12]
 80020b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b2:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2200      	movs	r2, #0
 80020b8:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d110      	bne.n	80020e4 <mavlink_frame_char_buffer+0x5a8>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00d      	beq.n	80020e4 <mavlink_frame_char_buffer+0x5a8>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	b21b      	sxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b21b      	sxth	r3, r3
 80020de:	b29a      	uxth	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60ba      	str	r2, [r7, #8]
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	4603      	mov	r3, r0
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	460b      	mov	r3, r1
 8002100:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff f851 	bl	80011ac <mavlink_get_channel_buffer>
 800210a:	4604      	mov	r4, r0
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff f838 	bl	8001184 <mavlink_get_channel_status>
 8002114:	4601      	mov	r1, r0
 8002116:	7bba      	ldrb	r2, [r7, #14]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4620      	mov	r0, r4
 8002120:	f7ff fd0c 	bl	8001b3c <mavlink_frame_char_buffer>
 8002124:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bd90      	pop	{r4, r7, pc}

0800212e <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b088      	sub	sp, #32
 8002132:	af00      	add	r7, sp, #0
 8002134:	60ba      	str	r2, [r7, #8]
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	460b      	mov	r3, r1
 800213e:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8002140:	7bb9      	ldrb	r1, [r7, #14]
 8002142:	7bf8      	ldrb	r0, [r7, #15]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f7ff ffd2 	bl	80020f0 <mavlink_frame_char>
 800214c:	4603      	mov	r3, r0
 800214e:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8002150:	7ffb      	ldrb	r3, [r7, #31]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d002      	beq.n	800215c <mavlink_parse_char+0x2e>
 8002156:	7ffb      	ldrb	r3, [r7, #31]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d120      	bne.n	800219e <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff f824 	bl	80011ac <mavlink_get_channel_buffer>
 8002164:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f80b 	bl	8001184 <mavlink_get_channel_status>
 800216e:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8002170:	6978      	ldr	r0, [r7, #20]
 8002172:	f7ff fb7a 	bl	800186a <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2201      	movs	r2, #1
 8002180:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8002182:	7bbb      	ldrb	r3, [r7, #14]
 8002184:	2bfd      	cmp	r3, #253	@ 0xfd
 8002186:	d108      	bne.n	800219a <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	2202      	movs	r2, #2
 800218c:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2200      	movs	r2, #0
 8002192:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8002194:	69b8      	ldr	r0, [r7, #24]
 8002196:	f7ff fc57 	bl	8001a48 <mavlink_start_checksum>
	    }
	    return 0;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <mavlink_parse_char+0x72>
    }
    return msg_received;
 800219e:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <mavlink_msg_sys_status_decode>:
 *
 * @param msg The message to decode
 * @param sys_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_sys_status_decode(const mavlink_message_t* msg, mavlink_sys_status_t* sys_status)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
    sys_status->battery_remaining = mavlink_msg_sys_status_get_battery_remaining(msg);
    sys_status->onboard_control_sensors_present_extended = mavlink_msg_sys_status_get_onboard_control_sensors_present_extended(msg);
    sys_status->onboard_control_sensors_enabled_extended = mavlink_msg_sys_status_get_onboard_control_sensors_enabled_extended(msg);
    sys_status->onboard_control_sensors_health_extended = mavlink_msg_sys_status_get_onboard_control_sensors_health_extended(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SYS_STATUS_LEN? msg->len : MAVLINK_MSG_ID_SYS_STATUS_LEN;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	78db      	ldrb	r3, [r3, #3]
 80021b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80021b8:	bf28      	it	cs
 80021ba:	232b      	movcs	r3, #43	@ 0x2b
 80021bc:	73fb      	strb	r3, [r7, #15]
        memset(sys_status, 0, MAVLINK_MSG_ID_SYS_STATUS_LEN);
 80021be:	222b      	movs	r2, #43	@ 0x2b
 80021c0:	2100      	movs	r1, #0
 80021c2:	6838      	ldr	r0, [r7, #0]
 80021c4:	f004 f8a2 	bl	800630c <memset>
    memcpy(sys_status, _MAV_PAYLOAD(msg), len);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	330c      	adds	r3, #12
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	4619      	mov	r1, r3
 80021d0:	6838      	ldr	r0, [r7, #0]
 80021d2:	f004 f8c7 	bl	8006364 <memcpy>
#endif
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
    global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
    global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
    global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
    global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN? msg->len : MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	78db      	ldrb	r3, [r3, #3]
 80021ec:	2b1c      	cmp	r3, #28
 80021ee:	bf28      	it	cs
 80021f0:	231c      	movcs	r3, #28
 80021f2:	73fb      	strb	r3, [r7, #15]
        memset(global_position_int, 0, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
 80021f4:	221c      	movs	r2, #28
 80021f6:	2100      	movs	r1, #0
 80021f8:	6838      	ldr	r0, [r7, #0]
 80021fa:	f004 f887 	bl	800630c <memset>
    memcpy(global_position_int, _MAV_PAYLOAD(msg), len);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	330c      	adds	r3, #12
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	4619      	mov	r1, r3
 8002206:	6838      	ldr	r0, [r7, #0]
 8002208:	f004 f8ac 	bl	8006364 <memcpy>
#endif
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <mavlink_msg_command_long_pack>:
 * @param param7  Parameter 7 (for the specific command).
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_command_long_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b096      	sub	sp, #88	@ 0x58
 8002218:	af02      	add	r7, sp, #8
 800221a:	623a      	str	r2, [r7, #32]
 800221c:	461a      	mov	r2, r3
 800221e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002222:	edc7 0a06 	vstr	s1, [r7, #24]
 8002226:	ed87 1a05 	vstr	s2, [r7, #20]
 800222a:	edc7 1a04 	vstr	s3, [r7, #16]
 800222e:	ed87 2a03 	vstr	s4, [r7, #12]
 8002232:	edc7 2a02 	vstr	s5, [r7, #8]
 8002236:	ed87 3a01 	vstr	s6, [r7, #4]
 800223a:	4603      	mov	r3, r0
 800223c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002240:	460b      	mov	r3, r1
 8002242:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002246:	4613      	mov	r3, r2
 8002248:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    _mav_put_uint8_t(buf, 32, confirmation);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#else
    mavlink_command_long_t packet;
    packet.param1 = param1;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    packet.param2 = param2;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	633b      	str	r3, [r7, #48]	@ 0x30
    packet.param3 = param3;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	637b      	str	r3, [r7, #52]	@ 0x34
    packet.param4 = param4;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	63bb      	str	r3, [r7, #56]	@ 0x38
    packet.param5 = param5;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    packet.param6 = param6;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	643b      	str	r3, [r7, #64]	@ 0x40
    packet.param7 = param7;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	647b      	str	r3, [r7, #68]	@ 0x44
    packet.command = command;
 8002268:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800226c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    packet.target_system = target_system;
 8002270:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002274:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    packet.target_component = target_component;
 8002278:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800227c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    packet.confirmation = confirmation;
 8002280:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8002284:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	330c      	adds	r3, #12
 800228c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002290:	2221      	movs	r2, #33	@ 0x21
 8002292:	4618      	mov	r0, r3
 8002294:	f004 f866 	bl	8006364 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_COMMAND_LONG;
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	2200      	movs	r2, #0
 800229c:	f042 024c 	orr.w	r2, r2, #76	@ 0x4c
 80022a0:	725a      	strb	r2, [r3, #9]
 80022a2:	2200      	movs	r2, #0
 80022a4:	729a      	strb	r2, [r3, #10]
 80022a6:	2200      	movs	r2, #0
 80022a8:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_COMMAND_LONG_MIN_LEN, MAVLINK_MSG_ID_COMMAND_LONG_LEN, MAVLINK_MSG_ID_COMMAND_LONG_CRC);
 80022aa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80022ae:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80022b2:	2398      	movs	r3, #152	@ 0x98
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2321      	movs	r3, #33	@ 0x21
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2321      	movs	r3, #33	@ 0x21
 80022bc:	6a38      	ldr	r0, [r7, #32]
 80022be:	f7ff fab6 	bl	800182e <mavlink_finalize_message>
 80022c2:	4603      	mov	r3, r0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3750      	adds	r7, #80	@ 0x50
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <mavlink_msg_power_status_decode>:
 *
 * @param msg The message to decode
 * @param power_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_power_status_decode(const mavlink_message_t* msg, mavlink_power_status_t* power_status)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    power_status->Vcc = mavlink_msg_power_status_get_Vcc(msg);
    power_status->Vservo = mavlink_msg_power_status_get_Vservo(msg);
    power_status->flags = mavlink_msg_power_status_get_flags(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_POWER_STATUS_LEN? msg->len : MAVLINK_MSG_ID_POWER_STATUS_LEN;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	78db      	ldrb	r3, [r3, #3]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	bf28      	it	cs
 80022de:	2306      	movcs	r3, #6
 80022e0:	73fb      	strb	r3, [r7, #15]
        memset(power_status, 0, MAVLINK_MSG_ID_POWER_STATUS_LEN);
 80022e2:	2206      	movs	r2, #6
 80022e4:	2100      	movs	r1, #0
 80022e6:	6838      	ldr	r0, [r7, #0]
 80022e8:	f004 f810 	bl	800630c <memset>
    memcpy(power_status, _MAV_PAYLOAD(msg), len);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	330c      	adds	r3, #12
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	4619      	mov	r1, r3
 80022f4:	6838      	ldr	r0, [r7, #0]
 80022f6:	f004 f835 	bl	8006364 <memcpy>
#endif
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b088      	sub	sp, #32
 8002306:	af02      	add	r7, sp, #8
 8002308:	603a      	str	r2, [r7, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
 8002310:	460b      	mov	r3, r1
 8002312:	71bb      	strb	r3, [r7, #6]
 8002314:	4613      	mov	r3, r2
 8002316:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8002318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231a:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 800231c:	797b      	ldrb	r3, [r7, #5]
 800231e:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 8002320:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002324:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8002326:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800232a:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 800232c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002330:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 8002332:	2303      	movs	r3, #3
 8002334:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	330c      	adds	r3, #12
 800233a:	f107 010c 	add.w	r1, r7, #12
 800233e:	2209      	movs	r2, #9
 8002340:	4618      	mov	r0, r3
 8002342:	f004 f80f 	bl	8006364 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2200      	movs	r2, #0
 800234a:	725a      	strb	r2, [r3, #9]
 800234c:	2200      	movs	r2, #0
 800234e:	729a      	strb	r2, [r3, #10]
 8002350:	2200      	movs	r2, #0
 8002352:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8002354:	79ba      	ldrb	r2, [r7, #6]
 8002356:	79f9      	ldrb	r1, [r7, #7]
 8002358:	2332      	movs	r3, #50	@ 0x32
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	2309      	movs	r3, #9
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2309      	movs	r3, #9
 8002362:	6838      	ldr	r0, [r7, #0]
 8002364:	f7ff fa63 	bl	800182e <mavlink_finalize_message>
 8002368:	4603      	mov	r3, r0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <mavlink_msg_heartbeat_get_type>:
 * @brief Get field type from heartbeat message
 *
 * @return  Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.
 */
static inline uint8_t mavlink_msg_heartbeat_get_type(const mavlink_message_t* msg)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint8_t(msg,  4);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	330c      	adds	r3, #12
 800237e:	3304      	adds	r3, #4
 8002380:	781b      	ldrb	r3, [r3, #0]
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <decode_mavlink_mssg>:
 *
 * @param byte:		Current byte of the message to decode
 *
 **/
void decode_mavlink_mssg(const unsigned char* byte, mavlink_message_t msg)
{
 8002390:	b084      	sub	sp, #16
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	f107 0014 	add.w	r0, r7, #20
 800239e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mavlink_parse_char(chan, byte, &msg, &status))
 80023a2:	4b2a      	ldr	r3, [pc, #168]	@ (800244c <decode_mavlink_mssg+0xbc>)
 80023a4:	7818      	ldrb	r0, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	b2d9      	uxtb	r1, r3
 80023aa:	f107 0214 	add.w	r2, r7, #20
 80023ae:	4b28      	ldr	r3, [pc, #160]	@ (8002450 <decode_mavlink_mssg+0xc0>)
 80023b0:	f7ff febd 	bl	800212e <mavlink_parse_char>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d041      	beq.n	800243e <decode_mavlink_mssg+0xae>

		HAL_UART_Transmit(&huart3, msg.msgid, 24, 100);
		HAL_UART_Transmit(&huart3, "\n", 1, 100);*/

		// ... DECODE THE MESSAGE PAYLOAD HERE ...
		 switch(msg.msgid) {
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80023c0:	2b7d      	cmp	r3, #125	@ 0x7d
 80023c2:	d02f      	beq.n	8002424 <decode_mavlink_mssg+0x94>
 80023c4:	2b7d      	cmp	r3, #125	@ 0x7d
 80023c6:	dc39      	bgt.n	800243c <decode_mavlink_mssg+0xac>
 80023c8:	2b21      	cmp	r3, #33	@ 0x21
 80023ca:	d010      	beq.n	80023ee <decode_mavlink_mssg+0x5e>
 80023cc:	2b21      	cmp	r3, #33	@ 0x21
 80023ce:	dc35      	bgt.n	800243c <decode_mavlink_mssg+0xac>
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <decode_mavlink_mssg+0x4a>
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d019      	beq.n	800240c <decode_mavlink_mssg+0x7c>
				power = pwr_status.Vcc;
			break;


			default:
			break;
 80023d8:	e030      	b.n	800243c <decode_mavlink_mssg+0xac>
			 	device_type=mavlink_msg_heartbeat_get_type(&msg);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ffc7 	bl	8002372 <mavlink_msg_heartbeat_get_type>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002454 <decode_mavlink_mssg+0xc4>)
 80023ea:	601a      	str	r2, [r3, #0]
			 break;
 80023ec:	e027      	b.n	800243e <decode_mavlink_mssg+0xae>
				mavlink_msg_global_position_int_decode(&msg, &global_position);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4919      	ldr	r1, [pc, #100]	@ (8002458 <decode_mavlink_mssg+0xc8>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fef2 	bl	80021de <mavlink_msg_global_position_int_decode>
				mav_alt=global_position.alt;
 80023fa:	4b17      	ldr	r3, [pc, #92]	@ (8002458 <decode_mavlink_mssg+0xc8>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a17      	ldr	r2, [pc, #92]	@ (800245c <decode_mavlink_mssg+0xcc>)
 8002400:	6013      	str	r3, [r2, #0]
				mav_lat=global_position.lat;
 8002402:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <decode_mavlink_mssg+0xc8>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a16      	ldr	r2, [pc, #88]	@ (8002460 <decode_mavlink_mssg+0xd0>)
 8002408:	6013      	str	r3, [r2, #0]
			break;
 800240a:	e018      	b.n	800243e <decode_mavlink_mssg+0xae>
				mavlink_msg_sys_status_decode(&msg, &sys_status);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4914      	ldr	r1, [pc, #80]	@ (8002464 <decode_mavlink_mssg+0xd4>)
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fec8 	bl	80021a8 <mavlink_msg_sys_status_decode>
				health = sys_status.onboard_control_sensors_health;
 8002418:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <decode_mavlink_mssg+0xd4>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	461a      	mov	r2, r3
 800241e:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <decode_mavlink_mssg+0xd8>)
 8002420:	601a      	str	r2, [r3, #0]
			break;
 8002422:	e00c      	b.n	800243e <decode_mavlink_mssg+0xae>
				mavlink_msg_power_status_decode(&msg, &pwr_status);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4910      	ldr	r1, [pc, #64]	@ (800246c <decode_mavlink_mssg+0xdc>)
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff4e 	bl	80022cc <mavlink_msg_power_status_decode>
				power = pwr_status.Vcc;
 8002430:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <decode_mavlink_mssg+0xdc>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <decode_mavlink_mssg+0xe0>)
 8002438:	601a      	str	r2, [r3, #0]
			break;
 800243a:	e000      	b.n	800243e <decode_mavlink_mssg+0xae>
			break;
 800243c:	bf00      	nop
			}
	}

}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002448:	b004      	add	sp, #16
 800244a:	4770      	bx	lr
 800244c:	200009da 	.word	0x200009da
 8002450:	200009dc 	.word	0x200009dc
 8002454:	200009a0 	.word	0x200009a0
 8002458:	20000974 	.word	0x20000974
 800245c:	20000994 	.word	0x20000994
 8002460:	20000998 	.word	0x20000998
 8002464:	200009a8 	.word	0x200009a8
 8002468:	20000990 	.word	0x20000990
 800246c:	200009d4 	.word	0x200009d4
 8002470:	2000099c 	.word	0x2000099c

08002474 <encode_mavlink_mssg>:
 * @param conf_counter	Coutner to keep track of attempts for sending the command
 *
 **/

void encode_mavlink_mssg(uint8_t conf_counter)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af04      	add	r7, sp, #16
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
	//EXAMPLE: send command to request message of VFR_HUD(74)
	mavlink_msg_command_long_pack(SYS_ID, componentID, &cmmd, TARGET_ID,
 800247e:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <encode_mavlink_mssg+0x50>)
 8002480:	7819      	ldrb	r1, [r3, #0]
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <encode_mavlink_mssg+0x50>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	1dfa      	adds	r2, r7, #7
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	9202      	str	r2, [sp, #8]
 800248c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002490:	9201      	str	r2, [sp, #4]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 8002498:	eddf 2a0b 	vldr	s5, [pc, #44]	@ 80024c8 <encode_mavlink_mssg+0x54>
 800249c:	ed9f 2a0a 	vldr	s4, [pc, #40]	@ 80024c8 <encode_mavlink_mssg+0x54>
 80024a0:	eddf 1a09 	vldr	s3, [pc, #36]	@ 80024c8 <encode_mavlink_mssg+0x54>
 80024a4:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 80024c8 <encode_mavlink_mssg+0x54>
 80024a8:	eddf 0a07 	vldr	s1, [pc, #28]	@ 80024c8 <encode_mavlink_mssg+0x54>
 80024ac:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80024cc <encode_mavlink_mssg+0x58>
 80024b0:	2301      	movs	r3, #1
 80024b2:	4a07      	ldr	r2, [pc, #28]	@ (80024d0 <encode_mavlink_mssg+0x5c>)
 80024b4:	20ff      	movs	r0, #255	@ 0xff
 80024b6:	f7ff fead 	bl	8002214 <mavlink_msg_command_long_pack>
			VFR_HUD, 0, 0, 0, 0, 0, 1);		//last '1' for target address

//same as pack but with premade struct
	//mavlink_msg_command_long_encode(system_id, component_id, msg, command_long)

}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200009a4 	.word	0x200009a4
 80024c8:	00000000 	.word	0x00000000
 80024cc:	42940000 	.word	0x42940000
 80024d0:	200009f4 	.word	0x200009f4

080024d4 <broadcast_heartbeat>:
 *	@param	buffer:		uint8_t Empty array buffer
 *	@param	msg:		Empty Maavlink message struct for the message
 * 	@return 	Length of the HEARTBEAT byte message
 */
uint16_t broadcast_heartbeat(uint8_t* buffer, mavlink_message_t* msg)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af04      	add	r7, sp, #16
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
	//prepare message
	mavlink_msg_heartbeat_pack(SYS_ID, MAV_COMP_ID_MISSIONPLANNER,
 80024de:	2300      	movs	r3, #0
 80024e0:	9303      	str	r3, [sp, #12]
 80024e2:	2300      	movs	r3, #0
 80024e4:	9302      	str	r3, [sp, #8]
 80024e6:	2300      	movs	r3, #0
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	2308      	movs	r3, #8
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	2306      	movs	r3, #6
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	21be      	movs	r1, #190	@ 0xbe
 80024f4:	20ff      	movs	r0, #255	@ 0xff
 80024f6:	f7ff ff04 	bl	8002302 <mavlink_msg_heartbeat_pack>
			msg, MAV_TYPE_GCS,	MAV_AUTOPILOT_INVALID, 0, 0, MAV_STATE_UNINIT);
	//prepare bytes
	return mavlink_msg_to_send_buffer(buffer, msg);
 80024fa:	6839      	ldr	r1, [r7, #0]
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff f9c4 	bl	800188a <mavlink_msg_to_send_buffer>
 8002502:	4603      	mov	r3, r0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <HAL_MspInit+0x44>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	4a0e      	ldr	r2, [pc, #56]	@ (8002550 <HAL_MspInit+0x44>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	@ 0x40
 800251e:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <HAL_MspInit+0x44>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_MspInit+0x44>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	4a08      	ldr	r2, [pc, #32]	@ (8002550 <HAL_MspInit+0x44>)
 8002530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002534:	6453      	str	r3, [r2, #68]	@ 0x44
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_MspInit+0x44>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800

08002554 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08e      	sub	sp, #56	@ 0x38
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a4e      	ldr	r2, [pc, #312]	@ (80026ac <HAL_ETH_MspInit+0x158>)
 8002572:	4293      	cmp	r3, r2
 8002574:	f040 8096 	bne.w	80026a4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002578:	4b4d      	ldr	r3, [pc, #308]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	4a4c      	ldr	r2, [pc, #304]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 800257e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002582:	6313      	str	r3, [r2, #48]	@ 0x30
 8002584:	4b4a      	ldr	r3, [pc, #296]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002588:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258c:	623b      	str	r3, [r7, #32]
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	4b47      	ldr	r3, [pc, #284]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002594:	4a46      	ldr	r2, [pc, #280]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 8002596:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800259a:	6313      	str	r3, [r2, #48]	@ 0x30
 800259c:	4b44      	ldr	r3, [pc, #272]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	4b41      	ldr	r3, [pc, #260]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	4a40      	ldr	r2, [pc, #256]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80025b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b4:	4b3e      	ldr	r3, [pc, #248]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c0:	4b3b      	ldr	r3, [pc, #236]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c4:	4a3a      	ldr	r2, [pc, #232]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80025cc:	4b38      	ldr	r3, [pc, #224]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	4b35      	ldr	r3, [pc, #212]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	4a34      	ldr	r2, [pc, #208]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e4:	4b32      	ldr	r3, [pc, #200]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	4b2f      	ldr	r3, [pc, #188]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	4a2e      	ldr	r2, [pc, #184]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fc:	4b2c      	ldr	r3, [pc, #176]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002608:	4b29      	ldr	r3, [pc, #164]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	4a28      	ldr	r2, [pc, #160]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 800260e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002612:	6313      	str	r3, [r2, #48]	@ 0x30
 8002614:	4b26      	ldr	r3, [pc, #152]	@ (80026b0 <HAL_ETH_MspInit+0x15c>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002620:	2332      	movs	r3, #50	@ 0x32
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002630:	230b      	movs	r3, #11
 8002632:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002638:	4619      	mov	r1, r3
 800263a:	481e      	ldr	r0, [pc, #120]	@ (80026b4 <HAL_ETH_MspInit+0x160>)
 800263c:	f000 ff06 	bl	800344c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002640:	2386      	movs	r3, #134	@ 0x86
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002650:	230b      	movs	r3, #11
 8002652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002658:	4619      	mov	r1, r3
 800265a:	4817      	ldr	r0, [pc, #92]	@ (80026b8 <HAL_ETH_MspInit+0x164>)
 800265c:	f000 fef6 	bl	800344c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002672:	230b      	movs	r3, #11
 8002674:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800267a:	4619      	mov	r1, r3
 800267c:	480f      	ldr	r0, [pc, #60]	@ (80026bc <HAL_ETH_MspInit+0x168>)
 800267e:	f000 fee5 	bl	800344c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002682:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002690:	2303      	movs	r3, #3
 8002692:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002694:	230b      	movs	r3, #11
 8002696:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800269c:	4619      	mov	r1, r3
 800269e:	4808      	ldr	r0, [pc, #32]	@ (80026c0 <HAL_ETH_MspInit+0x16c>)
 80026a0:	f000 fed4 	bl	800344c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80026a4:	bf00      	nop
 80026a6:	3738      	adds	r7, #56	@ 0x38
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40028000 	.word	0x40028000
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40021800 	.word	0x40021800

080026c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <HAL_TIM_Base_MspInit+0x44>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d113      	bne.n	80026fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026d6:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <HAL_TIM_Base_MspInit+0x48>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	4a0c      	ldr	r2, [pc, #48]	@ (800270c <HAL_TIM_Base_MspInit+0x48>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e2:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <HAL_TIM_Base_MspInit+0x48>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	201e      	movs	r0, #30
 80026f4:	f000 fa93 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026f8:	201e      	movs	r0, #30
 80026fa:	f000 faac 	bl	8002c56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40000800 	.word	0x40000800
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b0ac      	sub	sp, #176	@ 0xb0
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002728:	f107 0318 	add.w	r3, r7, #24
 800272c:	2284      	movs	r2, #132	@ 0x84
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f003 fdeb 	bl	800630c <memset>
  if(huart->Instance==USART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a46      	ldr	r2, [pc, #280]	@ (8002854 <HAL_UART_MspInit+0x144>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d143      	bne.n	80027c8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002740:	2340      	movs	r3, #64	@ 0x40
 8002742:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002744:	2300      	movs	r3, #0
 8002746:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002748:	f107 0318 	add.w	r3, r7, #24
 800274c:	4618      	mov	r0, r3
 800274e:	f001 fd1d 	bl	800418c <HAL_RCCEx_PeriphCLKConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002758:	f7fe f960 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800275c:	4b3e      	ldr	r3, [pc, #248]	@ (8002858 <HAL_UART_MspInit+0x148>)
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	4a3d      	ldr	r2, [pc, #244]	@ (8002858 <HAL_UART_MspInit+0x148>)
 8002762:	f043 0310 	orr.w	r3, r3, #16
 8002766:	6453      	str	r3, [r2, #68]	@ 0x44
 8002768:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <HAL_UART_MspInit+0x148>)
 800276a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002774:	4b38      	ldr	r3, [pc, #224]	@ (8002858 <HAL_UART_MspInit+0x148>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	4a37      	ldr	r2, [pc, #220]	@ (8002858 <HAL_UART_MspInit+0x148>)
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002780:	4b35      	ldr	r3, [pc, #212]	@ (8002858 <HAL_UART_MspInit+0x148>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800278c:	2340      	movs	r3, #64	@ 0x40
 800278e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002792:	2312      	movs	r3, #18
 8002794:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002798:	2301      	movs	r3, #1
 800279a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027a4:	2307      	movs	r3, #7
 80027a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027ae:	4619      	mov	r1, r3
 80027b0:	482a      	ldr	r0, [pc, #168]	@ (800285c <HAL_UART_MspInit+0x14c>)
 80027b2:	f000 fe4b 	bl	800344c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2100      	movs	r1, #0
 80027ba:	2025      	movs	r0, #37	@ 0x25
 80027bc:	f000 fa2f 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027c0:	2025      	movs	r0, #37	@ 0x25
 80027c2:	f000 fa48 	bl	8002c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027c6:	e041      	b.n	800284c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a24      	ldr	r2, [pc, #144]	@ (8002860 <HAL_UART_MspInit+0x150>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d13c      	bne.n	800284c <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80027d8:	2300      	movs	r3, #0
 80027da:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027dc:	f107 0318 	add.w	r3, r7, #24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 fcd3 	bl	800418c <HAL_RCCEx_PeriphCLKConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80027ec:	f7fe f916 	bl	8000a1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027f0:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <HAL_UART_MspInit+0x148>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	4a18      	ldr	r2, [pc, #96]	@ (8002858 <HAL_UART_MspInit+0x148>)
 80027f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80027fc:	4b16      	ldr	r3, [pc, #88]	@ (8002858 <HAL_UART_MspInit+0x148>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <HAL_UART_MspInit+0x148>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	4a12      	ldr	r2, [pc, #72]	@ (8002858 <HAL_UART_MspInit+0x148>)
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	6313      	str	r3, [r2, #48]	@ 0x30
 8002814:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <HAL_UART_MspInit+0x148>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002820:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002824:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800283a:	2307      	movs	r3, #7
 800283c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002840:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002844:	4619      	mov	r1, r3
 8002846:	4807      	ldr	r0, [pc, #28]	@ (8002864 <HAL_UART_MspInit+0x154>)
 8002848:	f000 fe00 	bl	800344c <HAL_GPIO_Init>
}
 800284c:	bf00      	nop
 800284e:	37b0      	adds	r7, #176	@ 0xb0
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40011000 	.word	0x40011000
 8002858:	40023800 	.word	0x40023800
 800285c:	40020400 	.word	0x40020400
 8002860:	40004800 	.word	0x40004800
 8002864:	40020c00 	.word	0x40020c00

08002868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <NMI_Handler+0x4>

08002870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <HardFault_Handler+0x4>

08002878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <MemManage_Handler+0x4>

08002880 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002884:	bf00      	nop
 8002886:	e7fd      	b.n	8002884 <BusFault_Handler+0x4>

08002888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <UsageFault_Handler+0x4>

08002890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028be:	f000 f88f 	bl	80029e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028cc:	4802      	ldr	r0, [pc, #8]	@ (80028d8 <TIM4_IRQHandler+0x10>)
 80028ce:	f002 f91d 	bl	8004b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200005bc 	.word	0x200005bc

080028dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028e0:	4802      	ldr	r0, [pc, #8]	@ (80028ec <USART1_IRQHandler+0x10>)
 80028e2:	f002 fda3 	bl	800542c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000608 	.word	0x20000608

080028f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f4:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <SystemInit+0x20>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fa:	4a05      	ldr	r2, [pc, #20]	@ (8002910 <SystemInit+0x20>)
 80028fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <Reset_Handler>:
 8002914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800294c <LoopFillZerobss+0xe>
 8002918:	f7ff ffea 	bl	80028f0 <SystemInit>
 800291c:	480c      	ldr	r0, [pc, #48]	@ (8002950 <LoopFillZerobss+0x12>)
 800291e:	490d      	ldr	r1, [pc, #52]	@ (8002954 <LoopFillZerobss+0x16>)
 8002920:	4a0d      	ldr	r2, [pc, #52]	@ (8002958 <LoopFillZerobss+0x1a>)
 8002922:	2300      	movs	r3, #0
 8002924:	e002      	b.n	800292c <LoopCopyDataInit>

08002926 <CopyDataInit>:
 8002926:	58d4      	ldr	r4, [r2, r3]
 8002928:	50c4      	str	r4, [r0, r3]
 800292a:	3304      	adds	r3, #4

0800292c <LoopCopyDataInit>:
 800292c:	18c4      	adds	r4, r0, r3
 800292e:	428c      	cmp	r4, r1
 8002930:	d3f9      	bcc.n	8002926 <CopyDataInit>
 8002932:	4a0a      	ldr	r2, [pc, #40]	@ (800295c <LoopFillZerobss+0x1e>)
 8002934:	4c0a      	ldr	r4, [pc, #40]	@ (8002960 <LoopFillZerobss+0x22>)
 8002936:	2300      	movs	r3, #0
 8002938:	e001      	b.n	800293e <LoopFillZerobss>

0800293a <FillZerobss>:
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	3204      	adds	r2, #4

0800293e <LoopFillZerobss>:
 800293e:	42a2      	cmp	r2, r4
 8002940:	d3fb      	bcc.n	800293a <FillZerobss>
 8002942:	f003 fceb 	bl	800631c <__libc_init_array>
 8002946:	f7fd fded 	bl	8000524 <main>
 800294a:	4770      	bx	lr
 800294c:	20050000 	.word	0x20050000
 8002950:	20000000 	.word	0x20000000
 8002954:	20000378 	.word	0x20000378
 8002958:	08007630 	.word	0x08007630
 800295c:	200004b8 	.word	0x200004b8
 8002960:	20001008 	.word	0x20001008

08002964 <ADC_IRQHandler>:
 8002964:	e7fe      	b.n	8002964 <ADC_IRQHandler>

08002966 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800296a:	2003      	movs	r0, #3
 800296c:	f000 f94c 	bl	8002c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002970:	2000      	movs	r0, #0
 8002972:	f000 f805 	bl	8002980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002976:	f7ff fdc9 	bl	800250c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002988:	4b12      	ldr	r3, [pc, #72]	@ (80029d4 <HAL_InitTick+0x54>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <HAL_InitTick+0x58>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002996:	fbb3 f3f1 	udiv	r3, r3, r1
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f967 	bl	8002c72 <HAL_SYSTICK_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00e      	b.n	80029cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b0f      	cmp	r3, #15
 80029b2:	d80a      	bhi.n	80029ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b4:	2200      	movs	r2, #0
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	f000 f92f 	bl	8002c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029c0:	4a06      	ldr	r2, [pc, #24]	@ (80029dc <HAL_InitTick+0x5c>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e000      	b.n	80029cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	2000036c 	.word	0x2000036c
 80029d8:	20000374 	.word	0x20000374
 80029dc:	20000370 	.word	0x20000370

080029e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e4:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <HAL_IncTick+0x20>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_IncTick+0x24>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	4a04      	ldr	r2, [pc, #16]	@ (8002a04 <HAL_IncTick+0x24>)
 80029f2:	6013      	str	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000374 	.word	0x20000374
 8002a04:	20001004 	.word	0x20001004

08002a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	@ (8002a1c <HAL_GetTick+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20001004 	.word	0x20001004

08002a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a28:	f7ff ffee 	bl	8002a08 <HAL_GetTick>
 8002a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d005      	beq.n	8002a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <HAL_Delay+0x44>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4413      	add	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a46:	bf00      	nop
 8002a48:	f7ff ffde 	bl	8002a08 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d8f7      	bhi.n	8002a48 <HAL_Delay+0x28>
  {
  }
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000374 	.word	0x20000374

08002a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a84:	4013      	ands	r3, r2
 8002a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a90:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a96:	4a04      	ldr	r2, [pc, #16]	@ (8002aa8 <__NVIC_SetPriorityGrouping+0x40>)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	60d3      	str	r3, [r2, #12]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00
 8002aac:	05fa0000 	.word	0x05fa0000

08002ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab4:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	0a1b      	lsrs	r3, r3, #8
 8002aba:	f003 0307 	and.w	r3, r3, #7
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	db0b      	blt.n	8002af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	4907      	ldr	r1, [pc, #28]	@ (8002b04 <__NVIC_EnableIRQ+0x38>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2001      	movs	r0, #1
 8002aee:	fa00 f202 	lsl.w	r2, r0, r2
 8002af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000e100 	.word	0xe000e100

08002b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	db0a      	blt.n	8002b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	490c      	ldr	r1, [pc, #48]	@ (8002b54 <__NVIC_SetPriority+0x4c>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	0112      	lsls	r2, r2, #4
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b30:	e00a      	b.n	8002b48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	4908      	ldr	r1, [pc, #32]	@ (8002b58 <__NVIC_SetPriority+0x50>)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	3b04      	subs	r3, #4
 8002b40:	0112      	lsls	r2, r2, #4
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	440b      	add	r3, r1
 8002b46:	761a      	strb	r2, [r3, #24]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000e100 	.word	0xe000e100
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	@ 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f1c3 0307 	rsb	r3, r3, #7
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	bf28      	it	cs
 8002b7a:	2304      	movcs	r3, #4
 8002b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2b06      	cmp	r3, #6
 8002b84:	d902      	bls.n	8002b8c <NVIC_EncodePriority+0x30>
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3b03      	subs	r3, #3
 8002b8a:	e000      	b.n	8002b8e <NVIC_EncodePriority+0x32>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	f04f 32ff 	mov.w	r2, #4294967295
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	43d9      	mvns	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	4313      	orrs	r3, r2
         );
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	@ 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bd4:	d301      	bcc.n	8002bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00f      	b.n	8002bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bda:	4a0a      	ldr	r2, [pc, #40]	@ (8002c04 <SysTick_Config+0x40>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be2:	210f      	movs	r1, #15
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295
 8002be8:	f7ff ff8e 	bl	8002b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bec:	4b05      	ldr	r3, [pc, #20]	@ (8002c04 <SysTick_Config+0x40>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf2:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <SysTick_Config+0x40>)
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	e000e010 	.word	0xe000e010

08002c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ff29 	bl	8002a68 <__NVIC_SetPriorityGrouping>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c30:	f7ff ff3e 	bl	8002ab0 <__NVIC_GetPriorityGrouping>
 8002c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	6978      	ldr	r0, [r7, #20]
 8002c3c:	f7ff ff8e 	bl	8002b5c <NVIC_EncodePriority>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff5d 	bl	8002b08 <__NVIC_SetPriority>
}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff31 	bl	8002acc <__NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ffa2 	bl	8002bc4 <SysTick_Config>
 8002c80:	4603      	mov	r3, r0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7ff feb6 	bl	8002a08 <HAL_GetTick>
 8002c9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d008      	beq.n	8002cbc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2280      	movs	r2, #128	@ 0x80
 8002cae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e052      	b.n	8002d62 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0216 	bic.w	r2, r2, #22
 8002cca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <HAL_DMA_Abort+0x62>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0208 	bic.w	r2, r2, #8
 8002cfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d0c:	e013      	b.n	8002d36 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d0e:	f7ff fe7b 	bl	8002a08 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d90c      	bls.n	8002d36 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2203      	movs	r2, #3
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e015      	b.n	8002d62 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e4      	bne.n	8002d0e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d48:	223f      	movs	r2, #63	@ 0x3f
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d004      	beq.n	8002d88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2280      	movs	r2, #128	@ 0x80
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e00c      	b.n	8002da2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2205      	movs	r2, #5
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e086      	b.n	8002ed0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2223      	movs	r2, #35	@ 0x23
 8002dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff fbbd 	bl	8002554 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dda:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed8 <HAL_ETH_Init+0x128>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	4a3e      	ldr	r2, [pc, #248]	@ (8002ed8 <HAL_ETH_Init+0x128>)
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002de6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed8 <HAL_ETH_Init+0x128>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002df2:	4b3a      	ldr	r3, [pc, #232]	@ (8002edc <HAL_ETH_Init+0x12c>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4a39      	ldr	r2, [pc, #228]	@ (8002edc <HAL_ETH_Init+0x12c>)
 8002df8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002dfc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002dfe:	4b37      	ldr	r3, [pc, #220]	@ (8002edc <HAL_ETH_Init+0x12c>)
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4935      	ldr	r1, [pc, #212]	@ (8002edc <HAL_ETH_Init+0x12c>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002e0c:	4b33      	ldr	r3, [pc, #204]	@ (8002edc <HAL_ETH_Init+0x12c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e28:	f7ff fdee 	bl	8002a08 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e2e:	e011      	b.n	8002e54 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002e30:	f7ff fdea 	bl	8002a08 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002e3e:	d909      	bls.n	8002e54 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2204      	movs	r2, #4
 8002e44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	22e0      	movs	r2, #224	@ 0xe0
 8002e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e03d      	b.n	8002ed0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e4      	bne.n	8002e30 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f97a 	bl	8003160 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fa25 	bl	80032bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa7b 	bl	800336e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2100      	movs	r1, #0
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f9e3 	bl	800324c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002e94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee0 <HAL_ETH_Init+0x130>)
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002eba:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2210      	movs	r2, #16
 8002eca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	00020060 	.word	0x00020060

08002ee4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4b53      	ldr	r3, [pc, #332]	@ (8003048 <ETH_SetMACConfig+0x164>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	7b9b      	ldrb	r3, [r3, #14]
 8002f02:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	7c12      	ldrb	r2, [r2, #16]
 8002f08:	2a00      	cmp	r2, #0
 8002f0a:	d102      	bne.n	8002f12 <ETH_SetMACConfig+0x2e>
 8002f0c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002f10:	e000      	b.n	8002f14 <ETH_SetMACConfig+0x30>
 8002f12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f14:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	7c52      	ldrb	r2, [r2, #17]
 8002f1a:	2a00      	cmp	r2, #0
 8002f1c:	d102      	bne.n	8002f24 <ETH_SetMACConfig+0x40>
 8002f1e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002f22:	e000      	b.n	8002f26 <ETH_SetMACConfig+0x42>
 8002f24:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f26:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002f2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	7fdb      	ldrb	r3, [r3, #31]
 8002f32:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002f34:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002f3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	7f92      	ldrb	r2, [r2, #30]
 8002f40:	2a00      	cmp	r2, #0
 8002f42:	d102      	bne.n	8002f4a <ETH_SetMACConfig+0x66>
 8002f44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f48:	e000      	b.n	8002f4c <ETH_SetMACConfig+0x68>
 8002f4a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	7f1b      	ldrb	r3, [r3, #28]
 8002f52:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f54:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f5a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	791b      	ldrb	r3, [r3, #4]
 8002f60:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f6a:	2a00      	cmp	r2, #0
 8002f6c:	d102      	bne.n	8002f74 <ETH_SetMACConfig+0x90>
 8002f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f72:	e000      	b.n	8002f76 <ETH_SetMACConfig+0x92>
 8002f74:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f76:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	7bdb      	ldrb	r3, [r3, #15]
 8002f7c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f7e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f8c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7ff fd3a 	bl	8002a20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002fd2:	2a00      	cmp	r2, #0
 8002fd4:	d101      	bne.n	8002fda <ETH_SetMACConfig+0xf6>
 8002fd6:	2280      	movs	r2, #128	@ 0x80
 8002fd8:	e000      	b.n	8002fdc <ETH_SetMACConfig+0xf8>
 8002fda:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fdc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fe2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002fea:	2a01      	cmp	r2, #1
 8002fec:	d101      	bne.n	8002ff2 <ETH_SetMACConfig+0x10e>
 8002fee:	2208      	movs	r2, #8
 8002ff0:	e000      	b.n	8002ff4 <ETH_SetMACConfig+0x110>
 8002ff2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ff4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002ffc:	2a01      	cmp	r2, #1
 8002ffe:	d101      	bne.n	8003004 <ETH_SetMACConfig+0x120>
 8003000:	2204      	movs	r2, #4
 8003002:	e000      	b.n	8003006 <ETH_SetMACConfig+0x122>
 8003004:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003006:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800300e:	2a01      	cmp	r2, #1
 8003010:	d101      	bne.n	8003016 <ETH_SetMACConfig+0x132>
 8003012:	2202      	movs	r2, #2
 8003014:	e000      	b.n	8003018 <ETH_SetMACConfig+0x134>
 8003016:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003018:	4313      	orrs	r3, r2
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003030:	2001      	movs	r0, #1
 8003032:	f7ff fcf5 	bl	8002a20 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	619a      	str	r2, [r3, #24]
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	fd20810f 	.word	0xfd20810f

0800304c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	4b3d      	ldr	r3, [pc, #244]	@ (800315c <ETH_SetDMAConfig+0x110>)
 8003066:	4013      	ands	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	7b1b      	ldrb	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <ETH_SetDMAConfig+0x2c>
 8003072:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003076:	e000      	b.n	800307a <ETH_SetDMAConfig+0x2e>
 8003078:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	7b5b      	ldrb	r3, [r3, #13]
 800307e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003080:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	7f52      	ldrb	r2, [r2, #29]
 8003086:	2a00      	cmp	r2, #0
 8003088:	d102      	bne.n	8003090 <ETH_SetDMAConfig+0x44>
 800308a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800308e:	e000      	b.n	8003092 <ETH_SetDMAConfig+0x46>
 8003090:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003092:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	7b9b      	ldrb	r3, [r3, #14]
 8003098:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800309a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80030a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	7f1b      	ldrb	r3, [r3, #28]
 80030a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80030a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	7f9b      	ldrb	r3, [r3, #30]
 80030ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80030b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80030b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80030c0:	4313      	orrs	r3, r2
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030d0:	461a      	mov	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030e2:	2001      	movs	r0, #1
 80030e4:	f7ff fc9c 	bl	8002a20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030f0:	461a      	mov	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	791b      	ldrb	r3, [r3, #4]
 80030fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003100:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003106:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800310c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003114:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003116:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800311e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003124:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800312e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003132:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003140:	2001      	movs	r0, #1
 8003142:	f7ff fc6d 	bl	8002a20 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6013      	str	r3, [r2, #0]
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	f8de3f23 	.word	0xf8de3f23

08003160 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b0a6      	sub	sp, #152	@ 0x98
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003174:	2300      	movs	r3, #0
 8003176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003196:	2300      	movs	r3, #0
 8003198:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80031a2:	2300      	movs	r3, #0
 80031a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80031ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80031d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80031da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031de:	4619      	mov	r1, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff fe7f 	bl	8002ee4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80031e6:	2301      	movs	r3, #1
 80031e8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80031ea:	2301      	movs	r3, #1
 80031ec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003202:	2300      	movs	r3, #0
 8003204:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003208:	2300      	movs	r3, #0
 800320a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800320c:	2301      	movs	r3, #1
 800320e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003212:	2301      	movs	r3, #1
 8003214:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003216:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800321a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800321c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003220:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003222:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003226:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800322e:	2300      	movs	r3, #0
 8003230:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003236:	f107 0308 	add.w	r3, r7, #8
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ff05 	bl	800304c <ETH_SetDMAConfig>
}
 8003242:	bf00      	nop
 8003244:	3798      	adds	r7, #152	@ 0x98
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3305      	adds	r3, #5
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	3204      	adds	r2, #4
 8003264:	7812      	ldrb	r2, [r2, #0]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <ETH_MACAddressConfig+0x68>)
 800326e:	4413      	add	r3, r2
 8003270:	461a      	mov	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3303      	adds	r3, #3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	061a      	lsls	r2, r3, #24
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3302      	adds	r3, #2
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3301      	adds	r3, #1
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	4313      	orrs	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <ETH_MACAddressConfig+0x6c>)
 800329e:	4413      	add	r3, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	6013      	str	r3, [r2, #0]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40028040 	.word	0x40028040
 80032b8:	40028044 	.word	0x40028044

080032bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e03e      	b.n	8003348 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2200      	movs	r2, #0
 80032f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	3206      	adds	r2, #6
 80032fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d80c      	bhi.n	800332c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68d9      	ldr	r1, [r3, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	440b      	add	r3, r1
 8003324:	461a      	mov	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e004      	b.n	8003336 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3301      	adds	r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d9bd      	bls.n	80032ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003360:	611a      	str	r2, [r3, #16]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e048      	b.n	800340e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6919      	ldr	r1, [r3, #16]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	440b      	add	r3, r1
 800338c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2200      	movs	r2, #0
 8003398:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2200      	movs	r2, #0
 80033aa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80033b8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	3212      	adds	r2, #18
 80033da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d80c      	bhi.n	80033fe <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6919      	ldr	r1, [r3, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	60da      	str	r2, [r3, #12]
 80033fc:	e004      	b.n	8003408 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	461a      	mov	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d9b3      	bls.n	800337c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800343e:	60da      	str	r2, [r3, #12]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	@ 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e175      	b.n	8003758 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800346c:	2201      	movs	r2, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	429a      	cmp	r2, r3
 8003486:	f040 8164 	bne.w	8003752 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d005      	beq.n	80034a2 <HAL_GPIO_Init+0x56>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d130      	bne.n	8003504 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034d8:	2201      	movs	r2, #1
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 0201 	and.w	r2, r3, #1
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b03      	cmp	r3, #3
 800350e:	d017      	beq.n	8003540 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d123      	bne.n	8003594 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	08da      	lsrs	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3208      	adds	r2, #8
 8003554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	220f      	movs	r2, #15
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	08da      	lsrs	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3208      	adds	r2, #8
 800358e:	69b9      	ldr	r1, [r7, #24]
 8003590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	2203      	movs	r2, #3
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0203 	and.w	r2, r3, #3
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80be 	beq.w	8003752 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d6:	4b66      	ldr	r3, [pc, #408]	@ (8003770 <HAL_GPIO_Init+0x324>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	4a65      	ldr	r2, [pc, #404]	@ (8003770 <HAL_GPIO_Init+0x324>)
 80035dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035e2:	4b63      	ldr	r3, [pc, #396]	@ (8003770 <HAL_GPIO_Init+0x324>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035ee:	4a61      	ldr	r2, [pc, #388]	@ (8003774 <HAL_GPIO_Init+0x328>)
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	089b      	lsrs	r3, r3, #2
 80035f4:	3302      	adds	r3, #2
 80035f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	220f      	movs	r2, #15
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a58      	ldr	r2, [pc, #352]	@ (8003778 <HAL_GPIO_Init+0x32c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d037      	beq.n	800368a <HAL_GPIO_Init+0x23e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a57      	ldr	r2, [pc, #348]	@ (800377c <HAL_GPIO_Init+0x330>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d031      	beq.n	8003686 <HAL_GPIO_Init+0x23a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a56      	ldr	r2, [pc, #344]	@ (8003780 <HAL_GPIO_Init+0x334>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d02b      	beq.n	8003682 <HAL_GPIO_Init+0x236>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a55      	ldr	r2, [pc, #340]	@ (8003784 <HAL_GPIO_Init+0x338>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d025      	beq.n	800367e <HAL_GPIO_Init+0x232>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a54      	ldr	r2, [pc, #336]	@ (8003788 <HAL_GPIO_Init+0x33c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d01f      	beq.n	800367a <HAL_GPIO_Init+0x22e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a53      	ldr	r2, [pc, #332]	@ (800378c <HAL_GPIO_Init+0x340>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d019      	beq.n	8003676 <HAL_GPIO_Init+0x22a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a52      	ldr	r2, [pc, #328]	@ (8003790 <HAL_GPIO_Init+0x344>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <HAL_GPIO_Init+0x226>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a51      	ldr	r2, [pc, #324]	@ (8003794 <HAL_GPIO_Init+0x348>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00d      	beq.n	800366e <HAL_GPIO_Init+0x222>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a50      	ldr	r2, [pc, #320]	@ (8003798 <HAL_GPIO_Init+0x34c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d007      	beq.n	800366a <HAL_GPIO_Init+0x21e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a4f      	ldr	r2, [pc, #316]	@ (800379c <HAL_GPIO_Init+0x350>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <HAL_GPIO_Init+0x21a>
 8003662:	2309      	movs	r3, #9
 8003664:	e012      	b.n	800368c <HAL_GPIO_Init+0x240>
 8003666:	230a      	movs	r3, #10
 8003668:	e010      	b.n	800368c <HAL_GPIO_Init+0x240>
 800366a:	2308      	movs	r3, #8
 800366c:	e00e      	b.n	800368c <HAL_GPIO_Init+0x240>
 800366e:	2307      	movs	r3, #7
 8003670:	e00c      	b.n	800368c <HAL_GPIO_Init+0x240>
 8003672:	2306      	movs	r3, #6
 8003674:	e00a      	b.n	800368c <HAL_GPIO_Init+0x240>
 8003676:	2305      	movs	r3, #5
 8003678:	e008      	b.n	800368c <HAL_GPIO_Init+0x240>
 800367a:	2304      	movs	r3, #4
 800367c:	e006      	b.n	800368c <HAL_GPIO_Init+0x240>
 800367e:	2303      	movs	r3, #3
 8003680:	e004      	b.n	800368c <HAL_GPIO_Init+0x240>
 8003682:	2302      	movs	r3, #2
 8003684:	e002      	b.n	800368c <HAL_GPIO_Init+0x240>
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <HAL_GPIO_Init+0x240>
 800368a:	2300      	movs	r3, #0
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	f002 0203 	and.w	r2, r2, #3
 8003692:	0092      	lsls	r2, r2, #2
 8003694:	4093      	lsls	r3, r2
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800369c:	4935      	ldr	r1, [pc, #212]	@ (8003774 <HAL_GPIO_Init+0x328>)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	089b      	lsrs	r3, r3, #2
 80036a2:	3302      	adds	r3, #2
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036aa:	4b3d      	ldr	r3, [pc, #244]	@ (80037a0 <HAL_GPIO_Init+0x354>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ce:	4a34      	ldr	r2, [pc, #208]	@ (80037a0 <HAL_GPIO_Init+0x354>)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036d4:	4b32      	ldr	r3, [pc, #200]	@ (80037a0 <HAL_GPIO_Init+0x354>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036f8:	4a29      	ldr	r2, [pc, #164]	@ (80037a0 <HAL_GPIO_Init+0x354>)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036fe:	4b28      	ldr	r3, [pc, #160]	@ (80037a0 <HAL_GPIO_Init+0x354>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003722:	4a1f      	ldr	r2, [pc, #124]	@ (80037a0 <HAL_GPIO_Init+0x354>)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003728:	4b1d      	ldr	r3, [pc, #116]	@ (80037a0 <HAL_GPIO_Init+0x354>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800374c:	4a14      	ldr	r2, [pc, #80]	@ (80037a0 <HAL_GPIO_Init+0x354>)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3301      	adds	r3, #1
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b0f      	cmp	r3, #15
 800375c:	f67f ae86 	bls.w	800346c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3724      	adds	r7, #36	@ 0x24
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
 8003774:	40013800 	.word	0x40013800
 8003778:	40020000 	.word	0x40020000
 800377c:	40020400 	.word	0x40020400
 8003780:	40020800 	.word	0x40020800
 8003784:	40020c00 	.word	0x40020c00
 8003788:	40021000 	.word	0x40021000
 800378c:	40021400 	.word	0x40021400
 8003790:	40021800 	.word	0x40021800
 8003794:	40021c00 	.word	0x40021c00
 8003798:	40022000 	.word	0x40022000
 800379c:	40022400 	.word	0x40022400
 80037a0:	40013c00 	.word	0x40013c00

080037a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	807b      	strh	r3, [r7, #2]
 80037b0:	4613      	mov	r3, r2
 80037b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037b4:	787b      	ldrb	r3, [r7, #1]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ba:	887a      	ldrh	r2, [r7, #2]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037c0:	e003      	b.n	80037ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037c2:	887b      	ldrh	r3, [r7, #2]
 80037c4:	041a      	lsls	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	619a      	str	r2, [r3, #24]
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037dc:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40007000 	.word	0x40007000

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003800:	2300      	movs	r3, #0
 8003802:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e291      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8087 	beq.w	800392a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800381c:	4b96      	ldr	r3, [pc, #600]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 030c 	and.w	r3, r3, #12
 8003824:	2b04      	cmp	r3, #4
 8003826:	d00c      	beq.n	8003842 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003828:	4b93      	ldr	r3, [pc, #588]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b08      	cmp	r3, #8
 8003832:	d112      	bne.n	800385a <HAL_RCC_OscConfig+0x62>
 8003834:	4b90      	ldr	r3, [pc, #576]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003840:	d10b      	bne.n	800385a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003842:	4b8d      	ldr	r3, [pc, #564]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d06c      	beq.n	8003928 <HAL_RCC_OscConfig+0x130>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d168      	bne.n	8003928 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e26b      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x7a>
 8003864:	4b84      	ldr	r3, [pc, #528]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a83      	ldr	r2, [pc, #524]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800386a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	e02e      	b.n	80038d0 <HAL_RCC_OscConfig+0xd8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x9c>
 800387a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	4b7c      	ldr	r3, [pc, #496]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7b      	ldr	r2, [pc, #492]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800388c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e01d      	b.n	80038d0 <HAL_RCC_OscConfig+0xd8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0xc0>
 800389e:	4b76      	ldr	r3, [pc, #472]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a75      	ldr	r2, [pc, #468]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b73      	ldr	r3, [pc, #460]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a72      	ldr	r2, [pc, #456]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e00b      	b.n	80038d0 <HAL_RCC_OscConfig+0xd8>
 80038b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7ff f896 	bl	8002a08 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7ff f892 	bl	8002a08 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	@ 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e21f      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b61      	ldr	r3, [pc, #388]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0xe8>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7ff f882 	bl	8002a08 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003908:	f7ff f87e 	bl	8002a08 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	@ 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e20b      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	4b57      	ldr	r3, [pc, #348]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x110>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d069      	beq.n	8003a0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003936:	4b50      	ldr	r3, [pc, #320]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003942:	4b4d      	ldr	r3, [pc, #308]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b08      	cmp	r3, #8
 800394c:	d11c      	bne.n	8003988 <HAL_RCC_OscConfig+0x190>
 800394e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d116      	bne.n	8003988 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395a:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_RCC_OscConfig+0x17a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d001      	beq.n	8003972 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e1df      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003972:	4b41      	ldr	r3, [pc, #260]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	493d      	ldr	r1, [pc, #244]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003982:	4313      	orrs	r3, r2
 8003984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003986:	e040      	b.n	8003a0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d023      	beq.n	80039d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003990:	4b39      	ldr	r3, [pc, #228]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a38      	ldr	r2, [pc, #224]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7ff f834 	bl	8002a08 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a4:	f7ff f830 	bl	8002a08 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e1bd      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b6:	4b30      	ldr	r3, [pc, #192]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4929      	ldr	r1, [pc, #164]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]
 80039d6:	e018      	b.n	8003a0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d8:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a26      	ldr	r2, [pc, #152]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7ff f810 	bl	8002a08 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ec:	f7ff f80c 	bl	8002a08 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e199      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f0      	bne.n	80039ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d038      	beq.n	8003a88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d019      	beq.n	8003a52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a1e:	4b16      	ldr	r3, [pc, #88]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a22:	4a15      	ldr	r2, [pc, #84]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fe ffed 	bl	8002a08 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a32:	f7fe ffe9 	bl	8002a08 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e176      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a44:	4b0c      	ldr	r3, [pc, #48]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x23a>
 8003a50:	e01a      	b.n	8003a88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a52:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a56:	4a08      	ldr	r2, [pc, #32]	@ (8003a78 <HAL_RCC_OscConfig+0x280>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fe ffd3 	bl	8002a08 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a66:	f7fe ffcf 	bl	8002a08 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d903      	bls.n	8003a7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e15c      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
 8003a78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7c:	4b91      	ldr	r3, [pc, #580]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ee      	bne.n	8003a66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80a4 	beq.w	8003bde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a96:	4b8b      	ldr	r3, [pc, #556]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10d      	bne.n	8003abe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa2:	4b88      	ldr	r3, [pc, #544]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	4a87      	ldr	r2, [pc, #540]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aae:	4b85      	ldr	r3, [pc, #532]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abe:	4b82      	ldr	r3, [pc, #520]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d118      	bne.n	8003afc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003aca:	4b7f      	ldr	r3, [pc, #508]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a7e      	ldr	r2, [pc, #504]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad6:	f7fe ff97 	bl	8002a08 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ade:	f7fe ff93 	bl	8002a08 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b64      	cmp	r3, #100	@ 0x64
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e120      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af0:	4b75      	ldr	r3, [pc, #468]	@ (8003cc8 <HAL_RCC_OscConfig+0x4d0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d106      	bne.n	8003b12 <HAL_RCC_OscConfig+0x31a>
 8003b04:	4b6f      	ldr	r3, [pc, #444]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	4a6e      	ldr	r2, [pc, #440]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b10:	e02d      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x33c>
 8003b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1e:	4a69      	ldr	r2, [pc, #420]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b26:	4b67      	ldr	r3, [pc, #412]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a66      	ldr	r2, [pc, #408]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b32:	e01c      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	d10c      	bne.n	8003b56 <HAL_RCC_OscConfig+0x35e>
 8003b3c:	4b61      	ldr	r3, [pc, #388]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b40:	4a60      	ldr	r2, [pc, #384]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b42:	f043 0304 	orr.w	r3, r3, #4
 8003b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b48:	4b5e      	ldr	r3, [pc, #376]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b54:	e00b      	b.n	8003b6e <HAL_RCC_OscConfig+0x376>
 8003b56:	4b5b      	ldr	r3, [pc, #364]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	4a5a      	ldr	r2, [pc, #360]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b62:	4b58      	ldr	r3, [pc, #352]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b66:	4a57      	ldr	r2, [pc, #348]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b68:	f023 0304 	bic.w	r3, r3, #4
 8003b6c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d015      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b76:	f7fe ff47 	bl	8002a08 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fe ff43 	bl	8002a08 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e0ce      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	4b4b      	ldr	r3, [pc, #300]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ee      	beq.n	8003b7e <HAL_RCC_OscConfig+0x386>
 8003ba0:	e014      	b.n	8003bcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fe ff31 	bl	8002a08 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba8:	e00a      	b.n	8003bc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003baa:	f7fe ff2d 	bl	8002a08 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e0b8      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc0:	4b40      	ldr	r3, [pc, #256]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1ee      	bne.n	8003baa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d105      	bne.n	8003bde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd2:	4b3c      	ldr	r3, [pc, #240]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bdc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80a4 	beq.w	8003d30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003be8:	4b36      	ldr	r3, [pc, #216]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d06b      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d149      	bne.n	8003c90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfc:	4b31      	ldr	r3, [pc, #196]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a30      	ldr	r2, [pc, #192]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe fefe 	bl	8002a08 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c10:	f7fe fefa 	bl	8002a08 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e087      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c22:	4b28      	ldr	r3, [pc, #160]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	019b      	lsls	r3, r3, #6
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	3b01      	subs	r3, #1
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	4313      	orrs	r3, r2
 8003c54:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003c56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c5c:	4b19      	ldr	r3, [pc, #100]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a18      	ldr	r2, [pc, #96]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fe fece 	bl	8002a08 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fe feca 	bl	8002a08 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e057      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c82:	4b10      	ldr	r3, [pc, #64]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x478>
 8003c8e:	e04f      	b.n	8003d30 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c90:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0b      	ldr	r2, [pc, #44]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fe feb4 	bl	8002a08 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fe feb0 	bl	8002a08 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e03d      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb6:	4b03      	ldr	r3, [pc, #12]	@ (8003cc4 <HAL_RCC_OscConfig+0x4cc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4ac>
 8003cc2:	e035      	b.n	8003d30 <HAL_RCC_OscConfig+0x538>
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <HAL_RCC_OscConfig+0x544>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d028      	beq.n	8003d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d121      	bne.n	8003d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d11a      	bne.n	8003d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d111      	bne.n	8003d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	3b01      	subs	r3, #1
 8003d16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d107      	bne.n	8003d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800

08003d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d0      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d58:	4b6a      	ldr	r3, [pc, #424]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d910      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b67      	ldr	r3, [pc, #412]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 020f 	bic.w	r2, r3, #15
 8003d6e:	4965      	ldr	r1, [pc, #404]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b63      	ldr	r3, [pc, #396]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0b8      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da0:	4b59      	ldr	r3, [pc, #356]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a58      	ldr	r2, [pc, #352]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003daa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db8:	4b53      	ldr	r3, [pc, #332]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc4:	4b50      	ldr	r3, [pc, #320]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	494d      	ldr	r1, [pc, #308]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d040      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b47      	ldr	r3, [pc, #284]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d115      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e02:	4b41      	ldr	r3, [pc, #260]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e073      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e12:	4b3d      	ldr	r3, [pc, #244]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06b      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e22:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 0203 	bic.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4936      	ldr	r1, [pc, #216]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e34:	f7fe fde8 	bl	8002a08 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7fe fde4 	bl	8002a08 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e053      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e52:	4b2d      	ldr	r3, [pc, #180]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 020c 	and.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1eb      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e64:	4b27      	ldr	r3, [pc, #156]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d210      	bcs.n	8003e94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 020f 	bic.w	r2, r3, #15
 8003e7a:	4922      	ldr	r1, [pc, #136]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b20      	ldr	r3, [pc, #128]	@ (8003f04 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e032      	b.n	8003efa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4916      	ldr	r1, [pc, #88]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ebe:	4b12      	ldr	r3, [pc, #72]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	490e      	ldr	r1, [pc, #56]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ed2:	f000 f821 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <HAL_RCC_ClockConfig+0x1c8>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	490a      	ldr	r1, [pc, #40]	@ (8003f0c <HAL_RCC_ClockConfig+0x1cc>)
 8003ee4:	5ccb      	ldrb	r3, [r1, r3]
 8003ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eea:	4a09      	ldr	r2, [pc, #36]	@ (8003f10 <HAL_RCC_ClockConfig+0x1d0>)
 8003eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eee:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <HAL_RCC_ClockConfig+0x1d4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fd44 	bl	8002980 <HAL_InitTick>

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40023c00 	.word	0x40023c00
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	08007608 	.word	0x08007608
 8003f10:	2000036c 	.word	0x2000036c
 8003f14:	20000370 	.word	0x20000370

08003f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f1c:	b094      	sub	sp, #80	@ 0x50
 8003f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f24:	2300      	movs	r3, #0
 8003f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f28:	2300      	movs	r3, #0
 8003f2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f30:	4b79      	ldr	r3, [pc, #484]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 030c 	and.w	r3, r3, #12
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d00d      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x40>
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	f200 80e1 	bhi.w	8004104 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0x34>
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d003      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f4a:	e0db      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f4c:	4b73      	ldr	r3, [pc, #460]	@ (800411c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f50:	e0db      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f52:	4b73      	ldr	r3, [pc, #460]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f56:	e0d8      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f58:	4b6f      	ldr	r3, [pc, #444]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f60:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f62:	4b6d      	ldr	r3, [pc, #436]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d063      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	099b      	lsrs	r3, r3, #6
 8003f74:	2200      	movs	r2, #0
 8003f76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f80:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f82:	2300      	movs	r3, #0
 8003f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f8a:	4622      	mov	r2, r4
 8003f8c:	462b      	mov	r3, r5
 8003f8e:	f04f 0000 	mov.w	r0, #0
 8003f92:	f04f 0100 	mov.w	r1, #0
 8003f96:	0159      	lsls	r1, r3, #5
 8003f98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f9c:	0150      	lsls	r0, r2, #5
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	1a51      	subs	r1, r2, r1
 8003fa6:	6139      	str	r1, [r7, #16]
 8003fa8:	4629      	mov	r1, r5
 8003faa:	eb63 0301 	sbc.w	r3, r3, r1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	018b      	lsls	r3, r1, #6
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	018a      	lsls	r2, r1, #6
 8003fca:	4651      	mov	r1, sl
 8003fcc:	ebb2 0801 	subs.w	r8, r2, r1
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	eb63 0901 	sbc.w	r9, r3, r1
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fea:	4690      	mov	r8, r2
 8003fec:	4699      	mov	r9, r3
 8003fee:	4623      	mov	r3, r4
 8003ff0:	eb18 0303 	adds.w	r3, r8, r3
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	462b      	mov	r3, r5
 8003ff8:	eb49 0303 	adc.w	r3, r9, r3
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800400a:	4629      	mov	r1, r5
 800400c:	024b      	lsls	r3, r1, #9
 800400e:	4621      	mov	r1, r4
 8004010:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004014:	4621      	mov	r1, r4
 8004016:	024a      	lsls	r2, r1, #9
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800401e:	2200      	movs	r2, #0
 8004020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004022:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004024:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004028:	f7fc f8ee 	bl	8000208 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4613      	mov	r3, r2
 8004032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004034:	e058      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004036:	4b38      	ldr	r3, [pc, #224]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	099b      	lsrs	r3, r3, #6
 800403c:	2200      	movs	r2, #0
 800403e:	4618      	mov	r0, r3
 8004040:	4611      	mov	r1, r2
 8004042:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004046:	623b      	str	r3, [r7, #32]
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
 800404c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004050:	4642      	mov	r2, r8
 8004052:	464b      	mov	r3, r9
 8004054:	f04f 0000 	mov.w	r0, #0
 8004058:	f04f 0100 	mov.w	r1, #0
 800405c:	0159      	lsls	r1, r3, #5
 800405e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004062:	0150      	lsls	r0, r2, #5
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4641      	mov	r1, r8
 800406a:	ebb2 0a01 	subs.w	sl, r2, r1
 800406e:	4649      	mov	r1, r9
 8004070:	eb63 0b01 	sbc.w	fp, r3, r1
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004080:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004084:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004088:	ebb2 040a 	subs.w	r4, r2, sl
 800408c:	eb63 050b 	sbc.w	r5, r3, fp
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	00eb      	lsls	r3, r5, #3
 800409a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800409e:	00e2      	lsls	r2, r4, #3
 80040a0:	4614      	mov	r4, r2
 80040a2:	461d      	mov	r5, r3
 80040a4:	4643      	mov	r3, r8
 80040a6:	18e3      	adds	r3, r4, r3
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	464b      	mov	r3, r9
 80040ac:	eb45 0303 	adc.w	r3, r5, r3
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040be:	4629      	mov	r1, r5
 80040c0:	028b      	lsls	r3, r1, #10
 80040c2:	4621      	mov	r1, r4
 80040c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040c8:	4621      	mov	r1, r4
 80040ca:	028a      	lsls	r2, r1, #10
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040d2:	2200      	movs	r2, #0
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	61fa      	str	r2, [r7, #28]
 80040d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040dc:	f7fc f894 	bl	8000208 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4613      	mov	r3, r2
 80040e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	3301      	adds	r3, #1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004102:	e002      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004104:	4b05      	ldr	r3, [pc, #20]	@ (800411c <HAL_RCC_GetSysClockFreq+0x204>)
 8004106:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800410c:	4618      	mov	r0, r3
 800410e:	3750      	adds	r7, #80	@ 0x50
 8004110:	46bd      	mov	sp, r7
 8004112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	00f42400 	.word	0x00f42400
 8004120:	007a1200 	.word	0x007a1200

08004124 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004128:	4b03      	ldr	r3, [pc, #12]	@ (8004138 <HAL_RCC_GetHCLKFreq+0x14>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	2000036c 	.word	0x2000036c

0800413c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004140:	f7ff fff0 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b05      	ldr	r3, [pc, #20]	@ (800415c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	0a9b      	lsrs	r3, r3, #10
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4903      	ldr	r1, [pc, #12]	@ (8004160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004158:	4618      	mov	r0, r3
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40023800 	.word	0x40023800
 8004160:	08007618 	.word	0x08007618

08004164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004168:	f7ff ffdc 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	0b5b      	lsrs	r3, r3, #13
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	4903      	ldr	r1, [pc, #12]	@ (8004188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40023800 	.word	0x40023800
 8004188:	08007618 	.word	0x08007618

0800418c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d012      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041b4:	4b69      	ldr	r3, [pc, #420]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	4a68      	ldr	r2, [pc, #416]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80041be:	6093      	str	r3, [r2, #8]
 80041c0:	4b66      	ldr	r3, [pc, #408]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c8:	4964      	ldr	r1, [pc, #400]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041d6:	2301      	movs	r3, #1
 80041d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d017      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e6:	4b5d      	ldr	r3, [pc, #372]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f4:	4959      	ldr	r1, [pc, #356]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004200:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004204:	d101      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004206:	2301      	movs	r3, #1
 8004208:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004212:	2301      	movs	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d017      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004222:	4b4e      	ldr	r3, [pc, #312]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004228:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	494a      	ldr	r1, [pc, #296]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004240:	d101      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004242:	2301      	movs	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800424e:	2301      	movs	r3, #1
 8004250:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 808b 	beq.w	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004270:	4b3a      	ldr	r3, [pc, #232]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004274:	4a39      	ldr	r2, [pc, #228]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800427a:	6413      	str	r3, [r2, #64]	@ 0x40
 800427c:	4b37      	ldr	r3, [pc, #220]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004288:	4b35      	ldr	r3, [pc, #212]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a34      	ldr	r2, [pc, #208]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800428e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004292:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004294:	f7fe fbb8 	bl	8002a08 <HAL_GetTick>
 8004298:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800429c:	f7fe fbb4 	bl	8002a08 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	@ 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e357      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042ba:	4b28      	ldr	r3, [pc, #160]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d035      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d02e      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042d8:	4b20      	ldr	r3, [pc, #128]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042e2:	4b1e      	ldr	r3, [pc, #120]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e6:	4a1d      	ldr	r2, [pc, #116]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ec:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ee:	4b1b      	ldr	r3, [pc, #108]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f2:	4a1a      	ldr	r2, [pc, #104]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042fa:	4a18      	ldr	r2, [pc, #96]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004300:	4b16      	ldr	r3, [pc, #88]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b01      	cmp	r3, #1
 800430a:	d114      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fe fb7c 	bl	8002a08 <HAL_GetTick>
 8004310:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004312:	e00a      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004314:	f7fe fb78 	bl	8002a08 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e319      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432a:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0ee      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004342:	d111      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004350:	4b04      	ldr	r3, [pc, #16]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004352:	400b      	ands	r3, r1
 8004354:	4901      	ldr	r1, [pc, #4]	@ (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
 800435a:	e00b      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800435c:	40023800 	.word	0x40023800
 8004360:	40007000 	.word	0x40007000
 8004364:	0ffffcff 	.word	0x0ffffcff
 8004368:	4baa      	ldr	r3, [pc, #680]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4aa9      	ldr	r2, [pc, #676]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004372:	6093      	str	r3, [r2, #8]
 8004374:	4ba7      	ldr	r3, [pc, #668]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004376:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004380:	49a4      	ldr	r1, [pc, #656]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004382:	4313      	orrs	r3, r2
 8004384:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	d010      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004392:	4ba0      	ldr	r3, [pc, #640]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004398:	4a9e      	ldr	r2, [pc, #632]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800439e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80043a2:	4b9c      	ldr	r3, [pc, #624]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ac:	4999      	ldr	r1, [pc, #612]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043c0:	4b94      	ldr	r3, [pc, #592]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043ce:	4991      	ldr	r1, [pc, #580]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043e2:	4b8c      	ldr	r3, [pc, #560]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043f0:	4988      	ldr	r1, [pc, #544]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004404:	4b83      	ldr	r3, [pc, #524]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800440a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004412:	4980      	ldr	r1, [pc, #512]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004426:	4b7b      	ldr	r3, [pc, #492]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004434:	4977      	ldr	r1, [pc, #476]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004436:	4313      	orrs	r3, r2
 8004438:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004448:	4b72      	ldr	r3, [pc, #456]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444e:	f023 0203 	bic.w	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	496f      	ldr	r1, [pc, #444]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800446a:	4b6a      	ldr	r3, [pc, #424]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004470:	f023 020c 	bic.w	r2, r3, #12
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004478:	4966      	ldr	r1, [pc, #408]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447a:	4313      	orrs	r3, r2
 800447c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800448c:	4b61      	ldr	r3, [pc, #388]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004492:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449a:	495e      	ldr	r1, [pc, #376]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044ae:	4b59      	ldr	r3, [pc, #356]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044bc:	4955      	ldr	r1, [pc, #340]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044d0:	4b50      	ldr	r3, [pc, #320]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044de:	494d      	ldr	r1, [pc, #308]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80044f2:	4b48      	ldr	r3, [pc, #288]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004500:	4944      	ldr	r1, [pc, #272]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004514:	4b3f      	ldr	r3, [pc, #252]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004522:	493c      	ldr	r1, [pc, #240]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004536:	4b37      	ldr	r3, [pc, #220]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004544:	4933      	ldr	r1, [pc, #204]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004558:	4b2e      	ldr	r3, [pc, #184]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004566:	492b      	ldr	r1, [pc, #172]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d011      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800457a:	4b26      	ldr	r3, [pc, #152]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800457c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004580:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004588:	4922      	ldr	r1, [pc, #136]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004594:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004598:	d101      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800459a:	2301      	movs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045ba:	4b16      	ldr	r3, [pc, #88]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c8:	4912      	ldr	r1, [pc, #72]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ec:	4909      	ldr	r1, [pc, #36]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d006      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80d9 	beq.w	80047ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004608:	4b02      	ldr	r3, [pc, #8]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a01      	ldr	r2, [pc, #4]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800460e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004612:	e001      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004614:	40023800 	.word	0x40023800
 8004618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461a:	f7fe f9f5 	bl	8002a08 <HAL_GetTick>
 800461e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004622:	f7fe f9f1 	bl	8002a08 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b64      	cmp	r3, #100	@ 0x64
 800462e:	d901      	bls.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e194      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004634:	4b6c      	ldr	r3, [pc, #432]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d021      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004650:	2b00      	cmp	r3, #0
 8004652:	d11d      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004654:	4b64      	ldr	r3, [pc, #400]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800465a:	0c1b      	lsrs	r3, r3, #16
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004662:	4b61      	ldr	r3, [pc, #388]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004668:	0e1b      	lsrs	r3, r3, #24
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	019a      	lsls	r2, r3, #6
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	041b      	lsls	r3, r3, #16
 800467a:	431a      	orrs	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	061b      	lsls	r3, r3, #24
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	071b      	lsls	r3, r3, #28
 8004688:	4957      	ldr	r1, [pc, #348]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046a4:	d00a      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d02e      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046ba:	d129      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046bc:	4b4a      	ldr	r3, [pc, #296]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046ca:	4b47      	ldr	r3, [pc, #284]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046d0:	0f1b      	lsrs	r3, r3, #28
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	019a      	lsls	r2, r3, #6
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	061b      	lsls	r3, r3, #24
 80046ea:	431a      	orrs	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	071b      	lsls	r3, r3, #28
 80046f0:	493d      	ldr	r1, [pc, #244]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046f8:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046fe:	f023 021f 	bic.w	r2, r3, #31
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	3b01      	subs	r3, #1
 8004708:	4937      	ldr	r1, [pc, #220]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01d      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800471c:	4b32      	ldr	r3, [pc, #200]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004722:	0e1b      	lsrs	r3, r3, #24
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004730:	0f1b      	lsrs	r3, r3, #28
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	019a      	lsls	r2, r3, #6
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	431a      	orrs	r2, r3
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	431a      	orrs	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	071b      	lsls	r3, r3, #28
 8004750:	4925      	ldr	r1, [pc, #148]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d011      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	019a      	lsls	r2, r3, #6
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	061b      	lsls	r3, r3, #24
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	071b      	lsls	r3, r3, #28
 8004780:	4919      	ldr	r1, [pc, #100]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004788:	4b17      	ldr	r3, [pc, #92]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a16      	ldr	r2, [pc, #88]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800478e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004794:	f7fe f938 	bl	8002a08 <HAL_GetTick>
 8004798:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800479c:	f7fe f934 	bl	8002a08 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e0d7      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047ae:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	f040 80cd 	bne.w	800495c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047c2:	4b09      	ldr	r3, [pc, #36]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a08      	ldr	r2, [pc, #32]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ce:	f7fe f91b 	bl	8002a08 <HAL_GetTick>
 80047d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047d4:	e00a      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047d6:	f7fe f917 	bl	8002a08 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b64      	cmp	r3, #100	@ 0x64
 80047e2:	d903      	bls.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e0ba      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80047e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047f8:	d0ed      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004816:	2b00      	cmp	r3, #0
 8004818:	d02e      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d12a      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004822:	4b51      	ldr	r3, [pc, #324]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004830:	4b4d      	ldr	r3, [pc, #308]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	0f1b      	lsrs	r3, r3, #28
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	019a      	lsls	r2, r3, #6
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	061b      	lsls	r3, r3, #24
 8004850:	431a      	orrs	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	071b      	lsls	r3, r3, #28
 8004856:	4944      	ldr	r1, [pc, #272]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800485e:	4b42      	ldr	r3, [pc, #264]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004864:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486c:	3b01      	subs	r3, #1
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	493d      	ldr	r1, [pc, #244]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d022      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004888:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800488c:	d11d      	bne.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800488e:	4b36      	ldr	r3, [pc, #216]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004894:	0e1b      	lsrs	r3, r3, #24
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800489c:	4b32      	ldr	r3, [pc, #200]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a2:	0f1b      	lsrs	r3, r3, #28
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	019a      	lsls	r2, r3, #6
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	041b      	lsls	r3, r3, #16
 80048b6:	431a      	orrs	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	431a      	orrs	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	4929      	ldr	r1, [pc, #164]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d028      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048d6:	4b24      	ldr	r3, [pc, #144]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048dc:	0e1b      	lsrs	r3, r3, #24
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048e4:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ea:	0c1b      	lsrs	r3, r3, #16
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	019a      	lsls	r2, r3, #6
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	041b      	lsls	r3, r3, #16
 80048fc:	431a      	orrs	r2, r3
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	4917      	ldr	r1, [pc, #92]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004912:	4b15      	ldr	r3, [pc, #84]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004918:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004920:	4911      	ldr	r1, [pc, #68]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004928:	4b0f      	ldr	r3, [pc, #60]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a0e      	ldr	r2, [pc, #56]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800492e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004934:	f7fe f868 	bl	8002a08 <HAL_GetTick>
 8004938:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800493a:	e008      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800493c:	f7fe f864 	bl	8002a08 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	@ 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e007      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800494e:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800495a:	d1ef      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800

0800496c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e049      	b.n	8004a12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fd fe96 	bl	80026c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 faa8 	bl	8004f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d001      	beq.n	8004a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e054      	b.n	8004ade <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a26      	ldr	r2, [pc, #152]	@ (8004aec <HAL_TIM_Base_Start_IT+0xd0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d022      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0x80>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a5e:	d01d      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a22      	ldr	r2, [pc, #136]	@ (8004af0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d018      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0x80>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a21      	ldr	r2, [pc, #132]	@ (8004af4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0x80>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1f      	ldr	r2, [pc, #124]	@ (8004af8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00e      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0x80>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1e      	ldr	r2, [pc, #120]	@ (8004afc <HAL_TIM_Base_Start_IT+0xe0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d009      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0x80>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b00 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d004      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0x80>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d115      	bne.n	8004ac8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	4b19      	ldr	r3, [pc, #100]	@ (8004b08 <HAL_TIM_Base_Start_IT+0xec>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b06      	cmp	r3, #6
 8004aac:	d015      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0xbe>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab4:	d011      	beq.n	8004ada <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0201 	orr.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac6:	e008      	b.n	8004ada <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e000      	b.n	8004adc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ada:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00
 8004afc:	40010400 	.word	0x40010400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40001800 	.word	0x40001800
 8004b08:	00010007 	.word	0x00010007

08004b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d020      	beq.n	8004b70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01b      	beq.n	8004b70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0202 	mvn.w	r2, #2
 8004b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f9b4 	bl	8004ec4 <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f9a6 	bl	8004eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f9b7 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d020      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01b      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0204 	mvn.w	r2, #4
 8004b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2202      	movs	r2, #2
 8004b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f98e 	bl	8004ec4 <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f980 	bl	8004eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f991 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d020      	beq.n	8004c08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0208 	mvn.w	r2, #8
 8004bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2204      	movs	r2, #4
 8004bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f968 	bl	8004ec4 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f95a 	bl	8004eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f96b 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0210 	mvn.w	r2, #16
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f942 	bl	8004ec4 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f934 	bl	8004eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f945 	bl	8004ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00c      	beq.n	8004c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0201 	mvn.w	r2, #1
 8004c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fb fc40 	bl	80004f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00c      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fb0b 	bl	80052bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00c      	beq.n	8004cca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fb03 	bl	80052d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00c      	beq.n	8004cee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f8ff 	bl	8004eec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00c      	beq.n	8004d12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d007      	beq.n	8004d12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f06f 0220 	mvn.w	r2, #32
 8004d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 facb 	bl	80052a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_TIM_ConfigClockSource+0x1c>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e0b4      	b.n	8004ea2 <HAL_TIM_ConfigClockSource+0x186>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	4b56      	ldr	r3, [pc, #344]	@ (8004eac <HAL_TIM_ConfigClockSource+0x190>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d70:	d03e      	beq.n	8004df0 <HAL_TIM_ConfigClockSource+0xd4>
 8004d72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d76:	f200 8087 	bhi.w	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d7e:	f000 8086 	beq.w	8004e8e <HAL_TIM_ConfigClockSource+0x172>
 8004d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d86:	d87f      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d88:	2b70      	cmp	r3, #112	@ 0x70
 8004d8a:	d01a      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0xa6>
 8004d8c:	2b70      	cmp	r3, #112	@ 0x70
 8004d8e:	d87b      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d90:	2b60      	cmp	r3, #96	@ 0x60
 8004d92:	d050      	beq.n	8004e36 <HAL_TIM_ConfigClockSource+0x11a>
 8004d94:	2b60      	cmp	r3, #96	@ 0x60
 8004d96:	d877      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b50      	cmp	r3, #80	@ 0x50
 8004d9a:	d03c      	beq.n	8004e16 <HAL_TIM_ConfigClockSource+0xfa>
 8004d9c:	2b50      	cmp	r3, #80	@ 0x50
 8004d9e:	d873      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b40      	cmp	r3, #64	@ 0x40
 8004da2:	d058      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0x13a>
 8004da4:	2b40      	cmp	r3, #64	@ 0x40
 8004da6:	d86f      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004da8:	2b30      	cmp	r3, #48	@ 0x30
 8004daa:	d064      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004dac:	2b30      	cmp	r3, #48	@ 0x30
 8004dae:	d86b      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d060      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	d867      	bhi.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d05c      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d05a      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x15a>
 8004dc0:	e062      	b.n	8004e88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dd2:	f000 f9bb 	bl	800514c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	609a      	str	r2, [r3, #8]
      break;
 8004dee:	e04f      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e00:	f000 f9a4 	bl	800514c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e12:	609a      	str	r2, [r3, #8]
      break;
 8004e14:	e03c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e22:	461a      	mov	r2, r3
 8004e24:	f000 f918 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2150      	movs	r1, #80	@ 0x50
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f971 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004e34:	e02c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e42:	461a      	mov	r2, r3
 8004e44:	f000 f937 	bl	80050b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2160      	movs	r1, #96	@ 0x60
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f961 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004e54:	e01c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e62:	461a      	mov	r2, r3
 8004e64:	f000 f8f8 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2140      	movs	r1, #64	@ 0x40
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f951 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004e74:	e00c      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f000 f948 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004e86:	e003      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8c:	e000      	b.n	8004e90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	fffeff88 	.word	0xfffeff88

08004eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a46      	ldr	r2, [pc, #280]	@ (800502c <TIM_Base_SetConfig+0x12c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1e:	d00f      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a43      	ldr	r2, [pc, #268]	@ (8005030 <TIM_Base_SetConfig+0x130>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a42      	ldr	r2, [pc, #264]	@ (8005034 <TIM_Base_SetConfig+0x134>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a41      	ldr	r2, [pc, #260]	@ (8005038 <TIM_Base_SetConfig+0x138>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a40      	ldr	r2, [pc, #256]	@ (800503c <TIM_Base_SetConfig+0x13c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d108      	bne.n	8004f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a35      	ldr	r2, [pc, #212]	@ (800502c <TIM_Base_SetConfig+0x12c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d02b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f60:	d027      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a32      	ldr	r2, [pc, #200]	@ (8005030 <TIM_Base_SetConfig+0x130>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d023      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a31      	ldr	r2, [pc, #196]	@ (8005034 <TIM_Base_SetConfig+0x134>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01f      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a30      	ldr	r2, [pc, #192]	@ (8005038 <TIM_Base_SetConfig+0x138>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800503c <TIM_Base_SetConfig+0x13c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d017      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2e      	ldr	r2, [pc, #184]	@ (8005040 <TIM_Base_SetConfig+0x140>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005044 <TIM_Base_SetConfig+0x144>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00f      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2c      	ldr	r2, [pc, #176]	@ (8005048 <TIM_Base_SetConfig+0x148>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800504c <TIM_Base_SetConfig+0x14c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d007      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8005050 <TIM_Base_SetConfig+0x150>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a29      	ldr	r2, [pc, #164]	@ (8005054 <TIM_Base_SetConfig+0x154>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d108      	bne.n	8004fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a10      	ldr	r2, [pc, #64]	@ (800502c <TIM_Base_SetConfig+0x12c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0xf8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a12      	ldr	r2, [pc, #72]	@ (800503c <TIM_Base_SetConfig+0x13c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d103      	bne.n	8005000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b01      	cmp	r3, #1
 8005010:	d105      	bne.n	800501e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f023 0201 	bic.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	611a      	str	r2, [r3, #16]
  }
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40010400 	.word	0x40010400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800
 800504c:	40001800 	.word	0x40001800
 8005050:	40001c00 	.word	0x40001c00
 8005054:	40002000 	.word	0x40002000

08005058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f023 0201 	bic.w	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 030a 	bic.w	r3, r3, #10
 8005094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f023 0210 	bic.w	r2, r3, #16
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	f043 0307 	orr.w	r3, r3, #7
 8005138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	021a      	lsls	r2, r3, #8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	431a      	orrs	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4313      	orrs	r3, r2
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	609a      	str	r2, [r3, #8]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e06d      	b.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a30      	ldr	r2, [pc, #192]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d108      	bne.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a20      	ldr	r2, [pc, #128]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d022      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005216:	d01d      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1d      	ldr	r2, [pc, #116]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1c      	ldr	r2, [pc, #112]	@ (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1a      	ldr	r2, [pc, #104]	@ (800529c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a15      	ldr	r2, [pc, #84]	@ (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a16      	ldr	r2, [pc, #88]	@ (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a15      	ldr	r2, [pc, #84]	@ (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d10c      	bne.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800525a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	4313      	orrs	r3, r2
 8005264:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40010000 	.word	0x40010000
 8005290:	40010400 	.word	0x40010400
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40001800 	.word	0x40001800

080052a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e040      	b.n	8005378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fd fa02 	bl	8002710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2224      	movs	r2, #36	@ 0x24
 8005310:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fdd4 	bl	8005ed8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fb6d 	bl	8005a10 <UART_SetConfig>
 8005336:	4603      	mov	r3, r0
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e01b      	b.n	8005378 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800534e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800535e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fe53 	bl	800601c <UART_CheckIdleState>
 8005376:	4603      	mov	r3, r0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e048      	b.n	8005424 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fd f9b4 	bl	8002710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2224      	movs	r2, #36	@ 0x24
 80053ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fd86 	bl	8005ed8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fb1f 	bl	8005a10 <UART_SetConfig>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e023      	b.n	8005424 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80053fa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0208 	orr.w	r2, r2, #8
 800540a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fdfd 	bl	800601c <UART_CheckIdleState>
 8005422:	4603      	mov	r3, r0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b0ba      	sub	sp, #232	@ 0xe8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005452:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005456:	f640 030f 	movw	r3, #2063	@ 0x80f
 800545a:	4013      	ands	r3, r2
 800545c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d115      	bne.n	8005494 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00f      	beq.n	8005494 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8297 	beq.w	80059b8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	4798      	blx	r3
      }
      return;
 8005492:	e291      	b.n	80059b8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8117 	beq.w	80056cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800549e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80054ae:	4b85      	ldr	r3, [pc, #532]	@ (80056c4 <HAL_UART_IRQHandler+0x298>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 810a 	beq.w	80056cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d011      	beq.n	80054e8 <HAL_UART_IRQHandler+0xbc>
 80054c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2201      	movs	r2, #1
 80054d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054de:	f043 0201 	orr.w	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d011      	beq.n	8005518 <HAL_UART_IRQHandler+0xec>
 80054f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2202      	movs	r2, #2
 8005506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800550e:	f043 0204 	orr.w	r2, r3, #4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d011      	beq.n	8005548 <HAL_UART_IRQHandler+0x11c>
 8005524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2204      	movs	r2, #4
 8005536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800553e:	f043 0202 	orr.w	r2, r3, #2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d017      	beq.n	8005584 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005564:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2208      	movs	r2, #8
 8005572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800557a:	f043 0208 	orr.w	r2, r3, #8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800558c:	2b00      	cmp	r3, #0
 800558e:	d012      	beq.n	80055b6 <HAL_UART_IRQHandler+0x18a>
 8005590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00c      	beq.n	80055b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80055a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ac:	f043 0220 	orr.w	r2, r3, #32
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 81fd 	beq.w	80059bc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fe:	2b40      	cmp	r3, #64	@ 0x40
 8005600:	d005      	beq.n	800560e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005606:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800560a:	2b00      	cmp	r3, #0
 800560c:	d04f      	beq.n	80056ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fdc8 	bl	80061a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561e:	2b40      	cmp	r3, #64	@ 0x40
 8005620:	d141      	bne.n	80056a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3308      	adds	r3, #8
 8005628:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005638:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800563c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3308      	adds	r3, #8
 800564a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800564e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800565a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1d9      	bne.n	8005622 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005672:	2b00      	cmp	r3, #0
 8005674:	d013      	beq.n	800569e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800567a:	4a13      	ldr	r2, [pc, #76]	@ (80056c8 <HAL_UART_IRQHandler+0x29c>)
 800567c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005682:	4618      	mov	r0, r3
 8005684:	f7fd fb71 	bl	8002d6a <HAL_DMA_Abort_IT>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d017      	beq.n	80056be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005698:	4610      	mov	r0, r2
 800569a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569c:	e00f      	b.n	80056be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f9a0 	bl	80059e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	e00b      	b.n	80056be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f99c 	bl	80059e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ac:	e007      	b.n	80056be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f998 	bl	80059e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80056bc:	e17e      	b.n	80059bc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056be:	bf00      	nop
    return;
 80056c0:	e17c      	b.n	80059bc <HAL_UART_IRQHandler+0x590>
 80056c2:	bf00      	nop
 80056c4:	04000120 	.word	0x04000120
 80056c8:	0800626d 	.word	0x0800626d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	f040 814c 	bne.w	800596e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8145 	beq.w	800596e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 813e 	beq.w	800596e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2210      	movs	r2, #16
 80056f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005704:	2b40      	cmp	r3, #64	@ 0x40
 8005706:	f040 80b6 	bne.w	8005876 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005716:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8150 	beq.w	80059c0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800572a:	429a      	cmp	r2, r3
 800572c:	f080 8148 	bcs.w	80059c0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005736:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005744:	f000 8086 	beq.w	8005854 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800575c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005772:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005776:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800577e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800578a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1da      	bne.n	8005748 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3308      	adds	r3, #8
 8005798:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057a4:	f023 0301 	bic.w	r3, r3, #1
 80057a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3308      	adds	r3, #8
 80057b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e1      	bne.n	8005792 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3308      	adds	r3, #8
 80057d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3308      	adds	r3, #8
 80057ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e3      	bne.n	80057ce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005824:	f023 0310 	bic.w	r3, r3, #16
 8005828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005836:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005838:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800583c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e4      	bne.n	8005814 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800584e:	4618      	mov	r0, r3
 8005850:	f7fd fa1b 	bl	8002c8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005866:	b29b      	uxth	r3, r3
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	b29b      	uxth	r3, r3
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f8c2 	bl	80059f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005874:	e0a4      	b.n	80059c0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005882:	b29b      	uxth	r3, r3
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8096 	beq.w	80059c4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 8091 	beq.w	80059c4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e4      	bne.n	80058a2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	623b      	str	r3, [r7, #32]
   return(result);
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	f023 0301 	bic.w	r3, r3, #1
 80058ee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3308      	adds	r3, #8
 80058f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800590a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e3      	bne.n	80058d8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	60fb      	str	r3, [r7, #12]
   return(result);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f023 0310 	bic.w	r3, r3, #16
 8005938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	69b9      	ldr	r1, [r7, #24]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	617b      	str	r3, [r7, #20]
   return(result);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e4      	bne.n	8005924 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f846 	bl	80059f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800596c:	e02a      	b.n	80059c4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800596e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00e      	beq.n	8005998 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800597a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800597e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01c      	beq.n	80059c8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
    }
    return;
 8005996:	e017      	b.n	80059c8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d012      	beq.n	80059ca <HAL_UART_IRQHandler+0x59e>
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00c      	beq.n	80059ca <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fc71 	bl	8006298 <UART_EndTransmit_IT>
    return;
 80059b6:	e008      	b.n	80059ca <HAL_UART_IRQHandler+0x59e>
      return;
 80059b8:	bf00      	nop
 80059ba:	e006      	b.n	80059ca <HAL_UART_IRQHandler+0x59e>
    return;
 80059bc:	bf00      	nop
 80059be:	e004      	b.n	80059ca <HAL_UART_IRQHandler+0x59e>
      return;
 80059c0:	bf00      	nop
 80059c2:	e002      	b.n	80059ca <HAL_UART_IRQHandler+0x59e>
      return;
 80059c4:	bf00      	nop
 80059c6:	e000      	b.n	80059ca <HAL_UART_IRQHandler+0x59e>
    return;
 80059c8:	bf00      	nop
  }

}
 80059ca:	37e8      	adds	r7, #232	@ 0xe8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4ba6      	ldr	r3, [pc, #664]	@ (8005cd4 <UART_SetConfig+0x2c4>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6812      	ldr	r2, [r2, #0]
 8005a42:	6979      	ldr	r1, [r7, #20]
 8005a44:	430b      	orrs	r3, r1
 8005a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a94      	ldr	r2, [pc, #592]	@ (8005cd8 <UART_SetConfig+0x2c8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d120      	bne.n	8005ace <UART_SetConfig+0xbe>
 8005a8c:	4b93      	ldr	r3, [pc, #588]	@ (8005cdc <UART_SetConfig+0x2cc>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a92:	f003 0303 	and.w	r3, r3, #3
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d816      	bhi.n	8005ac8 <UART_SetConfig+0xb8>
 8005a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa0 <UART_SetConfig+0x90>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ab1 	.word	0x08005ab1
 8005aa4:	08005abd 	.word	0x08005abd
 8005aa8:	08005ab7 	.word	0x08005ab7
 8005aac:	08005ac3 	.word	0x08005ac3
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e150      	b.n	8005d58 <UART_SetConfig+0x348>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	77fb      	strb	r3, [r7, #31]
 8005aba:	e14d      	b.n	8005d58 <UART_SetConfig+0x348>
 8005abc:	2304      	movs	r3, #4
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e14a      	b.n	8005d58 <UART_SetConfig+0x348>
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e147      	b.n	8005d58 <UART_SetConfig+0x348>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e144      	b.n	8005d58 <UART_SetConfig+0x348>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a83      	ldr	r2, [pc, #524]	@ (8005ce0 <UART_SetConfig+0x2d0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d132      	bne.n	8005b3e <UART_SetConfig+0x12e>
 8005ad8:	4b80      	ldr	r3, [pc, #512]	@ (8005cdc <UART_SetConfig+0x2cc>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ade:	f003 030c 	and.w	r3, r3, #12
 8005ae2:	2b0c      	cmp	r3, #12
 8005ae4:	d828      	bhi.n	8005b38 <UART_SetConfig+0x128>
 8005ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8005aec <UART_SetConfig+0xdc>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005b21 	.word	0x08005b21
 8005af0:	08005b39 	.word	0x08005b39
 8005af4:	08005b39 	.word	0x08005b39
 8005af8:	08005b39 	.word	0x08005b39
 8005afc:	08005b2d 	.word	0x08005b2d
 8005b00:	08005b39 	.word	0x08005b39
 8005b04:	08005b39 	.word	0x08005b39
 8005b08:	08005b39 	.word	0x08005b39
 8005b0c:	08005b27 	.word	0x08005b27
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b39 	.word	0x08005b39
 8005b18:	08005b39 	.word	0x08005b39
 8005b1c:	08005b33 	.word	0x08005b33
 8005b20:	2300      	movs	r3, #0
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e118      	b.n	8005d58 <UART_SetConfig+0x348>
 8005b26:	2302      	movs	r3, #2
 8005b28:	77fb      	strb	r3, [r7, #31]
 8005b2a:	e115      	b.n	8005d58 <UART_SetConfig+0x348>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	77fb      	strb	r3, [r7, #31]
 8005b30:	e112      	b.n	8005d58 <UART_SetConfig+0x348>
 8005b32:	2308      	movs	r3, #8
 8005b34:	77fb      	strb	r3, [r7, #31]
 8005b36:	e10f      	b.n	8005d58 <UART_SetConfig+0x348>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e10c      	b.n	8005d58 <UART_SetConfig+0x348>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a68      	ldr	r2, [pc, #416]	@ (8005ce4 <UART_SetConfig+0x2d4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d120      	bne.n	8005b8a <UART_SetConfig+0x17a>
 8005b48:	4b64      	ldr	r3, [pc, #400]	@ (8005cdc <UART_SetConfig+0x2cc>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b52:	2b30      	cmp	r3, #48	@ 0x30
 8005b54:	d013      	beq.n	8005b7e <UART_SetConfig+0x16e>
 8005b56:	2b30      	cmp	r3, #48	@ 0x30
 8005b58:	d814      	bhi.n	8005b84 <UART_SetConfig+0x174>
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d009      	beq.n	8005b72 <UART_SetConfig+0x162>
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d810      	bhi.n	8005b84 <UART_SetConfig+0x174>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <UART_SetConfig+0x15c>
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d006      	beq.n	8005b78 <UART_SetConfig+0x168>
 8005b6a:	e00b      	b.n	8005b84 <UART_SetConfig+0x174>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e0f2      	b.n	8005d58 <UART_SetConfig+0x348>
 8005b72:	2302      	movs	r3, #2
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e0ef      	b.n	8005d58 <UART_SetConfig+0x348>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e0ec      	b.n	8005d58 <UART_SetConfig+0x348>
 8005b7e:	2308      	movs	r3, #8
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	e0e9      	b.n	8005d58 <UART_SetConfig+0x348>
 8005b84:	2310      	movs	r3, #16
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e0e6      	b.n	8005d58 <UART_SetConfig+0x348>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a56      	ldr	r2, [pc, #344]	@ (8005ce8 <UART_SetConfig+0x2d8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d120      	bne.n	8005bd6 <UART_SetConfig+0x1c6>
 8005b94:	4b51      	ldr	r3, [pc, #324]	@ (8005cdc <UART_SetConfig+0x2cc>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ba0:	d013      	beq.n	8005bca <UART_SetConfig+0x1ba>
 8005ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ba4:	d814      	bhi.n	8005bd0 <UART_SetConfig+0x1c0>
 8005ba6:	2b80      	cmp	r3, #128	@ 0x80
 8005ba8:	d009      	beq.n	8005bbe <UART_SetConfig+0x1ae>
 8005baa:	2b80      	cmp	r3, #128	@ 0x80
 8005bac:	d810      	bhi.n	8005bd0 <UART_SetConfig+0x1c0>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <UART_SetConfig+0x1a8>
 8005bb2:	2b40      	cmp	r3, #64	@ 0x40
 8005bb4:	d006      	beq.n	8005bc4 <UART_SetConfig+0x1b4>
 8005bb6:	e00b      	b.n	8005bd0 <UART_SetConfig+0x1c0>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e0cc      	b.n	8005d58 <UART_SetConfig+0x348>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	77fb      	strb	r3, [r7, #31]
 8005bc2:	e0c9      	b.n	8005d58 <UART_SetConfig+0x348>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	e0c6      	b.n	8005d58 <UART_SetConfig+0x348>
 8005bca:	2308      	movs	r3, #8
 8005bcc:	77fb      	strb	r3, [r7, #31]
 8005bce:	e0c3      	b.n	8005d58 <UART_SetConfig+0x348>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	77fb      	strb	r3, [r7, #31]
 8005bd4:	e0c0      	b.n	8005d58 <UART_SetConfig+0x348>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a44      	ldr	r2, [pc, #272]	@ (8005cec <UART_SetConfig+0x2dc>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d125      	bne.n	8005c2c <UART_SetConfig+0x21c>
 8005be0:	4b3e      	ldr	r3, [pc, #248]	@ (8005cdc <UART_SetConfig+0x2cc>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bee:	d017      	beq.n	8005c20 <UART_SetConfig+0x210>
 8005bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bf4:	d817      	bhi.n	8005c26 <UART_SetConfig+0x216>
 8005bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bfa:	d00b      	beq.n	8005c14 <UART_SetConfig+0x204>
 8005bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c00:	d811      	bhi.n	8005c26 <UART_SetConfig+0x216>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <UART_SetConfig+0x1fe>
 8005c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c0a:	d006      	beq.n	8005c1a <UART_SetConfig+0x20a>
 8005c0c:	e00b      	b.n	8005c26 <UART_SetConfig+0x216>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	77fb      	strb	r3, [r7, #31]
 8005c12:	e0a1      	b.n	8005d58 <UART_SetConfig+0x348>
 8005c14:	2302      	movs	r3, #2
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e09e      	b.n	8005d58 <UART_SetConfig+0x348>
 8005c1a:	2304      	movs	r3, #4
 8005c1c:	77fb      	strb	r3, [r7, #31]
 8005c1e:	e09b      	b.n	8005d58 <UART_SetConfig+0x348>
 8005c20:	2308      	movs	r3, #8
 8005c22:	77fb      	strb	r3, [r7, #31]
 8005c24:	e098      	b.n	8005d58 <UART_SetConfig+0x348>
 8005c26:	2310      	movs	r3, #16
 8005c28:	77fb      	strb	r3, [r7, #31]
 8005c2a:	e095      	b.n	8005d58 <UART_SetConfig+0x348>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2f      	ldr	r2, [pc, #188]	@ (8005cf0 <UART_SetConfig+0x2e0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d125      	bne.n	8005c82 <UART_SetConfig+0x272>
 8005c36:	4b29      	ldr	r3, [pc, #164]	@ (8005cdc <UART_SetConfig+0x2cc>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c44:	d017      	beq.n	8005c76 <UART_SetConfig+0x266>
 8005c46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c4a:	d817      	bhi.n	8005c7c <UART_SetConfig+0x26c>
 8005c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c50:	d00b      	beq.n	8005c6a <UART_SetConfig+0x25a>
 8005c52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c56:	d811      	bhi.n	8005c7c <UART_SetConfig+0x26c>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <UART_SetConfig+0x254>
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c60:	d006      	beq.n	8005c70 <UART_SetConfig+0x260>
 8005c62:	e00b      	b.n	8005c7c <UART_SetConfig+0x26c>
 8005c64:	2301      	movs	r3, #1
 8005c66:	77fb      	strb	r3, [r7, #31]
 8005c68:	e076      	b.n	8005d58 <UART_SetConfig+0x348>
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	77fb      	strb	r3, [r7, #31]
 8005c6e:	e073      	b.n	8005d58 <UART_SetConfig+0x348>
 8005c70:	2304      	movs	r3, #4
 8005c72:	77fb      	strb	r3, [r7, #31]
 8005c74:	e070      	b.n	8005d58 <UART_SetConfig+0x348>
 8005c76:	2308      	movs	r3, #8
 8005c78:	77fb      	strb	r3, [r7, #31]
 8005c7a:	e06d      	b.n	8005d58 <UART_SetConfig+0x348>
 8005c7c:	2310      	movs	r3, #16
 8005c7e:	77fb      	strb	r3, [r7, #31]
 8005c80:	e06a      	b.n	8005d58 <UART_SetConfig+0x348>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf4 <UART_SetConfig+0x2e4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d138      	bne.n	8005cfe <UART_SetConfig+0x2ee>
 8005c8c:	4b13      	ldr	r3, [pc, #76]	@ (8005cdc <UART_SetConfig+0x2cc>)
 8005c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c9a:	d017      	beq.n	8005ccc <UART_SetConfig+0x2bc>
 8005c9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ca0:	d82a      	bhi.n	8005cf8 <UART_SetConfig+0x2e8>
 8005ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca6:	d00b      	beq.n	8005cc0 <UART_SetConfig+0x2b0>
 8005ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cac:	d824      	bhi.n	8005cf8 <UART_SetConfig+0x2e8>
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <UART_SetConfig+0x2aa>
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cb6:	d006      	beq.n	8005cc6 <UART_SetConfig+0x2b6>
 8005cb8:	e01e      	b.n	8005cf8 <UART_SetConfig+0x2e8>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	77fb      	strb	r3, [r7, #31]
 8005cbe:	e04b      	b.n	8005d58 <UART_SetConfig+0x348>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	e048      	b.n	8005d58 <UART_SetConfig+0x348>
 8005cc6:	2304      	movs	r3, #4
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e045      	b.n	8005d58 <UART_SetConfig+0x348>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	77fb      	strb	r3, [r7, #31]
 8005cd0:	e042      	b.n	8005d58 <UART_SetConfig+0x348>
 8005cd2:	bf00      	nop
 8005cd4:	efff69f3 	.word	0xefff69f3
 8005cd8:	40011000 	.word	0x40011000
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40004400 	.word	0x40004400
 8005ce4:	40004800 	.word	0x40004800
 8005ce8:	40004c00 	.word	0x40004c00
 8005cec:	40005000 	.word	0x40005000
 8005cf0:	40011400 	.word	0x40011400
 8005cf4:	40007800 	.word	0x40007800
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	77fb      	strb	r3, [r7, #31]
 8005cfc:	e02c      	b.n	8005d58 <UART_SetConfig+0x348>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a72      	ldr	r2, [pc, #456]	@ (8005ecc <UART_SetConfig+0x4bc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d125      	bne.n	8005d54 <UART_SetConfig+0x344>
 8005d08:	4b71      	ldr	r3, [pc, #452]	@ (8005ed0 <UART_SetConfig+0x4c0>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005d12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d16:	d017      	beq.n	8005d48 <UART_SetConfig+0x338>
 8005d18:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d1c:	d817      	bhi.n	8005d4e <UART_SetConfig+0x33e>
 8005d1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d22:	d00b      	beq.n	8005d3c <UART_SetConfig+0x32c>
 8005d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d28:	d811      	bhi.n	8005d4e <UART_SetConfig+0x33e>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <UART_SetConfig+0x326>
 8005d2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d32:	d006      	beq.n	8005d42 <UART_SetConfig+0x332>
 8005d34:	e00b      	b.n	8005d4e <UART_SetConfig+0x33e>
 8005d36:	2300      	movs	r3, #0
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e00d      	b.n	8005d58 <UART_SetConfig+0x348>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e00a      	b.n	8005d58 <UART_SetConfig+0x348>
 8005d42:	2304      	movs	r3, #4
 8005d44:	77fb      	strb	r3, [r7, #31]
 8005d46:	e007      	b.n	8005d58 <UART_SetConfig+0x348>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e004      	b.n	8005d58 <UART_SetConfig+0x348>
 8005d4e:	2310      	movs	r3, #16
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e001      	b.n	8005d58 <UART_SetConfig+0x348>
 8005d54:	2310      	movs	r3, #16
 8005d56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d60:	d15b      	bne.n	8005e1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d62:	7ffb      	ldrb	r3, [r7, #31]
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d828      	bhi.n	8005dba <UART_SetConfig+0x3aa>
 8005d68:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <UART_SetConfig+0x360>)
 8005d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6e:	bf00      	nop
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005dbb 	.word	0x08005dbb
 8005d80:	08005dab 	.word	0x08005dab
 8005d84:	08005dbb 	.word	0x08005dbb
 8005d88:	08005dbb 	.word	0x08005dbb
 8005d8c:	08005dbb 	.word	0x08005dbb
 8005d90:	08005db3 	.word	0x08005db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d94:	f7fe f9d2 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 8005d98:	61b8      	str	r0, [r7, #24]
        break;
 8005d9a:	e013      	b.n	8005dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d9c:	f7fe f9e2 	bl	8004164 <HAL_RCC_GetPCLK2Freq>
 8005da0:	61b8      	str	r0, [r7, #24]
        break;
 8005da2:	e00f      	b.n	8005dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da4:	4b4b      	ldr	r3, [pc, #300]	@ (8005ed4 <UART_SetConfig+0x4c4>)
 8005da6:	61bb      	str	r3, [r7, #24]
        break;
 8005da8:	e00c      	b.n	8005dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005daa:	f7fe f8b5 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8005dae:	61b8      	str	r0, [r7, #24]
        break;
 8005db0:	e008      	b.n	8005dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005db6:	61bb      	str	r3, [r7, #24]
        break;
 8005db8:	e004      	b.n	8005dc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	77bb      	strb	r3, [r7, #30]
        break;
 8005dc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d074      	beq.n	8005eb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	005a      	lsls	r2, r3, #1
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	441a      	add	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b0f      	cmp	r3, #15
 8005de4:	d916      	bls.n	8005e14 <UART_SetConfig+0x404>
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dec:	d212      	bcs.n	8005e14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f023 030f 	bic.w	r3, r3, #15
 8005df6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	085b      	lsrs	r3, r3, #1
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	89fb      	ldrh	r3, [r7, #14]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	89fa      	ldrh	r2, [r7, #14]
 8005e10:	60da      	str	r2, [r3, #12]
 8005e12:	e04f      	b.n	8005eb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	77bb      	strb	r3, [r7, #30]
 8005e18:	e04c      	b.n	8005eb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e1a:	7ffb      	ldrb	r3, [r7, #31]
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d828      	bhi.n	8005e72 <UART_SetConfig+0x462>
 8005e20:	a201      	add	r2, pc, #4	@ (adr r2, 8005e28 <UART_SetConfig+0x418>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005e4d 	.word	0x08005e4d
 8005e2c:	08005e55 	.word	0x08005e55
 8005e30:	08005e5d 	.word	0x08005e5d
 8005e34:	08005e73 	.word	0x08005e73
 8005e38:	08005e63 	.word	0x08005e63
 8005e3c:	08005e73 	.word	0x08005e73
 8005e40:	08005e73 	.word	0x08005e73
 8005e44:	08005e73 	.word	0x08005e73
 8005e48:	08005e6b 	.word	0x08005e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e4c:	f7fe f976 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 8005e50:	61b8      	str	r0, [r7, #24]
        break;
 8005e52:	e013      	b.n	8005e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e54:	f7fe f986 	bl	8004164 <HAL_RCC_GetPCLK2Freq>
 8005e58:	61b8      	str	r0, [r7, #24]
        break;
 8005e5a:	e00f      	b.n	8005e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed4 <UART_SetConfig+0x4c4>)
 8005e5e:	61bb      	str	r3, [r7, #24]
        break;
 8005e60:	e00c      	b.n	8005e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e62:	f7fe f859 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8005e66:	61b8      	str	r0, [r7, #24]
        break;
 8005e68:	e008      	b.n	8005e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e6e:	61bb      	str	r3, [r7, #24]
        break;
 8005e70:	e004      	b.n	8005e7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	77bb      	strb	r3, [r7, #30]
        break;
 8005e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d018      	beq.n	8005eb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	085a      	lsrs	r2, r3, #1
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	441a      	add	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b0f      	cmp	r3, #15
 8005e9a:	d909      	bls.n	8005eb0 <UART_SetConfig+0x4a0>
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea2:	d205      	bcs.n	8005eb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60da      	str	r2, [r3, #12]
 8005eae:	e001      	b.n	8005eb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ec0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40007c00 	.word	0x40007c00
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	00f42400 	.word	0x00f42400

08005ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01a      	beq.n	8005fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fd6:	d10a      	bne.n	8005fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b08c      	sub	sp, #48	@ 0x30
 8006020:	af02      	add	r7, sp, #8
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800602c:	f7fc fcec 	bl	8002a08 <HAL_GetTick>
 8006030:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b08      	cmp	r3, #8
 800603e:	d12e      	bne.n	800609e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006040:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	2200      	movs	r2, #0
 800604a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f83b 	bl	80060ca <UART_WaitOnFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d021      	beq.n	800609e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	60fb      	str	r3, [r7, #12]
   return(result);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800606e:	623b      	str	r3, [r7, #32]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	69b9      	ldr	r1, [r7, #24]
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	617b      	str	r3, [r7, #20]
   return(result);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e6      	bne.n	800605a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e011      	b.n	80060c2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3728      	adds	r7, #40	@ 0x28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	603b      	str	r3, [r7, #0]
 80060d6:	4613      	mov	r3, r2
 80060d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060da:	e04f      	b.n	800617c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d04b      	beq.n	800617c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e4:	f7fc fc90 	bl	8002a08 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d302      	bcc.n	80060fa <UART_WaitOnFlagUntilTimeout+0x30>
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e04e      	b.n	800619c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d037      	beq.n	800617c <UART_WaitOnFlagUntilTimeout+0xb2>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b80      	cmp	r3, #128	@ 0x80
 8006110:	d034      	beq.n	800617c <UART_WaitOnFlagUntilTimeout+0xb2>
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2b40      	cmp	r3, #64	@ 0x40
 8006116:	d031      	beq.n	800617c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b08      	cmp	r3, #8
 8006124:	d110      	bne.n	8006148 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2208      	movs	r2, #8
 800612c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 f838 	bl	80061a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2208      	movs	r2, #8
 8006138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e029      	b.n	800619c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006152:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006156:	d111      	bne.n	800617c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006160:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f81e 	bl	80061a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e00f      	b.n	800619c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69da      	ldr	r2, [r3, #28]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4013      	ands	r3, r2
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	429a      	cmp	r2, r3
 800618a:	bf0c      	ite	eq
 800618c:	2301      	moveq	r3, #1
 800618e:	2300      	movne	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	461a      	mov	r2, r3
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	429a      	cmp	r2, r3
 8006198:	d0a0      	beq.n	80060dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b095      	sub	sp, #84	@ 0x54
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80061cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e6      	bne.n	80061ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3308      	adds	r3, #8
 80061e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3308      	adds	r3, #8
 80061fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e5      	bne.n	80061de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006216:	2b01      	cmp	r3, #1
 8006218:	d118      	bne.n	800624c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	60bb      	str	r3, [r7, #8]
   return(result);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f023 0310 	bic.w	r3, r3, #16
 800622e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6979      	ldr	r1, [r7, #20]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	613b      	str	r3, [r7, #16]
   return(result);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e6      	bne.n	800621a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006260:	bf00      	nop
 8006262:	3754      	adds	r7, #84	@ 0x54
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006278:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff fbaa 	bl	80059e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b4:	61fb      	str	r3, [r7, #28]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	61bb      	str	r3, [r7, #24]
 80062c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6979      	ldr	r1, [r7, #20]
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	613b      	str	r3, [r7, #16]
   return(result);
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e6      	bne.n	80062a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff fb76 	bl	80059d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062e4:	bf00      	nop
 80062e6:	3720      	adds	r7, #32
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <memcmp>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	3901      	subs	r1, #1
 80062f0:	4402      	add	r2, r0
 80062f2:	4290      	cmp	r0, r2
 80062f4:	d101      	bne.n	80062fa <memcmp+0xe>
 80062f6:	2000      	movs	r0, #0
 80062f8:	e005      	b.n	8006306 <memcmp+0x1a>
 80062fa:	7803      	ldrb	r3, [r0, #0]
 80062fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006300:	42a3      	cmp	r3, r4
 8006302:	d001      	beq.n	8006308 <memcmp+0x1c>
 8006304:	1b18      	subs	r0, r3, r4
 8006306:	bd10      	pop	{r4, pc}
 8006308:	3001      	adds	r0, #1
 800630a:	e7f2      	b.n	80062f2 <memcmp+0x6>

0800630c <memset>:
 800630c:	4402      	add	r2, r0
 800630e:	4603      	mov	r3, r0
 8006310:	4293      	cmp	r3, r2
 8006312:	d100      	bne.n	8006316 <memset+0xa>
 8006314:	4770      	bx	lr
 8006316:	f803 1b01 	strb.w	r1, [r3], #1
 800631a:	e7f9      	b.n	8006310 <memset+0x4>

0800631c <__libc_init_array>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4d0d      	ldr	r5, [pc, #52]	@ (8006354 <__libc_init_array+0x38>)
 8006320:	4c0d      	ldr	r4, [pc, #52]	@ (8006358 <__libc_init_array+0x3c>)
 8006322:	1b64      	subs	r4, r4, r5
 8006324:	10a4      	asrs	r4, r4, #2
 8006326:	2600      	movs	r6, #0
 8006328:	42a6      	cmp	r6, r4
 800632a:	d109      	bne.n	8006340 <__libc_init_array+0x24>
 800632c:	4d0b      	ldr	r5, [pc, #44]	@ (800635c <__libc_init_array+0x40>)
 800632e:	4c0c      	ldr	r4, [pc, #48]	@ (8006360 <__libc_init_array+0x44>)
 8006330:	f000 f826 	bl	8006380 <_init>
 8006334:	1b64      	subs	r4, r4, r5
 8006336:	10a4      	asrs	r4, r4, #2
 8006338:	2600      	movs	r6, #0
 800633a:	42a6      	cmp	r6, r4
 800633c:	d105      	bne.n	800634a <__libc_init_array+0x2e>
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	f855 3b04 	ldr.w	r3, [r5], #4
 8006344:	4798      	blx	r3
 8006346:	3601      	adds	r6, #1
 8006348:	e7ee      	b.n	8006328 <__libc_init_array+0xc>
 800634a:	f855 3b04 	ldr.w	r3, [r5], #4
 800634e:	4798      	blx	r3
 8006350:	3601      	adds	r6, #1
 8006352:	e7f2      	b.n	800633a <__libc_init_array+0x1e>
 8006354:	08007628 	.word	0x08007628
 8006358:	08007628 	.word	0x08007628
 800635c:	08007628 	.word	0x08007628
 8006360:	0800762c 	.word	0x0800762c

08006364 <memcpy>:
 8006364:	440a      	add	r2, r1
 8006366:	4291      	cmp	r1, r2
 8006368:	f100 33ff 	add.w	r3, r0, #4294967295
 800636c:	d100      	bne.n	8006370 <memcpy+0xc>
 800636e:	4770      	bx	lr
 8006370:	b510      	push	{r4, lr}
 8006372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800637a:	4291      	cmp	r1, r2
 800637c:	d1f9      	bne.n	8006372 <memcpy+0xe>
 800637e:	bd10      	pop	{r4, pc}

08006380 <_init>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	bf00      	nop
 8006384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006386:	bc08      	pop	{r3}
 8006388:	469e      	mov	lr, r3
 800638a:	4770      	bx	lr

0800638c <_fini>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr

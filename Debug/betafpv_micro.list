
betafpv_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067dc  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001288  080069a4  080069a4  000079a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c2c  08007c2c  0000914c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c2c  08007c2c  00008c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c34  08007c34  0000914c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c34  08007c34  00008c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c38  08007c38  00008c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007c3c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08007c48  0000900c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08007ce8  000090ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000be4  2000014c  08007d88  0000914c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000d30  08007d88  00009d30  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001574c  00000000  00000000  0000917c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000279a  00000000  00000000  0001e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010a8  00000000  00000000  00021068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d1f  00000000  00000000  00022110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f846  00000000  00000000  00022e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bc75  00000000  00000000  00052675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016ee57  00000000  00000000  0006e2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001dd141  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004750  00000000  00000000  001dd184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  001e18d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800698c 	.word	0x0800698c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	0800698c 	.word	0x0800698c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_UART_RxCpltCallback>:


#if MODE==2				//Read from UART and send to terminal

	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
		if(huart==&huart2)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a11      	ldr	r2, [pc, #68]	@ (8000548 <HAL_UART_RxCpltCallback+0x50>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d11a      	bne.n	800053e <HAL_UART_RxCpltCallback+0x46>
		{
			decode_mavlink_mssg(&rx_byte,&rx_mssg);
 8000508:	4910      	ldr	r1, [pc, #64]	@ (800054c <HAL_UART_RxCpltCallback+0x54>)
 800050a:	4811      	ldr	r0, [pc, #68]	@ (8000550 <HAL_UART_RxCpltCallback+0x58>)
 800050c:	f001 fe8c 	bl	8002228 <decode_mavlink_mssg>

			//show on terminal (HUART3)
			HAL_UART_Transmit_IT(&huart3, &rx_byte, 1);
 8000510:	2201      	movs	r2, #1
 8000512:	490f      	ldr	r1, [pc, #60]	@ (8000550 <HAL_UART_RxCpltCallback+0x58>)
 8000514:	480f      	ldr	r0, [pc, #60]	@ (8000554 <HAL_UART_RxCpltCallback+0x5c>)
 8000516:	f004 fecd 	bl	80052b4 <HAL_UART_Transmit_IT>

			//save to array
			if(count<300)
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <HAL_UART_RxCpltCallback+0x60>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000522:	d20c      	bcs.n	800053e <HAL_UART_RxCpltCallback+0x46>
			{
				bins[count]=rx_byte;
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <HAL_UART_RxCpltCallback+0x60>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	461a      	mov	r2, r3
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <HAL_UART_RxCpltCallback+0x58>)
 800052c:	7819      	ldrb	r1, [r3, #0]
 800052e:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <HAL_UART_RxCpltCallback+0x64>)
 8000530:	5499      	strb	r1, [r3, r2]
				count++;
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <HAL_UART_RxCpltCallback+0x60>)
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	3301      	adds	r3, #1
 8000538:	b29a      	uxth	r2, r3
 800053a:	4b07      	ldr	r3, [pc, #28]	@ (8000558 <HAL_UART_RxCpltCallback+0x60>)
 800053c:	801a      	strh	r2, [r3, #0]
			}
		}

	}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000324 	.word	0x20000324
 800054c:	20000564 	.word	0x20000564
 8000550:	20000562 	.word	0x20000562
 8000554:	200003ac 	.word	0x200003ac
 8000558:	20000560 	.word	0x20000560
 800055c:	20000434 	.word	0x20000434

08000560 <HAL_UART_TxCpltCallback>:

	void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
	{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
		if(huart==&huart3)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a06      	ldr	r2, [pc, #24]	@ (8000584 <HAL_UART_TxCpltCallback+0x24>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d104      	bne.n	800057a <HAL_UART_TxCpltCallback+0x1a>
		{
			HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	4905      	ldr	r1, [pc, #20]	@ (8000588 <HAL_UART_TxCpltCallback+0x28>)
 8000574:	4805      	ldr	r0, [pc, #20]	@ (800058c <HAL_UART_TxCpltCallback+0x2c>)
 8000576:	f004 fefb 	bl	8005370 <HAL_UART_Receive_IT>
		}
	}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200003ac 	.word	0x200003ac
 8000588:	20000562 	.word	0x20000562
 800058c:	20000324 	.word	0x20000324

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f002 f99a 	bl	80028ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f81f 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f9b3 	bl	8000908 <MX_GPIO_Init>
  MX_ETH_Init();
 80005a2:	f000 f883 	bl	80006ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005a6:	f000 f97f 	bl	80008a8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80005aa:	f000 f91d 	bl	80007e8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80005ae:	f000 f8cb 	bl	8000748 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f949 	bl	8000848 <MX_USART2_UART_Init>
  HAL_TIM_Base_Start_IT(&htim4);
#endif


#if MODE==2
  HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 80005b6:	2201      	movs	r2, #1
 80005b8:	4906      	ldr	r1, [pc, #24]	@ (80005d4 <main+0x44>)
 80005ba:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <main+0x48>)
 80005bc:	f004 fed8 	bl	8005370 <HAL_UART_Receive_IT>

#endif



  uint8_t x=0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	71fb      	strb	r3, [r7, #7]
  encode_mavlink_cmd(&x);
 80005c4:	1dfb      	adds	r3, r7, #7
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fe9c 	bl	8002304 <encode_mavlink_cmd>





		HAL_Delay(10);
 80005cc:	200a      	movs	r0, #10
 80005ce:	f002 f9db 	bl	8002988 <HAL_Delay>
 80005d2:	e7fb      	b.n	80005cc <main+0x3c>
 80005d4:	20000562 	.word	0x20000562
 80005d8:	20000324 	.word	0x20000324

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	@ 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f006 f993 	bl	8006916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000600:	f003 f89e 	bl	8003740 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	4b27      	ldr	r3, [pc, #156]	@ (80006a4 <SystemClock_Config+0xc8>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a26      	ldr	r2, [pc, #152]	@ (80006a4 <SystemClock_Config+0xc8>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000610:	4b24      	ldr	r3, [pc, #144]	@ (80006a4 <SystemClock_Config+0xc8>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800061c:	4b22      	ldr	r3, [pc, #136]	@ (80006a8 <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000624:	4a20      	ldr	r2, [pc, #128]	@ (80006a8 <SystemClock_Config+0xcc>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <SystemClock_Config+0xcc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800063c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000650:	2348      	movs	r3, #72	@ 0x48
 8000652:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000658:	2303      	movs	r3, #3
 800065a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f003 f87d 	bl	8003760 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800066c:	f000 fa1e 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2102      	movs	r1, #2
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fb0b 	bl	8003ca8 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000698:	f000 fa08 	bl	8000aac <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	@ 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_ETH_Init+0x84>)
 80006b2:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <MX_ETH_Init+0x88>)
 80006b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006c4:	22e1      	movs	r2, #225	@ 0xe1
 80006c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_ETH_Init+0x84>)
 80006dc:	4a16      	ldr	r2, [pc, #88]	@ (8000738 <MX_ETH_Init+0x8c>)
 80006de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_ETH_Init+0x84>)
 80006e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_ETH_Init+0x84>)
 80006ea:	4a14      	ldr	r2, [pc, #80]	@ (800073c <MX_ETH_Init+0x90>)
 80006ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_ETH_Init+0x84>)
 80006f0:	4a13      	ldr	r2, [pc, #76]	@ (8000740 <MX_ETH_Init+0x94>)
 80006f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_ETH_Init+0x84>)
 80006f6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <MX_ETH_Init+0x84>)
 80006fe:	f002 fb0b 	bl	8002d18 <HAL_ETH_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000708:	f000 f9d0 	bl	8000aac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800070c:	2238      	movs	r2, #56	@ 0x38
 800070e:	2100      	movs	r1, #0
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <MX_ETH_Init+0x98>)
 8000712:	f006 f900 	bl	8006916 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_ETH_Init+0x98>)
 8000718:	2221      	movs	r2, #33	@ 0x21
 800071a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_ETH_Init+0x98>)
 800071e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000722:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <MX_ETH_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200001a0 	.word	0x200001a0
 8000734:	40028000 	.word	0x40028000
 8000738:	20000688 	.word	0x20000688
 800073c:	200000ac 	.word	0x200000ac
 8000740:	2000000c 	.word	0x2000000c
 8000744:	20000168 	.word	0x20000168

08000748 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_TIM4_Init+0x98>)
 8000768:	4a1e      	ldr	r2, [pc, #120]	@ (80007e4 <MX_TIM4_Init+0x9c>)
 800076a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 800076c:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <MX_TIM4_Init+0x98>)
 800076e:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000772:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000774:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_TIM4_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 800077a:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <MX_TIM4_Init+0x98>)
 800077c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000780:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_TIM4_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_TIM4_Init+0x98>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800078e:	4814      	ldr	r0, [pc, #80]	@ (80007e0 <MX_TIM4_Init+0x98>)
 8000790:	f004 f8a0 	bl	80048d4 <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800079a:	f000 f987 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	480d      	ldr	r0, [pc, #52]	@ (80007e0 <MX_TIM4_Init+0x98>)
 80007ac:	f004 f9f0 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80007b6:	f000 f979 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	4806      	ldr	r0, [pc, #24]	@ (80007e0 <MX_TIM4_Init+0x98>)
 80007c8:	f004 fc24 	bl	8005014 <HAL_TIMEx_MasterConfigSynchronization>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80007d2:	f000 f96b 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000250 	.word	0x20000250
 80007e4:	40000800 	.word	0x40000800

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	@ (8000844 <MX_USART1_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80007f2:	4b13      	ldr	r3, [pc, #76]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 80007f4:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 800080e:	2208      	movs	r2, #8
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_USART1_UART_Init+0x58>)
 800082c:	f004 fcec 	bl	8005208 <HAL_HalfDuplex_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 f939 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000029c 	.word	0x2000029c
 8000844:	40011000 	.word	0x40011000

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_USART2_UART_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	@ (80008a4 <MX_USART2_UART_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <MX_USART2_UART_Init+0x58>)
 8000854:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_USART2_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_USART2_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_USART2_UART_Init+0x58>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_USART2_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_USART2_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_USART2_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_USART2_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_USART2_UART_Init+0x58>)
 800088c:	f004 fc6e 	bl	800516c <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f909 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000324 	.word	0x20000324
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_USART3_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	@ (8000904 <MX_USART3_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <MX_USART3_UART_Init+0x58>)
 80008b4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80008b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_USART3_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_USART3_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_USART3_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_USART3_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_USART3_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_USART3_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_USART3_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_USART3_UART_Init+0x58>)
 80008ec:	f004 fc3e 	bl	800516c <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f8d9 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200003ac 	.word	0x200003ac
 8000904:	40004800 	.word	0x40004800

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b5e      	ldr	r3, [pc, #376]	@ (8000a98 <MX_GPIO_Init+0x190>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a5d      	ldr	r2, [pc, #372]	@ (8000a98 <MX_GPIO_Init+0x190>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b5b      	ldr	r3, [pc, #364]	@ (8000a98 <MX_GPIO_Init+0x190>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b58      	ldr	r3, [pc, #352]	@ (8000a98 <MX_GPIO_Init+0x190>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a57      	ldr	r2, [pc, #348]	@ (8000a98 <MX_GPIO_Init+0x190>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b55      	ldr	r3, [pc, #340]	@ (8000a98 <MX_GPIO_Init+0x190>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b52      	ldr	r3, [pc, #328]	@ (8000a98 <MX_GPIO_Init+0x190>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a51      	ldr	r2, [pc, #324]	@ (8000a98 <MX_GPIO_Init+0x190>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b4f      	ldr	r3, [pc, #316]	@ (8000a98 <MX_GPIO_Init+0x190>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b4c      	ldr	r3, [pc, #304]	@ (8000a98 <MX_GPIO_Init+0x190>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a4b      	ldr	r2, [pc, #300]	@ (8000a98 <MX_GPIO_Init+0x190>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b49      	ldr	r3, [pc, #292]	@ (8000a98 <MX_GPIO_Init+0x190>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	4b46      	ldr	r3, [pc, #280]	@ (8000a98 <MX_GPIO_Init+0x190>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a45      	ldr	r2, [pc, #276]	@ (8000a98 <MX_GPIO_Init+0x190>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b43      	ldr	r3, [pc, #268]	@ (8000a98 <MX_GPIO_Init+0x190>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	4b40      	ldr	r3, [pc, #256]	@ (8000a98 <MX_GPIO_Init+0x190>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a98 <MX_GPIO_Init+0x190>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000a98 <MX_GPIO_Init+0x190>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009b4:	4839      	ldr	r0, [pc, #228]	@ (8000a9c <MX_GPIO_Init+0x194>)
 80009b6:	f002 fea9 	bl	800370c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2140      	movs	r1, #64	@ 0x40
 80009be:	4838      	ldr	r0, [pc, #224]	@ (8000aa0 <MX_GPIO_Init+0x198>)
 80009c0:	f002 fea4 	bl	800370c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4832      	ldr	r0, [pc, #200]	@ (8000aa4 <MX_GPIO_Init+0x19c>)
 80009dc:	f002 fcea 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009e0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4828      	ldr	r0, [pc, #160]	@ (8000a9c <MX_GPIO_Init+0x194>)
 80009fa:	f002 fcdb 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009fe:	2340      	movs	r3, #64	@ 0x40
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4822      	ldr	r0, [pc, #136]	@ (8000aa0 <MX_GPIO_Init+0x198>)
 8000a16:	f002 fccd 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1a:	2380      	movs	r3, #128	@ 0x80
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481c      	ldr	r0, [pc, #112]	@ (8000aa0 <MX_GPIO_Init+0x198>)
 8000a2e:	f002 fcc1 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000a32:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a44:	230a      	movs	r3, #10
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4816      	ldr	r0, [pc, #88]	@ (8000aa8 <MX_GPIO_Init+0x1a0>)
 8000a50:	f002 fcb0 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <MX_GPIO_Init+0x194>)
 8000a6a:	f002 fca3 	bl	80033b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a74:	2312      	movs	r3, #18
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a80:	2304      	movs	r3, #4
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_GPIO_Init+0x194>)
 8000a8c:	f002 fc92 	bl	80033b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	bf00      	nop
 8000a92:	3730      	adds	r7, #48	@ 0x30
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020000 	.word	0x40020000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4053      	eors	r3, r2
 8000ace:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	b25a      	sxtb	r2, r3
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	4053      	eors	r3, r2
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	021b      	lsls	r3, r3, #8
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	4053      	eors	r3, r2
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4053      	eors	r3, r2
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	091b      	lsrs	r3, r3, #4
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4053      	eors	r3, r2
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	801a      	strh	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b2a:	801a      	strh	r2, [r3, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000b44:	f107 030e 	add.w	r3, r7, #14
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ffe7 	bl	8000b1c <crc_init>
	while (length--) {
 8000b4e:	e009      	b.n	8000b64 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f107 020e 	add.w	r2, r7, #14
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ffaa 	bl	8000ab8 <crc_accumulate>
	while (length--) {
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	1e5a      	subs	r2, r3, #1
 8000b68:	807a      	strh	r2, [r7, #2]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1f0      	bne.n	8000b50 <crc_calculate+0x18>
        }
        return crcTmp;
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	4613      	mov	r3, r2
 8000b84:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	617b      	str	r3, [r7, #20]
	while (length--) {
 8000b8a:	e007      	b.n	8000b9c <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	617a      	str	r2, [r7, #20]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	68f9      	ldr	r1, [r7, #12]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff8e 	bl	8000ab8 <crc_accumulate>
	while (length--) {
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	80fa      	strh	r2, [r7, #6]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f2      	bne.n	8000b8c <crc_accumulate_buffer+0x14>
        }
}
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c00 <mavlink_sha256_init+0x50>)
 8000bc8:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <mavlink_sha256_init+0x54>)
 8000bce:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <mavlink_sha256_init+0x58>)
 8000bd4:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000c0c <mavlink_sha256_init+0x5c>)
 8000bda:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a0c      	ldr	r2, [pc, #48]	@ (8000c10 <mavlink_sha256_init+0x60>)
 8000be0:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c14 <mavlink_sha256_init+0x64>)
 8000be6:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a0b      	ldr	r2, [pc, #44]	@ (8000c18 <mavlink_sha256_init+0x68>)
 8000bec:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <mavlink_sha256_init+0x6c>)
 8000bf2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	6a09e667 	.word	0x6a09e667
 8000c04:	bb67ae85 	.word	0xbb67ae85
 8000c08:	3c6ef372 	.word	0x3c6ef372
 8000c0c:	a54ff53a 	.word	0xa54ff53a
 8000c10:	510e527f 	.word	0x510e527f
 8000c14:	9b05688c 	.word	0x9b05688c
 8000c18:	1f83d9ab 	.word	0x1f83d9ab
 8000c1c:	5be0cd19 	.word	0x5be0cd19

08000c20 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b0cf      	sub	sp, #316	@ 0x13c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c2a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c2e:	6018      	str	r0, [r3, #0]
 8000c30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c34:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000c38:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8000c3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c3e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    BB = m->counter[1];
 8000c4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c4e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    CC = m->counter[2];
 8000c5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c5e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    DD = m->counter[3];
 8000c6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c6e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    EE = m->counter[4];
 8000c7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c7e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    FF = m->counter[5];
 8000c8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GG = m->counter[6];
 8000c9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000c9e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6a1b      	ldr	r3, [r3, #32]
 8000ca6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HH = m->counter[7];
 8000caa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    for (i = 0; i < 16; ++i)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000cc0:	e016      	b.n	8000cf0 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 8000cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000ccc:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8000cd0:	6812      	ldr	r2, [r2, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	6819      	ldr	r1, [r3, #0]
 8000cd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cde:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cea:	3301      	adds	r3, #1
 8000cec:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	dde4      	ble.n	8000cc2 <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000cfe:	e069      	b.n	8000dd4 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d04:	1e9a      	subs	r2, r3, #2
 8000d06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d12:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d1a:	1e99      	subs	r1, r3, #2
 8000d1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d28:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000d2c:	405a      	eors	r2, r3
 8000d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d32:	1e99      	subs	r1, r3, #2
 8000d34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d40:	0a9b      	lsrs	r3, r3, #10
 8000d42:	405a      	eors	r2, r3
 8000d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d48:	1fd9      	subs	r1, r3, #7
 8000d4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d56:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d5c:	f1a3 010f 	sub.w	r1, r3, #15
 8000d60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d6c:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d74:	f1a3 000f 	sub.w	r0, r3, #15
 8000d78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d80:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d84:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000d88:	4059      	eors	r1, r3
 8000d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d8e:	f1a3 000f 	sub.w	r0, r3, #15
 8000d92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d9a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d9e:	08db      	lsrs	r3, r3, #3
 8000da0:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000da2:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000da8:	f1a3 0110 	sub.w	r1, r3, #16
 8000dac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000db0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000db4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000db8:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000dba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dc2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000dce:	3301      	adds	r3, #1
 8000dd0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000dd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dda:	dd91      	ble.n	8000d00 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000de2:	e078      	b.n	8000ed6 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000de4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000de8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000dec:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000df0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000df4:	405a      	eors	r2, r3
 8000df6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000dfa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000dfe:	405a      	eors	r2, r3
 8000e00:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e04:	441a      	add	r2, r3
 8000e06:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8000e0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e0e:	4019      	ands	r1, r3
 8000e10:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e14:	43d8      	mvns	r0, r3
 8000e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e1a:	4003      	ands	r3, r0
 8000e1c:	404b      	eors	r3, r1
 8000e1e:	441a      	add	r2, r3
 8000e20:	496e      	ldr	r1, [pc, #440]	@ (8000fdc <mavlink_sha256_calc+0x3bc>)
 8000e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e2a:	441a      	add	r2, r3
 8000e2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e34:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8000e38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000e42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000e46:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000e4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000e4e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000e52:	405a      	eors	r2, r3
 8000e54:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000e58:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000e5c:	405a      	eors	r2, r3
 8000e5e:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8000e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e66:	4059      	eors	r1, r3
 8000e68:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000e6c:	4019      	ands	r1, r3
 8000e6e:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000e76:	4003      	ands	r3, r0
 8000e78:	404b      	eors	r3, r1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			     
	HH = GG;
 8000e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e84:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	GG = FF;
 8000e88:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	FF = EE;
 8000e90:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	EE = DD + T1;
 8000e98:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000e9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	DD = CC;
 8000ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000eaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	CC = BB;
 8000eae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000eb2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	BB = AA;
 8000eb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000eba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	AA = T1 + T2;
 8000ebe:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000ec6:	4413      	add	r3, r2
 8000ec8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (i = 0; i < 64; i++) {
 8000ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000eda:	2b3f      	cmp	r3, #63	@ 0x3f
 8000edc:	dd82      	ble.n	8000de4 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 8000ede:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ee2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000eee:	441a      	add	r2, r3
 8000ef0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ef4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8000efc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f00:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000f0c:	441a      	add	r2, r3
 8000f0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f12:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8000f1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f1e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	691a      	ldr	r2, [r3, #16]
 8000f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f2a:	441a      	add	r2, r3
 8000f2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f30:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8000f38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f3c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	695a      	ldr	r2, [r3, #20]
 8000f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000f48:	441a      	add	r2, r3
 8000f4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f4e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8000f56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f5a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	699a      	ldr	r2, [r3, #24]
 8000f62:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f66:	441a      	add	r2, r3
 8000f68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8000f74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f78:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	69da      	ldr	r2, [r3, #28]
 8000f80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f84:	441a      	add	r2, r3
 8000f86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f8a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8000f92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f96:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6a1a      	ldr	r2, [r3, #32]
 8000f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000fa2:	441a      	add	r2, r3
 8000fa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fa8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8000fb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fb4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000fc0:	441a      	add	r2, r3
 8000fc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fc6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000fce:	bf00      	nop
 8000fd0:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	080069a4 	.word	0x080069a4

08000fe0 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09c      	sub	sp, #112	@ 0x70
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	441a      	add	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800100a:	429a      	cmp	r2, r3
 800100c:	d904      	bls.n	8001018 <mavlink_sha256_update+0x38>
	++m->sz[1];
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8001018:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800101a:	08db      	lsrs	r3, r3, #3
 800101c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001020:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8001022:	e057      	b.n	80010d4 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 8001024:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001026:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800102a:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001030:	429a      	cmp	r2, r3
 8001032:	d201      	bcs.n	8001038 <mavlink_sha256_update+0x58>
            l = len;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800103e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001040:	4413      	add	r3, r2
 8001042:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001044:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001046:	4618      	mov	r0, r3
 8001048:	f005 fc92 	bl	8006970 <memcpy>
	offset += l;
 800104c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800104e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001050:	4413      	add	r3, r2
 8001052:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 8001054:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001058:	4413      	add	r3, r2
 800105a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001066:	2b40      	cmp	r3, #64	@ 0x40
 8001068:	d134      	bne.n	80010d4 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3328      	adds	r3, #40	@ 0x28
 800106e:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 8001070:	2300      	movs	r3, #0
 8001072:	663b      	str	r3, [r7, #96]	@ 0x60
 8001074:	e023      	b.n	80010be <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8001076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800107c:	4413      	add	r3, r2
 800107e:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8001080:	f107 0210 	add.w	r2, r7, #16
 8001084:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 800108c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800108e:	3303      	adds	r3, #3
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001094:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001098:	1c9a      	adds	r2, r3, #2
 800109a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800109c:	3301      	adds	r3, #1
 800109e:	7812      	ldrb	r2, [r2, #0]
 80010a0:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 80010a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010a8:	3302      	adds	r3, #2
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 80010ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80010b0:	3303      	adds	r3, #3
 80010b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 80010b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010ba:	3301      	adds	r3, #1
 80010bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80010be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	ddd8      	ble.n	8001076 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4619      	mov	r1, r3
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff fda8 	bl	8000c20 <mavlink_sha256_calc>
	    offset = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1a4      	bne.n	8001024 <mavlink_sha256_update+0x44>
	}
    }
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	3770      	adds	r7, #112	@ 0x70
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b098      	sub	sp, #96	@ 0x60
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80010fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010fc:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8001100:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001104:	3301      	adds	r3, #1
 8001106:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3308      	adds	r3, #8
 800110c:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 800110e:	2380      	movs	r3, #128	@ 0x80
 8001110:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	3301      	adds	r3, #1
 8001118:	2247      	movs	r2, #71	@ 0x47
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f005 fbfa 	bl	8006916 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001128:	3307      	adds	r3, #7
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	3360      	adds	r3, #96	@ 0x60
 800112e:	443b      	add	r3, r7
 8001130:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0a1a      	lsrs	r2, r3, #8
 800113a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800113c:	3306      	adds	r3, #6
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	3360      	adds	r3, #96	@ 0x60
 8001142:	443b      	add	r3, r7
 8001144:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	0c1a      	lsrs	r2, r3, #16
 800114e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001150:	3305      	adds	r3, #5
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	3360      	adds	r3, #96	@ 0x60
 8001156:	443b      	add	r3, r7
 8001158:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	0e1a      	lsrs	r2, r3, #24
 8001162:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001164:	3304      	adds	r3, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	3360      	adds	r3, #96	@ 0x60
 800116a:	443b      	add	r3, r7
 800116c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001176:	3303      	adds	r3, #3
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	3360      	adds	r3, #96	@ 0x60
 800117c:	443b      	add	r3, r7
 800117e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	0a1a      	lsrs	r2, r3, #8
 8001188:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800118a:	3302      	adds	r3, #2
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	3360      	adds	r3, #96	@ 0x60
 8001190:	443b      	add	r3, r7
 8001192:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	0c1a      	lsrs	r2, r3, #16
 800119c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800119e:	3301      	adds	r3, #1
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	3360      	adds	r3, #96	@ 0x60
 80011a4:	443b      	add	r3, r7
 80011a6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	0e1b      	lsrs	r3, r3, #24
 80011b0:	b2d9      	uxtb	r1, r3
 80011b2:	f107 020c 	add.w	r2, r7, #12
 80011b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011b8:	4413      	add	r3, r2
 80011ba:	460a      	mov	r2, r1
 80011bc:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 80011be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011c0:	f103 0208 	add.w	r2, r3, #8
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4619      	mov	r1, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff08 	bl	8000fe0 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 80011d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80011d2:	78da      	ldrb	r2, [r3, #3]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011de:	7892      	ldrb	r2, [r2, #2]
 80011e0:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3302      	adds	r3, #2
 80011e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011e8:	7852      	ldrb	r2, [r2, #1]
 80011ea:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	3303      	adds	r3, #3
 80011f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011fc:	79d2      	ldrb	r2, [r2, #7]
 80011fe:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	3305      	adds	r3, #5
 8001204:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001206:	7992      	ldrb	r2, [r2, #6]
 8001208:	701a      	strb	r2, [r3, #0]
}
 800120a:	bf00      	nop
 800120c:	3760      	adds	r7, #96	@ 0x60
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4a03      	ldr	r2, [pc, #12]	@ (8001238 <mavlink_get_channel_status+0x24>)
 800122a:	4413      	add	r3, r2
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000ccc 	.word	0x20000ccc

0800123c <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f240 1223 	movw	r2, #291	@ 0x123
 800124c:	fb02 f303 	mul.w	r3, r2, r3
 8001250:	4a03      	ldr	r2, [pc, #12]	@ (8001260 <mavlink_get_channel_buffer+0x24>)
 8001252:	4413      	add	r3, r2
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	20000840 	.word	0x20000840

08001264 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8001264:	b5b0      	push	{r4, r5, r7, lr}
 8001266:	b0a0      	sub	sp, #128	@ 0x80
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <mavlink_sign_packet+0x20>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <mavlink_sign_packet+0x24>
	    return 0;
 8001284:	2300      	movs	r3, #0
 8001286:	e04f      	b.n	8001328 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	785a      	ldrb	r2, [r3, #1]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001296:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	3301      	adds	r3, #1
 800129e:	f107 0110 	add.w	r1, r7, #16
 80012a2:	2206      	movs	r2, #6
 80012a4:	4618      	mov	r0, r3
 80012a6:	f005 fb63 	bl	8006970 <memcpy>
	signing->timestamp++;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012b0:	1c54      	adds	r4, r2, #1
 80012b2:	f143 0500 	adc.w	r5, r3, #0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fc75 	bl	8000bb0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f103 0110 	add.w	r1, r3, #16
 80012cc:	f107 0318 	add.w	r3, r7, #24
 80012d0:	2220      	movs	r2, #32
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fe84 	bl	8000fe0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 80012d8:	78fa      	ldrb	r2, [r7, #3]
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fe7d 	bl	8000fe0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 80012e6:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe74 	bl	8000fe0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80012f8:	f107 0318 	add.w	r3, r7, #24
 80012fc:	2202      	movs	r2, #2
 80012fe:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fe6c 	bl	8000fe0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001308:	f107 0318 	add.w	r3, r7, #24
 800130c:	2207      	movs	r2, #7
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fe65 	bl	8000fe0 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1dda      	adds	r2, r3, #7
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fedf 	bl	80010e4 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 8001326:	230d      	movs	r3, #13
}
 8001328:	4618      	mov	r0, r3
 800132a:	3780      	adds	r7, #128	@ 0x80
 800132c:	46bd      	mov	sp, r7
 800132e:	bdb0      	pop	{r4, r5, r7, pc}

08001330 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 800133c:	e002      	b.n	8001344 <_mav_trim_payload+0x14>
		length--;
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	3b01      	subs	r3, #1
 8001342:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d906      	bls.n	8001358 <_mav_trim_payload+0x28>
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	3b01      	subs	r3, #1
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f2      	beq.n	800133e <_mav_trim_payload+0xe>
	}
	return length;
 8001358:	78fb      	ldrb	r3, [r7, #3]
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b0aa      	sub	sp, #168	@ 0xa8
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <mavlink_signature_check+0x16>
		return true;
 800137a:	2301      	movs	r3, #1
 800137c:	e13e      	b.n	80015fc <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3302      	adds	r3, #2
 8001382:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	const uint8_t *psig = msg->signature;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 800138c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        const uint8_t *incoming_signature = psig+7;
 8001390:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001394:	3307      	adds	r3, #7
 8001396:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 800139a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fc06 	bl	8000bb0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f103 0110 	add.w	r1, r3, #16
 80013aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ae:	2220      	movs	r2, #32
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe15 	bl	8000fe0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 80013b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ba:	220a      	movs	r2, #10
 80013bc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fe0d 	bl	8000fe0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f103 010c 	add.w	r1, r3, #12
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	78db      	ldrb	r3, [r3, #3]
 80013d0:	461a      	mov	r2, r3
 80013d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fe02 	bl	8000fe0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f503 718a 	add.w	r1, r3, #276	@ 0x114
 80013e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013e6:	2202      	movs	r2, #2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fdf9 	bl	8000fe0 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 80013ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013f2:	2207      	movs	r2, #7
 80013f4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fdf1 	bl	8000fe0 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 80013fe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001402:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fe6b 	bl	80010e4 <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 800140e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001412:	2206      	movs	r2, #6
 8001414:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001418:	4618      	mov	r0, r3
 800141a:	f005 fa6c 	bl	80068f6 <memcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2202      	movs	r2, #2
 8001428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		return false;
 800142c:	2300      	movs	r3, #0
 800142e:	e0e5      	b.n	80015fc <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8001430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	tstamp.t64 = 0;
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8001446:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800144a:	1c59      	adds	r1, r3, #1
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	2206      	movs	r2, #6
 8001452:	4618      	mov	r0, r3
 8001454:	f005 fa8c 	bl	8006970 <memcpy>

	if (signing_streams == NULL) {
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d105      	bne.n	800146a <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2203      	movs	r2, #3
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                return false;
 8001466:	2300      	movs	r3, #0
 8001468:	e0c8      	b.n	80015fc <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8001470:	e02b      	b.n	80014ca <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	79d9      	ldrb	r1, [r3, #7]
 8001476:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800147a:	68b8      	ldr	r0, [r7, #8]
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	4403      	add	r3, r0
 8001484:	3303      	adds	r3, #3
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4299      	cmp	r1, r3
 800148a:	d119      	bne.n	80014c0 <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7a19      	ldrb	r1, [r3, #8]
 8001490:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4413      	add	r3, r2
 800149c:	4403      	add	r3, r0
 800149e:	3304      	adds	r3, #4
 80014a0:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 80014a2:	4299      	cmp	r1, r3
 80014a4:	d10c      	bne.n	80014c0 <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 80014a6:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80014aa:	68b9      	ldr	r1, [r7, #8]
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4413      	add	r3, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	3302      	adds	r3, #2
 80014b6:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 80014b8:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80014bc:	429a      	cmp	r2, r3
 80014be:	d00b      	beq.n	80014d8 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 80014c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80014c4:	3301      	adds	r3, #1
 80014c6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d3cd      	bcc.n	8001472 <mavlink_signature_check+0x10a>
 80014d6:	e000      	b.n	80014da <mavlink_signature_check+0x172>
			break;
 80014d8:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d146      	bne.n	8001574 <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	d905      	bls.n	80014fa <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2204      	movs	r2, #4
 80014f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e080      	b.n	80015fc <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 80014fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014fe:	4941      	ldr	r1, [pc, #260]	@ (8001604 <mavlink_signature_check+0x29c>)
 8001500:	1854      	adds	r4, r2, r1
 8001502:	f143 0500 	adc.w	r5, r3, #0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800150c:	4294      	cmp	r4, r2
 800150e:	eb75 0303 	sbcs.w	r3, r5, r3
 8001512:	d205      	bcs.n	8001520 <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2205      	movs	r2, #5
 8001518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 800151c:	2300      	movs	r3, #0
 800151e:	e06d      	b.n	80015fc <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8001520:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	79d8      	ldrb	r0, [r3, #7]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	440b      	add	r3, r1
 8001532:	3303      	adds	r3, #3
 8001534:	4602      	mov	r2, r0
 8001536:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8001538:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7a18      	ldrb	r0, [r3, #8]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	440b      	add	r3, r1
 800154a:	3304      	adds	r3, #4
 800154c:	4602      	mov	r2, r0
 800154e:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001550:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4413      	add	r3, r2
 800155c:	440b      	add	r3, r1
 800155e:	3302      	adds	r3, #2
 8001560:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8001564:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	b29a      	uxth	r2, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	801a      	strh	r2, [r3, #0]
 8001572:	e021      	b.n	80015b8 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8001580:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	4413      	add	r3, r2
 800158e:	1d59      	adds	r1, r3, #5
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	2206      	movs	r2, #6
 8001596:	4618      	mov	r0, r3
 8001598:	f005 f9ea 	bl	8006970 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 800159c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015a4:	4290      	cmp	r0, r2
 80015a6:	eb71 0303 	sbcs.w	r3, r1, r3
 80015aa:	d305      	bcc.n	80015b8 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2206      	movs	r2, #6
 80015b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e021      	b.n	80015fc <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 80015b8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4413      	add	r3, r2
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	4413      	add	r3, r2
 80015c6:	1d58      	adds	r0, r3, #5
 80015c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80015cc:	3301      	adds	r3, #1
 80015ce:	2206      	movs	r2, #6
 80015d0:	4619      	mov	r1, r3
 80015d2:	f005 f9cd 	bl	8006970 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 80015d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015da:	68f9      	ldr	r1, [r7, #12]
 80015dc:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80015e0:	4290      	cmp	r0, r2
 80015e2:	eb71 0303 	sbcs.w	r3, r1, r3
 80015e6:	d204      	bcs.n	80015f2 <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 80015e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return true;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	37a8      	adds	r7, #168	@ 0xa8
 8001600:	46bd      	mov	sp, r7
 8001602:	bdb0      	pop	{r4, r5, r7, pc}
 8001604:	005b8d80 	.word	0x005b8d80

08001608 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160a:	b08f      	sub	sp, #60	@ 0x3c
 800160c:	af04      	add	r7, sp, #16
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	72fb      	strb	r3, [r7, #11]
 8001616:	4613      	mov	r3, r2
 8001618:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7b1b      	ldrb	r3, [r3, #12]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf14      	ite	ne
 8001626:	2301      	movne	r3, #1
 8001628:	2300      	moveq	r3, #0
 800162a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 800162e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001632:	f083 0301 	eor.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00c      	beq.n	8001656 <mavlink_finalize_message_buffer+0x4e>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <mavlink_finalize_message_buffer+0x4e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <mavlink_finalize_message_buffer+0x4e>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <mavlink_finalize_message_buffer+0x50>
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800165c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001668:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <mavlink_finalize_message_buffer+0x6c>
 8001670:	230d      	movs	r3, #13
 8001672:	e000      	b.n	8001676 <mavlink_finalize_message_buffer+0x6e>
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 800167a:	230a      	movs	r3, #10
 800167c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8001680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001684:	2b00      	cmp	r3, #0
 8001686:	d006      	beq.n	8001696 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	22fe      	movs	r2, #254	@ 0xfe
 800168c:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800168e:	2306      	movs	r3, #6
 8001690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001694:	e002      	b.n	800169c <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	22fd      	movs	r2, #253	@ 0xfd
 800169a:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800169c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10a      	bne.n	80016ba <mavlink_finalize_message_buffer+0xb2>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	330c      	adds	r3, #12
 80016a8:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fe3e 	bl	8001330 <_mav_trim_payload>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	e001      	b.n	80016be <mavlink_finalize_message_buffer+0xb6>
 80016ba:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	7afa      	ldrb	r2, [r7, #11]
 80016c6:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	7aba      	ldrb	r2, [r7, #10]
 80016cc:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	711a      	strb	r2, [r3, #4]
	if (signing) {
 80016d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	791b      	ldrb	r3, [r3, #4]
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	799a      	ldrb	r2, [r3, #6]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	799b      	ldrb	r3, [r3, #6]
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	789b      	ldrb	r3, [r3, #2]
 8001708:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	78db      	ldrb	r3, [r3, #3]
 800170e:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8001710:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	799b      	ldrb	r3, [r3, #6]
 800171c:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	79db      	ldrb	r3, [r3, #7]
 8001722:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	7a1b      	ldrb	r3, [r3, #8]
 8001728:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	7a5a      	ldrb	r2, [r3, #9]
 800172e:	7a99      	ldrb	r1, [r3, #10]
 8001730:	0209      	lsls	r1, r1, #8
 8001732:	430a      	orrs	r2, r1
 8001734:	7adb      	ldrb	r3, [r3, #11]
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	4313      	orrs	r3, r2
 800173a:	b2db      	uxtb	r3, r3
 800173c:	777b      	strb	r3, [r7, #29]
 800173e:	e030      	b.n	80017a2 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	791b      	ldrb	r3, [r3, #4]
 8001744:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	795b      	ldrb	r3, [r3, #5]
 800174a:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	799b      	ldrb	r3, [r3, #6]
 8001750:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	79db      	ldrb	r3, [r3, #7]
 8001756:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	7a1b      	ldrb	r3, [r3, #8]
 800175c:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	7a5a      	ldrb	r2, [r3, #9]
 8001762:	7a99      	ldrb	r1, [r3, #10]
 8001764:	0209      	lsls	r1, r1, #8
 8001766:	430a      	orrs	r2, r1
 8001768:	7adb      	ldrb	r3, [r3, #11]
 800176a:	041b      	lsls	r3, r3, #16
 800176c:	4313      	orrs	r3, r2
 800176e:	b2db      	uxtb	r3, r3
 8001770:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	7a5a      	ldrb	r2, [r3, #9]
 8001776:	7a99      	ldrb	r1, [r3, #10]
 8001778:	0209      	lsls	r1, r1, #8
 800177a:	430a      	orrs	r2, r1
 800177c:	7adb      	ldrb	r3, [r3, #11]
 800177e:	041b      	lsls	r3, r3, #16
 8001780:	4313      	orrs	r3, r2
 8001782:	121b      	asrs	r3, r3, #8
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	7a5a      	ldrb	r2, [r3, #9]
 800178e:	7a99      	ldrb	r1, [r3, #10]
 8001790:	0209      	lsls	r1, r1, #8
 8001792:	430a      	orrs	r2, r1
 8001794:	7adb      	ldrb	r3, [r3, #11]
 8001796:	041b      	lsls	r3, r3, #16
 8001798:	4313      	orrs	r3, r2
 800179a:	141b      	asrs	r3, r3, #16
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 80017a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	3301      	adds	r3, #1
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff f9bf 	bl	8000b38 <crc_calculate>
 80017ba:	4603      	mov	r3, r0
 80017bc:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f103 010c 	add.w	r1, r3, #12
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	78db      	ldrb	r3, [r3, #3]
 80017c8:	461a      	mov	r2, r3
 80017ca:	f107 0316 	add.w	r3, r7, #22
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f9d2 	bl	8000b78 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 80017d4:	f107 0216 	add.w	r2, r7, #22
 80017d8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f96a 	bl	8000ab8 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80017e4:	8af9      	ldrh	r1, [r7, #22]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	330c      	adds	r3, #12
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	78d2      	ldrb	r2, [r2, #3]
 80017ee:	4413      	add	r3, r2
 80017f0:	b2ca      	uxtb	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80017f4:	8afb      	ldrh	r3, [r7, #22]
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	b299      	uxth	r1, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f103 020c 	add.w	r2, r3, #12
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	78db      	ldrb	r3, [r3, #3]
 8001804:	3301      	adds	r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	b2ca      	uxtb	r2, r1
 800180a:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 800180c:	8afa      	ldrh	r2, [r7, #22]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 8001812:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001816:	2b00      	cmp	r3, #0
 8001818:	d01a      	beq.n	8001850 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f503 758b 	add.w	r5, r3, #278	@ 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 800182c:	68f9      	ldr	r1, [r7, #12]
 800182e:	310c      	adds	r1, #12
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8001834:	4401      	add	r1, r0
 8001836:	f897 6027 	ldrb.w	r6, [r7, #39]	@ 0x27
 800183a:	f107 0018 	add.w	r0, r7, #24
 800183e:	9102      	str	r1, [sp, #8]
 8001840:	9201      	str	r2, [sp, #4]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4633      	mov	r3, r6
 8001846:	4602      	mov	r2, r0
 8001848:	4629      	mov	r1, r5
 800184a:	4620      	mov	r0, r4
 800184c:	f7ff fd0a 	bl	8001264 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	78db      	ldrb	r3, [r3, #3]
 8001854:	461a      	mov	r2, r3
 8001856:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800185a:	b29b      	uxth	r3, r3
 800185c:	4413      	add	r3, r2
 800185e:	b29a      	uxth	r2, r3
 8001860:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001864:	b29b      	uxth	r3, r3
 8001866:	4413      	add	r3, r2
 8001868:	b29b      	uxth	r3, r3
 800186a:	3302      	adds	r3, #2
 800186c:	b29b      	uxth	r3, r3
}
 800186e:	4618      	mov	r0, r3
 8001870:	372c      	adds	r7, #44	@ 0x2c
 8001872:	46bd      	mov	sp, r7
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001876 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b088      	sub	sp, #32
 800187a:	af04      	add	r7, sp, #16
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	4608      	mov	r0, r1
 8001880:	4611      	mov	r1, r2
 8001882:	461a      	mov	r2, r3
 8001884:	4603      	mov	r3, r0
 8001886:	70fb      	strb	r3, [r7, #3]
 8001888:	460b      	mov	r3, r1
 800188a:	70bb      	strb	r3, [r7, #2]
 800188c:	4613      	mov	r3, r2
 800188e:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8001890:	787b      	ldrb	r3, [r7, #1]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fcbe 	bl	8001214 <mavlink_get_channel_status>
 8001898:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 800189a:	78ba      	ldrb	r2, [r7, #2]
 800189c:	78f9      	ldrb	r1, [r7, #3]
 800189e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	7f3b      	ldrb	r3, [r7, #28]
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	7e3b      	ldrb	r3, [r7, #24]
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff feaa 	bl	8001608 <mavlink_finalize_message_buffer>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af04      	add	r7, sp, #16
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	4608      	mov	r0, r1
 80018c8:	4611      	mov	r1, r2
 80018ca:	461a      	mov	r2, r3
 80018cc:	4603      	mov	r3, r0
 80018ce:	70fb      	strb	r3, [r7, #3]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70bb      	strb	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 80018d8:	78ba      	ldrb	r2, [r7, #2]
 80018da:	78f9      	ldrb	r1, [r7, #3]
 80018dc:	7d3b      	ldrb	r3, [r7, #20]
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	7c3b      	ldrb	r3, [r7, #16]
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffc3 	bl	8001876 <mavlink_finalize_message_chan>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	789b      	ldrb	r3, [r3, #2]
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	709a      	strb	r2, [r3, #2]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001926:	f107 030e 	add.w	r3, r7, #14
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f8f6 	bl	8000b1c <crc_init>
	msg->checksum = crcTmp;
 8001930:	89fa      	ldrh	r2, [r7, #14]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	801a      	strh	r2, [r3, #0]
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001952:	f107 020e 	add.w	r2, r7, #14
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f8ac 	bl	8000ab8 <crc_accumulate>
	msg->checksum = checksum;
 8001960:	89fa      	ldrh	r2, [r7, #14]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	801a      	strh	r2, [r3, #0]
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	f240 1373 	movw	r3, #371	@ 0x173
 8001980:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001982:	e025      	b.n	80019d0 <mavlink_get_msg_entry+0x60>
            uint32_t mid = (low+1+high)/2;
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4413      	add	r3, r2
 800198a:	3301      	adds	r3, #1
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001990:	491e      	ldr	r1, [pc, #120]	@ (8001a0c <mavlink_get_msg_entry+0x9c>)
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d203      	bcs.n	80019ae <mavlink_get_msg_entry+0x3e>
                high = mid-1;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
                continue;
 80019ac:	e010      	b.n	80019d0 <mavlink_get_msg_entry+0x60>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80019ae:	4917      	ldr	r1, [pc, #92]	@ (8001a0c <mavlink_get_msg_entry+0x9c>)
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d902      	bls.n	80019ca <mavlink_get_msg_entry+0x5a>
                low = mid;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	617b      	str	r3, [r7, #20]
                continue;
 80019c8:	e002      	b.n	80019d0 <mavlink_get_msg_entry+0x60>
            }
            low = mid;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	617b      	str	r3, [r7, #20]
            break;
 80019ce:	e003      	b.n	80019d8 <mavlink_get_msg_entry+0x68>
        while (low < high) {
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d3d5      	bcc.n	8001984 <mavlink_get_msg_entry+0x14>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 80019d8:	490c      	ldr	r1, [pc, #48]	@ (8001a0c <mavlink_get_msg_entry+0x9c>)
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e006      	b.n	8001a00 <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4a03      	ldr	r2, [pc, #12]	@ (8001a0c <mavlink_get_msg_entry+0x9c>)
 80019fe:	4413      	add	r3, r2
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	08006aa4 	.word	0x08006aa4

08001a10 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	78db      	ldrb	r3, [r3, #3]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f200 8272 	bhi.w	8001f14 <mavlink_frame_char_buffer+0x504>
 8001a30:	a201      	add	r2, pc, #4	@ (adr r2, 8001a38 <mavlink_frame_char_buffer+0x28>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a79 	.word	0x08001a79
 8001a3c:	08001a79 	.word	0x08001a79
 8001a40:	08001ad7 	.word	0x08001ad7
 8001a44:	08001b3d 	.word	0x08001b3d
 8001a48:	08001b71 	.word	0x08001b71
 8001a4c:	08001b89 	.word	0x08001b89
 8001a50:	08001ba1 	.word	0x08001ba1
 8001a54:	08001bb9 	.word	0x08001bb9
 8001a58:	08001bd1 	.word	0x08001bd1
 8001a5c:	08001c2b 	.word	0x08001c2b
 8001a60:	08001c77 	.word	0x08001c77
 8001a64:	08001cd3 	.word	0x08001cd3
 8001a68:	08001d0b 	.word	0x08001d0b
 8001a6c:	08001da3 	.word	0x08001da3
 8001a70:	08001da3 	.word	0x08001da3
 8001a74:	08001e5f 	.word	0x08001e5f
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	2bfd      	cmp	r3, #253	@ 0xfd
 8001a7c:	d113      	bne.n	8001aa6 <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2202      	movs	r2, #2
 8001a82:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	79fa      	ldrb	r2, [r7, #7]
 8001a8e:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	7b1b      	ldrb	r3, [r3, #12]
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff ff3b 	bl	800191a <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001aa4:	e22d      	b.n	8001f02 <mavlink_frame_char_buffer+0x4f2>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2bfe      	cmp	r3, #254	@ 0xfe
 8001aaa:	f040 822a 	bne.w	8001f02 <mavlink_frame_char_buffer+0x4f2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	79fa      	ldrb	r2, [r7, #7]
 8001abe:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	7b1b      	ldrb	r3, [r3, #12]
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff ff23 	bl	800191a <mavlink_start_checksum>
		break;
 8001ad4:	e215      	b.n	8001f02 <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00f      	beq.n	8001afe <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	785b      	ldrb	r3, [r3, #1]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8001aea:	68b8      	ldr	r0, [r7, #8]
 8001aec:	f7ff ff05 	bl	80018fa <_mav_parse_error>
			status->msg_received = 0;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2201      	movs	r2, #1
 8001afa:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8001afc:	e20a      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
			rxmsg->len = c;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	79fa      	ldrb	r2, [r7, #7]
 8001b02:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2200      	movs	r2, #0
 8001b08:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff ff15 	bl	800193e <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	7b1b      	ldrb	r3, [r3, #12]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d009      	beq.n	8001b34 <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2205      	movs	r2, #5
 8001b30:	70da      	strb	r2, [r3, #3]
		break;
 8001b32:	e1ef      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2203      	movs	r2, #3
 8001b38:	70da      	strb	r2, [r3, #3]
		break;
 8001b3a:	e1eb      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	79fa      	ldrb	r2, [r7, #7]
 8001b40:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	791b      	ldrb	r3, [r3, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d909      	bls.n	8001b5e <mavlink_frame_char_buffer+0x14e>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001b4a:	68b8      	ldr	r0, [r7, #8]
 8001b4c:	f7ff fed5 	bl	80018fa <_mav_parse_error>
			status->msg_received = 0;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	70da      	strb	r2, [r3, #3]
			break;
 8001b5c:	e1da      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
		}
		mavlink_update_checksum(rxmsg, c);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	4619      	mov	r1, r3
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f7ff feeb 	bl	800193e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	70da      	strb	r2, [r3, #3]
		break;
 8001b6e:	e1d1      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	79fa      	ldrb	r2, [r7, #7]
 8001b74:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f7ff fedf 	bl	800193e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2205      	movs	r2, #5
 8001b84:	70da      	strb	r2, [r3, #3]
		break;
 8001b86:	e1c5      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	4619      	mov	r1, r3
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7ff fed3 	bl	800193e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2206      	movs	r2, #6
 8001b9c:	70da      	strb	r2, [r3, #3]
		break;
 8001b9e:	e1b9      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	79fa      	ldrb	r2, [r7, #7]
 8001ba4:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f7ff fec7 	bl	800193e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	70da      	strb	r2, [r3, #3]
		break;
 8001bb6:	e1ad      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	79fa      	ldrb	r2, [r7, #7]
 8001bbc:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff febb 	bl	800193e <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2208      	movs	r2, #8
 8001bcc:	70da      	strb	r2, [r3, #3]
		break;
 8001bce:	e1a1      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	b2d9      	uxtb	r1, r3
 8001bda:	2000      	movs	r0, #0
 8001bdc:	4301      	orrs	r1, r0
 8001bde:	7251      	strb	r1, [r2, #9]
 8001be0:	0a19      	lsrs	r1, r3, #8
 8001be2:	b2c9      	uxtb	r1, r1
 8001be4:	2000      	movs	r0, #0
 8001be6:	4301      	orrs	r1, r0
 8001be8:	7291      	strb	r1, [r2, #10]
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2100      	movs	r1, #0
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff fea0 	bl	800193e <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	7b1b      	ldrb	r3, [r3, #12]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <mavlink_frame_char_buffer+0x212>
			if(rxmsg->len > 0) {
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	78db      	ldrb	r3, [r3, #3]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <mavlink_frame_char_buffer+0x20a>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	220b      	movs	r2, #11
 8001c16:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8001c18:	e17c      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	220c      	movs	r2, #12
 8001c1e:	70da      	strb	r2, [r3, #3]
		break;
 8001c20:	e178      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2209      	movs	r2, #9
 8001c26:	70da      	strb	r2, [r3, #3]
		break;
 8001c28:	e174      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= ((uint32_t)c)<<8;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	7a5a      	ldrb	r2, [r3, #9]
 8001c2e:	7a99      	ldrb	r1, [r3, #10]
 8001c30:	0209      	lsls	r1, r1, #8
 8001c32:	430a      	orrs	r2, r1
 8001c34:	7adb      	ldrb	r3, [r3, #11]
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	4313      	orrs	r3, r2
 8001c42:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	b2d1      	uxtb	r1, r2
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	4301      	orrs	r1, r0
 8001c4e:	7259      	strb	r1, [r3, #9]
 8001c50:	0a11      	lsrs	r1, r2, #8
 8001c52:	b2c9      	uxtb	r1, r1
 8001c54:	2000      	movs	r0, #0
 8001c56:	4301      	orrs	r1, r0
 8001c58:	7299      	strb	r1, [r3, #10]
 8001c5a:	0c12      	lsrs	r2, r2, #16
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	2100      	movs	r1, #0
 8001c60:	430a      	orrs	r2, r1
 8001c62:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	4619      	mov	r1, r3
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f7ff fe68 	bl	800193e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	220a      	movs	r2, #10
 8001c72:	70da      	strb	r2, [r3, #3]
		break;
 8001c74:	e14e      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	7a5a      	ldrb	r2, [r3, #9]
 8001c7a:	7a99      	ldrb	r1, [r3, #10]
 8001c7c:	0209      	lsls	r1, r1, #8
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	7adb      	ldrb	r3, [r3, #11]
 8001c82:	041b      	lsls	r3, r3, #16
 8001c84:	4313      	orrs	r3, r2
 8001c86:	461a      	mov	r2, r3
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	041b      	lsls	r3, r3, #16
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	b2d1      	uxtb	r1, r2
 8001c96:	2000      	movs	r0, #0
 8001c98:	4301      	orrs	r1, r0
 8001c9a:	7259      	strb	r1, [r3, #9]
 8001c9c:	0a11      	lsrs	r1, r2, #8
 8001c9e:	b2c9      	uxtb	r1, r1
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	4301      	orrs	r1, r0
 8001ca4:	7299      	strb	r1, [r3, #10]
 8001ca6:	0c12      	lsrs	r2, r2, #16
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	2100      	movs	r1, #0
 8001cac:	430a      	orrs	r2, r1
 8001cae:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7ff fe42 	bl	800193e <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	78db      	ldrb	r3, [r3, #3]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <mavlink_frame_char_buffer+0x2ba>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	220b      	movs	r2, #11
 8001cc6:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8001cc8:	e124      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	220c      	movs	r2, #12
 8001cce:	70da      	strb	r2, [r3, #3]
		break;
 8001cd0:	e120      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f103 020c 	add.w	r2, r3, #12
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	791b      	ldrb	r3, [r3, #4]
 8001cdc:	1c59      	adds	r1, r3, #1
 8001cde:	b2c8      	uxtb	r0, r1
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	7108      	strb	r0, [r1, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4619      	mov	r1, r3
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff fe25 	bl	800193e <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	791a      	ldrb	r2, [r3, #4]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	78db      	ldrb	r3, [r3, #3]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	f040 8102 	bne.w	8001f06 <mavlink_frame_char_buffer+0x4f6>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	220c      	movs	r2, #12
 8001d06:	70da      	strb	r2, [r3, #3]
		}
		break;
 8001d08:	e0fd      	b.n	8001f06 <mavlink_frame_char_buffer+0x4f6>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	7a5a      	ldrb	r2, [r3, #9]
 8001d0e:	7a99      	ldrb	r1, [r3, #10]
 8001d10:	0209      	lsls	r1, r1, #8
 8001d12:	430a      	orrs	r2, r1
 8001d14:	7adb      	ldrb	r3, [r3, #11]
 8001d16:	041b      	lsls	r3, r3, #16
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fe28 	bl	8001970 <mavlink_get_msg_entry>
 8001d20:	61b8      	str	r0, [r7, #24]
		if (e == NULL) {
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <mavlink_frame_char_buffer+0x328>
			// Message not found in CRC_EXTRA table.
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	220e      	movs	r2, #14
 8001d2c:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	79fa      	ldrb	r2, [r7, #7]
 8001d32:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			// zero-fill the packet to cope with short incoming packets
				if (e && status->packet_idx < e->max_msg_len) {
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
			}
		}
		break;
 8001d36:	e0e8      	b.n	8001f0a <mavlink_frame_char_buffer+0x4fa>
			uint8_t crc_extra = e->crc_extra;
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	791b      	ldrb	r3, [r3, #4]
 8001d3c:	75fb      	strb	r3, [r7, #23]
			mavlink_update_checksum(rxmsg, crc_extra);
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	4619      	mov	r1, r3
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff fdfb 	bl	800193e <mavlink_update_checksum>
			if (c != (rxmsg->checksum & 0xFF)) {
 8001d48:	79fa      	ldrb	r2, [r7, #7]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d003      	beq.n	8001d5e <mavlink_frame_char_buffer+0x34e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	220e      	movs	r2, #14
 8001d5a:	70da      	strb	r2, [r3, #3]
 8001d5c:	e002      	b.n	8001d64 <mavlink_frame_char_buffer+0x354>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	220d      	movs	r2, #13
 8001d62:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	79fa      	ldrb	r2, [r7, #7]
 8001d68:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				if (e && status->packet_idx < e->max_msg_len) {
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80cb 	beq.w	8001f0a <mavlink_frame_char_buffer+0x4fa>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	791a      	ldrb	r2, [r3, #4]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	799b      	ldrb	r3, [r3, #6]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	f080 80c4 	bcs.w	8001f0a <mavlink_frame_char_buffer+0x4fa>
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	330c      	adds	r3, #12
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	7912      	ldrb	r2, [r2, #4]
 8001d8a:	1898      	adds	r0, r3, r2
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	799b      	ldrb	r3, [r3, #6]
 8001d90:	461a      	mov	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	791b      	ldrb	r3, [r3, #4]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	f004 fdbb 	bl	8006916 <memset>
		break;
 8001da0:	e0b3      	b.n	8001f0a <mavlink_frame_char_buffer+0x4fa>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	78db      	ldrb	r3, [r3, #3]
 8001da6:	2b0e      	cmp	r3, #14
 8001da8:	d008      	beq.n	8001dbc <mavlink_frame_char_buffer+0x3ac>
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d003      	beq.n	8001dc4 <mavlink_frame_char_buffer+0x3b4>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e002      	b.n	8001dca <mavlink_frame_char_buffer+0x3ba>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	79fa      	ldrb	r2, [r7, #7]
 8001dce:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	791b      	ldrb	r3, [r3, #4]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00e      	beq.n	8001dfc <mavlink_frame_char_buffer+0x3ec>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	220f      	movs	r2, #15
 8001de2:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	220d      	movs	r2, #13
 8001de8:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	f000 808d 	beq.w	8001f0e <mavlink_frame_char_buffer+0x4fe>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8001dfa:	e088      	b.n	8001f0e <mavlink_frame_char_buffer+0x4fe>
			if (status->signing &&
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01f      	beq.n	8001e44 <mavlink_frame_char_buffer+0x434>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (status->signing &&
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d013      	beq.n	8001e36 <mavlink_frame_char_buffer+0x426>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	7a59      	ldrb	r1, [r3, #9]
 8001e18:	7a98      	ldrb	r0, [r3, #10]
 8001e1a:	0200      	lsls	r0, r0, #8
 8001e1c:	4301      	orrs	r1, r0
 8001e1e:	7adb      	ldrb	r3, [r3, #11]
 8001e20:	041b      	lsls	r3, r3, #16
 8001e22:	430b      	orrs	r3, r1
 8001e24:	4619      	mov	r1, r3
 8001e26:	68b8      	ldr	r0, [r7, #8]
 8001e28:	4790      	blx	r2
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f083 0301 	eor.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d006      	beq.n	8001e44 <mavlink_frame_char_buffer+0x434>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d002      	beq.n	8001e44 <mavlink_frame_char_buffer+0x434>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2203      	movs	r2, #3
 8001e42:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2201      	movs	r2, #1
 8001e48:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d05e      	beq.n	8001f0e <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001e50:	f240 1223 	movw	r2, #291	@ 0x123
 8001e54:	68f9      	ldr	r1, [r7, #12]
 8001e56:	6838      	ldr	r0, [r7, #0]
 8001e58:	f004 fd8a 	bl	8006970 <memcpy>
		break;
 8001e5c:	e057      	b.n	8001f0e <mavlink_frame_char_buffer+0x4fe>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	7b5b      	ldrb	r3, [r3, #13]
 8001e62:	f1c3 030d 	rsb	r3, r3, #13
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4413      	add	r3, r2
 8001e6a:	79fa      	ldrb	r2, [r7, #7]
 8001e6c:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
		status->signature_wait--;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	7b5b      	ldrb	r3, [r3, #13]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	7b5b      	ldrb	r3, [r3, #13]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d146      	bne.n	8001f12 <mavlink_frame_char_buffer+0x502>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	6918      	ldr	r0, [r3, #16]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7ff fa6a 	bl	8001368 <mavlink_signature_check>
 8001e94:	4603      	mov	r3, r0
 8001e96:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8001e98:	7ffb      	ldrb	r3, [r7, #31]
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d017      	beq.n	8001ed4 <mavlink_frame_char_buffer+0x4c4>
			   	(status->signing->accept_unsigned_callback &&
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (!sig_ok &&
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d012      	beq.n	8001ed4 <mavlink_frame_char_buffer+0x4c4>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	7a59      	ldrb	r1, [r3, #9]
 8001eb8:	7a98      	ldrb	r0, [r3, #10]
 8001eba:	0200      	lsls	r0, r0, #8
 8001ebc:	4301      	orrs	r1, r0
 8001ebe:	7adb      	ldrb	r3, [r3, #11]
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	68b8      	ldr	r0, [r7, #8]
 8001ec8:	4790      	blx	r2
 8001eca:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <mavlink_frame_char_buffer+0x4c4>
				// accepted via application level override
				sig_ok = true;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8001ed4:	7ffb      	ldrb	r3, [r7, #31]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <mavlink_frame_char_buffer+0x4d2>
				status->msg_received = MAVLINK_FRAMING_OK;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
 8001ee0:	e002      	b.n	8001ee8 <mavlink_frame_char_buffer+0x4d8>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2201      	movs	r2, #1
 8001eec:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00e      	beq.n	8001f12 <mavlink_frame_char_buffer+0x502>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001ef4:	f240 1223 	movw	r2, #291	@ 0x123
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	6838      	ldr	r0, [r7, #0]
 8001efc:	f004 fd38 	bl	8006970 <memcpy>
			}
		}
		break;
 8001f00:	e007      	b.n	8001f12 <mavlink_frame_char_buffer+0x502>
		break;
 8001f02:	bf00      	nop
 8001f04:	e006      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
		break;
 8001f06:	bf00      	nop
 8001f08:	e004      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
		break;
 8001f0a:	bf00      	nop
 8001f0c:	e002      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
		break;
 8001f0e:	bf00      	nop
 8001f10:	e000      	b.n	8001f14 <mavlink_frame_char_buffer+0x504>
		break;
 8001f12:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d110      	bne.n	8001f3e <mavlink_frame_char_buffer+0x52e>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	799a      	ldrb	r2, [r3, #6]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	891b      	ldrh	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <mavlink_frame_char_buffer+0x522>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	891b      	ldrh	r3, [r3, #8]
 8001f36:	3301      	adds	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <mavlink_frame_char_buffer+0x53c>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	78da      	ldrb	r2, [r3, #3]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8001f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01a      	beq.n	8001f88 <mavlink_frame_char_buffer+0x578>
           r_mavlink_status->parse_state = status->parse_state;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	78da      	ldrb	r2, [r3, #3]
 8001f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f58:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	791a      	ldrb	r2, [r3, #4]
 8001f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f60:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	795b      	ldrb	r3, [r3, #5]
 8001f66:	3301      	adds	r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6c:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	891a      	ldrh	r2, [r3, #8]
 8001f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f74:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	789b      	ldrb	r3, [r3, #2]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7e:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	7b1a      	ldrb	r2, [r3, #12]
 8001f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f86:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d110      	bne.n	8001fb8 <mavlink_frame_char_buffer+0x5a8>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00d      	beq.n	8001fb8 <mavlink_frame_char_buffer+0x5a8>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	781b      	ldrb	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60ba      	str	r2, [r7, #8]
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	4603      	mov	r3, r0
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f92f 	bl	800123c <mavlink_get_channel_buffer>
 8001fde:	4604      	mov	r4, r0
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f916 	bl	8001214 <mavlink_get_channel_status>
 8001fe8:	4601      	mov	r1, r0
 8001fea:	7bba      	ldrb	r2, [r7, #14]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f7ff fd0c 	bl	8001a10 <mavlink_frame_char_buffer>
 8001ff8:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd90      	pop	{r4, r7, pc}

08002002 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b088      	sub	sp, #32
 8002006:	af00      	add	r7, sp, #0
 8002008:	60ba      	str	r2, [r7, #8]
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	4603      	mov	r3, r0
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	460b      	mov	r3, r1
 8002012:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8002014:	7bb9      	ldrb	r1, [r7, #14]
 8002016:	7bf8      	ldrb	r0, [r7, #15]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f7ff ffd2 	bl	8001fc4 <mavlink_frame_char>
 8002020:	4603      	mov	r3, r0
 8002022:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8002024:	7ffb      	ldrb	r3, [r7, #31]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d002      	beq.n	8002030 <mavlink_parse_char+0x2e>
 800202a:	7ffb      	ldrb	r3, [r7, #31]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d120      	bne.n	8002072 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f902 	bl	800123c <mavlink_get_channel_buffer>
 8002038:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f8e9 	bl	8001214 <mavlink_get_channel_status>
 8002042:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8002044:	6978      	ldr	r0, [r7, #20]
 8002046:	f7ff fc58 	bl	80018fa <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2201      	movs	r2, #1
 8002054:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8002056:	7bbb      	ldrb	r3, [r7, #14]
 8002058:	2bfd      	cmp	r3, #253	@ 0xfd
 800205a:	d108      	bne.n	800206e <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2202      	movs	r2, #2
 8002060:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2200      	movs	r2, #0
 8002066:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8002068:	69b8      	ldr	r0, [r7, #24]
 800206a:	f7ff fc56 	bl	800191a <mavlink_start_checksum>
	    }
	    return 0;
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8002072:	7ffb      	ldrb	r3, [r7, #31]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <mavlink_msg_sys_status_decode>:
 *
 * @param msg The message to decode
 * @param sys_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_sys_status_decode(const mavlink_message_t* msg, mavlink_sys_status_t* sys_status)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
    sys_status->battery_remaining = mavlink_msg_sys_status_get_battery_remaining(msg);
    sys_status->onboard_control_sensors_present_extended = mavlink_msg_sys_status_get_onboard_control_sensors_present_extended(msg);
    sys_status->onboard_control_sensors_enabled_extended = mavlink_msg_sys_status_get_onboard_control_sensors_enabled_extended(msg);
    sys_status->onboard_control_sensors_health_extended = mavlink_msg_sys_status_get_onboard_control_sensors_health_extended(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SYS_STATUS_LEN? msg->len : MAVLINK_MSG_ID_SYS_STATUS_LEN;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	78db      	ldrb	r3, [r3, #3]
 800208a:	2b2b      	cmp	r3, #43	@ 0x2b
 800208c:	bf28      	it	cs
 800208e:	232b      	movcs	r3, #43	@ 0x2b
 8002090:	73fb      	strb	r3, [r7, #15]
        memset(sys_status, 0, MAVLINK_MSG_ID_SYS_STATUS_LEN);
 8002092:	222b      	movs	r2, #43	@ 0x2b
 8002094:	2100      	movs	r1, #0
 8002096:	6838      	ldr	r0, [r7, #0]
 8002098:	f004 fc3d 	bl	8006916 <memset>
    memcpy(sys_status, _MAV_PAYLOAD(msg), len);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	330c      	adds	r3, #12
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	4619      	mov	r1, r3
 80020a4:	6838      	ldr	r0, [r7, #0]
 80020a6:	f004 fc63 	bl	8006970 <memcpy>
#endif
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
    global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
    global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
    global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
    global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN? msg->len : MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	78db      	ldrb	r3, [r3, #3]
 80020c0:	2b1c      	cmp	r3, #28
 80020c2:	bf28      	it	cs
 80020c4:	231c      	movcs	r3, #28
 80020c6:	73fb      	strb	r3, [r7, #15]
        memset(global_position_int, 0, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
 80020c8:	221c      	movs	r2, #28
 80020ca:	2100      	movs	r1, #0
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f004 fc22 	bl	8006916 <memset>
    memcpy(global_position_int, _MAV_PAYLOAD(msg), len);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	330c      	adds	r3, #12
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	4619      	mov	r1, r3
 80020da:	6838      	ldr	r0, [r7, #0]
 80020dc:	f004 fc48 	bl	8006970 <memcpy>
#endif
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <mavlink_msg_command_long_pack>:
 * @param param7  Parameter 7 (for the specific command).
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_command_long_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b096      	sub	sp, #88	@ 0x58
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	623a      	str	r2, [r7, #32]
 80020f0:	461a      	mov	r2, r3
 80020f2:	ed87 0a07 	vstr	s0, [r7, #28]
 80020f6:	edc7 0a06 	vstr	s1, [r7, #24]
 80020fa:	ed87 1a05 	vstr	s2, [r7, #20]
 80020fe:	edc7 1a04 	vstr	s3, [r7, #16]
 8002102:	ed87 2a03 	vstr	s4, [r7, #12]
 8002106:	edc7 2a02 	vstr	s5, [r7, #8]
 800210a:	ed87 3a01 	vstr	s6, [r7, #4]
 800210e:	4603      	mov	r3, r0
 8002110:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002114:	460b      	mov	r3, r1
 8002116:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800211a:	4613      	mov	r3, r2
 800211c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    _mav_put_uint8_t(buf, 32, confirmation);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#else
    mavlink_command_long_t packet;
    packet.param1 = param1;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    packet.param2 = param2;
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	633b      	str	r3, [r7, #48]	@ 0x30
    packet.param3 = param3;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	637b      	str	r3, [r7, #52]	@ 0x34
    packet.param4 = param4;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	63bb      	str	r3, [r7, #56]	@ 0x38
    packet.param5 = param5;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	63fb      	str	r3, [r7, #60]	@ 0x3c
    packet.param6 = param6;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	643b      	str	r3, [r7, #64]	@ 0x40
    packet.param7 = param7;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	647b      	str	r3, [r7, #68]	@ 0x44
    packet.command = command;
 800213c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002140:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    packet.target_system = target_system;
 8002144:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002148:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    packet.target_component = target_component;
 800214c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002150:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    packet.confirmation = confirmation;
 8002154:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8002158:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_COMMAND_LONG_LEN);
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	330c      	adds	r3, #12
 8002160:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002164:	2221      	movs	r2, #33	@ 0x21
 8002166:	4618      	mov	r0, r3
 8002168:	f004 fc02 	bl	8006970 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_COMMAND_LONG;
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	2200      	movs	r2, #0
 8002170:	f042 024c 	orr.w	r2, r2, #76	@ 0x4c
 8002174:	725a      	strb	r2, [r3, #9]
 8002176:	2200      	movs	r2, #0
 8002178:	729a      	strb	r2, [r3, #10]
 800217a:	2200      	movs	r2, #0
 800217c:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_COMMAND_LONG_MIN_LEN, MAVLINK_MSG_ID_COMMAND_LONG_LEN, MAVLINK_MSG_ID_COMMAND_LONG_CRC);
 800217e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002182:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002186:	2398      	movs	r3, #152	@ 0x98
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	2321      	movs	r3, #33	@ 0x21
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2321      	movs	r3, #33	@ 0x21
 8002190:	6a38      	ldr	r0, [r7, #32]
 8002192:	f7ff fb94 	bl	80018be <mavlink_finalize_message>
 8002196:	4603      	mov	r3, r0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3750      	adds	r7, #80	@ 0x50
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <mavlink_msg_power_status_decode>:
 *
 * @param msg The message to decode
 * @param power_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_power_status_decode(const mavlink_message_t* msg, mavlink_power_status_t* power_status)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    power_status->Vcc = mavlink_msg_power_status_get_Vcc(msg);
    power_status->Vservo = mavlink_msg_power_status_get_Vservo(msg);
    power_status->flags = mavlink_msg_power_status_get_flags(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_POWER_STATUS_LEN? msg->len : MAVLINK_MSG_ID_POWER_STATUS_LEN;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	78db      	ldrb	r3, [r3, #3]
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	bf28      	it	cs
 80021b2:	2306      	movcs	r3, #6
 80021b4:	73fb      	strb	r3, [r7, #15]
        memset(power_status, 0, MAVLINK_MSG_ID_POWER_STATUS_LEN);
 80021b6:	2206      	movs	r2, #6
 80021b8:	2100      	movs	r1, #0
 80021ba:	6838      	ldr	r0, [r7, #0]
 80021bc:	f004 fbab 	bl	8006916 <memset>
    memcpy(power_status, _MAV_PAYLOAD(msg), len);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	330c      	adds	r3, #12
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	4619      	mov	r1, r3
 80021c8:	6838      	ldr	r0, [r7, #0]
 80021ca:	f004 fbd1 	bl	8006970 <memcpy>
#endif
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <mavlink_msg_heartbeat_get_type>:
 * @brief Get field type from heartbeat message
 *
 * @return  Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.
 */
static inline uint8_t mavlink_msg_heartbeat_get_type(const mavlink_message_t* msg)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint8_t(msg,  4);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	330c      	adds	r3, #12
 80021e2:	3304      	adds	r3, #4
 80021e4:	781b      	ldrb	r3, [r3, #0]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	78db      	ldrb	r3, [r3, #3]
 8002200:	2b09      	cmp	r3, #9
 8002202:	bf28      	it	cs
 8002204:	2309      	movcs	r3, #9
 8002206:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002208:	2209      	movs	r2, #9
 800220a:	2100      	movs	r1, #0
 800220c:	6838      	ldr	r0, [r7, #0]
 800220e:	f004 fb82 	bl	8006916 <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	330c      	adds	r3, #12
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	4619      	mov	r1, r3
 800221a:	6838      	ldr	r0, [r7, #0]
 800221c:	f004 fba8 	bl	8006970 <memcpy>
#endif
}
 8002220:	bf00      	nop
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <decode_mavlink_mssg>:
 *
 * @param byte:		Current byte of the message to decode
 *	@return :		1 if success, 0 if message was not found
 **/
bool decode_mavlink_mssg(const unsigned char* byte, mavlink_message_t* msg)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	if (mavlink_parse_char(chan, *byte, msg, &status))
 8002232:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <decode_mavlink_mssg+0xb0>)
 8002234:	7818      	ldrb	r0, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7819      	ldrb	r1, [r3, #0]
 800223a:	4b28      	ldr	r3, [pc, #160]	@ (80022dc <decode_mavlink_mssg+0xb4>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	f7ff fee0 	bl	8002002 <mavlink_parse_char>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d042      	beq.n	80022ce <decode_mavlink_mssg+0xa6>
	{
		// msg.msgid, msg.seq, msg.compid, msg.sysid);

		// ... DECODE THE MESSAGE PAYLOAD HERE ...
		 switch(msg->msgid) {
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7a5a      	ldrb	r2, [r3, #9]
 800224c:	7a99      	ldrb	r1, [r3, #10]
 800224e:	0209      	lsls	r1, r1, #8
 8002250:	430a      	orrs	r2, r1
 8002252:	7adb      	ldrb	r3, [r3, #11]
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	4313      	orrs	r3, r2
 8002258:	2b7d      	cmp	r3, #125	@ 0x7d
 800225a:	d021      	beq.n	80022a0 <decode_mavlink_mssg+0x78>
 800225c:	2b7d      	cmp	r3, #125	@ 0x7d
 800225e:	dc34      	bgt.n	80022ca <decode_mavlink_mssg+0xa2>
 8002260:	2b21      	cmp	r3, #33	@ 0x21
 8002262:	d006      	beq.n	8002272 <decode_mavlink_mssg+0x4a>
 8002264:	2b21      	cmp	r3, #33	@ 0x21
 8002266:	dc30      	bgt.n	80022ca <decode_mavlink_mssg+0xa2>
 8002268:	2b00      	cmp	r3, #0
 800226a:	d023      	beq.n	80022b4 <decode_mavlink_mssg+0x8c>
 800226c:	2b01      	cmp	r3, #1
 800226e:	d00d      	beq.n	800228c <decode_mavlink_mssg+0x64>
 8002270:	e02b      	b.n	80022ca <decode_mavlink_mssg+0xa2>
			case MAVLINK_MSG_ID_GLOBAL_POSITION_INT:
				mavlink_msg_global_position_int_decode(msg, &global_position);
 8002272:	491b      	ldr	r1, [pc, #108]	@ (80022e0 <decode_mavlink_mssg+0xb8>)
 8002274:	6838      	ldr	r0, [r7, #0]
 8002276:	f7ff ff1c 	bl	80020b2 <mavlink_msg_global_position_int_decode>
				mav_alt=global_position.alt;
 800227a:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <decode_mavlink_mssg+0xb8>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	4a19      	ldr	r2, [pc, #100]	@ (80022e4 <decode_mavlink_mssg+0xbc>)
 8002280:	6013      	str	r3, [r2, #0]
				mav_lat=global_position.lat;
 8002282:	4b17      	ldr	r3, [pc, #92]	@ (80022e0 <decode_mavlink_mssg+0xb8>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4a18      	ldr	r2, [pc, #96]	@ (80022e8 <decode_mavlink_mssg+0xc0>)
 8002288:	6013      	str	r3, [r2, #0]

			break;
 800228a:	e020      	b.n	80022ce <decode_mavlink_mssg+0xa6>

			case MAVLINK_MSG_ID_SYS_STATUS:
				mavlink_msg_sys_status_decode(msg, &sys_status);
 800228c:	4917      	ldr	r1, [pc, #92]	@ (80022ec <decode_mavlink_mssg+0xc4>)
 800228e:	6838      	ldr	r0, [r7, #0]
 8002290:	f7ff fef4 	bl	800207c <mavlink_msg_sys_status_decode>
				health = sys_status.onboard_control_sensors_health;
 8002294:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <decode_mavlink_mssg+0xc4>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	461a      	mov	r2, r3
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <decode_mavlink_mssg+0xc8>)
 800229c:	601a      	str	r2, [r3, #0]
			break;
 800229e:	e016      	b.n	80022ce <decode_mavlink_mssg+0xa6>

			case MAVLINK_MSG_ID_POWER_STATUS:
				mavlink_msg_power_status_decode(msg, &pwr_status);
 80022a0:	4914      	ldr	r1, [pc, #80]	@ (80022f4 <decode_mavlink_mssg+0xcc>)
 80022a2:	6838      	ldr	r0, [r7, #0]
 80022a4:	f7ff ff7c 	bl	80021a0 <mavlink_msg_power_status_decode>
				power = pwr_status.Vcc;
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <decode_mavlink_mssg+0xcc>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <decode_mavlink_mssg+0xd0>)
 80022b0:	601a      	str	r2, [r3, #0]
			break;
 80022b2:	e00c      	b.n	80022ce <decode_mavlink_mssg+0xa6>
			case MAVLINK_MSG_ID_HEARTBEAT:
				mavlink_msg_heartbeat_decode(msg, &heartbeat);
 80022b4:	4911      	ldr	r1, [pc, #68]	@ (80022fc <decode_mavlink_mssg+0xd4>)
 80022b6:	6838      	ldr	r0, [r7, #0]
 80022b8:	f7ff ff9b 	bl	80021f2 <mavlink_msg_heartbeat_decode>
			 	device_type=mavlink_msg_heartbeat_get_type(msg);
 80022bc:	6838      	ldr	r0, [r7, #0]
 80022be:	f7ff ff8a 	bl	80021d6 <mavlink_msg_heartbeat_get_type>
 80022c2:	4603      	mov	r3, r0
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <decode_mavlink_mssg+0xd8>)
 80022c8:	601a      	str	r2, [r3, #0]


			default:
				return 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <decode_mavlink_mssg+0xa8>
			break;
			}
	}
	return 1;
 80022ce:	2301      	movs	r3, #1

}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	200006f6 	.word	0x200006f6
 80022dc:	200006f8 	.word	0x200006f8
 80022e0:	20000690 	.word	0x20000690
 80022e4:	200006b0 	.word	0x200006b0
 80022e8:	200006b4 	.word	0x200006b4
 80022ec:	200006c4 	.word	0x200006c4
 80022f0:	200006ac 	.word	0x200006ac
 80022f4:	200006f0 	.word	0x200006f0
 80022f8:	200006b8 	.word	0x200006b8
 80022fc:	20000834 	.word	0x20000834
 8002300:	200006bc 	.word	0x200006bc

08002304 <encode_mavlink_cmd>:
 * @param conf_counter	Counter to keep track of attempts for sending the command
 *
 **/

void encode_mavlink_cmd(const uint8_t* conf_counter)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af04      	add	r7, sp, #16
 800230a:	6078      	str	r0, [r7, #4]
	//EXAMPLE: send command to request message of VFR_HUD(74)
	mavlink_msg_command_long_pack(SYS_ID, componentID, &cmmd, TARGET_ID,
 800230c:	4b10      	ldr	r3, [pc, #64]	@ (8002350 <encode_mavlink_cmd+0x4c>)
 800230e:	7819      	ldrb	r1, [r3, #0]
 8002310:	4b0f      	ldr	r3, [pc, #60]	@ (8002350 <encode_mavlink_cmd+0x4c>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	7812      	ldrb	r2, [r2, #0]
 8002318:	9202      	str	r2, [sp, #8]
 800231a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800231e:	9201      	str	r2, [sp, #4]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 8002326:	eddf 2a0b 	vldr	s5, [pc, #44]	@ 8002354 <encode_mavlink_cmd+0x50>
 800232a:	ed9f 2a0a 	vldr	s4, [pc, #40]	@ 8002354 <encode_mavlink_cmd+0x50>
 800232e:	eddf 1a09 	vldr	s3, [pc, #36]	@ 8002354 <encode_mavlink_cmd+0x50>
 8002332:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 8002354 <encode_mavlink_cmd+0x50>
 8002336:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8002354 <encode_mavlink_cmd+0x50>
 800233a:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8002358 <encode_mavlink_cmd+0x54>
 800233e:	2301      	movs	r3, #1
 8002340:	4a06      	ldr	r2, [pc, #24]	@ (800235c <encode_mavlink_cmd+0x58>)
 8002342:	20ff      	movs	r0, #255	@ 0xff
 8002344:	f7ff fed0 	bl	80020e8 <mavlink_msg_command_long_pack>
			VFR_HUD, 0, 0, 0, 0, 0, 1);		//last '1' for target address

//same as pack but with premade struct
	//mavlink_msg_command_long_encode(system_id, component_id, msg, command_long)

}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200006c0 	.word	0x200006c0
 8002354:	00000000 	.word	0x00000000
 8002358:	42940000 	.word	0x42940000
 800235c:	20000710 	.word	0x20000710

08002360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <HAL_MspInit+0x44>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	4a0e      	ldr	r2, [pc, #56]	@ (80023a4 <HAL_MspInit+0x44>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002370:	6413      	str	r3, [r2, #64]	@ 0x40
 8002372:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <HAL_MspInit+0x44>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <HAL_MspInit+0x44>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	4a08      	ldr	r2, [pc, #32]	@ (80023a4 <HAL_MspInit+0x44>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002388:	6453      	str	r3, [r2, #68]	@ 0x44
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_MspInit+0x44>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08e      	sub	sp, #56	@ 0x38
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002500 <HAL_ETH_MspInit+0x158>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	f040 8096 	bne.w	80024f8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80023cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 80023d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	4b47      	ldr	r3, [pc, #284]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	4a46      	ldr	r2, [pc, #280]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 80023ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f0:	4b44      	ldr	r3, [pc, #272]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	4b41      	ldr	r3, [pc, #260]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002400:	4a40      	ldr	r2, [pc, #256]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 8002402:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002406:	6313      	str	r3, [r2, #48]	@ 0x30
 8002408:	4b3e      	ldr	r3, [pc, #248]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002414:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002418:	4a3a      	ldr	r2, [pc, #232]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002420:	4b38      	ldr	r3, [pc, #224]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	4b35      	ldr	r3, [pc, #212]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002430:	4a34      	ldr	r2, [pc, #208]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6313      	str	r3, [r2, #48]	@ 0x30
 8002438:	4b32      	ldr	r3, [pc, #200]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002444:	4b2f      	ldr	r3, [pc, #188]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	4a2e      	ldr	r2, [pc, #184]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 800244a:	f043 0302 	orr.w	r3, r3, #2
 800244e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002450:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800245c:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	4a28      	ldr	r2, [pc, #160]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 8002462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002466:	6313      	str	r3, [r2, #48]	@ 0x30
 8002468:	4b26      	ldr	r3, [pc, #152]	@ (8002504 <HAL_ETH_MspInit+0x15c>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002474:	2332      	movs	r3, #50	@ 0x32
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002484:	230b      	movs	r3, #11
 8002486:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002488:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800248c:	4619      	mov	r1, r3
 800248e:	481e      	ldr	r0, [pc, #120]	@ (8002508 <HAL_ETH_MspInit+0x160>)
 8002490:	f000 ff90 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002494:	2386      	movs	r3, #134	@ 0x86
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024a4:	230b      	movs	r3, #11
 80024a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ac:	4619      	mov	r1, r3
 80024ae:	4817      	ldr	r0, [pc, #92]	@ (800250c <HAL_ETH_MspInit+0x164>)
 80024b0:	f000 ff80 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80024b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024c6:	230b      	movs	r3, #11
 80024c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80024ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ce:	4619      	mov	r1, r3
 80024d0:	480f      	ldr	r0, [pc, #60]	@ (8002510 <HAL_ETH_MspInit+0x168>)
 80024d2:	f000 ff6f 	bl	80033b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80024d6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024e8:	230b      	movs	r3, #11
 80024ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f0:	4619      	mov	r1, r3
 80024f2:	4808      	ldr	r0, [pc, #32]	@ (8002514 <HAL_ETH_MspInit+0x16c>)
 80024f4:	f000 ff5e 	bl	80033b4 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80024f8:	bf00      	nop
 80024fa:	3738      	adds	r7, #56	@ 0x38
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40028000 	.word	0x40028000
 8002504:	40023800 	.word	0x40023800
 8002508:	40020800 	.word	0x40020800
 800250c:	40020000 	.word	0x40020000
 8002510:	40020400 	.word	0x40020400
 8002514:	40021800 	.word	0x40021800

08002518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0d      	ldr	r2, [pc, #52]	@ (800255c <HAL_TIM_Base_MspInit+0x44>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d113      	bne.n	8002552 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800252a:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <HAL_TIM_Base_MspInit+0x48>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	4a0c      	ldr	r2, [pc, #48]	@ (8002560 <HAL_TIM_Base_MspInit+0x48>)
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	6413      	str	r3, [r2, #64]	@ 0x40
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <HAL_TIM_Base_MspInit+0x48>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	201e      	movs	r0, #30
 8002548:	f000 fb1d 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800254c:	201e      	movs	r0, #30
 800254e:	f000 fb36 	bl	8002bbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40000800 	.word	0x40000800
 8002560:	40023800 	.word	0x40023800

08002564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b0b0      	sub	sp, #192	@ 0xc0
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800257c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002580:	2284      	movs	r2, #132	@ 0x84
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f004 f9c6 	bl	8006916 <memset>
  if(huart->Instance==USART1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7f      	ldr	r2, [pc, #508]	@ (800278c <HAL_UART_MspInit+0x228>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d143      	bne.n	800261c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002594:	2340      	movs	r3, #64	@ 0x40
 8002596:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002598:	2300      	movs	r3, #0
 800259a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800259c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 fda7 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025ac:	f7fe fa7e 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b0:	4b77      	ldr	r3, [pc, #476]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 80025b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b4:	4a76      	ldr	r2, [pc, #472]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 80025b6:	f043 0310 	orr.w	r3, r3, #16
 80025ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80025bc:	4b74      	ldr	r3, [pc, #464]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 80025be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c8:	4b71      	ldr	r3, [pc, #452]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	4a70      	ldr	r2, [pc, #448]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d4:	4b6e      	ldr	r3, [pc, #440]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025e0:	2340      	movs	r3, #64	@ 0x40
 80025e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e6:	2312      	movs	r3, #18
 80025e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025f8:	2307      	movs	r3, #7
 80025fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002602:	4619      	mov	r1, r3
 8002604:	4863      	ldr	r0, [pc, #396]	@ (8002794 <HAL_UART_MspInit+0x230>)
 8002606:	f000 fed5 	bl	80033b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	2025      	movs	r0, #37	@ 0x25
 8002610:	f000 fab9 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002614:	2025      	movs	r0, #37	@ 0x25
 8002616:	f000 fad2 	bl	8002bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800261a:	e0b3      	b.n	8002784 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a5d      	ldr	r2, [pc, #372]	@ (8002798 <HAL_UART_MspInit+0x234>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d164      	bne.n	80026f0 <HAL_UART_MspInit+0x18c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002626:	2380      	movs	r3, #128	@ 0x80
 8002628:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800262a:	2300      	movs	r3, #0
 800262c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800262e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002632:	4618      	mov	r0, r3
 8002634:	f001 fd5e 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_UART_MspInit+0xde>
      Error_Handler();
 800263e:	f7fe fa35 	bl	8000aac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002642:	4b53      	ldr	r3, [pc, #332]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	4a52      	ldr	r2, [pc, #328]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 8002648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800264c:	6413      	str	r3, [r2, #64]	@ 0x40
 800264e:	4b50      	ldr	r3, [pc, #320]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	4b4d      	ldr	r3, [pc, #308]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a4c      	ldr	r2, [pc, #304]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b4a      	ldr	r3, [pc, #296]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002672:	4b47      	ldr	r3, [pc, #284]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a46      	ldr	r2, [pc, #280]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 8002678:	f043 0308 	orr.w	r3, r3, #8
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b44      	ldr	r3, [pc, #272]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800268a:	2308      	movs	r3, #8
 800268c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026a2:	2307      	movs	r3, #7
 80026a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80026ac:	4619      	mov	r1, r3
 80026ae:	483b      	ldr	r0, [pc, #236]	@ (800279c <HAL_UART_MspInit+0x238>)
 80026b0:	f000 fe80 	bl	80033b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026b4:	2320      	movs	r3, #32
 80026b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026cc:	2307      	movs	r3, #7
 80026ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80026d6:	4619      	mov	r1, r3
 80026d8:	4831      	ldr	r0, [pc, #196]	@ (80027a0 <HAL_UART_MspInit+0x23c>)
 80026da:	f000 fe6b 	bl	80033b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2100      	movs	r1, #0
 80026e2:	2026      	movs	r0, #38	@ 0x26
 80026e4:	f000 fa4f 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026e8:	2026      	movs	r0, #38	@ 0x26
 80026ea:	f000 fa68 	bl	8002bbe <HAL_NVIC_EnableIRQ>
}
 80026ee:	e049      	b.n	8002784 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2b      	ldr	r2, [pc, #172]	@ (80027a4 <HAL_UART_MspInit+0x240>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d144      	bne.n	8002784 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002700:	2300      	movs	r3, #0
 8002702:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002704:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002708:	4618      	mov	r0, r3
 800270a:	f001 fcf3 	bl	80040f4 <HAL_RCCEx_PeriphCLKConfig>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 8002714:	f7fe f9ca 	bl	8000aac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002718:	4b1d      	ldr	r3, [pc, #116]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	4a1c      	ldr	r2, [pc, #112]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 800271e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002722:	6413      	str	r3, [r2, #64]	@ 0x40
 8002724:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002730:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	4a16      	ldr	r2, [pc, #88]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 8002736:	f043 0308 	orr.w	r3, r3, #8
 800273a:	6313      	str	r3, [r2, #48]	@ 0x30
 800273c:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <HAL_UART_MspInit+0x22c>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002748:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800274c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275c:	2303      	movs	r3, #3
 800275e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002762:	2307      	movs	r3, #7
 8002764:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002768:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800276c:	4619      	mov	r1, r3
 800276e:	480c      	ldr	r0, [pc, #48]	@ (80027a0 <HAL_UART_MspInit+0x23c>)
 8002770:	f000 fe20 	bl	80033b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002774:	2200      	movs	r2, #0
 8002776:	2100      	movs	r1, #0
 8002778:	2027      	movs	r0, #39	@ 0x27
 800277a:	f000 fa04 	bl	8002b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800277e:	2027      	movs	r0, #39	@ 0x27
 8002780:	f000 fa1d 	bl	8002bbe <HAL_NVIC_EnableIRQ>
}
 8002784:	bf00      	nop
 8002786:	37c0      	adds	r7, #192	@ 0xc0
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40011000 	.word	0x40011000
 8002790:	40023800 	.word	0x40023800
 8002794:	40020400 	.word	0x40020400
 8002798:	40004400 	.word	0x40004400
 800279c:	40020000 	.word	0x40020000
 80027a0:	40020c00 	.word	0x40020c00
 80027a4:	40004800 	.word	0x40004800

080027a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <NMI_Handler+0x4>

080027b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <HardFault_Handler+0x4>

080027b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <MemManage_Handler+0x4>

080027c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <BusFault_Handler+0x4>

080027c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <UsageFault_Handler+0x4>

080027d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027fe:	f000 f8a3 	bl	8002948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800280c:	4802      	ldr	r0, [pc, #8]	@ (8002818 <TIM4_IRQHandler+0x10>)
 800280e:	f002 f8b8 	bl	8004982 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000250 	.word	0x20000250

0800281c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002820:	4802      	ldr	r0, [pc, #8]	@ (800282c <USART1_IRQHandler+0x10>)
 8002822:	f002 fde9 	bl	80053f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2000029c 	.word	0x2000029c

08002830 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002834:	4802      	ldr	r0, [pc, #8]	@ (8002840 <USART2_IRQHandler+0x10>)
 8002836:	f002 fddf 	bl	80053f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000324 	.word	0x20000324

08002844 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002848:	4802      	ldr	r0, [pc, #8]	@ (8002854 <USART3_IRQHandler+0x10>)
 800284a:	f002 fdd5 	bl	80053f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200003ac 	.word	0x200003ac

08002858 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <SystemInit+0x20>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	4a05      	ldr	r2, [pc, #20]	@ (8002878 <SystemInit+0x20>)
 8002864:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002868:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <Reset_Handler>:
 800287c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028b4 <LoopFillZerobss+0xe>
 8002880:	f7ff ffea 	bl	8002858 <SystemInit>
 8002884:	480c      	ldr	r0, [pc, #48]	@ (80028b8 <LoopFillZerobss+0x12>)
 8002886:	490d      	ldr	r1, [pc, #52]	@ (80028bc <LoopFillZerobss+0x16>)
 8002888:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <LoopFillZerobss+0x1a>)
 800288a:	2300      	movs	r3, #0
 800288c:	e002      	b.n	8002894 <LoopCopyDataInit>

0800288e <CopyDataInit>:
 800288e:	58d4      	ldr	r4, [r2, r3]
 8002890:	50c4      	str	r4, [r0, r3]
 8002892:	3304      	adds	r3, #4

08002894 <LoopCopyDataInit>:
 8002894:	18c4      	adds	r4, r0, r3
 8002896:	428c      	cmp	r4, r1
 8002898:	d3f9      	bcc.n	800288e <CopyDataInit>
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <LoopFillZerobss+0x1e>)
 800289c:	4c0a      	ldr	r4, [pc, #40]	@ (80028c8 <LoopFillZerobss+0x22>)
 800289e:	2300      	movs	r3, #0
 80028a0:	e001      	b.n	80028a6 <LoopFillZerobss>

080028a2 <FillZerobss>:
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	3204      	adds	r2, #4

080028a6 <LoopFillZerobss>:
 80028a6:	42a2      	cmp	r2, r4
 80028a8:	d3fb      	bcc.n	80028a2 <FillZerobss>
 80028aa:	f004 f83d 	bl	8006928 <__libc_init_array>
 80028ae:	f7fd fe6f 	bl	8000590 <main>
 80028b2:	4770      	bx	lr
 80028b4:	20050000 	.word	0x20050000
 80028b8:	20000000 	.word	0x20000000
 80028bc:	2000000c 	.word	0x2000000c
 80028c0:	08007c3c 	.word	0x08007c3c
 80028c4:	2000014c 	.word	0x2000014c
 80028c8:	20000d30 	.word	0x20000d30

080028cc <ADC_IRQHandler>:
 80028cc:	e7fe      	b.n	80028cc <ADC_IRQHandler>

080028ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d2:	2003      	movs	r0, #3
 80028d4:	f000 f94c 	bl	8002b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028d8:	2000      	movs	r0, #0
 80028da:	f000 f805 	bl	80028e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028de:	f7ff fd3f 	bl	8002360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028f0:	4b12      	ldr	r3, [pc, #72]	@ (800293c <HAL_InitTick+0x54>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <HAL_InitTick+0x58>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f967 	bl	8002bda <HAL_SYSTICK_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e00e      	b.n	8002934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b0f      	cmp	r3, #15
 800291a:	d80a      	bhi.n	8002932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800291c:	2200      	movs	r2, #0
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	f04f 30ff 	mov.w	r0, #4294967295
 8002924:	f000 f92f 	bl	8002b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002928:	4a06      	ldr	r2, [pc, #24]	@ (8002944 <HAL_InitTick+0x5c>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	e000      	b.n	8002934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000000 	.word	0x20000000
 8002940:	20000008 	.word	0x20000008
 8002944:	20000004 	.word	0x20000004

08002948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800294c:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_IncTick+0x20>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_IncTick+0x24>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4413      	add	r3, r2
 8002958:	4a04      	ldr	r2, [pc, #16]	@ (800296c <HAL_IncTick+0x24>)
 800295a:	6013      	str	r3, [r2, #0]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000008 	.word	0x20000008
 800296c:	20000d2c 	.word	0x20000d2c

08002970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return uwTick;
 8002974:	4b03      	ldr	r3, [pc, #12]	@ (8002984 <HAL_GetTick+0x14>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000d2c 	.word	0x20000d2c

08002988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7ff ffee 	bl	8002970 <HAL_GetTick>
 8002994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d005      	beq.n	80029ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029a2:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <HAL_Delay+0x44>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ae:	bf00      	nop
 80029b0:	f7ff ffde 	bl	8002970 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d8f7      	bhi.n	80029b0 <HAL_Delay+0x28>
  {
  }
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000008 	.word	0x20000008

080029d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <__NVIC_SetPriorityGrouping+0x40>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029ec:	4013      	ands	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fe:	4a04      	ldr	r2, [pc, #16]	@ (8002a10 <__NVIC_SetPriorityGrouping+0x40>)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	60d3      	str	r3, [r2, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00
 8002a14:	05fa0000 	.word	0x05fa0000

08002a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a1c:	4b04      	ldr	r3, [pc, #16]	@ (8002a30 <__NVIC_GetPriorityGrouping+0x18>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	f003 0307 	and.w	r3, r3, #7
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db0b      	blt.n	8002a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	4907      	ldr	r1, [pc, #28]	@ (8002a6c <__NVIC_EnableIRQ+0x38>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2001      	movs	r0, #1
 8002a56:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000e100 	.word	0xe000e100

08002a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	db0a      	blt.n	8002a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	490c      	ldr	r1, [pc, #48]	@ (8002abc <__NVIC_SetPriority+0x4c>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	440b      	add	r3, r1
 8002a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a98:	e00a      	b.n	8002ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4908      	ldr	r1, [pc, #32]	@ (8002ac0 <__NVIC_SetPriority+0x50>)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	3b04      	subs	r3, #4
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	440b      	add	r3, r1
 8002aae:	761a      	strb	r2, [r3, #24]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000e100 	.word	0xe000e100
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	@ 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f1c3 0307 	rsb	r3, r3, #7
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	bf28      	it	cs
 8002ae2:	2304      	movcs	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d902      	bls.n	8002af4 <NVIC_EncodePriority+0x30>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3b03      	subs	r3, #3
 8002af2:	e000      	b.n	8002af6 <NVIC_EncodePriority+0x32>
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	f04f 32ff 	mov.w	r2, #4294967295
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	401a      	ands	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	4313      	orrs	r3, r2
         );
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	@ 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b3c:	d301      	bcc.n	8002b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00f      	b.n	8002b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b42:	4a0a      	ldr	r2, [pc, #40]	@ (8002b6c <SysTick_Config+0x40>)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4a:	210f      	movs	r1, #15
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f7ff ff8e 	bl	8002a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <SysTick_Config+0x40>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5a:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <SysTick_Config+0x40>)
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	e000e010 	.word	0xe000e010

08002b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff29 	bl	80029d0 <__NVIC_SetPriorityGrouping>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b98:	f7ff ff3e 	bl	8002a18 <__NVIC_GetPriorityGrouping>
 8002b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f7ff ff8e 	bl	8002ac4 <NVIC_EncodePriority>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff5d 	bl	8002a70 <__NVIC_SetPriority>
}
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff31 	bl	8002a34 <__NVIC_EnableIRQ>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff ffa2 	bl	8002b2c <SysTick_Config>
 8002be8:	4603      	mov	r3, r0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7ff feb6 	bl	8002970 <HAL_GetTick>
 8002c04:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d008      	beq.n	8002c24 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2280      	movs	r2, #128	@ 0x80
 8002c16:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e052      	b.n	8002cca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0216 	bic.w	r2, r2, #22
 8002c32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c42:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d103      	bne.n	8002c54 <HAL_DMA_Abort+0x62>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0208 	bic.w	r2, r2, #8
 8002c62:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c74:	e013      	b.n	8002c9e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c76:	f7ff fe7b 	bl	8002970 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d90c      	bls.n	8002c9e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2220      	movs	r2, #32
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e015      	b.n	8002cca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e4      	bne.n	8002c76 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb0:	223f      	movs	r2, #63	@ 0x3f
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2280      	movs	r2, #128	@ 0x80
 8002cea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e00c      	b.n	8002d0a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2205      	movs	r2, #5
 8002cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e086      	b.n	8002e38 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d106      	bne.n	8002d42 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2223      	movs	r2, #35	@ 0x23
 8002d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff fb33 	bl	80023a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	4b3f      	ldr	r3, [pc, #252]	@ (8002e40 <HAL_ETH_Init+0x128>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	4a3e      	ldr	r2, [pc, #248]	@ (8002e40 <HAL_ETH_Init+0x128>)
 8002d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e40 <HAL_ETH_Init+0x128>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e44 <HAL_ETH_Init+0x12c>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4a39      	ldr	r2, [pc, #228]	@ (8002e44 <HAL_ETH_Init+0x12c>)
 8002d60:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d64:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d66:	4b37      	ldr	r3, [pc, #220]	@ (8002e44 <HAL_ETH_Init+0x12c>)
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4935      	ldr	r1, [pc, #212]	@ (8002e44 <HAL_ETH_Init+0x12c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002d74:	4b33      	ldr	r3, [pc, #204]	@ (8002e44 <HAL_ETH_Init+0x12c>)
 8002d76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d90:	f7ff fdee 	bl	8002970 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002d96:	e011      	b.n	8002dbc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d98:	f7ff fdea 	bl	8002970 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002da6:	d909      	bls.n	8002dbc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2204      	movs	r2, #4
 8002dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	22e0      	movs	r2, #224	@ 0xe0
 8002db4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e03d      	b.n	8002e38 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e4      	bne.n	8002d98 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f97a 	bl	80030c8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fa25 	bl	8003224 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fa7b 	bl	80032d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	461a      	mov	r2, r3
 8002de6:	2100      	movs	r1, #0
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f9e3 	bl	80031b4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <HAL_ETH_Init+0x130>)
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002e22:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2210      	movs	r2, #16
 8002e32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40013800 	.word	0x40013800
 8002e48:	00020060 	.word	0x00020060

08002e4c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4b53      	ldr	r3, [pc, #332]	@ (8002fb0 <ETH_SetMACConfig+0x164>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	7b9b      	ldrb	r3, [r3, #14]
 8002e6a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	7c12      	ldrb	r2, [r2, #16]
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	d102      	bne.n	8002e7a <ETH_SetMACConfig+0x2e>
 8002e74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e78:	e000      	b.n	8002e7c <ETH_SetMACConfig+0x30>
 8002e7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e7c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	7c52      	ldrb	r2, [r2, #17]
 8002e82:	2a00      	cmp	r2, #0
 8002e84:	d102      	bne.n	8002e8c <ETH_SetMACConfig+0x40>
 8002e86:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002e8a:	e000      	b.n	8002e8e <ETH_SetMACConfig+0x42>
 8002e8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e8e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	7fdb      	ldrb	r3, [r3, #31]
 8002e9a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e9c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ea2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	7f92      	ldrb	r2, [r2, #30]
 8002ea8:	2a00      	cmp	r2, #0
 8002eaa:	d102      	bne.n	8002eb2 <ETH_SetMACConfig+0x66>
 8002eac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002eb0:	e000      	b.n	8002eb4 <ETH_SetMACConfig+0x68>
 8002eb2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002eb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	7f1b      	ldrb	r3, [r3, #28]
 8002eba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ebc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ec2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	791b      	ldrb	r3, [r3, #4]
 8002ec8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002eca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ed2:	2a00      	cmp	r2, #0
 8002ed4:	d102      	bne.n	8002edc <ETH_SetMACConfig+0x90>
 8002ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eda:	e000      	b.n	8002ede <ETH_SetMACConfig+0x92>
 8002edc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ede:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	7bdb      	ldrb	r3, [r3, #15]
 8002ee4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ee6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002eec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ef4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f7ff fd3a 	bl	8002988 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f32:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002f3a:	2a00      	cmp	r2, #0
 8002f3c:	d101      	bne.n	8002f42 <ETH_SetMACConfig+0xf6>
 8002f3e:	2280      	movs	r2, #128	@ 0x80
 8002f40:	e000      	b.n	8002f44 <ETH_SetMACConfig+0xf8>
 8002f42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f44:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002f52:	2a01      	cmp	r2, #1
 8002f54:	d101      	bne.n	8002f5a <ETH_SetMACConfig+0x10e>
 8002f56:	2208      	movs	r2, #8
 8002f58:	e000      	b.n	8002f5c <ETH_SetMACConfig+0x110>
 8002f5a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002f64:	2a01      	cmp	r2, #1
 8002f66:	d101      	bne.n	8002f6c <ETH_SetMACConfig+0x120>
 8002f68:	2204      	movs	r2, #4
 8002f6a:	e000      	b.n	8002f6e <ETH_SetMACConfig+0x122>
 8002f6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002f76:	2a01      	cmp	r2, #1
 8002f78:	d101      	bne.n	8002f7e <ETH_SetMACConfig+0x132>
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	e000      	b.n	8002f80 <ETH_SetMACConfig+0x134>
 8002f7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f80:	4313      	orrs	r3, r2
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7ff fcf5 	bl	8002988 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	619a      	str	r2, [r3, #24]
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	fd20810f 	.word	0xfd20810f

08002fb4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80030c4 <ETH_SetDMAConfig+0x110>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	7b1b      	ldrb	r3, [r3, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d102      	bne.n	8002fe0 <ETH_SetDMAConfig+0x2c>
 8002fda:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002fde:	e000      	b.n	8002fe2 <ETH_SetDMAConfig+0x2e>
 8002fe0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	7b5b      	ldrb	r3, [r3, #13]
 8002fe6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fe8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	7f52      	ldrb	r2, [r2, #29]
 8002fee:	2a00      	cmp	r2, #0
 8002ff0:	d102      	bne.n	8002ff8 <ETH_SetDMAConfig+0x44>
 8002ff2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ff6:	e000      	b.n	8002ffa <ETH_SetDMAConfig+0x46>
 8002ff8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ffa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	7b9b      	ldrb	r3, [r3, #14]
 8003000:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003002:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003008:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7f1b      	ldrb	r3, [r3, #28]
 800300e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003010:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	7f9b      	ldrb	r3, [r3, #30]
 8003016:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003018:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800301e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003026:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003028:	4313      	orrs	r3, r2
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003038:	461a      	mov	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800304a:	2001      	movs	r0, #1
 800304c:	f7ff fc9c 	bl	8002988 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003058:	461a      	mov	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	791b      	ldrb	r3, [r3, #4]
 8003062:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003068:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800306e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003074:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800307c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800307e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003084:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003086:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800308c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003096:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800309a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7ff fc6d 	bl	8002988 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6013      	str	r3, [r2, #0]
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	f8de3f23 	.word	0xf8de3f23

080030c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b0a6      	sub	sp, #152	@ 0x98
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80030dc:	2300      	movs	r3, #0
 80030de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800310a:	2300      	movs	r3, #0
 800310c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003114:	2300      	movs	r3, #0
 8003116:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003130:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003134:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003136:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800313a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800313c:	2300      	movs	r3, #0
 800313e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003142:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fe7f 	bl	8002e4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800314e:	2301      	movs	r3, #1
 8003150:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003152:	2301      	movs	r3, #1
 8003154:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800315c:	2301      	movs	r3, #1
 800315e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003170:	2300      	movs	r3, #0
 8003172:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003174:	2301      	movs	r3, #1
 8003176:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800317a:	2301      	movs	r3, #1
 800317c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800317e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003182:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003184:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003188:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800318a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800318e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003196:	2300      	movs	r3, #0
 8003198:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800319e:	f107 0308 	add.w	r3, r7, #8
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ff05 	bl	8002fb4 <ETH_SetDMAConfig>
}
 80031aa:	bf00      	nop
 80031ac:	3798      	adds	r7, #152	@ 0x98
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3305      	adds	r3, #5
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	3204      	adds	r2, #4
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <ETH_MACAddressConfig+0x68>)
 80031d6:	4413      	add	r3, r2
 80031d8:	461a      	mov	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3303      	adds	r3, #3
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	061a      	lsls	r2, r3, #24
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3302      	adds	r3, #2
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3301      	adds	r3, #1
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	4313      	orrs	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <ETH_MACAddressConfig+0x6c>)
 8003206:	4413      	add	r3, r2
 8003208:	461a      	mov	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	6013      	str	r3, [r2, #0]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40028040 	.word	0x40028040
 8003220:	40028044 	.word	0x40028044

08003224 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e03e      	b.n	80032b0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68d9      	ldr	r1, [r3, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2200      	movs	r2, #0
 800324e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	3206      	adds	r2, #6
 8003264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d80c      	bhi.n	8003294 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68d9      	ldr	r1, [r3, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	440b      	add	r3, r1
 800328c:	461a      	mov	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	e004      	b.n	800329e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	461a      	mov	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3301      	adds	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d9bd      	bls.n	8003232 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032c8:	611a      	str	r2, [r3, #16]
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	e048      	b.n	8003376 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6919      	ldr	r1, [r3, #16]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2200      	movs	r2, #0
 8003300:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2200      	movs	r2, #0
 800330c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003320:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	3212      	adds	r2, #18
 8003342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b02      	cmp	r3, #2
 800334a:	d80c      	bhi.n	8003366 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6919      	ldr	r1, [r3, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	440b      	add	r3, r1
 800335e:	461a      	mov	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	e004      	b.n	8003370 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	461a      	mov	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d9b3      	bls.n	80032e4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033a6:	60da      	str	r2, [r3, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	@ 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	e175      	b.n	80036c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033d4:	2201      	movs	r2, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	f040 8164 	bne.w	80036ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d005      	beq.n	800340a <HAL_GPIO_Init+0x56>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d130      	bne.n	800346c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	2203      	movs	r2, #3
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003440:	2201      	movs	r2, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 0201 	and.w	r2, r3, #1
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b03      	cmp	r3, #3
 8003476:	d017      	beq.n	80034a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d123      	bne.n	80034fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	08da      	lsrs	r2, r3, #3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3208      	adds	r2, #8
 80034bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	220f      	movs	r2, #15
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	08da      	lsrs	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3208      	adds	r2, #8
 80034f6:	69b9      	ldr	r1, [r7, #24]
 80034f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0203 	and.w	r2, r3, #3
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80be 	beq.w	80036ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353e:	4b66      	ldr	r3, [pc, #408]	@ (80036d8 <HAL_GPIO_Init+0x324>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003542:	4a65      	ldr	r2, [pc, #404]	@ (80036d8 <HAL_GPIO_Init+0x324>)
 8003544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003548:	6453      	str	r3, [r2, #68]	@ 0x44
 800354a:	4b63      	ldr	r3, [pc, #396]	@ (80036d8 <HAL_GPIO_Init+0x324>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003556:	4a61      	ldr	r2, [pc, #388]	@ (80036dc <HAL_GPIO_Init+0x328>)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	3302      	adds	r3, #2
 800355e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	220f      	movs	r2, #15
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a58      	ldr	r2, [pc, #352]	@ (80036e0 <HAL_GPIO_Init+0x32c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d037      	beq.n	80035f2 <HAL_GPIO_Init+0x23e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a57      	ldr	r2, [pc, #348]	@ (80036e4 <HAL_GPIO_Init+0x330>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d031      	beq.n	80035ee <HAL_GPIO_Init+0x23a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a56      	ldr	r2, [pc, #344]	@ (80036e8 <HAL_GPIO_Init+0x334>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d02b      	beq.n	80035ea <HAL_GPIO_Init+0x236>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a55      	ldr	r2, [pc, #340]	@ (80036ec <HAL_GPIO_Init+0x338>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d025      	beq.n	80035e6 <HAL_GPIO_Init+0x232>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a54      	ldr	r2, [pc, #336]	@ (80036f0 <HAL_GPIO_Init+0x33c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01f      	beq.n	80035e2 <HAL_GPIO_Init+0x22e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a53      	ldr	r2, [pc, #332]	@ (80036f4 <HAL_GPIO_Init+0x340>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d019      	beq.n	80035de <HAL_GPIO_Init+0x22a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a52      	ldr	r2, [pc, #328]	@ (80036f8 <HAL_GPIO_Init+0x344>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_GPIO_Init+0x226>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a51      	ldr	r2, [pc, #324]	@ (80036fc <HAL_GPIO_Init+0x348>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00d      	beq.n	80035d6 <HAL_GPIO_Init+0x222>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a50      	ldr	r2, [pc, #320]	@ (8003700 <HAL_GPIO_Init+0x34c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d007      	beq.n	80035d2 <HAL_GPIO_Init+0x21e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003704 <HAL_GPIO_Init+0x350>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_GPIO_Init+0x21a>
 80035ca:	2309      	movs	r3, #9
 80035cc:	e012      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035ce:	230a      	movs	r3, #10
 80035d0:	e010      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035d2:	2308      	movs	r3, #8
 80035d4:	e00e      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035d6:	2307      	movs	r3, #7
 80035d8:	e00c      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035da:	2306      	movs	r3, #6
 80035dc:	e00a      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035de:	2305      	movs	r3, #5
 80035e0:	e008      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035e2:	2304      	movs	r3, #4
 80035e4:	e006      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035e6:	2303      	movs	r3, #3
 80035e8:	e004      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e002      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_GPIO_Init+0x240>
 80035f2:	2300      	movs	r3, #0
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	f002 0203 	and.w	r2, r2, #3
 80035fa:	0092      	lsls	r2, r2, #2
 80035fc:	4093      	lsls	r3, r2
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003604:	4935      	ldr	r1, [pc, #212]	@ (80036dc <HAL_GPIO_Init+0x328>)
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	3302      	adds	r3, #2
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003612:	4b3d      	ldr	r3, [pc, #244]	@ (8003708 <HAL_GPIO_Init+0x354>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003636:	4a34      	ldr	r2, [pc, #208]	@ (8003708 <HAL_GPIO_Init+0x354>)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800363c:	4b32      	ldr	r3, [pc, #200]	@ (8003708 <HAL_GPIO_Init+0x354>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003660:	4a29      	ldr	r2, [pc, #164]	@ (8003708 <HAL_GPIO_Init+0x354>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003666:	4b28      	ldr	r3, [pc, #160]	@ (8003708 <HAL_GPIO_Init+0x354>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800368a:	4a1f      	ldr	r2, [pc, #124]	@ (8003708 <HAL_GPIO_Init+0x354>)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003690:	4b1d      	ldr	r3, [pc, #116]	@ (8003708 <HAL_GPIO_Init+0x354>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036b4:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <HAL_GPIO_Init+0x354>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	f67f ae86 	bls.w	80033d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3724      	adds	r7, #36	@ 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40013800 	.word	0x40013800
 80036e0:	40020000 	.word	0x40020000
 80036e4:	40020400 	.word	0x40020400
 80036e8:	40020800 	.word	0x40020800
 80036ec:	40020c00 	.word	0x40020c00
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40021400 	.word	0x40021400
 80036f8:	40021800 	.word	0x40021800
 80036fc:	40021c00 	.word	0x40021c00
 8003700:	40022000 	.word	0x40022000
 8003704:	40022400 	.word	0x40022400
 8003708:	40013c00 	.word	0x40013c00

0800370c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	807b      	strh	r3, [r7, #2]
 8003718:	4613      	mov	r3, r2
 800371a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800371c:	787b      	ldrb	r3, [r7, #1]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003728:	e003      	b.n	8003732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800372a:	887b      	ldrh	r3, [r7, #2]
 800372c:	041a      	lsls	r2, r3, #16
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	619a      	str	r2, [r3, #24]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a04      	ldr	r2, [pc, #16]	@ (800375c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40007000 	.word	0x40007000

08003760 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003768:	2300      	movs	r3, #0
 800376a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e291      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8087 	beq.w	8003892 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003784:	4b96      	ldr	r3, [pc, #600]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b04      	cmp	r3, #4
 800378e:	d00c      	beq.n	80037aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003790:	4b93      	ldr	r3, [pc, #588]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d112      	bne.n	80037c2 <HAL_RCC_OscConfig+0x62>
 800379c:	4b90      	ldr	r3, [pc, #576]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a8:	d10b      	bne.n	80037c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037aa:	4b8d      	ldr	r3, [pc, #564]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d06c      	beq.n	8003890 <HAL_RCC_OscConfig+0x130>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d168      	bne.n	8003890 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e26b      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x7a>
 80037cc:	4b84      	ldr	r3, [pc, #528]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a83      	ldr	r2, [pc, #524]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	e02e      	b.n	8003838 <HAL_RCC_OscConfig+0xd8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x9c>
 80037e2:	4b7f      	ldr	r3, [pc, #508]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7e      	ldr	r2, [pc, #504]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80037e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	4b7c      	ldr	r3, [pc, #496]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a7b      	ldr	r2, [pc, #492]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80037f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e01d      	b.n	8003838 <HAL_RCC_OscConfig+0xd8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0xc0>
 8003806:	4b76      	ldr	r3, [pc, #472]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a75      	ldr	r2, [pc, #468]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b73      	ldr	r3, [pc, #460]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a72      	ldr	r2, [pc, #456]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0xd8>
 8003820:	4b6f      	ldr	r3, [pc, #444]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6e      	ldr	r2, [pc, #440]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b6c      	ldr	r3, [pc, #432]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a6b      	ldr	r2, [pc, #428]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7ff f896 	bl	8002970 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003848:	f7ff f892 	bl	8002970 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	@ 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e21f      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b61      	ldr	r3, [pc, #388]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0xe8>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7ff f882 	bl	8002970 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7ff f87e 	bl	8002970 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e20b      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	4b57      	ldr	r3, [pc, #348]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x110>
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d069      	beq.n	8003972 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800389e:	4b50      	ldr	r3, [pc, #320]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038aa:	4b4d      	ldr	r3, [pc, #308]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d11c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x190>
 80038b6:	4b4a      	ldr	r3, [pc, #296]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d116      	bne.n	80038f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c2:	4b47      	ldr	r3, [pc, #284]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_RCC_OscConfig+0x17a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e1df      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038da:	4b41      	ldr	r3, [pc, #260]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	493d      	ldr	r1, [pc, #244]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	e040      	b.n	8003972 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d023      	beq.n	8003940 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f8:	4b39      	ldr	r3, [pc, #228]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a38      	ldr	r2, [pc, #224]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7ff f834 	bl	8002970 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390c:	f7ff f830 	bl	8002970 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e1bd      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	4b30      	ldr	r3, [pc, #192]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392a:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4929      	ldr	r1, [pc, #164]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
 800393e:	e018      	b.n	8003972 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003940:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a26      	ldr	r2, [pc, #152]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7ff f810 	bl	8002970 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003954:	f7ff f80c 	bl	8002970 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e199      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	4b1e      	ldr	r3, [pc, #120]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d038      	beq.n	80039f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d019      	beq.n	80039ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b16      	ldr	r3, [pc, #88]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 8003988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398a:	4a15      	ldr	r2, [pc, #84]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003992:	f7fe ffed 	bl	8002970 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399a:	f7fe ffe9 	bl	8002970 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e176      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ac:	4b0c      	ldr	r3, [pc, #48]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x23a>
 80039b8:	e01a      	b.n	80039f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ba:	4b09      	ldr	r3, [pc, #36]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80039bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039be:	4a08      	ldr	r2, [pc, #32]	@ (80039e0 <HAL_RCC_OscConfig+0x280>)
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c6:	f7fe ffd3 	bl	8002970 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039cc:	e00a      	b.n	80039e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ce:	f7fe ffcf 	bl	8002970 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d903      	bls.n	80039e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e15c      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
 80039e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e4:	4b91      	ldr	r3, [pc, #580]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1ee      	bne.n	80039ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80a4 	beq.w	8003b46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fe:	4b8b      	ldr	r3, [pc, #556]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10d      	bne.n	8003a26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	4b88      	ldr	r3, [pc, #544]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	4a87      	ldr	r2, [pc, #540]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a16:	4b85      	ldr	r3, [pc, #532]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a26:	4b82      	ldr	r3, [pc, #520]	@ (8003c30 <HAL_RCC_OscConfig+0x4d0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d118      	bne.n	8003a64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a32:	4b7f      	ldr	r3, [pc, #508]	@ (8003c30 <HAL_RCC_OscConfig+0x4d0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7e      	ldr	r2, [pc, #504]	@ (8003c30 <HAL_RCC_OscConfig+0x4d0>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe ff97 	bl	8002970 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fe ff93 	bl	8002970 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	@ 0x64
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e120      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a58:	4b75      	ldr	r3, [pc, #468]	@ (8003c30 <HAL_RCC_OscConfig+0x4d0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x31a>
 8003a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a70:	4a6e      	ldr	r2, [pc, #440]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a78:	e02d      	b.n	8003ad6 <HAL_RCC_OscConfig+0x376>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x33c>
 8003a82:	4b6a      	ldr	r3, [pc, #424]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a86:	4a69      	ldr	r2, [pc, #420]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a8e:	4b67      	ldr	r3, [pc, #412]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a92:	4a66      	ldr	r2, [pc, #408]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a9a:	e01c      	b.n	8003ad6 <HAL_RCC_OscConfig+0x376>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b05      	cmp	r3, #5
 8003aa2:	d10c      	bne.n	8003abe <HAL_RCC_OscConfig+0x35e>
 8003aa4:	4b61      	ldr	r3, [pc, #388]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa8:	4a60      	ldr	r2, [pc, #384]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003aaa:	f043 0304 	orr.w	r3, r3, #4
 8003aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab4:	4a5d      	ldr	r2, [pc, #372]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003abc:	e00b      	b.n	8003ad6 <HAL_RCC_OscConfig+0x376>
 8003abe:	4b5b      	ldr	r3, [pc, #364]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac2:	4a5a      	ldr	r2, [pc, #360]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aca:	4b58      	ldr	r3, [pc, #352]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	4a57      	ldr	r2, [pc, #348]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003ad0:	f023 0304 	bic.w	r3, r3, #4
 8003ad4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d015      	beq.n	8003b0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ade:	f7fe ff47 	bl	8002970 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fe ff43 	bl	8002970 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e0ce      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afc:	4b4b      	ldr	r3, [pc, #300]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ee      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x386>
 8003b08:	e014      	b.n	8003b34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0a:	f7fe ff31 	bl	8002970 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fe ff2d 	bl	8002970 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e0b8      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b28:	4b40      	ldr	r3, [pc, #256]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ee      	bne.n	8003b12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d105      	bne.n	8003b46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b44:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80a4 	beq.w	8003c98 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b50:	4b36      	ldr	r3, [pc, #216]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d06b      	beq.n	8003c34 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d149      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b64:	4b31      	ldr	r3, [pc, #196]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a30      	ldr	r2, [pc, #192]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe fefe 	bl	8002970 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fe fefa 	bl	8002970 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e087      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8a:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	019b      	lsls	r3, r3, #6
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	085b      	lsrs	r3, r3, #1
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb8:	061b      	lsls	r3, r3, #24
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003bbe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003bc2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc4:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a18      	ldr	r2, [pc, #96]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fece 	bl	8002970 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fe feca 	bl	8002970 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e057      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bea:	4b10      	ldr	r3, [pc, #64]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x478>
 8003bf6:	e04f      	b.n	8003c98 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fe feb4 	bl	8002970 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fe feb0 	bl	8002970 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e03d      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	4b03      	ldr	r3, [pc, #12]	@ (8003c2c <HAL_RCC_OscConfig+0x4cc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x4ac>
 8003c2a:	e035      	b.n	8003c98 <HAL_RCC_OscConfig+0x538>
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca4 <HAL_RCC_OscConfig+0x544>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d028      	beq.n	8003c94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d121      	bne.n	8003c94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d11a      	bne.n	8003c94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c64:	4013      	ands	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d111      	bne.n	8003c94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7a:	085b      	lsrs	r3, r3, #1
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d107      	bne.n	8003c94 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800

08003ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e0d0      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d910      	bls.n	8003cf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b67      	ldr	r3, [pc, #412]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 020f 	bic.w	r2, r3, #15
 8003cd6:	4965      	ldr	r1, [pc, #404]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b63      	ldr	r3, [pc, #396]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0b8      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d020      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d08:	4b59      	ldr	r3, [pc, #356]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a58      	ldr	r2, [pc, #352]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d20:	4b53      	ldr	r3, [pc, #332]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4a52      	ldr	r2, [pc, #328]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d2c:	4b50      	ldr	r3, [pc, #320]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	494d      	ldr	r1, [pc, #308]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d040      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	4b47      	ldr	r3, [pc, #284]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d115      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e07f      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d107      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6a:	4b41      	ldr	r3, [pc, #260]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e073      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e06b      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d8a:	4b39      	ldr	r3, [pc, #228]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f023 0203 	bic.w	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4936      	ldr	r1, [pc, #216]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9c:	f7fe fde8 	bl	8002970 <HAL_GetTick>
 8003da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da4:	f7fe fde4 	bl	8002970 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e053      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dba:	4b2d      	ldr	r3, [pc, #180]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 020c 	and.w	r2, r3, #12
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d1eb      	bne.n	8003da4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b27      	ldr	r3, [pc, #156]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d210      	bcs.n	8003dfc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b24      	ldr	r3, [pc, #144]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 020f 	bic.w	r2, r3, #15
 8003de2:	4922      	ldr	r1, [pc, #136]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b20      	ldr	r3, [pc, #128]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e032      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e08:	4b19      	ldr	r3, [pc, #100]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4916      	ldr	r1, [pc, #88]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e26:	4b12      	ldr	r3, [pc, #72]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	490e      	ldr	r1, [pc, #56]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e3a:	f000 f821 	bl	8003e80 <HAL_RCC_GetSysClockFreq>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	4b0b      	ldr	r3, [pc, #44]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	490a      	ldr	r1, [pc, #40]	@ (8003e74 <HAL_RCC_ClockConfig+0x1cc>)
 8003e4c:	5ccb      	ldrb	r3, [r1, r3]
 8003e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e52:	4a09      	ldr	r2, [pc, #36]	@ (8003e78 <HAL_RCC_ClockConfig+0x1d0>)
 8003e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e56:	4b09      	ldr	r3, [pc, #36]	@ (8003e7c <HAL_RCC_ClockConfig+0x1d4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fd44 	bl	80028e8 <HAL_InitTick>

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023c00 	.word	0x40023c00
 8003e70:	40023800 	.word	0x40023800
 8003e74:	08007c14 	.word	0x08007c14
 8003e78:	20000000 	.word	0x20000000
 8003e7c:	20000004 	.word	0x20000004

08003e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e84:	b094      	sub	sp, #80	@ 0x50
 8003e86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e90:	2300      	movs	r3, #0
 8003e92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e98:	4b79      	ldr	r3, [pc, #484]	@ (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	f200 80e1 	bhi.w	800406c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_GetSysClockFreq+0x3a>
 8003eb2:	e0db      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eb4:	4b73      	ldr	r3, [pc, #460]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eb8:	e0db      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eba:	4b73      	ldr	r3, [pc, #460]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ebe:	e0d8      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ec8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003eca:	4b6d      	ldr	r3, [pc, #436]	@ (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	099b      	lsrs	r3, r3, #6
 8003edc:	2200      	movs	r2, #0
 8003ede:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ee0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ee8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eea:	2300      	movs	r3, #0
 8003eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	f04f 0000 	mov.w	r0, #0
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	0159      	lsls	r1, r3, #5
 8003f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f04:	0150      	lsls	r0, r2, #5
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	1a51      	subs	r1, r2, r1
 8003f0e:	6139      	str	r1, [r7, #16]
 8003f10:	4629      	mov	r1, r5
 8003f12:	eb63 0301 	sbc.w	r3, r3, r1
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f24:	4659      	mov	r1, fp
 8003f26:	018b      	lsls	r3, r1, #6
 8003f28:	4651      	mov	r1, sl
 8003f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f2e:	4651      	mov	r1, sl
 8003f30:	018a      	lsls	r2, r1, #6
 8003f32:	4651      	mov	r1, sl
 8003f34:	ebb2 0801 	subs.w	r8, r2, r1
 8003f38:	4659      	mov	r1, fp
 8003f3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f52:	4690      	mov	r8, r2
 8003f54:	4699      	mov	r9, r3
 8003f56:	4623      	mov	r3, r4
 8003f58:	eb18 0303 	adds.w	r3, r8, r3
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	462b      	mov	r3, r5
 8003f60:	eb49 0303 	adc.w	r3, r9, r3
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f72:	4629      	mov	r1, r5
 8003f74:	024b      	lsls	r3, r1, #9
 8003f76:	4621      	mov	r1, r4
 8003f78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	024a      	lsls	r2, r1, #9
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f86:	2200      	movs	r2, #0
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f90:	f7fc f93a 	bl	8000208 <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4613      	mov	r3, r2
 8003f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f9c:	e058      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9e:	4b38      	ldr	r3, [pc, #224]	@ (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	099b      	lsrs	r3, r3, #6
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	4611      	mov	r1, r2
 8003faa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fb8:	4642      	mov	r2, r8
 8003fba:	464b      	mov	r3, r9
 8003fbc:	f04f 0000 	mov.w	r0, #0
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	0159      	lsls	r1, r3, #5
 8003fc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fca:	0150      	lsls	r0, r2, #5
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fe8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ff0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ff4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	00eb      	lsls	r3, r5, #3
 8004002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004006:	00e2      	lsls	r2, r4, #3
 8004008:	4614      	mov	r4, r2
 800400a:	461d      	mov	r5, r3
 800400c:	4643      	mov	r3, r8
 800400e:	18e3      	adds	r3, r4, r3
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	464b      	mov	r3, r9
 8004014:	eb45 0303 	adc.w	r3, r5, r3
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004026:	4629      	mov	r1, r5
 8004028:	028b      	lsls	r3, r1, #10
 800402a:	4621      	mov	r1, r4
 800402c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004030:	4621      	mov	r1, r4
 8004032:	028a      	lsls	r2, r1, #10
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800403a:	2200      	movs	r2, #0
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	61fa      	str	r2, [r7, #28]
 8004040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004044:	f7fc f8e0 	bl	8000208 <__aeabi_uldivmod>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4613      	mov	r3, r2
 800404e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004050:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <HAL_RCC_GetSysClockFreq+0x200>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	0c1b      	lsrs	r3, r3, #16
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	3301      	adds	r3, #1
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004060:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800406a:	e002      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800406c:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x204>)
 800406e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004074:	4618      	mov	r0, r3
 8004076:	3750      	adds	r7, #80	@ 0x50
 8004078:	46bd      	mov	sp, r7
 800407a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
 8004084:	00f42400 	.word	0x00f42400
 8004088:	007a1200 	.word	0x007a1200

0800408c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004090:	4b03      	ldr	r3, [pc, #12]	@ (80040a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004092:	681b      	ldr	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000000 	.word	0x20000000

080040a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040a8:	f7ff fff0 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	0a9b      	lsrs	r3, r3, #10
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4903      	ldr	r1, [pc, #12]	@ (80040c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	08007c24 	.word	0x08007c24

080040cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040d0:	f7ff ffdc 	bl	800408c <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b05      	ldr	r3, [pc, #20]	@ (80040ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	0b5b      	lsrs	r3, r3, #13
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4903      	ldr	r1, [pc, #12]	@ (80040f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40023800 	.word	0x40023800
 80040f0:	08007c24 	.word	0x08007c24

080040f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d012      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800411c:	4b69      	ldr	r3, [pc, #420]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a68      	ldr	r2, [pc, #416]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004122:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004126:	6093      	str	r3, [r2, #8]
 8004128:	4b66      	ldr	r3, [pc, #408]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004130:	4964      	ldr	r1, [pc, #400]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800413e:	2301      	movs	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d017      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800414e:	4b5d      	ldr	r3, [pc, #372]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004154:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415c:	4959      	ldr	r1, [pc, #356]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004168:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800416c:	d101      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800417a:	2301      	movs	r3, #1
 800417c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d017      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800418a:	4b4e      	ldr	r3, [pc, #312]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800418c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004190:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	494a      	ldr	r1, [pc, #296]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041a8:	d101      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041b6:	2301      	movs	r3, #1
 80041b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 808b 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041d8:	4b3a      	ldr	r3, [pc, #232]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	4a39      	ldr	r2, [pc, #228]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80041e4:	4b37      	ldr	r3, [pc, #220]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041f0:	4b35      	ldr	r3, [pc, #212]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a34      	ldr	r2, [pc, #208]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fc:	f7fe fbb8 	bl	8002970 <HAL_GetTick>
 8004200:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004204:	f7fe fbb4 	bl	8002970 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	@ 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e357      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004216:	4b2c      	ldr	r3, [pc, #176]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004222:	4b28      	ldr	r3, [pc, #160]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800422a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d035      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	429a      	cmp	r2, r3
 800423e:	d02e      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004240:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004248:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800424a:	4b1e      	ldr	r3, [pc, #120]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424e:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004254:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004256:	4b1b      	ldr	r3, [pc, #108]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	4a1a      	ldr	r2, [pc, #104]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004260:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004262:	4a18      	ldr	r2, [pc, #96]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004268:	4b16      	ldr	r3, [pc, #88]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b01      	cmp	r3, #1
 8004272:	d114      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fe fb7c 	bl	8002970 <HAL_GetTick>
 8004278:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427a:	e00a      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fe fb78 	bl	8002970 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e319      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004292:	4b0c      	ldr	r3, [pc, #48]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0ee      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042aa:	d111      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80042ac:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80042b8:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042ba:	400b      	ands	r3, r1
 80042bc:	4901      	ldr	r1, [pc, #4]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
 80042c2:	e00b      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40007000 	.word	0x40007000
 80042cc:	0ffffcff 	.word	0x0ffffcff
 80042d0:	4baa      	ldr	r3, [pc, #680]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4aa9      	ldr	r2, [pc, #676]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80042da:	6093      	str	r3, [r2, #8]
 80042dc:	4ba7      	ldr	r3, [pc, #668]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e8:	49a4      	ldr	r1, [pc, #656]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d010      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042fa:	4ba0      	ldr	r3, [pc, #640]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004300:	4a9e      	ldr	r2, [pc, #632]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004306:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800430a:	4b9c      	ldr	r3, [pc, #624]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800430c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004314:	4999      	ldr	r1, [pc, #612]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004328:	4b94      	ldr	r3, [pc, #592]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004336:	4991      	ldr	r1, [pc, #580]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800434a:	4b8c      	ldr	r3, [pc, #560]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004350:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004358:	4988      	ldr	r1, [pc, #544]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800436c:	4b83      	ldr	r3, [pc, #524]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004372:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800437a:	4980      	ldr	r1, [pc, #512]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800438e:	4b7b      	ldr	r3, [pc, #492]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004394:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439c:	4977      	ldr	r1, [pc, #476]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043b0:	4b72      	ldr	r3, [pc, #456]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b6:	f023 0203 	bic.w	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	496f      	ldr	r1, [pc, #444]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043d2:	4b6a      	ldr	r3, [pc, #424]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	f023 020c 	bic.w	r2, r3, #12
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e0:	4966      	ldr	r1, [pc, #408]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f4:	4b61      	ldr	r3, [pc, #388]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004402:	495e      	ldr	r1, [pc, #376]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004416:	4b59      	ldr	r3, [pc, #356]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004424:	4955      	ldr	r1, [pc, #340]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004438:	4b50      	ldr	r3, [pc, #320]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004446:	494d      	ldr	r1, [pc, #308]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800445a:	4b48      	ldr	r3, [pc, #288]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004460:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004468:	4944      	ldr	r1, [pc, #272]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800447c:	4b3f      	ldr	r3, [pc, #252]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004482:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448a:	493c      	ldr	r1, [pc, #240]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800449e:	4b37      	ldr	r3, [pc, #220]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ac:	4933      	ldr	r1, [pc, #204]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044c0:	4b2e      	ldr	r3, [pc, #184]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044ce:	492b      	ldr	r1, [pc, #172]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d011      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044e2:	4b26      	ldr	r3, [pc, #152]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f0:	4922      	ldr	r1, [pc, #136]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004500:	d101      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004502:	2301      	movs	r3, #1
 8004504:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004522:	4b16      	ldr	r3, [pc, #88]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004528:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004530:	4912      	ldr	r1, [pc, #72]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00b      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004544:	4b0d      	ldr	r3, [pc, #52]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004554:	4909      	ldr	r1, [pc, #36]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d006      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 80d9 	beq.w	8004722 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004570:	4b02      	ldr	r3, [pc, #8]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a01      	ldr	r2, [pc, #4]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004576:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800457a:	e001      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800457c:	40023800 	.word	0x40023800
 8004580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004582:	f7fe f9f5 	bl	8002970 <HAL_GetTick>
 8004586:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004588:	e008      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800458a:	f7fe f9f1 	bl	8002970 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b64      	cmp	r3, #100	@ 0x64
 8004596:	d901      	bls.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e194      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800459c:	4b6c      	ldr	r3, [pc, #432]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f0      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d021      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11d      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045bc:	4b64      	ldr	r3, [pc, #400]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045c2:	0c1b      	lsrs	r3, r3, #16
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045ca:	4b61      	ldr	r3, [pc, #388]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045d0:	0e1b      	lsrs	r3, r3, #24
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	019a      	lsls	r2, r3, #6
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	431a      	orrs	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	061b      	lsls	r3, r3, #24
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	071b      	lsls	r3, r3, #28
 80045f0:	4957      	ldr	r1, [pc, #348]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d004      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004608:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004616:	2b00      	cmp	r3, #0
 8004618:	d02e      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004622:	d129      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004624:	4b4a      	ldr	r3, [pc, #296]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004632:	4b47      	ldr	r3, [pc, #284]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004638:	0f1b      	lsrs	r3, r3, #28
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	019a      	lsls	r2, r3, #6
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	431a      	orrs	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	071b      	lsls	r3, r3, #28
 8004658:	493d      	ldr	r1, [pc, #244]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004660:	4b3b      	ldr	r3, [pc, #236]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004666:	f023 021f 	bic.w	r2, r3, #31
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	3b01      	subs	r3, #1
 8004670:	4937      	ldr	r1, [pc, #220]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01d      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004684:	4b32      	ldr	r3, [pc, #200]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800468a:	0e1b      	lsrs	r3, r3, #24
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004692:	4b2f      	ldr	r3, [pc, #188]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004698:	0f1b      	lsrs	r3, r3, #28
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	019a      	lsls	r2, r3, #6
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	431a      	orrs	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	431a      	orrs	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	071b      	lsls	r3, r3, #28
 80046b8:	4925      	ldr	r1, [pc, #148]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d011      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	019a      	lsls	r2, r3, #6
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	061b      	lsls	r3, r3, #24
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	071b      	lsls	r3, r3, #28
 80046e8:	4919      	ldr	r1, [pc, #100]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046f0:	4b17      	ldr	r3, [pc, #92]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a16      	ldr	r2, [pc, #88]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fc:	f7fe f938 	bl	8002970 <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004704:	f7fe f934 	bl	8002970 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	@ 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e0d7      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004716:	4b0e      	ldr	r3, [pc, #56]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	2b01      	cmp	r3, #1
 8004726:	f040 80cd 	bne.w	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800472a:	4b09      	ldr	r3, [pc, #36]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a08      	ldr	r2, [pc, #32]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004730:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004736:	f7fe f91b 	bl	8002970 <HAL_GetTick>
 800473a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800473c:	e00a      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800473e:	f7fe f917 	bl	8002970 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b64      	cmp	r3, #100	@ 0x64
 800474a:	d903      	bls.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e0ba      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004750:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004754:	4b5e      	ldr	r3, [pc, #376]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800475c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004760:	d0ed      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d009      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800477e:	2b00      	cmp	r3, #0
 8004780:	d02e      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d12a      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800478a:	4b51      	ldr	r3, [pc, #324]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004798:	4b4d      	ldr	r3, [pc, #308]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479e:	0f1b      	lsrs	r3, r3, #28
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	019a      	lsls	r2, r3, #6
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	061b      	lsls	r3, r3, #24
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	071b      	lsls	r3, r3, #28
 80047be:	4944      	ldr	r1, [pc, #272]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047c6:	4b42      	ldr	r3, [pc, #264]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047cc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	3b01      	subs	r3, #1
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	493d      	ldr	r1, [pc, #244]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d022      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047f4:	d11d      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047f6:	4b36      	ldr	r3, [pc, #216]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fc:	0e1b      	lsrs	r3, r3, #24
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004804:	4b32      	ldr	r3, [pc, #200]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480a:	0f1b      	lsrs	r3, r3, #28
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	019a      	lsls	r2, r3, #6
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	041b      	lsls	r3, r3, #16
 800481e:	431a      	orrs	r2, r3
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	061b      	lsls	r3, r3, #24
 8004824:	431a      	orrs	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	071b      	lsls	r3, r3, #28
 800482a:	4929      	ldr	r1, [pc, #164]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d028      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800483e:	4b24      	ldr	r3, [pc, #144]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004844:	0e1b      	lsrs	r3, r3, #24
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800484c:	4b20      	ldr	r3, [pc, #128]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004852:	0c1b      	lsrs	r3, r3, #16
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	019a      	lsls	r2, r3, #6
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	041b      	lsls	r3, r3, #16
 8004864:	431a      	orrs	r2, r3
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	061b      	lsls	r3, r3, #24
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	071b      	lsls	r3, r3, #28
 8004872:	4917      	ldr	r1, [pc, #92]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800487a:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800487c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004880:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004888:	4911      	ldr	r1, [pc, #68]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004890:	4b0f      	ldr	r3, [pc, #60]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a0e      	ldr	r2, [pc, #56]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800489a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489c:	f7fe f868 	bl	8002970 <HAL_GetTick>
 80048a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80048a4:	f7fe f864 	bl	8002970 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	@ 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e007      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048b6:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048c2:	d1ef      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3720      	adds	r7, #32
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800

080048d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e049      	b.n	800497a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fd fe0c 	bl	8002518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f000 fa38 	bl	8004d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d020      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01b      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f06f 0202 	mvn.w	r2, #2
 80049b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f9bd 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 80049d2:	e005      	b.n	80049e0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f9af 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f9c0 	bl	8004d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01b      	beq.n	8004a32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f06f 0204 	mvn.w	r2, #4
 8004a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f997 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 8004a1e:	e005      	b.n	8004a2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f989 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f99a 	bl	8004d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01b      	beq.n	8004a7e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f06f 0208 	mvn.w	r2, #8
 8004a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2204      	movs	r2, #4
 8004a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f971 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 8004a6a:	e005      	b.n	8004a78 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f963 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f974 	bl	8004d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d01b      	beq.n	8004aca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f06f 0210 	mvn.w	r2, #16
 8004a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2208      	movs	r2, #8
 8004aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f94b 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 8004ab6:	e005      	b.n	8004ac4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f93d 	bl	8004d38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f94e 	bl	8004d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00c      	beq.n	8004aee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0201 	mvn.w	r2, #1
 8004ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f91b 	bl	8004d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d104      	bne.n	8004b02 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00c      	beq.n	8004b1c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fb14 	bl	8005144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00c      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fb0c 	bl	8005158 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00c      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f908 	bl	8004d74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0220 	mvn.w	r2, #32
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fad4 	bl	8005130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_TIM_ConfigClockSource+0x1c>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e0b4      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x186>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	4b56      	ldr	r3, [pc, #344]	@ (8004d20 <HAL_TIM_ConfigClockSource+0x190>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be4:	d03e      	beq.n	8004c64 <HAL_TIM_ConfigClockSource+0xd4>
 8004be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bea:	f200 8087 	bhi.w	8004cfc <HAL_TIM_ConfigClockSource+0x16c>
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf2:	f000 8086 	beq.w	8004d02 <HAL_TIM_ConfigClockSource+0x172>
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bfa:	d87f      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x16c>
 8004bfc:	2b70      	cmp	r3, #112	@ 0x70
 8004bfe:	d01a      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0xa6>
 8004c00:	2b70      	cmp	r3, #112	@ 0x70
 8004c02:	d87b      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x16c>
 8004c04:	2b60      	cmp	r3, #96	@ 0x60
 8004c06:	d050      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x11a>
 8004c08:	2b60      	cmp	r3, #96	@ 0x60
 8004c0a:	d877      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x16c>
 8004c0c:	2b50      	cmp	r3, #80	@ 0x50
 8004c0e:	d03c      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0xfa>
 8004c10:	2b50      	cmp	r3, #80	@ 0x50
 8004c12:	d873      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x16c>
 8004c14:	2b40      	cmp	r3, #64	@ 0x40
 8004c16:	d058      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x13a>
 8004c18:	2b40      	cmp	r3, #64	@ 0x40
 8004c1a:	d86f      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x16c>
 8004c1c:	2b30      	cmp	r3, #48	@ 0x30
 8004c1e:	d064      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15a>
 8004c20:	2b30      	cmp	r3, #48	@ 0x30
 8004c22:	d86b      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d060      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15a>
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d867      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x16c>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d05c      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15a>
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d05a      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15a>
 8004c34:	e062      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c46:	f000 f9c5 	bl	8004fd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	609a      	str	r2, [r3, #8]
      break;
 8004c62:	e04f      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c74:	f000 f9ae 	bl	8004fd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c86:	609a      	str	r2, [r3, #8]
      break;
 8004c88:	e03c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 f922 	bl	8004ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2150      	movs	r1, #80	@ 0x50
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f97b 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e02c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f000 f941 	bl	8004f3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2160      	movs	r1, #96	@ 0x60
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f96b 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e01c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f000 f902 	bl	8004ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2140      	movs	r1, #64	@ 0x40
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f95b 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004ce8:	e00c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f000 f952 	bl	8004f9e <TIM_ITRx_SetConfig>
      break;
 8004cfa:	e003      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004d00:	e000      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	fffeff88 	.word	0xfffeff88

08004d24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a46      	ldr	r2, [pc, #280]	@ (8004eb4 <TIM_Base_SetConfig+0x12c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da6:	d00f      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a43      	ldr	r2, [pc, #268]	@ (8004eb8 <TIM_Base_SetConfig+0x130>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00b      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a42      	ldr	r2, [pc, #264]	@ (8004ebc <TIM_Base_SetConfig+0x134>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d007      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a41      	ldr	r2, [pc, #260]	@ (8004ec0 <TIM_Base_SetConfig+0x138>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a40      	ldr	r2, [pc, #256]	@ (8004ec4 <TIM_Base_SetConfig+0x13c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d108      	bne.n	8004dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a35      	ldr	r2, [pc, #212]	@ (8004eb4 <TIM_Base_SetConfig+0x12c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d02b      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de8:	d027      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a32      	ldr	r2, [pc, #200]	@ (8004eb8 <TIM_Base_SetConfig+0x130>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d023      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a31      	ldr	r2, [pc, #196]	@ (8004ebc <TIM_Base_SetConfig+0x134>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01f      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a30      	ldr	r2, [pc, #192]	@ (8004ec0 <TIM_Base_SetConfig+0x138>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01b      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2f      	ldr	r2, [pc, #188]	@ (8004ec4 <TIM_Base_SetConfig+0x13c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d017      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ec8 <TIM_Base_SetConfig+0x140>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2d      	ldr	r2, [pc, #180]	@ (8004ecc <TIM_Base_SetConfig+0x144>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00f      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed0 <TIM_Base_SetConfig+0x148>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00b      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed4 <TIM_Base_SetConfig+0x14c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d007      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ed8 <TIM_Base_SetConfig+0x150>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d003      	beq.n	8004e3a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a29      	ldr	r2, [pc, #164]	@ (8004edc <TIM_Base_SetConfig+0x154>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d108      	bne.n	8004e4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a10      	ldr	r2, [pc, #64]	@ (8004eb4 <TIM_Base_SetConfig+0x12c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d003      	beq.n	8004e80 <TIM_Base_SetConfig+0xf8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a12      	ldr	r2, [pc, #72]	@ (8004ec4 <TIM_Base_SetConfig+0x13c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d103      	bne.n	8004e88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d105      	bne.n	8004ea6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f023 0201 	bic.w	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	611a      	str	r2, [r3, #16]
  }
}
 8004ea6:	bf00      	nop
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40000c00 	.word	0x40000c00
 8004ec4:	40010400 	.word	0x40010400
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800
 8004ed4:	40001800 	.word	0x40001800
 8004ed8:	40001c00 	.word	0x40001c00
 8004edc:	40002000 	.word	0x40002000

08004ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f023 0201 	bic.w	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f023 030a 	bic.w	r3, r3, #10
 8004f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	621a      	str	r2, [r3, #32]
}
 8004f32:	bf00      	nop
 8004f34:	371c      	adds	r7, #28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b087      	sub	sp, #28
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f023 0210 	bic.w	r2, r3, #16
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	031b      	lsls	r3, r3, #12
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	621a      	str	r2, [r3, #32]
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f043 0307 	orr.w	r3, r3, #7
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	609a      	str	r2, [r3, #8]
}
 8004fc8:	bf00      	nop
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	021a      	lsls	r2, r3, #8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	609a      	str	r2, [r3, #8]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005028:	2302      	movs	r3, #2
 800502a:	e06d      	b.n	8005108 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a30      	ldr	r2, [pc, #192]	@ (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2f      	ldr	r2, [pc, #188]	@ (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d108      	bne.n	8005072 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005066:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005078:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a20      	ldr	r2, [pc, #128]	@ (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d022      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800509e:	d01d      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1d      	ldr	r2, [pc, #116]	@ (800511c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d018      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00e      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a15      	ldr	r2, [pc, #84]	@ (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d009      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a16      	ldr	r2, [pc, #88]	@ (8005128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a15      	ldr	r2, [pc, #84]	@ (800512c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d10c      	bne.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40010000 	.word	0x40010000
 8005118:	40010400 	.word	0x40010400
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40014000 	.word	0x40014000
 800512c:	40001800 	.word	0x40001800

08005130 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e040      	b.n	8005200 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fd f9e8 	bl	8002564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2224      	movs	r2, #36	@ 0x24
 8005198:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0201 	bic.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fe6c 	bl	8005e90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fc05 	bl	80059c8 <UART_SetConfig>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e01b      	b.n	8005200 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 feeb 	bl	8005fd4 <UART_CheckIdleState>
 80051fe:	4603      	mov	r3, r0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e048      	b.n	80052ac <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fd f99a 	bl	8002564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2224      	movs	r2, #36	@ 0x24
 8005234:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0201 	bic.w	r2, r2, #1
 8005244:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fe1e 	bl	8005e90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fbb7 	bl	80059c8 <UART_SetConfig>
 800525a:	4603      	mov	r3, r0
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e023      	b.n	80052ac <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005282:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0208 	orr.w	r2, r2, #8
 8005292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fe95 	bl	8005fd4 <UART_CheckIdleState>
 80052aa:	4603      	mov	r3, r0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b08b      	sub	sp, #44	@ 0x2c
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d147      	bne.n	800535a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <HAL_UART_Transmit_IT+0x22>
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e040      	b.n	800535c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	88fa      	ldrh	r2, [r7, #6]
 80052e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	88fa      	ldrh	r2, [r7, #6]
 80052ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2221      	movs	r2, #33	@ 0x21
 8005302:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800530c:	d107      	bne.n	800531e <HAL_UART_Transmit_IT+0x6a>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a13      	ldr	r2, [pc, #76]	@ (8005368 <HAL_UART_Transmit_IT+0xb4>)
 800531a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800531c:	e002      	b.n	8005324 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4a12      	ldr	r2, [pc, #72]	@ (800536c <HAL_UART_Transmit_IT+0xb8>)
 8005322:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	613b      	str	r3, [r7, #16]
   return(result);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	623b      	str	r3, [r7, #32]
 8005344:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	69f9      	ldr	r1, [r7, #28]
 8005348:	6a3a      	ldr	r2, [r7, #32]
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e6      	bne.n	8005324 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	e000      	b.n	800535c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800535a:	2302      	movs	r3, #2
  }
}
 800535c:	4618      	mov	r0, r3
 800535e:	372c      	adds	r7, #44	@ 0x2c
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	08006493 	.word	0x08006493
 800536c:	080063dd 	.word	0x080063dd

08005370 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	@ 0x28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005384:	2b20      	cmp	r3, #32
 8005386:	d132      	bne.n	80053ee <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_UART_Receive_IT+0x24>
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e02b      	b.n	80053f0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d018      	beq.n	80053de <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	623b      	str	r3, [r7, #32]
 80053cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	69f9      	ldr	r1, [r7, #28]
 80053d0:	6a3a      	ldr	r2, [r7, #32]
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e6      	bne.n	80053ac <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	461a      	mov	r2, r3
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 feb9 	bl	800615c <UART_Start_Receive_IT>
 80053ea:	4603      	mov	r3, r0
 80053ec:	e000      	b.n	80053f0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80053ee:	2302      	movs	r3, #2
  }
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3728      	adds	r7, #40	@ 0x28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b0ba      	sub	sp, #232	@ 0xe8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800541e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005422:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005426:	4013      	ands	r3, r2
 8005428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800542c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d115      	bne.n	8005460 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00f      	beq.n	8005460 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d009      	beq.n	8005460 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8297 	beq.w	8005984 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	4798      	blx	r3
      }
      return;
 800545e:	e291      	b.n	8005984 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8117 	beq.w	8005698 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800546a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d106      	bne.n	8005484 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005476:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800547a:	4b85      	ldr	r3, [pc, #532]	@ (8005690 <HAL_UART_IRQHandler+0x298>)
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 810a 	beq.w	8005698 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d011      	beq.n	80054b4 <HAL_UART_IRQHandler+0xbc>
 8005490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2201      	movs	r2, #1
 80054a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054aa:	f043 0201 	orr.w	r2, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d011      	beq.n	80054e4 <HAL_UART_IRQHandler+0xec>
 80054c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2202      	movs	r2, #2
 80054d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054da:	f043 0204 	orr.w	r2, r3, #4
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d011      	beq.n	8005514 <HAL_UART_IRQHandler+0x11c>
 80054f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00b      	beq.n	8005514 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2204      	movs	r2, #4
 8005502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800550a:	f043 0202 	orr.w	r2, r3, #2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b00      	cmp	r3, #0
 800551e:	d017      	beq.n	8005550 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800552c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005530:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00b      	beq.n	8005550 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2208      	movs	r2, #8
 800553e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005546:	f043 0208 	orr.w	r2, r3, #8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005558:	2b00      	cmp	r3, #0
 800555a:	d012      	beq.n	8005582 <HAL_UART_IRQHandler+0x18a>
 800555c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005560:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00c      	beq.n	8005582 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005578:	f043 0220 	orr.w	r2, r3, #32
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 81fd 	beq.w	8005988 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00d      	beq.n	80055b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800559a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b40      	cmp	r3, #64	@ 0x40
 80055cc:	d005      	beq.n	80055da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d04f      	beq.n	800567a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fe84 	bl	80062e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ea:	2b40      	cmp	r3, #64	@ 0x40
 80055ec:	d141      	bne.n	8005672 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3308      	adds	r3, #8
 80055f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005604:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800560c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3308      	adds	r3, #8
 8005616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800561a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800561e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1d9      	bne.n	80055ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800563e:	2b00      	cmp	r3, #0
 8005640:	d013      	beq.n	800566a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005646:	4a13      	ldr	r2, [pc, #76]	@ (8005694 <HAL_UART_IRQHandler+0x29c>)
 8005648:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800564e:	4618      	mov	r0, r3
 8005650:	f7fd fb3f 	bl	8002cd2 <HAL_DMA_Abort_IT>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d017      	beq.n	800568a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800565e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005664:	4610      	mov	r0, r2
 8005666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005668:	e00f      	b.n	800568a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f996 	bl	800599c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005670:	e00b      	b.n	800568a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f992 	bl	800599c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005678:	e007      	b.n	800568a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f98e 	bl	800599c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005688:	e17e      	b.n	8005988 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568a:	bf00      	nop
    return;
 800568c:	e17c      	b.n	8005988 <HAL_UART_IRQHandler+0x590>
 800568e:	bf00      	nop
 8005690:	04000120 	.word	0x04000120
 8005694:	080063b1 	.word	0x080063b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800569c:	2b01      	cmp	r3, #1
 800569e:	f040 814c 	bne.w	800593a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 8145 	beq.w	800593a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 813e 	beq.w	800593a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2210      	movs	r2, #16
 80056c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d0:	2b40      	cmp	r3, #64	@ 0x40
 80056d2:	f040 80b6 	bne.w	8005842 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 8150 	beq.w	800598c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056f6:	429a      	cmp	r2, r3
 80056f8:	f080 8148 	bcs.w	800598c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005702:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005710:	f000 8086 	beq.w	8005820 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005728:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800572c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800573e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005742:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800574a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1da      	bne.n	8005714 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3308      	adds	r3, #8
 8005764:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800576e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3308      	adds	r3, #8
 800577e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005782:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005786:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800578a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e1      	bne.n	800575e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3308      	adds	r3, #8
 80057a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3308      	adds	r3, #8
 80057ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80057c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80057cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e3      	bne.n	800579a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80057ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057f0:	f023 0310 	bic.w	r3, r3, #16
 80057f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005802:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005804:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005808:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e4      	bne.n	80057e0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581a:	4618      	mov	r0, r3
 800581c:	f7fd f9e9 	bl	8002bf2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005832:	b29b      	uxth	r3, r3
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	b29b      	uxth	r3, r3
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f8b8 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005840:	e0a4      	b.n	800598c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800584e:	b29b      	uxth	r3, r3
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 8096 	beq.w	8005990 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8091 	beq.w	8005990 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800587c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005882:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005890:	647b      	str	r3, [r7, #68]	@ 0x44
 8005892:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800589e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e4      	bne.n	800586e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	623b      	str	r3, [r7, #32]
   return(result);
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	f023 0301 	bic.w	r3, r3, #1
 80058ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3308      	adds	r3, #8
 80058c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80058c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80058ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e3      	bne.n	80058a4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f023 0310 	bic.w	r3, r3, #16
 8005904:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	69b9      	ldr	r1, [r7, #24]
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	617b      	str	r3, [r7, #20]
   return(result);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e4      	bne.n	80058f0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2202      	movs	r2, #2
 800592a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800592c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f83c 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005938:	e02a      	b.n	8005990 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800593e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00e      	beq.n	8005964 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800594a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d008      	beq.n	8005964 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d01c      	beq.n	8005994 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	4798      	blx	r3
    }
    return;
 8005962:	e017      	b.n	8005994 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	d012      	beq.n	8005996 <HAL_UART_IRQHandler+0x59e>
 8005970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00c      	beq.n	8005996 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fde8 	bl	8006552 <UART_EndTransmit_IT>
    return;
 8005982:	e008      	b.n	8005996 <HAL_UART_IRQHandler+0x59e>
      return;
 8005984:	bf00      	nop
 8005986:	e006      	b.n	8005996 <HAL_UART_IRQHandler+0x59e>
    return;
 8005988:	bf00      	nop
 800598a:	e004      	b.n	8005996 <HAL_UART_IRQHandler+0x59e>
      return;
 800598c:	bf00      	nop
 800598e:	e002      	b.n	8005996 <HAL_UART_IRQHandler+0x59e>
      return;
 8005990:	bf00      	nop
 8005992:	e000      	b.n	8005996 <HAL_UART_IRQHandler+0x59e>
    return;
 8005994:	bf00      	nop
  }

}
 8005996:	37e8      	adds	r7, #232	@ 0xe8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4ba6      	ldr	r3, [pc, #664]	@ (8005c8c <UART_SetConfig+0x2c4>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	6979      	ldr	r1, [r7, #20]
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a94      	ldr	r2, [pc, #592]	@ (8005c90 <UART_SetConfig+0x2c8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d120      	bne.n	8005a86 <UART_SetConfig+0xbe>
 8005a44:	4b93      	ldr	r3, [pc, #588]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d816      	bhi.n	8005a80 <UART_SetConfig+0xb8>
 8005a52:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <UART_SetConfig+0x90>)
 8005a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a58:	08005a69 	.word	0x08005a69
 8005a5c:	08005a75 	.word	0x08005a75
 8005a60:	08005a6f 	.word	0x08005a6f
 8005a64:	08005a7b 	.word	0x08005a7b
 8005a68:	2301      	movs	r3, #1
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e150      	b.n	8005d10 <UART_SetConfig+0x348>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e14d      	b.n	8005d10 <UART_SetConfig+0x348>
 8005a74:	2304      	movs	r3, #4
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e14a      	b.n	8005d10 <UART_SetConfig+0x348>
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e147      	b.n	8005d10 <UART_SetConfig+0x348>
 8005a80:	2310      	movs	r3, #16
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e144      	b.n	8005d10 <UART_SetConfig+0x348>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a83      	ldr	r2, [pc, #524]	@ (8005c98 <UART_SetConfig+0x2d0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d132      	bne.n	8005af6 <UART_SetConfig+0x12e>
 8005a90:	4b80      	ldr	r3, [pc, #512]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a96:	f003 030c 	and.w	r3, r3, #12
 8005a9a:	2b0c      	cmp	r3, #12
 8005a9c:	d828      	bhi.n	8005af0 <UART_SetConfig+0x128>
 8005a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <UART_SetConfig+0xdc>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ad9 	.word	0x08005ad9
 8005aa8:	08005af1 	.word	0x08005af1
 8005aac:	08005af1 	.word	0x08005af1
 8005ab0:	08005af1 	.word	0x08005af1
 8005ab4:	08005ae5 	.word	0x08005ae5
 8005ab8:	08005af1 	.word	0x08005af1
 8005abc:	08005af1 	.word	0x08005af1
 8005ac0:	08005af1 	.word	0x08005af1
 8005ac4:	08005adf 	.word	0x08005adf
 8005ac8:	08005af1 	.word	0x08005af1
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005af1 	.word	0x08005af1
 8005ad4:	08005aeb 	.word	0x08005aeb
 8005ad8:	2300      	movs	r3, #0
 8005ada:	77fb      	strb	r3, [r7, #31]
 8005adc:	e118      	b.n	8005d10 <UART_SetConfig+0x348>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	77fb      	strb	r3, [r7, #31]
 8005ae2:	e115      	b.n	8005d10 <UART_SetConfig+0x348>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	77fb      	strb	r3, [r7, #31]
 8005ae8:	e112      	b.n	8005d10 <UART_SetConfig+0x348>
 8005aea:	2308      	movs	r3, #8
 8005aec:	77fb      	strb	r3, [r7, #31]
 8005aee:	e10f      	b.n	8005d10 <UART_SetConfig+0x348>
 8005af0:	2310      	movs	r3, #16
 8005af2:	77fb      	strb	r3, [r7, #31]
 8005af4:	e10c      	b.n	8005d10 <UART_SetConfig+0x348>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a68      	ldr	r2, [pc, #416]	@ (8005c9c <UART_SetConfig+0x2d4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d120      	bne.n	8005b42 <UART_SetConfig+0x17a>
 8005b00:	4b64      	ldr	r3, [pc, #400]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b0a:	2b30      	cmp	r3, #48	@ 0x30
 8005b0c:	d013      	beq.n	8005b36 <UART_SetConfig+0x16e>
 8005b0e:	2b30      	cmp	r3, #48	@ 0x30
 8005b10:	d814      	bhi.n	8005b3c <UART_SetConfig+0x174>
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d009      	beq.n	8005b2a <UART_SetConfig+0x162>
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	d810      	bhi.n	8005b3c <UART_SetConfig+0x174>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <UART_SetConfig+0x15c>
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d006      	beq.n	8005b30 <UART_SetConfig+0x168>
 8005b22:	e00b      	b.n	8005b3c <UART_SetConfig+0x174>
 8005b24:	2300      	movs	r3, #0
 8005b26:	77fb      	strb	r3, [r7, #31]
 8005b28:	e0f2      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	77fb      	strb	r3, [r7, #31]
 8005b2e:	e0ef      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b30:	2304      	movs	r3, #4
 8005b32:	77fb      	strb	r3, [r7, #31]
 8005b34:	e0ec      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b36:	2308      	movs	r3, #8
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e0e9      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e0e6      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a56      	ldr	r2, [pc, #344]	@ (8005ca0 <UART_SetConfig+0x2d8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d120      	bne.n	8005b8e <UART_SetConfig+0x1c6>
 8005b4c:	4b51      	ldr	r3, [pc, #324]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005b56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b58:	d013      	beq.n	8005b82 <UART_SetConfig+0x1ba>
 8005b5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b5c:	d814      	bhi.n	8005b88 <UART_SetConfig+0x1c0>
 8005b5e:	2b80      	cmp	r3, #128	@ 0x80
 8005b60:	d009      	beq.n	8005b76 <UART_SetConfig+0x1ae>
 8005b62:	2b80      	cmp	r3, #128	@ 0x80
 8005b64:	d810      	bhi.n	8005b88 <UART_SetConfig+0x1c0>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <UART_SetConfig+0x1a8>
 8005b6a:	2b40      	cmp	r3, #64	@ 0x40
 8005b6c:	d006      	beq.n	8005b7c <UART_SetConfig+0x1b4>
 8005b6e:	e00b      	b.n	8005b88 <UART_SetConfig+0x1c0>
 8005b70:	2300      	movs	r3, #0
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e0cc      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b76:	2302      	movs	r3, #2
 8005b78:	77fb      	strb	r3, [r7, #31]
 8005b7a:	e0c9      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	77fb      	strb	r3, [r7, #31]
 8005b80:	e0c6      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b82:	2308      	movs	r3, #8
 8005b84:	77fb      	strb	r3, [r7, #31]
 8005b86:	e0c3      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e0c0      	b.n	8005d10 <UART_SetConfig+0x348>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a44      	ldr	r2, [pc, #272]	@ (8005ca4 <UART_SetConfig+0x2dc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d125      	bne.n	8005be4 <UART_SetConfig+0x21c>
 8005b98:	4b3e      	ldr	r3, [pc, #248]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ba2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ba6:	d017      	beq.n	8005bd8 <UART_SetConfig+0x210>
 8005ba8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bac:	d817      	bhi.n	8005bde <UART_SetConfig+0x216>
 8005bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb2:	d00b      	beq.n	8005bcc <UART_SetConfig+0x204>
 8005bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb8:	d811      	bhi.n	8005bde <UART_SetConfig+0x216>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <UART_SetConfig+0x1fe>
 8005bbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bc2:	d006      	beq.n	8005bd2 <UART_SetConfig+0x20a>
 8005bc4:	e00b      	b.n	8005bde <UART_SetConfig+0x216>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	77fb      	strb	r3, [r7, #31]
 8005bca:	e0a1      	b.n	8005d10 <UART_SetConfig+0x348>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	77fb      	strb	r3, [r7, #31]
 8005bd0:	e09e      	b.n	8005d10 <UART_SetConfig+0x348>
 8005bd2:	2304      	movs	r3, #4
 8005bd4:	77fb      	strb	r3, [r7, #31]
 8005bd6:	e09b      	b.n	8005d10 <UART_SetConfig+0x348>
 8005bd8:	2308      	movs	r3, #8
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	e098      	b.n	8005d10 <UART_SetConfig+0x348>
 8005bde:	2310      	movs	r3, #16
 8005be0:	77fb      	strb	r3, [r7, #31]
 8005be2:	e095      	b.n	8005d10 <UART_SetConfig+0x348>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a2f      	ldr	r2, [pc, #188]	@ (8005ca8 <UART_SetConfig+0x2e0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d125      	bne.n	8005c3a <UART_SetConfig+0x272>
 8005bee:	4b29      	ldr	r3, [pc, #164]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005bf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bfc:	d017      	beq.n	8005c2e <UART_SetConfig+0x266>
 8005bfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c02:	d817      	bhi.n	8005c34 <UART_SetConfig+0x26c>
 8005c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c08:	d00b      	beq.n	8005c22 <UART_SetConfig+0x25a>
 8005c0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c0e:	d811      	bhi.n	8005c34 <UART_SetConfig+0x26c>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <UART_SetConfig+0x254>
 8005c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c18:	d006      	beq.n	8005c28 <UART_SetConfig+0x260>
 8005c1a:	e00b      	b.n	8005c34 <UART_SetConfig+0x26c>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e076      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c22:	2302      	movs	r3, #2
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	e073      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e070      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c2e:	2308      	movs	r3, #8
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e06d      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c34:	2310      	movs	r3, #16
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e06a      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cac <UART_SetConfig+0x2e4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d138      	bne.n	8005cb6 <UART_SetConfig+0x2ee>
 8005c44:	4b13      	ldr	r3, [pc, #76]	@ (8005c94 <UART_SetConfig+0x2cc>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005c4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c52:	d017      	beq.n	8005c84 <UART_SetConfig+0x2bc>
 8005c54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c58:	d82a      	bhi.n	8005cb0 <UART_SetConfig+0x2e8>
 8005c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5e:	d00b      	beq.n	8005c78 <UART_SetConfig+0x2b0>
 8005c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c64:	d824      	bhi.n	8005cb0 <UART_SetConfig+0x2e8>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <UART_SetConfig+0x2aa>
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6e:	d006      	beq.n	8005c7e <UART_SetConfig+0x2b6>
 8005c70:	e01e      	b.n	8005cb0 <UART_SetConfig+0x2e8>
 8005c72:	2300      	movs	r3, #0
 8005c74:	77fb      	strb	r3, [r7, #31]
 8005c76:	e04b      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	77fb      	strb	r3, [r7, #31]
 8005c7c:	e048      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c7e:	2304      	movs	r3, #4
 8005c80:	77fb      	strb	r3, [r7, #31]
 8005c82:	e045      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c84:	2308      	movs	r3, #8
 8005c86:	77fb      	strb	r3, [r7, #31]
 8005c88:	e042      	b.n	8005d10 <UART_SetConfig+0x348>
 8005c8a:	bf00      	nop
 8005c8c:	efff69f3 	.word	0xefff69f3
 8005c90:	40011000 	.word	0x40011000
 8005c94:	40023800 	.word	0x40023800
 8005c98:	40004400 	.word	0x40004400
 8005c9c:	40004800 	.word	0x40004800
 8005ca0:	40004c00 	.word	0x40004c00
 8005ca4:	40005000 	.word	0x40005000
 8005ca8:	40011400 	.word	0x40011400
 8005cac:	40007800 	.word	0x40007800
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	77fb      	strb	r3, [r7, #31]
 8005cb4:	e02c      	b.n	8005d10 <UART_SetConfig+0x348>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a72      	ldr	r2, [pc, #456]	@ (8005e84 <UART_SetConfig+0x4bc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d125      	bne.n	8005d0c <UART_SetConfig+0x344>
 8005cc0:	4b71      	ldr	r3, [pc, #452]	@ (8005e88 <UART_SetConfig+0x4c0>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005cca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cce:	d017      	beq.n	8005d00 <UART_SetConfig+0x338>
 8005cd0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cd4:	d817      	bhi.n	8005d06 <UART_SetConfig+0x33e>
 8005cd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cda:	d00b      	beq.n	8005cf4 <UART_SetConfig+0x32c>
 8005cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ce0:	d811      	bhi.n	8005d06 <UART_SetConfig+0x33e>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <UART_SetConfig+0x326>
 8005ce6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cea:	d006      	beq.n	8005cfa <UART_SetConfig+0x332>
 8005cec:	e00b      	b.n	8005d06 <UART_SetConfig+0x33e>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	77fb      	strb	r3, [r7, #31]
 8005cf2:	e00d      	b.n	8005d10 <UART_SetConfig+0x348>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e00a      	b.n	8005d10 <UART_SetConfig+0x348>
 8005cfa:	2304      	movs	r3, #4
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e007      	b.n	8005d10 <UART_SetConfig+0x348>
 8005d00:	2308      	movs	r3, #8
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e004      	b.n	8005d10 <UART_SetConfig+0x348>
 8005d06:	2310      	movs	r3, #16
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e001      	b.n	8005d10 <UART_SetConfig+0x348>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d18:	d15b      	bne.n	8005dd2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d1a:	7ffb      	ldrb	r3, [r7, #31]
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d828      	bhi.n	8005d72 <UART_SetConfig+0x3aa>
 8005d20:	a201      	add	r2, pc, #4	@ (adr r2, 8005d28 <UART_SetConfig+0x360>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d4d 	.word	0x08005d4d
 8005d2c:	08005d55 	.word	0x08005d55
 8005d30:	08005d5d 	.word	0x08005d5d
 8005d34:	08005d73 	.word	0x08005d73
 8005d38:	08005d63 	.word	0x08005d63
 8005d3c:	08005d73 	.word	0x08005d73
 8005d40:	08005d73 	.word	0x08005d73
 8005d44:	08005d73 	.word	0x08005d73
 8005d48:	08005d6b 	.word	0x08005d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d4c:	f7fe f9aa 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
 8005d50:	61b8      	str	r0, [r7, #24]
        break;
 8005d52:	e013      	b.n	8005d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d54:	f7fe f9ba 	bl	80040cc <HAL_RCC_GetPCLK2Freq>
 8005d58:	61b8      	str	r0, [r7, #24]
        break;
 8005d5a:	e00f      	b.n	8005d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8005e8c <UART_SetConfig+0x4c4>)
 8005d5e:	61bb      	str	r3, [r7, #24]
        break;
 8005d60:	e00c      	b.n	8005d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d62:	f7fe f88d 	bl	8003e80 <HAL_RCC_GetSysClockFreq>
 8005d66:	61b8      	str	r0, [r7, #24]
        break;
 8005d68:	e008      	b.n	8005d7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d6e:	61bb      	str	r3, [r7, #24]
        break;
 8005d70:	e004      	b.n	8005d7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	77bb      	strb	r3, [r7, #30]
        break;
 8005d7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d074      	beq.n	8005e6c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	005a      	lsls	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	441a      	add	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b0f      	cmp	r3, #15
 8005d9c:	d916      	bls.n	8005dcc <UART_SetConfig+0x404>
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da4:	d212      	bcs.n	8005dcc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f023 030f 	bic.w	r3, r3, #15
 8005dae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	89fb      	ldrh	r3, [r7, #14]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	89fa      	ldrh	r2, [r7, #14]
 8005dc8:	60da      	str	r2, [r3, #12]
 8005dca:	e04f      	b.n	8005e6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	77bb      	strb	r3, [r7, #30]
 8005dd0:	e04c      	b.n	8005e6c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dd2:	7ffb      	ldrb	r3, [r7, #31]
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d828      	bhi.n	8005e2a <UART_SetConfig+0x462>
 8005dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005de0 <UART_SetConfig+0x418>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005e05 	.word	0x08005e05
 8005de4:	08005e0d 	.word	0x08005e0d
 8005de8:	08005e15 	.word	0x08005e15
 8005dec:	08005e2b 	.word	0x08005e2b
 8005df0:	08005e1b 	.word	0x08005e1b
 8005df4:	08005e2b 	.word	0x08005e2b
 8005df8:	08005e2b 	.word	0x08005e2b
 8005dfc:	08005e2b 	.word	0x08005e2b
 8005e00:	08005e23 	.word	0x08005e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e04:	f7fe f94e 	bl	80040a4 <HAL_RCC_GetPCLK1Freq>
 8005e08:	61b8      	str	r0, [r7, #24]
        break;
 8005e0a:	e013      	b.n	8005e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e0c:	f7fe f95e 	bl	80040cc <HAL_RCC_GetPCLK2Freq>
 8005e10:	61b8      	str	r0, [r7, #24]
        break;
 8005e12:	e00f      	b.n	8005e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e14:	4b1d      	ldr	r3, [pc, #116]	@ (8005e8c <UART_SetConfig+0x4c4>)
 8005e16:	61bb      	str	r3, [r7, #24]
        break;
 8005e18:	e00c      	b.n	8005e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e1a:	f7fe f831 	bl	8003e80 <HAL_RCC_GetSysClockFreq>
 8005e1e:	61b8      	str	r0, [r7, #24]
        break;
 8005e20:	e008      	b.n	8005e34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e26:	61bb      	str	r3, [r7, #24]
        break;
 8005e28:	e004      	b.n	8005e34 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	77bb      	strb	r3, [r7, #30]
        break;
 8005e32:	bf00      	nop
    }

    if (pclk != 0U)
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d018      	beq.n	8005e6c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	085a      	lsrs	r2, r3, #1
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	441a      	add	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b0f      	cmp	r3, #15
 8005e52:	d909      	bls.n	8005e68 <UART_SetConfig+0x4a0>
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e5a:	d205      	bcs.n	8005e68 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	e001      	b.n	8005e6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005e78:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40007c00 	.word	0x40007c00
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	00f42400 	.word	0x00f42400

08005e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f8e:	d10a      	bne.n	8005fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08c      	sub	sp, #48	@ 0x30
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe4:	f7fc fcc4 	bl	8002970 <HAL_GetTick>
 8005fe8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d12e      	bne.n	8006056 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006000:	2200      	movs	r2, #0
 8006002:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f83b 	bl	8006082 <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d021      	beq.n	8006056 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006026:	623b      	str	r3, [r7, #32]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	69b9      	ldr	r1, [r7, #24]
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	617b      	str	r3, [r7, #20]
   return(result);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e6      	bne.n	8006012 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e011      	b.n	800607a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3728      	adds	r7, #40	@ 0x28
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	603b      	str	r3, [r7, #0]
 800608e:	4613      	mov	r3, r2
 8006090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006092:	e04f      	b.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609a:	d04b      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800609c:	f7fc fc68 	bl	8002970 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d302      	bcc.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e04e      	b.n	8006154 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d037      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b80      	cmp	r3, #128	@ 0x80
 80060c8:	d034      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b40      	cmp	r3, #64	@ 0x40
 80060ce:	d031      	beq.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d110      	bne.n	8006100 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2208      	movs	r2, #8
 80060e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 f8fe 	bl	80062e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2208      	movs	r2, #8
 80060f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e029      	b.n	8006154 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800610a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800610e:	d111      	bne.n	8006134 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006118:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f8e4 	bl	80062e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e00f      	b.n	8006154 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69da      	ldr	r2, [r3, #28]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	4013      	ands	r3, r2
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	429a      	cmp	r2, r3
 8006142:	bf0c      	ite	eq
 8006144:	2301      	moveq	r3, #1
 8006146:	2300      	movne	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	79fb      	ldrb	r3, [r7, #7]
 800614e:	429a      	cmp	r2, r3
 8006150:	d0a0      	beq.n	8006094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800615c:	b480      	push	{r7}
 800615e:	b097      	sub	sp, #92	@ 0x5c
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	4613      	mov	r3, r2
 8006168:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	88fa      	ldrh	r2, [r7, #6]
 8006174:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800618e:	d10e      	bne.n	80061ae <UART_Start_Receive_IT+0x52>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d105      	bne.n	80061a4 <UART_Start_Receive_IT+0x48>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800619e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061a2:	e02d      	b.n	8006200 <UART_Start_Receive_IT+0xa4>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	22ff      	movs	r2, #255	@ 0xff
 80061a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061ac:	e028      	b.n	8006200 <UART_Start_Receive_IT+0xa4>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10d      	bne.n	80061d2 <UART_Start_Receive_IT+0x76>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <UART_Start_Receive_IT+0x6c>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	22ff      	movs	r2, #255	@ 0xff
 80061c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061c6:	e01b      	b.n	8006200 <UART_Start_Receive_IT+0xa4>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	227f      	movs	r2, #127	@ 0x7f
 80061cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061d0:	e016      	b.n	8006200 <UART_Start_Receive_IT+0xa4>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061da:	d10d      	bne.n	80061f8 <UART_Start_Receive_IT+0x9c>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d104      	bne.n	80061ee <UART_Start_Receive_IT+0x92>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	227f      	movs	r2, #127	@ 0x7f
 80061e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061ec:	e008      	b.n	8006200 <UART_Start_Receive_IT+0xa4>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	223f      	movs	r2, #63	@ 0x3f
 80061f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80061f6:	e003      	b.n	8006200 <UART_Start_Receive_IT+0xa4>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2222      	movs	r2, #34	@ 0x22
 800620c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	657b      	str	r3, [r7, #84]	@ 0x54
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3308      	adds	r3, #8
 800622e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006230:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006232:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006236:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800623e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e5      	bne.n	8006210 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800624c:	d107      	bne.n	800625e <UART_Start_Receive_IT+0x102>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d103      	bne.n	800625e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	4a21      	ldr	r2, [pc, #132]	@ (80062e0 <UART_Start_Receive_IT+0x184>)
 800625a:	669a      	str	r2, [r3, #104]	@ 0x68
 800625c:	e002      	b.n	8006264 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4a20      	ldr	r2, [pc, #128]	@ (80062e4 <UART_Start_Receive_IT+0x188>)
 8006262:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d019      	beq.n	80062a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800628a:	637b      	str	r3, [r7, #52]	@ 0x34
 800628c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006290:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e6      	bne.n	800626c <UART_Start_Receive_IT+0x110>
 800629e:	e018      	b.n	80062d2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	613b      	str	r3, [r7, #16]
   return(result);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f043 0320 	orr.w	r3, r3, #32
 80062b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062be:	623b      	str	r3, [r7, #32]
 80062c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	69f9      	ldr	r1, [r7, #28]
 80062c4:	6a3a      	ldr	r2, [r7, #32]
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e6      	bne.n	80062a0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	375c      	adds	r7, #92	@ 0x5c
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	0800674f 	.word	0x0800674f
 80062e4:	080065a7 	.word	0x080065a7

080062e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b095      	sub	sp, #84	@ 0x54
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006304:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800630e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006310:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006314:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800631c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e6      	bne.n	80062f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	61fb      	str	r3, [r7, #28]
   return(result);
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3308      	adds	r3, #8
 8006340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006344:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006348:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e5      	bne.n	8006322 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800635a:	2b01      	cmp	r3, #1
 800635c:	d118      	bne.n	8006390 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	60bb      	str	r3, [r7, #8]
   return(result);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f023 0310 	bic.w	r3, r3, #16
 8006372:	647b      	str	r3, [r7, #68]	@ 0x44
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6979      	ldr	r1, [r7, #20]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	613b      	str	r3, [r7, #16]
   return(result);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e6      	bne.n	800635e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2220      	movs	r2, #32
 8006394:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80063a4:	bf00      	nop
 80063a6:	3754      	adds	r7, #84	@ 0x54
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7ff fae4 	bl	800599c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80063dc:	b480      	push	{r7}
 80063de:	b08f      	sub	sp, #60	@ 0x3c
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063e8:	2b21      	cmp	r3, #33	@ 0x21
 80063ea:	d14c      	bne.n	8006486 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d132      	bne.n	800645e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	61fb      	str	r3, [r7, #28]
   return(result);
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800640c:	637b      	str	r3, [r7, #52]	@ 0x34
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006416:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006418:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800641c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e6      	bne.n	80063f8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	60bb      	str	r3, [r7, #8]
   return(result);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800643e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	61bb      	str	r3, [r7, #24]
 800644a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6979      	ldr	r1, [r7, #20]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	613b      	str	r3, [r7, #16]
   return(result);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e6      	bne.n	800642a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800645c:	e013      	b.n	8006486 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006462:	781a      	ldrb	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006486:	bf00      	nop
 8006488:	373c      	adds	r7, #60	@ 0x3c
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006492:	b480      	push	{r7}
 8006494:	b091      	sub	sp, #68	@ 0x44
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800649e:	2b21      	cmp	r3, #33	@ 0x21
 80064a0:	d151      	bne.n	8006546 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d132      	bne.n	8006514 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	623b      	str	r3, [r7, #32]
   return(result);
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80064ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e6      	bne.n	80064ae <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064fe:	61fb      	str	r3, [r7, #28]
 8006500:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	69b9      	ldr	r1, [r7, #24]
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	e841 2300 	strex	r3, r2, [r1]
 800650a:	617b      	str	r3, [r7, #20]
   return(result);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1e6      	bne.n	80064e0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006512:	e018      	b.n	8006546 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006518:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800651a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006528:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800652e:	1c9a      	adds	r2, r3, #2
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800653a:	b29b      	uxth	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006546:	bf00      	nop
 8006548:	3744      	adds	r7, #68	@ 0x44
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b088      	sub	sp, #32
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	60bb      	str	r3, [r7, #8]
   return(result);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	461a      	mov	r2, r3
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6979      	ldr	r1, [r7, #20]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	613b      	str	r3, [r7, #16]
   return(result);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e6      	bne.n	800655a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7f9 ffe1 	bl	8000560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800659e:	bf00      	nop
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b09c      	sub	sp, #112	@ 0x70
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065b4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065be:	2b22      	cmp	r3, #34	@ 0x22
 80065c0:	f040 80b9 	bne.w	8006736 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80065d2:	b2d9      	uxtb	r1, r3
 80065d4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065de:	400a      	ands	r2, r1
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	f040 809c 	bne.w	8006746 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800661c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800661e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006622:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800662c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800662e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006632:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800663a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e6      	bne.n	800660e <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3308      	adds	r3, #8
 8006646:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006652:	f023 0301 	bic.w	r3, r3, #1
 8006656:	667b      	str	r3, [r7, #100]	@ 0x64
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3308      	adds	r3, #8
 800665e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006660:	647a      	str	r2, [r7, #68]	@ 0x44
 8006662:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800666e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e5      	bne.n	8006640 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d018      	beq.n	80066c8 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	623b      	str	r3, [r7, #32]
   return(result);
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80066aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e6      	bne.n	8006696 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d12e      	bne.n	800672e <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0310 	bic.w	r3, r3, #16
 80066ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	461a      	mov	r2, r3
 80066f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f8:	69b9      	ldr	r1, [r7, #24]
 80066fa:	69fa      	ldr	r2, [r7, #28]
 80066fc:	e841 2300 	strex	r3, r2, [r1]
 8006700:	617b      	str	r3, [r7, #20]
   return(result);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1e6      	bne.n	80066d6 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b10      	cmp	r3, #16
 8006714:	d103      	bne.n	800671e <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2210      	movs	r2, #16
 800671c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff f942 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800672c:	e00b      	b.n	8006746 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7f9 fee2 	bl	80004f8 <HAL_UART_RxCpltCallback>
}
 8006734:	e007      	b.n	8006746 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699a      	ldr	r2, [r3, #24]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f042 0208 	orr.w	r2, r2, #8
 8006744:	619a      	str	r2, [r3, #24]
}
 8006746:	bf00      	nop
 8006748:	3770      	adds	r7, #112	@ 0x70
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b09c      	sub	sp, #112	@ 0x70
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800675c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006766:	2b22      	cmp	r3, #34	@ 0x22
 8006768:	f040 80b9 	bne.w	80068de <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677a:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800677c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006780:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006784:	4013      	ands	r3, r2
 8006786:	b29a      	uxth	r2, r3
 8006788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800678a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006790:	1c9a      	adds	r2, r3, #2
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f040 809c 	bne.w	80068ee <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80067c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80067d6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067dc:	e841 2300 	strex	r3, r2, [r1]
 80067e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80067e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e6      	bne.n	80067b6 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3308      	adds	r3, #8
 80067ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3308      	adds	r3, #8
 8006806:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006808:	643a      	str	r2, [r7, #64]	@ 0x40
 800680a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800680e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e5      	bne.n	80067e8 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d018      	beq.n	8006870 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	e853 3f00 	ldrex	r3, [r3]
 800684a:	61fb      	str	r3, [r7, #28]
   return(result);
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006852:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800685c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800685e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e6      	bne.n	800683e <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006874:	2b01      	cmp	r3, #1
 8006876:	d12e      	bne.n	80068d6 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	60bb      	str	r3, [r7, #8]
   return(result);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	6979      	ldr	r1, [r7, #20]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	613b      	str	r3, [r7, #16]
   return(result);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e6      	bne.n	800687e <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b10      	cmp	r3, #16
 80068bc:	d103      	bne.n	80068c6 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2210      	movs	r2, #16
 80068c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7ff f86e 	bl	80059b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068d4:	e00b      	b.n	80068ee <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7f9 fe0e 	bl	80004f8 <HAL_UART_RxCpltCallback>
}
 80068dc:	e007      	b.n	80068ee <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	699a      	ldr	r2, [r3, #24]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0208 	orr.w	r2, r2, #8
 80068ec:	619a      	str	r2, [r3, #24]
}
 80068ee:	bf00      	nop
 80068f0:	3770      	adds	r7, #112	@ 0x70
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <memcmp>:
 80068f6:	b510      	push	{r4, lr}
 80068f8:	3901      	subs	r1, #1
 80068fa:	4402      	add	r2, r0
 80068fc:	4290      	cmp	r0, r2
 80068fe:	d101      	bne.n	8006904 <memcmp+0xe>
 8006900:	2000      	movs	r0, #0
 8006902:	e005      	b.n	8006910 <memcmp+0x1a>
 8006904:	7803      	ldrb	r3, [r0, #0]
 8006906:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800690a:	42a3      	cmp	r3, r4
 800690c:	d001      	beq.n	8006912 <memcmp+0x1c>
 800690e:	1b18      	subs	r0, r3, r4
 8006910:	bd10      	pop	{r4, pc}
 8006912:	3001      	adds	r0, #1
 8006914:	e7f2      	b.n	80068fc <memcmp+0x6>

08006916 <memset>:
 8006916:	4402      	add	r2, r0
 8006918:	4603      	mov	r3, r0
 800691a:	4293      	cmp	r3, r2
 800691c:	d100      	bne.n	8006920 <memset+0xa>
 800691e:	4770      	bx	lr
 8006920:	f803 1b01 	strb.w	r1, [r3], #1
 8006924:	e7f9      	b.n	800691a <memset+0x4>
	...

08006928 <__libc_init_array>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	4d0d      	ldr	r5, [pc, #52]	@ (8006960 <__libc_init_array+0x38>)
 800692c:	4c0d      	ldr	r4, [pc, #52]	@ (8006964 <__libc_init_array+0x3c>)
 800692e:	1b64      	subs	r4, r4, r5
 8006930:	10a4      	asrs	r4, r4, #2
 8006932:	2600      	movs	r6, #0
 8006934:	42a6      	cmp	r6, r4
 8006936:	d109      	bne.n	800694c <__libc_init_array+0x24>
 8006938:	4d0b      	ldr	r5, [pc, #44]	@ (8006968 <__libc_init_array+0x40>)
 800693a:	4c0c      	ldr	r4, [pc, #48]	@ (800696c <__libc_init_array+0x44>)
 800693c:	f000 f826 	bl	800698c <_init>
 8006940:	1b64      	subs	r4, r4, r5
 8006942:	10a4      	asrs	r4, r4, #2
 8006944:	2600      	movs	r6, #0
 8006946:	42a6      	cmp	r6, r4
 8006948:	d105      	bne.n	8006956 <__libc_init_array+0x2e>
 800694a:	bd70      	pop	{r4, r5, r6, pc}
 800694c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006950:	4798      	blx	r3
 8006952:	3601      	adds	r6, #1
 8006954:	e7ee      	b.n	8006934 <__libc_init_array+0xc>
 8006956:	f855 3b04 	ldr.w	r3, [r5], #4
 800695a:	4798      	blx	r3
 800695c:	3601      	adds	r6, #1
 800695e:	e7f2      	b.n	8006946 <__libc_init_array+0x1e>
 8006960:	08007c34 	.word	0x08007c34
 8006964:	08007c34 	.word	0x08007c34
 8006968:	08007c34 	.word	0x08007c34
 800696c:	08007c38 	.word	0x08007c38

08006970 <memcpy>:
 8006970:	440a      	add	r2, r1
 8006972:	4291      	cmp	r1, r2
 8006974:	f100 33ff 	add.w	r3, r0, #4294967295
 8006978:	d100      	bne.n	800697c <memcpy+0xc>
 800697a:	4770      	bx	lr
 800697c:	b510      	push	{r4, lr}
 800697e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006986:	4291      	cmp	r1, r2
 8006988:	d1f9      	bne.n	800697e <memcpy+0xe>
 800698a:	bd10      	pop	{r4, pc}

0800698c <_init>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	bf00      	nop
 8006990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006992:	bc08      	pop	{r3}
 8006994:	469e      	mov	lr, r3
 8006996:	4770      	bx	lr

08006998 <_fini>:
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699a:	bf00      	nop
 800699c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699e:	bc08      	pop	{r3}
 80069a0:	469e      	mov	lr, r3
 80069a2:	4770      	bx	lr

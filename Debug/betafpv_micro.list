
betafpv_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dac  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001288  08006f74  08006f74  00007f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081fc  080081fc  0000a14c  2**0
                  CONTENTS
  4 .ARM          00000008  080081fc  080081fc  000091fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008204  08008204  0000a14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008204  08008204  00009204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008208  08008208  00009208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800820c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08008218  0000a00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  080082b8  0000a0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000dc4  20000150  08008358  0000a150  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  20000f14  08008358  0000af14  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000a14c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016264  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000029be  00000000  00000000  000203e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001138  00000000  00000000  00022da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d8b  00000000  00000000  00023ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002fa2c  00000000  00000000  00024c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c857  00000000  00000000  0005468f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016f397  00000000  00000000  00070ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001e027d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004970  00000000  00000000  001e02c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  001e4c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000150 	.word	0x20000150
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006f5c 	.word	0x08006f5c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000154 	.word	0x20000154
 8000204:	08006f5c 	.word	0x08006f5c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_UARTEx_RxEventCallback>:

#if MODE==2		//---------Read from UART live and send to terminal


	void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
	{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
		//RECEIVE AND PRINT TO TERMINAL
		if(huart==&huart2)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a08      	ldr	r2, [pc, #32]	@ (8000528 <HAL_UARTEx_RxEventCallback+0x30>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d108      	bne.n	800051e <HAL_UARTEx_RxEventCallback+0x26>
		{
			decode_mavlink_mssg(&rx_byte, &rx_mssg);
 800050c:	4907      	ldr	r1, [pc, #28]	@ (800052c <HAL_UARTEx_RxEventCallback+0x34>)
 800050e:	4808      	ldr	r0, [pc, #32]	@ (8000530 <HAL_UARTEx_RxEventCallback+0x38>)
 8000510:	f002 f858 	bl	80025c4 <decode_mavlink_mssg>
			HAL_UART_Transmit_IT(&huart3, &rx_byte, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	4906      	ldr	r1, [pc, #24]	@ (8000530 <HAL_UARTEx_RxEventCallback+0x38>)
 8000518:	4806      	ldr	r0, [pc, #24]	@ (8000534 <HAL_UARTEx_RxEventCallback+0x3c>)
 800051a:	f005 f905 	bl	8005728 <HAL_UART_Transmit_IT>
		}

	}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000328 	.word	0x20000328
 800052c:	200004c0 	.word	0x200004c0
 8000530:	200005e3 	.word	0x200005e3
 8000534:	200003b0 	.word	0x200003b0

08000538 <HAL_UART_TxCpltCallback>:

	void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
	{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]

		if(huart==&huart3)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <HAL_UART_TxCpltCallback+0x2c>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d108      	bne.n	800055a <HAL_UART_TxCpltCallback+0x22>
		{
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);				//DEBUG LIGHT
 8000548:	2101      	movs	r1, #1
 800054a:	4807      	ldr	r0, [pc, #28]	@ (8000568 <HAL_UART_TxCpltCallback+0x30>)
 800054c:	f003 fb21 	bl	8003b92 <HAL_GPIO_TogglePin>
			HAL_UARTEx_ReceiveToIdle_IT(&huart2, &rx_byte, 1);		//KEEP READING
 8000550:	2201      	movs	r2, #1
 8000552:	4906      	ldr	r1, [pc, #24]	@ (800056c <HAL_UART_TxCpltCallback+0x34>)
 8000554:	4806      	ldr	r0, [pc, #24]	@ (8000570 <HAL_UART_TxCpltCallback+0x38>)
 8000556:	f006 fc66 	bl	8006e26 <HAL_UARTEx_ReceiveToIdle_IT>

		}
	}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200003b0 	.word	0x200003b0
 8000568:	40020400 	.word	0x40020400
 800056c:	200005e3 	.word	0x200005e3
 8000570:	20000328 	.word	0x20000328

08000574 <HAL_TIM_PeriodElapsedCallback>:


	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
		{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
			//send HEARTBEAT every 1Hz
			if (htim==&htim4)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d113      	bne.n	80005ac <HAL_TIM_PeriodElapsedCallback+0x38>
			{
				HAL_HalfDuplex_EnableTransmitter(&huart2);
 8000584:	480c      	ldr	r0, [pc, #48]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000586:	f005 fc13 	bl	8005db0 <HAL_HalfDuplex_EnableTransmitter>
				len=mavlink_heartbeat(hb_buffer);
 800058a:	480c      	ldr	r0, [pc, #48]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 800058c:	f002 f8be 	bl	800270c <mavlink_heartbeat>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000596:	801a      	strh	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, hb_buffer, len);
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4907      	ldr	r1, [pc, #28]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005a0:	4805      	ldr	r0, [pc, #20]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80005a2:	f005 f8c1 	bl	8005728 <HAL_UART_Transmit_IT>
				HAL_HalfDuplex_EnableReceiver(&huart2);
 80005a6:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80005a8:	f005 fc54 	bl	8005e54 <HAL_HalfDuplex_EnableReceiver>

			}

		}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000254 	.word	0x20000254
 80005b8:	20000328 	.word	0x20000328
 80005bc:	200005e4 	.word	0x200005e4
 80005c0:	200006fc 	.word	0x200006fc

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f002 fbab 	bl	8002d22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f82c 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f9f0 	bl	80009b4 <MX_GPIO_Init>
  MX_ETH_Init();
 80005d4:	f000 f890 	bl	80006f8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005d8:	f000 f98c 	bl	80008f4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80005dc:	f000 f92a 	bl	8000834 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80005e0:	f000 f8d8 	bl	8000794 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f956 	bl	8000894 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005e8:	f000 f9b4 	bl	8000954 <MX_USART6_UART_Init>
#endif


#if MODE==2

  HAL_HalfDuplex_Init(&huart2);
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <main+0x5c>)
 80005ee:	f005 f845 	bl	800567c <HAL_HalfDuplex_Init>
  HAL_HalfDuplex_EnableReceiver(&huart2);
 80005f2:	480b      	ldr	r0, [pc, #44]	@ (8000620 <main+0x5c>)
 80005f4:	f005 fc2e 	bl	8005e54 <HAL_HalfDuplex_EnableReceiver>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, &rx_byte, 1);  	//for half-duplex mode
 80005f8:	2201      	movs	r2, #1
 80005fa:	490a      	ldr	r1, [pc, #40]	@ (8000624 <main+0x60>)
 80005fc:	4808      	ldr	r0, [pc, #32]	@ (8000620 <main+0x5c>)
 80005fe:	f006 fc12 	bl	8006e26 <HAL_UARTEx_ReceiveToIdle_IT>
#endif



#if MODE==2
  HAL_HalfDuplex_Init(&huart2);
 8000602:	4807      	ldr	r0, [pc, #28]	@ (8000620 <main+0x5c>)
 8000604:	f005 f83a 	bl	800567c <HAL_HalfDuplex_Init>
  HAL_HalfDuplex_EnableReceiver(&huart2);
 8000608:	4805      	ldr	r0, [pc, #20]	@ (8000620 <main+0x5c>)
 800060a:	f005 fc23 	bl	8005e54 <HAL_HalfDuplex_EnableReceiver>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, &rx_byte, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	4904      	ldr	r1, [pc, #16]	@ (8000624 <main+0x60>)
 8000612:	4803      	ldr	r0, [pc, #12]	@ (8000620 <main+0x5c>)
 8000614:	f006 fc07 	bl	8006e26 <HAL_UARTEx_ReceiveToIdle_IT>
			HAL_UART_Transmit_IT(&huart2, cmd_buffer, cmd_len);
		}
		#endif


		HAL_Delay(10);
 8000618:	200a      	movs	r0, #10
 800061a:	f002 fbdf 	bl	8002ddc <HAL_Delay>
 800061e:	e7fb      	b.n	8000618 <main+0x54>
 8000620:	20000328 	.word	0x20000328
 8000624:	200005e3 	.word	0x200005e3

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	@ 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 fc55 	bl	8006ee6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800064c:	f003 fabc 	bl	8003bc8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <SystemClock_Config+0xc8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a26      	ldr	r2, [pc, #152]	@ (80006f0 <SystemClock_Config+0xc8>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000670:	4a20      	ldr	r2, [pc, #128]	@ (80006f4 <SystemClock_Config+0xcc>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <SystemClock_Config+0xcc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000688:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800069c:	2348      	movs	r3, #72	@ 0x48
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006a4:	2303      	movs	r3, #3
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 fa9b 	bl	8003be8 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 fa4e 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2102      	movs	r1, #2
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 fd29 	bl	8004130 <HAL_RCC_ClockConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e4:	f000 fa38 	bl	8000b58 <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3750      	adds	r7, #80	@ 0x50
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <MX_ETH_Init+0x84>)
 80006fe:	4a20      	ldr	r2, [pc, #128]	@ (8000780 <MX_ETH_Init+0x88>)
 8000700:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_ETH_Init+0x8c>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <MX_ETH_Init+0x8c>)
 800070a:	2280      	movs	r2, #128	@ 0x80
 800070c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <MX_ETH_Init+0x8c>)
 8000710:	22e1      	movs	r2, #225	@ 0xe1
 8000712:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_ETH_Init+0x8c>)
 8000716:	2200      	movs	r2, #0
 8000718:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <MX_ETH_Init+0x8c>)
 800071c:	2200      	movs	r2, #0
 800071e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_ETH_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000726:	4b15      	ldr	r3, [pc, #84]	@ (800077c <MX_ETH_Init+0x84>)
 8000728:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <MX_ETH_Init+0x8c>)
 800072a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_ETH_Init+0x84>)
 800072e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000732:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_ETH_Init+0x84>)
 8000736:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <MX_ETH_Init+0x90>)
 8000738:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_ETH_Init+0x84>)
 800073c:	4a13      	ldr	r2, [pc, #76]	@ (800078c <MX_ETH_Init+0x94>)
 800073e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_ETH_Init+0x84>)
 8000742:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000746:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000748:	480c      	ldr	r0, [pc, #48]	@ (800077c <MX_ETH_Init+0x84>)
 800074a:	f002 fd0f 	bl	800316c <HAL_ETH_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000754:	f000 fa00 	bl	8000b58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000758:	2238      	movs	r2, #56	@ 0x38
 800075a:	2100      	movs	r1, #0
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <MX_ETH_Init+0x98>)
 800075e:	f006 fbc2 	bl	8006ee6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_ETH_Init+0x98>)
 8000764:	2221      	movs	r2, #33	@ 0x21
 8000766:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_ETH_Init+0x98>)
 800076a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800076e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <MX_ETH_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001a4 	.word	0x200001a4
 8000780:	40028000 	.word	0x40028000
 8000784:	20000700 	.word	0x20000700
 8000788:	200000ac 	.word	0x200000ac
 800078c:	2000000c 	.word	0x2000000c
 8000790:	2000016c 	.word	0x2000016c

08000794 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_TIM4_Init+0x98>)
 80007b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000830 <MX_TIM4_Init+0x9c>)
 80007b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_TIM4_Init+0x98>)
 80007ba:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80007be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_TIM4_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <MX_TIM4_Init+0x98>)
 80007c8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80007cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_TIM4_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_TIM4_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007da:	4814      	ldr	r0, [pc, #80]	@ (800082c <MX_TIM4_Init+0x98>)
 80007dc:	f004 fabe 	bl	8004d5c <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80007e6:	f000 f9b7 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	480d      	ldr	r0, [pc, #52]	@ (800082c <MX_TIM4_Init+0x98>)
 80007f8:	f004 fc0e 	bl	8005018 <HAL_TIM_ConfigClockSource>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000802:	f000 f9a9 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	@ (800082c <MX_TIM4_Init+0x98>)
 8000814:	f004 fe38 	bl	8005488 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800081e:	f000 f99b 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000254 	.word	0x20000254
 8000830:	40000800 	.word	0x40000800

08000834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_USART1_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	@ (8000890 <MX_USART1_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000840:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_USART1_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_USART1_UART_Init+0x58>)
 800085a:	2208      	movs	r2, #8
 800085c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USART1_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_USART1_UART_Init+0x58>)
 8000878:	f004 ff00 	bl	800567c <HAL_HalfDuplex_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f969 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200002a0 	.word	0x200002a0
 8000890:	40011000 	.word	0x40011000

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_USART2_UART_Init+0x58>)
 800089a:	4a15      	ldr	r2, [pc, #84]	@ (80008f0 <MX_USART2_UART_Init+0x5c>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_USART2_UART_Init+0x58>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_USART2_UART_Init+0x58>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_USART2_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_USART2_UART_Init+0x58>)
 80008d8:	f004 fed0 	bl	800567c <HAL_HalfDuplex_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f939 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000328 	.word	0x20000328
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USART3_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_USART3_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000900:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USART3_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART3_UART_Init+0x58>)
 8000938:	f004 fe52 	bl	80055e0 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f909 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200003b0 	.word	0x200003b0
 8000950:	40004800 	.word	0x40004800

08000954 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_USART6_UART_Init+0x58>)
 800095a:	4a15      	ldr	r2, [pc, #84]	@ (80009b0 <MX_USART6_UART_Init+0x5c>)
 800095c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <MX_USART6_UART_Init+0x58>)
 8000960:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000964:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USART6_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_USART6_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USART6_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_USART6_UART_Init+0x58>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USART6_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_USART6_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USART6_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_USART6_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_USART6_UART_Init+0x58>)
 8000998:	f004 fe22 	bl	80055e0 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80009a2:	f000 f8d9 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000438 	.word	0x20000438
 80009b0:	40011400 	.word	0x40011400

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	@ 0x30
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b5e      	ldr	r3, [pc, #376]	@ (8000b44 <MX_GPIO_Init+0x190>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a5d      	ldr	r2, [pc, #372]	@ (8000b44 <MX_GPIO_Init+0x190>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b5b      	ldr	r3, [pc, #364]	@ (8000b44 <MX_GPIO_Init+0x190>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	61bb      	str	r3, [r7, #24]
 80009e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	4b58      	ldr	r3, [pc, #352]	@ (8000b44 <MX_GPIO_Init+0x190>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a57      	ldr	r2, [pc, #348]	@ (8000b44 <MX_GPIO_Init+0x190>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b55      	ldr	r3, [pc, #340]	@ (8000b44 <MX_GPIO_Init+0x190>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b52      	ldr	r3, [pc, #328]	@ (8000b44 <MX_GPIO_Init+0x190>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a51      	ldr	r2, [pc, #324]	@ (8000b44 <MX_GPIO_Init+0x190>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b4f      	ldr	r3, [pc, #316]	@ (8000b44 <MX_GPIO_Init+0x190>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b4c      	ldr	r3, [pc, #304]	@ (8000b44 <MX_GPIO_Init+0x190>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a4b      	ldr	r2, [pc, #300]	@ (8000b44 <MX_GPIO_Init+0x190>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b49      	ldr	r3, [pc, #292]	@ (8000b44 <MX_GPIO_Init+0x190>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	4b46      	ldr	r3, [pc, #280]	@ (8000b44 <MX_GPIO_Init+0x190>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a45      	ldr	r2, [pc, #276]	@ (8000b44 <MX_GPIO_Init+0x190>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b43      	ldr	r3, [pc, #268]	@ (8000b44 <MX_GPIO_Init+0x190>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a42:	4b40      	ldr	r3, [pc, #256]	@ (8000b44 <MX_GPIO_Init+0x190>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a3f      	ldr	r2, [pc, #252]	@ (8000b44 <MX_GPIO_Init+0x190>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b44 <MX_GPIO_Init+0x190>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a60:	4839      	ldr	r0, [pc, #228]	@ (8000b48 <MX_GPIO_Init+0x194>)
 8000a62:	f003 f87d 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2140      	movs	r1, #64	@ 0x40
 8000a6a:	4838      	ldr	r0, [pc, #224]	@ (8000b4c <MX_GPIO_Init+0x198>)
 8000a6c:	f003 f878 	bl	8003b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4832      	ldr	r0, [pc, #200]	@ (8000b50 <MX_GPIO_Init+0x19c>)
 8000a88:	f002 febe 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a8c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4828      	ldr	r0, [pc, #160]	@ (8000b48 <MX_GPIO_Init+0x194>)
 8000aa6:	f002 feaf 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aaa:	2340      	movs	r3, #64	@ 0x40
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4822      	ldr	r0, [pc, #136]	@ (8000b4c <MX_GPIO_Init+0x198>)
 8000ac2:	f002 fea1 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ac6:	2380      	movs	r3, #128	@ 0x80
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481c      	ldr	r0, [pc, #112]	@ (8000b4c <MX_GPIO_Init+0x198>)
 8000ada:	f002 fe95 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000ade:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af0:	230a      	movs	r3, #10
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4816      	ldr	r0, [pc, #88]	@ (8000b54 <MX_GPIO_Init+0x1a0>)
 8000afc:	f002 fe84 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <MX_GPIO_Init+0x194>)
 8000b16:	f002 fe77 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <MX_GPIO_Init+0x194>)
 8000b38:	f002 fe66 	bl	8003808 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3730      	adds	r7, #48	@ 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	40021800 	.word	0x40021800
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020000 	.word	0x40020000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	4053      	eors	r3, r2
 8000b7a:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4053      	eors	r3, r2
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b21a      	sxth	r2, r3
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4053      	eors	r3, r2
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	4053      	eors	r3, r2
 8000ba8:	b21a      	sxth	r2, r3
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4053      	eors	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	801a      	strh	r2, [r3, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd6:	801a      	strh	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8000bf0:	f107 030e 	add.w	r3, r7, #14
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffe7 	bl	8000bc8 <crc_init>
	while (length--) {
 8000bfa:	e009      	b.n	8000c10 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f107 020e 	add.w	r2, r7, #14
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ffaa 	bl	8000b64 <crc_accumulate>
	while (length--) {
 8000c10:	887b      	ldrh	r3, [r7, #2]
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	807a      	strh	r2, [r7, #2]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1f0      	bne.n	8000bfc <crc_calculate+0x18>
        }
        return crcTmp;
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	617b      	str	r3, [r7, #20]
	while (length--) {
 8000c36:	e007      	b.n	8000c48 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	617a      	str	r2, [r7, #20]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	68f9      	ldr	r1, [r7, #12]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff8e 	bl	8000b64 <crc_accumulate>
	while (length--) {
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	1e5a      	subs	r2, r3, #1
 8000c4c:	80fa      	strh	r2, [r7, #6]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f2      	bne.n	8000c38 <crc_accumulate_buffer+0x14>
        }
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a0e      	ldr	r2, [pc, #56]	@ (8000cac <mavlink_sha256_init+0x50>)
 8000c74:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <mavlink_sha256_init+0x54>)
 8000c7a:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <mavlink_sha256_init+0x58>)
 8000c80:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb8 <mavlink_sha256_init+0x5c>)
 8000c86:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000cbc <mavlink_sha256_init+0x60>)
 8000c8c:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <mavlink_sha256_init+0x64>)
 8000c92:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <mavlink_sha256_init+0x68>)
 8000c98:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <mavlink_sha256_init+0x6c>)
 8000c9e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	6a09e667 	.word	0x6a09e667
 8000cb0:	bb67ae85 	.word	0xbb67ae85
 8000cb4:	3c6ef372 	.word	0x3c6ef372
 8000cb8:	a54ff53a 	.word	0xa54ff53a
 8000cbc:	510e527f 	.word	0x510e527f
 8000cc0:	9b05688c 	.word	0x9b05688c
 8000cc4:	1f83d9ab 	.word	0x1f83d9ab
 8000cc8:	5be0cd19 	.word	0x5be0cd19

08000ccc <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b0cf      	sub	sp, #316	@ 0x13c
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cd6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000cda:	6018      	str	r0, [r3, #0]
 8000cdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ce0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000ce4:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8000ce6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    BB = m->counter[1];
 8000cf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000cfa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    CC = m->counter[2];
 8000d06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d0a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    DD = m->counter[3];
 8000d16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d1a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    EE = m->counter[4];
 8000d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d2a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    FF = m->counter[5];
 8000d36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d3a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GG = m->counter[6];
 8000d46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d4a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6a1b      	ldr	r3, [r3, #32]
 8000d52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HH = m->counter[7];
 8000d56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d5a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d62:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    for (i = 0; i < 16; ++i)
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000d6c:	e016      	b.n	8000d9c <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 8000d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8000d78:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	6819      	ldr	r1, [r3, #0]
 8000d82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000d8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d96:	3301      	adds	r3, #1
 8000d98:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	dde4      	ble.n	8000d6e <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8000da4:	2310      	movs	r3, #16
 8000da6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000daa:	e069      	b.n	8000e80 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000db0:	1e9a      	subs	r2, r3, #2
 8000db2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000db6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dbe:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000dc6:	1e99      	subs	r1, r3, #2
 8000dc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000dd4:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000dd8:	405a      	eors	r2, r3
 8000dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000dde:	1e99      	subs	r1, r3, #2
 8000de0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000de4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000de8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000dec:	0a9b      	lsrs	r3, r3, #10
 8000dee:	405a      	eors	r2, r3
 8000df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000df4:	1fd9      	subs	r1, r3, #7
 8000df6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dfe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e02:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e08:	f1a3 010f 	sub.w	r1, r3, #15
 8000e0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e18:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8000e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e20:	f1a3 000f 	sub.w	r0, r3, #15
 8000e24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e2c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e30:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000e34:	4059      	eors	r1, r3
 8000e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e3a:	f1a3 000f 	sub.w	r0, r3, #15
 8000e3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e46:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e4a:	08db      	lsrs	r3, r3, #3
 8000e4c:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000e4e:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e54:	f1a3 0110 	sub.w	r1, r3, #16
 8000e58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e64:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8000e66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e6e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8000e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e84:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e86:	dd91      	ble.n	8000dac <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000e8e:	e078      	b.n	8000f82 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8000e90:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e94:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000e98:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e9c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000ea0:	405a      	eors	r2, r3
 8000ea2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ea6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000eaa:	405a      	eors	r2, r3
 8000eac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000eb0:	441a      	add	r2, r3
 8000eb2:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8000eb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eba:	4019      	ands	r1, r3
 8000ebc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ec0:	43d8      	mvns	r0, r3
 8000ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000ec6:	4003      	ands	r3, r0
 8000ec8:	404b      	eors	r3, r1
 8000eca:	441a      	add	r2, r3
 8000ecc:	496e      	ldr	r1, [pc, #440]	@ (8001088 <mavlink_sha256_calc+0x3bc>)
 8000ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ed2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ed6:	441a      	add	r2, r3
 8000ed8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000edc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ee0:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8000ee4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ee8:	4413      	add	r3, r2
 8000eea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000eee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000ef2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000ef6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000efa:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000efe:	405a      	eors	r2, r3
 8000f00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000f04:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000f08:	405a      	eors	r2, r3
 8000f0a:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8000f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f12:	4059      	eors	r1, r3
 8000f14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000f18:	4019      	ands	r1, r3
 8000f1a:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f22:	4003      	ands	r3, r0
 8000f24:	404b      	eors	r3, r1
 8000f26:	4413      	add	r3, r2
 8000f28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			     
	HH = GG;
 8000f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000f30:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	GG = FF;
 8000f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f38:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	FF = EE;
 8000f3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f40:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	EE = DD + T1;
 8000f44:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000f48:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	DD = CC;
 8000f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000f56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	CC = BB;
 8000f5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000f5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	BB = AA;
 8000f62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000f66:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	AA = T1 + T2;
 8000f6a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000f72:	4413      	add	r3, r2
 8000f74:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (i = 0; i < 64; i++) {
 8000f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f86:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f88:	dd82      	ble.n	8000e90 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 8000f8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000f9a:	441a      	add	r2, r3
 8000f9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fa0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8000fa8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000fb8:	441a      	add	r2, r3
 8000fba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fbe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8000fc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000fd6:	441a      	add	r2, r3
 8000fd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fdc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8000fe4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fe8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	695a      	ldr	r2, [r3, #20]
 8000ff0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000ff4:	441a      	add	r2, r3
 8000ff6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ffa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8001002:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001006:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	699a      	ldr	r2, [r3, #24]
 800100e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001012:	441a      	add	r2, r3
 8001014:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001018:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8001020:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001024:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	69da      	ldr	r2, [r3, #28]
 800102c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001030:	441a      	add	r2, r3
 8001032:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001036:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 800103e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001042:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6a1a      	ldr	r2, [r3, #32]
 800104a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800104e:	441a      	add	r2, r3
 8001050:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001054:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 800105c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001060:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001068:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800106c:	441a      	add	r2, r3
 800106e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001072:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800107a:	bf00      	nop
 800107c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	08006f74 	.word	0x08006f74

0800108c <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b09c      	sub	sp, #112	@ 0x70
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	441a      	add	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d904      	bls.n	80010c4 <mavlink_sha256_update+0x38>
	++m->sz[1];
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 80010c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010c6:	08db      	lsrs	r3, r3, #3
 80010c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 80010ce:	e057      	b.n	8001180 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 80010d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010d2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80010d6:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010dc:	429a      	cmp	r2, r3
 80010de:	d201      	bcs.n	80010e4 <mavlink_sha256_update+0x58>
            l = len;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80010ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010ec:	4413      	add	r3, r2
 80010ee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80010f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 ff24 	bl	8006f40 <memcpy>
	offset += l;
 80010f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80010fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010fc:	4413      	add	r3, r2
 80010fe:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 8001100:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001102:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001104:	4413      	add	r3, r2
 8001106:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001110:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001112:	2b40      	cmp	r3, #64	@ 0x40
 8001114:	d134      	bne.n	8001180 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3328      	adds	r3, #40	@ 0x28
 800111a:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 800111c:	2300      	movs	r3, #0
 800111e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001120:	e023      	b.n	800116a <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8001122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001128:	4413      	add	r3, r2
 800112a:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 800112c:	f107 0210 	add.w	r2, r7, #16
 8001130:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 8001138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800113a:	3303      	adds	r3, #3
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001140:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001144:	1c9a      	adds	r2, r3, #2
 8001146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001148:	3301      	adds	r3, #1
 800114a:	7812      	ldrb	r2, [r2, #0]
 800114c:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 800114e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001154:	3302      	adds	r3, #2
 8001156:	7812      	ldrb	r2, [r2, #0]
 8001158:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 800115a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800115c:	3303      	adds	r3, #3
 800115e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001160:	7812      	ldrb	r2, [r2, #0]
 8001162:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8001164:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001166:	3301      	adds	r3, #1
 8001168:	663b      	str	r3, [r7, #96]	@ 0x60
 800116a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800116c:	2b0f      	cmp	r3, #15
 800116e:	ddd8      	ble.n	8001122 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff fda8 	bl	8000ccc <mavlink_sha256_calc>
	    offset = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1a4      	bne.n	80010d0 <mavlink_sha256_update+0x44>
	}
    }
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	3770      	adds	r7, #112	@ 0x70
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b098      	sub	sp, #96	@ 0x60
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80011a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011a8:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 80011ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011b0:	3301      	adds	r3, #1
 80011b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3308      	adds	r3, #8
 80011b8:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	3301      	adds	r3, #1
 80011c4:	2247      	movs	r2, #71	@ 0x47
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 fe8c 	bl	8006ee6 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011d4:	3307      	adds	r3, #7
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	3360      	adds	r3, #96	@ 0x60
 80011da:	443b      	add	r3, r7
 80011dc:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	0a1a      	lsrs	r2, r3, #8
 80011e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011e8:	3306      	adds	r3, #6
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	3360      	adds	r3, #96	@ 0x60
 80011ee:	443b      	add	r3, r7
 80011f0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	0c1a      	lsrs	r2, r3, #16
 80011fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011fc:	3305      	adds	r3, #5
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	3360      	adds	r3, #96	@ 0x60
 8001202:	443b      	add	r3, r7
 8001204:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	0e1a      	lsrs	r2, r3, #24
 800120e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001210:	3304      	adds	r3, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	3360      	adds	r3, #96	@ 0x60
 8001216:	443b      	add	r3, r7
 8001218:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001222:	3303      	adds	r3, #3
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	3360      	adds	r3, #96	@ 0x60
 8001228:	443b      	add	r3, r7
 800122a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	0a1a      	lsrs	r2, r3, #8
 8001234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001236:	3302      	adds	r3, #2
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	3360      	adds	r3, #96	@ 0x60
 800123c:	443b      	add	r3, r7
 800123e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	0c1a      	lsrs	r2, r3, #16
 8001248:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800124a:	3301      	adds	r3, #1
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	3360      	adds	r3, #96	@ 0x60
 8001250:	443b      	add	r3, r7
 8001252:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	0e1b      	lsrs	r3, r3, #24
 800125c:	b2d9      	uxtb	r1, r3
 800125e:	f107 020c 	add.w	r2, r7, #12
 8001262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001264:	4413      	add	r3, r2
 8001266:	460a      	mov	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800126a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800126c:	f103 0208 	add.w	r2, r3, #8
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ff08 	bl	800108c <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 800127c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800127e:	78da      	ldrb	r2, [r3, #3]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800128a:	7892      	ldrb	r2, [r2, #2]
 800128c:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	3302      	adds	r3, #2
 8001292:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001294:	7852      	ldrb	r2, [r2, #1]
 8001296:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	3303      	adds	r3, #3
 800129c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800129e:	7812      	ldrb	r2, [r2, #0]
 80012a0:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3304      	adds	r3, #4
 80012a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80012a8:	79d2      	ldrb	r2, [r2, #7]
 80012aa:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	3305      	adds	r3, #5
 80012b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80012b2:	7992      	ldrb	r2, [r2, #6]
 80012b4:	701a      	strb	r2, [r3, #0]
}
 80012b6:	bf00      	nop
 80012b8:	3760      	adds	r7, #96	@ 0x60
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4a03      	ldr	r2, [pc, #12]	@ (80012e4 <mavlink_get_channel_status+0x24>)
 80012d6:	4413      	add	r3, r2
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	20000eb0 	.word	0x20000eb0

080012e8 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f240 1223 	movw	r2, #291	@ 0x123
 80012f8:	fb02 f303 	mul.w	r3, r2, r3
 80012fc:	4a03      	ldr	r2, [pc, #12]	@ (800130c <mavlink_get_channel_buffer+0x24>)
 80012fe:	4413      	add	r3, r2
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	20000a24 	.word	0x20000a24

08001310 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b0a0      	sub	sp, #128	@ 0x80
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d005      	beq.n	8001330 <mavlink_sign_packet+0x20>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <mavlink_sign_packet+0x24>
	    return 0;
 8001330:	2300      	movs	r3, #0
 8001332:	e04f      	b.n	80013d4 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	785a      	ldrb	r2, [r3, #1]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001342:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	3301      	adds	r3, #1
 800134a:	f107 0110 	add.w	r1, r7, #16
 800134e:	2206      	movs	r2, #6
 8001350:	4618      	mov	r0, r3
 8001352:	f005 fdf5 	bl	8006f40 <memcpy>
	signing->timestamp++;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800135c:	1c54      	adds	r4, r2, #1
 800135e:	f143 0500 	adc.w	r5, r3, #0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fc75 	bl	8000c5c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f103 0110 	add.w	r1, r3, #16
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	2220      	movs	r2, #32
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fe84 	bl	800108c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001384:	78fa      	ldrb	r2, [r7, #3]
 8001386:	f107 0318 	add.w	r3, r7, #24
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe7d 	bl	800108c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001392:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fe74 	bl	800108c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	2202      	movs	r2, #2
 80013aa:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fe6c 	bl	800108c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	2207      	movs	r2, #7
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe65 	bl	800108c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1dda      	adds	r2, r3, #7
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fedf 	bl	8001190 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 80013d2:	230d      	movs	r3, #13
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3780      	adds	r7, #128	@ 0x80
 80013d8:	46bd      	mov	sp, r7
 80013da:	bdb0      	pop	{r4, r5, r7, pc}

080013dc <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80013e8:	e002      	b.n	80013f0 <_mav_trim_payload+0x14>
		length--;
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d906      	bls.n	8001404 <_mav_trim_payload+0x28>
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f2      	beq.n	80013ea <_mav_trim_payload+0xe>
	}
	return length;
 8001404:	78fb      	ldrb	r3, [r7, #3]
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8001414:	b5b0      	push	{r4, r5, r7, lr}
 8001416:	b0aa      	sub	sp, #168	@ 0xa8
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <mavlink_signature_check+0x16>
		return true;
 8001426:	2301      	movs	r3, #1
 8001428:	e13e      	b.n	80016a8 <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3302      	adds	r3, #2
 800142e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	const uint8_t *psig = msg->signature;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8001438:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        const uint8_t *incoming_signature = psig+7;
 800143c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001440:	3307      	adds	r3, #7
 8001442:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8001446:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fc06 	bl	8000c5c <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f103 0110 	add.w	r1, r3, #16
 8001456:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800145a:	2220      	movs	r2, #32
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fe15 	bl	800108c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8001462:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001466:	220a      	movs	r2, #10
 8001468:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fe0d 	bl	800108c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f103 010c 	add.w	r1, r3, #12
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	78db      	ldrb	r3, [r3, #3]
 800147c:	461a      	mov	r2, r3
 800147e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fe02 	bl	800108c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f503 718a 	add.w	r1, r3, #276	@ 0x114
 800148e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001492:	2202      	movs	r2, #2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fdf9 	bl	800108c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 800149a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800149e:	2207      	movs	r2, #7
 80014a0:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fdf1 	bl	800108c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 80014aa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80014ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe6b 	bl	8001190 <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 80014ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014be:	2206      	movs	r2, #6
 80014c0:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80014c4:	4618      	mov	r0, r3
 80014c6:	f005 fcfe 	bl	8006ec6 <memcmp>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2202      	movs	r2, #2
 80014d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		return false;
 80014d8:	2300      	movs	r3, #0
 80014da:	e0e5      	b.n	80016a8 <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 80014dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	tstamp.t64 = 0;
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	f04f 0300 	mov.w	r3, #0
 80014ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 80014f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014f6:	1c59      	adds	r1, r3, #1
 80014f8:	f107 0318 	add.w	r3, r7, #24
 80014fc:	2206      	movs	r2, #6
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fd1e 	bl	8006f40 <memcpy>

	if (signing_streams == NULL) {
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d105      	bne.n	8001516 <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2203      	movs	r2, #3
 800150e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                return false;
 8001512:	2300      	movs	r3, #0
 8001514:	e0c8      	b.n	80016a8 <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8001516:	2300      	movs	r3, #0
 8001518:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800151c:	e02b      	b.n	8001576 <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	79d9      	ldrb	r1, [r3, #7]
 8001522:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001526:	68b8      	ldr	r0, [r7, #8]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	4403      	add	r3, r0
 8001530:	3303      	adds	r3, #3
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4299      	cmp	r1, r3
 8001536:	d119      	bne.n	800156c <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7a19      	ldrb	r1, [r3, #8]
 800153c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001540:	68b8      	ldr	r0, [r7, #8]
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	4403      	add	r3, r0
 800154a:	3304      	adds	r3, #4
 800154c:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 800154e:	4299      	cmp	r1, r3
 8001550:	d10c      	bne.n	800156c <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8001552:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4413      	add	r3, r2
 800155e:	440b      	add	r3, r1
 8001560:	3302      	adds	r3, #2
 8001562:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001564:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8001568:	429a      	cmp	r2, r3
 800156a:	d00b      	beq.n	8001584 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800156c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8001570:	3301      	adds	r3, #1
 8001572:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800157e:	429a      	cmp	r2, r3
 8001580:	d3cd      	bcc.n	800151e <mavlink_signature_check+0x10a>
 8001582:	e000      	b.n	8001586 <mavlink_signature_check+0x172>
			break;
 8001584:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800158e:	429a      	cmp	r2, r3
 8001590:	d146      	bne.n	8001620 <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	d905      	bls.n	80015a6 <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2204      	movs	r2, #4
 800159e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e080      	b.n	80016a8 <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 80015a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015aa:	4941      	ldr	r1, [pc, #260]	@ (80016b0 <mavlink_signature_check+0x29c>)
 80015ac:	1854      	adds	r4, r2, r1
 80015ae:	f143 0500 	adc.w	r5, r3, #0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b8:	4294      	cmp	r4, r2
 80015ba:	eb75 0303 	sbcs.w	r3, r5, r3
 80015be:	d205      	bcs.n	80015cc <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2205      	movs	r2, #5
 80015c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e06d      	b.n	80016a8 <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 80015cc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	79d8      	ldrb	r0, [r3, #7]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	4613      	mov	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	4413      	add	r3, r2
 80015dc:	440b      	add	r3, r1
 80015de:	3303      	adds	r3, #3
 80015e0:	4602      	mov	r2, r0
 80015e2:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 80015e4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7a18      	ldrb	r0, [r3, #8]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	4613      	mov	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	3304      	adds	r3, #4
 80015f8:	4602      	mov	r2, r0
 80015fa:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 80015fc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	4613      	mov	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	4413      	add	r3, r2
 8001608:	440b      	add	r3, r1
 800160a:	3302      	adds	r3, #2
 800160c:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8001610:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	b29a      	uxth	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	801a      	strh	r2, [r3, #0]
 800161e:	e021      	b.n	8001664 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 800162c:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001630:	4613      	mov	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4413      	add	r3, r2
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	4413      	add	r3, r2
 800163a:	1d59      	adds	r1, r3, #5
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	2206      	movs	r2, #6
 8001642:	4618      	mov	r0, r3
 8001644:	f005 fc7c 	bl	8006f40 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8001648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800164c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001650:	4290      	cmp	r0, r2
 8001652:	eb71 0303 	sbcs.w	r3, r1, r3
 8001656:	d305      	bcc.n	8001664 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2206      	movs	r2, #6
 800165c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 8001660:	2300      	movs	r3, #0
 8001662:	e021      	b.n	80016a8 <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8001664:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4413      	add	r3, r2
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	4413      	add	r3, r2
 8001672:	1d58      	adds	r0, r3, #5
 8001674:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001678:	3301      	adds	r3, #1
 800167a:	2206      	movs	r2, #6
 800167c:	4619      	mov	r1, r3
 800167e:	f005 fc5f 	bl	8006f40 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001682:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001686:	68f9      	ldr	r1, [r7, #12]
 8001688:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800168c:	4290      	cmp	r0, r2
 800168e:	eb71 0303 	sbcs.w	r3, r1, r3
 8001692:	d204      	bcs.n	800169e <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 8001694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return true;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	37a8      	adds	r7, #168	@ 0xa8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bdb0      	pop	{r4, r5, r7, pc}
 80016b0:	005b8d80 	.word	0x005b8d80

080016b4 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80016b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b6:	b08f      	sub	sp, #60	@ 0x3c
 80016b8:	af04      	add	r7, sp, #16
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	72fb      	strb	r3, [r7, #11]
 80016c2:	4613      	mov	r3, r2
 80016c4:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	7b1b      	ldrb	r3, [r3, #12]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	bf14      	ite	ne
 80016d2:	2301      	movne	r3, #1
 80016d4:	2300      	moveq	r3, #0
 80016d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80016da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016de:	f083 0301 	eor.w	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d00c      	beq.n	8001702 <mavlink_finalize_message_buffer+0x4e>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <mavlink_finalize_message_buffer+0x4e>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <mavlink_finalize_message_buffer+0x4e>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <mavlink_finalize_message_buffer+0x50>
 8001702:	2300      	movs	r3, #0
 8001704:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001708:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001714:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <mavlink_finalize_message_buffer+0x6c>
 800171c:	230d      	movs	r3, #13
 800171e:	e000      	b.n	8001722 <mavlink_finalize_message_buffer+0x6e>
 8001720:	2300      	movs	r3, #0
 8001722:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001726:	230a      	movs	r3, #10
 8001728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 800172c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	22fe      	movs	r2, #254	@ 0xfe
 8001738:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800173a:	2306      	movs	r3, #6
 800173c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001740:	e002      	b.n	8001748 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	22fd      	movs	r2, #253	@ 0xfd
 8001746:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001748:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <mavlink_finalize_message_buffer+0xb2>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	330c      	adds	r3, #12
 8001754:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fe3e 	bl	80013dc <_mav_trim_payload>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	e001      	b.n	800176a <mavlink_finalize_message_buffer+0xb6>
 8001766:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	7afa      	ldrb	r2, [r7, #11]
 8001772:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	7aba      	ldrb	r2, [r7, #10]
 8001778:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8001780:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	791b      	ldrb	r3, [r3, #4]
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	799a      	ldrb	r2, [r3, #6]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	799b      	ldrb	r3, [r3, #6]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	789b      	ldrb	r3, [r3, #2]
 80017b4:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	78db      	ldrb	r3, [r3, #3]
 80017ba:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 80017bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	799b      	ldrb	r3, [r3, #6]
 80017c8:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	79db      	ldrb	r3, [r3, #7]
 80017ce:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	7a1b      	ldrb	r3, [r3, #8]
 80017d4:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	7a5a      	ldrb	r2, [r3, #9]
 80017da:	7a99      	ldrb	r1, [r3, #10]
 80017dc:	0209      	lsls	r1, r1, #8
 80017de:	430a      	orrs	r2, r1
 80017e0:	7adb      	ldrb	r3, [r3, #11]
 80017e2:	041b      	lsls	r3, r3, #16
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	777b      	strb	r3, [r7, #29]
 80017ea:	e030      	b.n	800184e <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	791b      	ldrb	r3, [r3, #4]
 80017f0:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	795b      	ldrb	r3, [r3, #5]
 80017f6:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	799b      	ldrb	r3, [r3, #6]
 80017fc:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	79db      	ldrb	r3, [r3, #7]
 8001802:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	7a1b      	ldrb	r3, [r3, #8]
 8001808:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	7a5a      	ldrb	r2, [r3, #9]
 800180e:	7a99      	ldrb	r1, [r3, #10]
 8001810:	0209      	lsls	r1, r1, #8
 8001812:	430a      	orrs	r2, r1
 8001814:	7adb      	ldrb	r3, [r3, #11]
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	4313      	orrs	r3, r2
 800181a:	b2db      	uxtb	r3, r3
 800181c:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	7a5a      	ldrb	r2, [r3, #9]
 8001822:	7a99      	ldrb	r1, [r3, #10]
 8001824:	0209      	lsls	r1, r1, #8
 8001826:	430a      	orrs	r2, r1
 8001828:	7adb      	ldrb	r3, [r3, #11]
 800182a:	041b      	lsls	r3, r3, #16
 800182c:	4313      	orrs	r3, r2
 800182e:	121b      	asrs	r3, r3, #8
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	7a5a      	ldrb	r2, [r3, #9]
 800183a:	7a99      	ldrb	r1, [r3, #10]
 800183c:	0209      	lsls	r1, r1, #8
 800183e:	430a      	orrs	r2, r1
 8001840:	7adb      	ldrb	r3, [r3, #11]
 8001842:	041b      	lsls	r3, r3, #16
 8001844:	4313      	orrs	r3, r2
 8001846:	141b      	asrs	r3, r3, #16
 8001848:	b2db      	uxtb	r3, r3
 800184a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 800184e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001852:	b29b      	uxth	r3, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	f107 0318 	add.w	r3, r7, #24
 800185c:	3301      	adds	r3, #1
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff f9bf 	bl	8000be4 <crc_calculate>
 8001866:	4603      	mov	r3, r0
 8001868:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f103 010c 	add.w	r1, r3, #12
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	78db      	ldrb	r3, [r3, #3]
 8001874:	461a      	mov	r2, r3
 8001876:	f107 0316 	add.w	r3, r7, #22
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f9d2 	bl	8000c24 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8001880:	f107 0216 	add.w	r2, r7, #22
 8001884:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f96a 	bl	8000b64 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8001890:	8af9      	ldrh	r1, [r7, #22]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	330c      	adds	r3, #12
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	78d2      	ldrb	r2, [r2, #3]
 800189a:	4413      	add	r3, r2
 800189c:	b2ca      	uxtb	r2, r1
 800189e:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80018a0:	8afb      	ldrh	r3, [r7, #22]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b299      	uxth	r1, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f103 020c 	add.w	r2, r3, #12
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	78db      	ldrb	r3, [r3, #3]
 80018b0:	3301      	adds	r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	b2ca      	uxtb	r2, r1
 80018b6:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 80018b8:	8afa      	ldrh	r2, [r7, #22]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 80018be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01a      	beq.n	80018fc <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f503 758b 	add.w	r5, r3, #278	@ 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80018d8:	68f9      	ldr	r1, [r7, #12]
 80018da:	310c      	adds	r1, #12
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 80018e0:	4401      	add	r1, r0
 80018e2:	f897 6027 	ldrb.w	r6, [r7, #39]	@ 0x27
 80018e6:	f107 0018 	add.w	r0, r7, #24
 80018ea:	9102      	str	r1, [sp, #8]
 80018ec:	9201      	str	r2, [sp, #4]
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	4633      	mov	r3, r6
 80018f2:	4602      	mov	r2, r0
 80018f4:	4629      	mov	r1, r5
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7ff fd0a 	bl	8001310 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	78db      	ldrb	r3, [r3, #3]
 8001900:	461a      	mov	r2, r3
 8001902:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001906:	b29b      	uxth	r3, r3
 8001908:	4413      	add	r3, r2
 800190a:	b29a      	uxth	r2, r3
 800190c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001910:	b29b      	uxth	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	3302      	adds	r3, #2
 8001918:	b29b      	uxth	r3, r3
}
 800191a:	4618      	mov	r0, r3
 800191c:	372c      	adds	r7, #44	@ 0x2c
 800191e:	46bd      	mov	sp, r7
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001922 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b088      	sub	sp, #32
 8001926:	af04      	add	r7, sp, #16
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	4608      	mov	r0, r1
 800192c:	4611      	mov	r1, r2
 800192e:	461a      	mov	r2, r3
 8001930:	4603      	mov	r3, r0
 8001932:	70fb      	strb	r3, [r7, #3]
 8001934:	460b      	mov	r3, r1
 8001936:	70bb      	strb	r3, [r7, #2]
 8001938:	4613      	mov	r3, r2
 800193a:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 800193c:	787b      	ldrb	r3, [r7, #1]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fcbe 	bl	80012c0 <mavlink_get_channel_status>
 8001944:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8001946:	78ba      	ldrb	r2, [r7, #2]
 8001948:	78f9      	ldrb	r1, [r7, #3]
 800194a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	7f3b      	ldrb	r3, [r7, #28]
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	7e3b      	ldrb	r3, [r7, #24]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff feaa 	bl	80016b4 <mavlink_finalize_message_buffer>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af04      	add	r7, sp, #16
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	4608      	mov	r0, r1
 8001974:	4611      	mov	r1, r2
 8001976:	461a      	mov	r2, r3
 8001978:	4603      	mov	r3, r0
 800197a:	70fb      	strb	r3, [r7, #3]
 800197c:	460b      	mov	r3, r1
 800197e:	70bb      	strb	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001984:	78ba      	ldrb	r2, [r7, #2]
 8001986:	78f9      	ldrb	r1, [r7, #3]
 8001988:	7d3b      	ldrb	r3, [r7, #20]
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	7c3b      	ldrb	r3, [r7, #16]
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	787b      	ldrb	r3, [r7, #1]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffc3 	bl	8001922 <mavlink_finalize_message_chan>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	789b      	ldrb	r3, [r3, #2]
 80019b2:	3301      	adds	r3, #1
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	709a      	strb	r2, [r3, #2]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	78db      	ldrb	r3, [r3, #3]
 80019d4:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	789b      	ldrb	r3, [r3, #2]
 80019da:	2bfe      	cmp	r3, #254	@ 0xfe
 80019dc:	d13a      	bne.n	8001a54 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80019e2:	2305      	movs	r3, #5
 80019e4:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	789a      	ldrb	r2, [r3, #2]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3301      	adds	r3, #1
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3302      	adds	r3, #2
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	7992      	ldrb	r2, [r2, #6]
 80019fe:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3303      	adds	r3, #3
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	79d2      	ldrb	r2, [r2, #7]
 8001a08:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	7a12      	ldrb	r2, [r2, #8]
 8001a12:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	7a5a      	ldrb	r2, [r3, #9]
 8001a18:	7a99      	ldrb	r1, [r3, #10]
 8001a1a:	0209      	lsls	r1, r1, #8
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	7adb      	ldrb	r3, [r3, #11]
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	4313      	orrs	r3, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3305      	adds	r3, #5
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	1d98      	adds	r0, r3, #6
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	f103 010c 	add.w	r1, r3, #12
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	78db      	ldrb	r3, [r3, #3]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f005 fa7f 	bl	8006f40 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001a42:	7dbb      	ldrb	r3, [r7, #22]
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	78d2      	ldrb	r2, [r2, #3]
 8001a48:	4413      	add	r3, r2
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	e06c      	b.n	8001b2e <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	330c      	adds	r3, #12
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fcbd 	bl	80013dc <_mav_trim_payload>
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001a66:	2309      	movs	r3, #9
 8001a68:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	789a      	ldrb	r2, [r3, #2]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3301      	adds	r3, #1
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	7912      	ldrb	r2, [r2, #4]
 8001a82:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3303      	adds	r3, #3
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	7952      	ldrb	r2, [r2, #5]
 8001a8c:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3304      	adds	r3, #4
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	7992      	ldrb	r2, [r2, #6]
 8001a96:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3305      	adds	r3, #5
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	79d2      	ldrb	r2, [r2, #7]
 8001aa0:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3306      	adds	r3, #6
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	7a12      	ldrb	r2, [r2, #8]
 8001aaa:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	7a5a      	ldrb	r2, [r3, #9]
 8001ab0:	7a99      	ldrb	r1, [r3, #10]
 8001ab2:	0209      	lsls	r1, r1, #8
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	7adb      	ldrb	r3, [r3, #11]
 8001ab8:	041b      	lsls	r3, r3, #16
 8001aba:	4313      	orrs	r3, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3307      	adds	r3, #7
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	7a5a      	ldrb	r2, [r3, #9]
 8001aca:	7a99      	ldrb	r1, [r3, #10]
 8001acc:	0209      	lsls	r1, r1, #8
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	7adb      	ldrb	r3, [r3, #11]
 8001ad2:	041b      	lsls	r3, r3, #16
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	0a1a      	lsrs	r2, r3, #8
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3308      	adds	r3, #8
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	7a5a      	ldrb	r2, [r3, #9]
 8001ae4:	7a99      	ldrb	r1, [r3, #10]
 8001ae6:	0209      	lsls	r1, r1, #8
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	7adb      	ldrb	r3, [r3, #11]
 8001aec:	041b      	lsls	r3, r3, #16
 8001aee:	4313      	orrs	r3, r2
 8001af0:	0c1a      	lsrs	r2, r3, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3309      	adds	r3, #9
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f103 000a 	add.w	r0, r3, #10
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	330c      	adds	r3, #12
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	4619      	mov	r1, r3
 8001b08:	f005 fa1a 	bl	8006f40 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001b0c:	7dba      	ldrb	r2, [r7, #22]
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	4413      	add	r3, r2
 8001b12:	3301      	adds	r3, #1
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	791b      	ldrb	r3, [r3, #4]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <mavlink_msg_to_send_buffer+0x164>
 8001b26:	230d      	movs	r3, #13
 8001b28:	e000      	b.n	8001b2c <mavlink_msg_to_send_buffer+0x166>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	3301      	adds	r3, #1
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1c98      	adds	r0, r3, #2
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8001b5c:	7dfa      	ldrb	r2, [r7, #23]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f005 f9ee 	bl	8006f40 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001b64:	7dbb      	ldrb	r3, [r7, #22]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3303      	adds	r3, #3
 8001b7a:	b29b      	uxth	r3, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001b90:	f107 030e 	add.w	r3, r7, #14
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f817 	bl	8000bc8 <crc_init>
	msg->checksum = crcTmp;
 8001b9a:	89fa      	ldrh	r2, [r7, #14]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	801a      	strh	r2, [r3, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001bbc:	f107 020e 	add.w	r2, r7, #14
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe ffcd 	bl	8000b64 <crc_accumulate>
	msg->checksum = checksum;
 8001bca:	89fa      	ldrh	r2, [r7, #14]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	801a      	strh	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	f240 1373 	movw	r3, #371	@ 0x173
 8001be8:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001bea:	e025      	b.n	8001c38 <mavlink_get_msg_entry+0x60>
            uint32_t mid = (low+1+high)/2;
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	085b      	lsrs	r3, r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001bf8:	491e      	ldr	r1, [pc, #120]	@ (8001c74 <mavlink_get_msg_entry+0x9c>)
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d203      	bcs.n	8001c16 <mavlink_get_msg_entry+0x3e>
                high = mid-1;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	613b      	str	r3, [r7, #16]
                continue;
 8001c14:	e010      	b.n	8001c38 <mavlink_get_msg_entry+0x60>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8001c16:	4917      	ldr	r1, [pc, #92]	@ (8001c74 <mavlink_get_msg_entry+0x9c>)
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d902      	bls.n	8001c32 <mavlink_get_msg_entry+0x5a>
                low = mid;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	617b      	str	r3, [r7, #20]
                continue;
 8001c30:	e002      	b.n	8001c38 <mavlink_get_msg_entry+0x60>
            }
            low = mid;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	617b      	str	r3, [r7, #20]
            break;
 8001c36:	e003      	b.n	8001c40 <mavlink_get_msg_entry+0x68>
        while (low < high) {
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d3d5      	bcc.n	8001bec <mavlink_get_msg_entry+0x14>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8001c40:	490c      	ldr	r1, [pc, #48]	@ (8001c74 <mavlink_get_msg_entry+0x9c>)
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e006      	b.n	8001c68 <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4a03      	ldr	r2, [pc, #12]	@ (8001c74 <mavlink_get_msg_entry+0x9c>)
 8001c66:	4413      	add	r3, r2
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	08007074 	.word	0x08007074

08001c78 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	78db      	ldrb	r3, [r3, #3]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f200 8272 	bhi.w	800217c <mavlink_frame_char_buffer+0x504>
 8001c98:	a201      	add	r2, pc, #4	@ (adr r2, 8001ca0 <mavlink_frame_char_buffer+0x28>)
 8001c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9e:	bf00      	nop
 8001ca0:	08001ce1 	.word	0x08001ce1
 8001ca4:	08001ce1 	.word	0x08001ce1
 8001ca8:	08001d3f 	.word	0x08001d3f
 8001cac:	08001da5 	.word	0x08001da5
 8001cb0:	08001dd9 	.word	0x08001dd9
 8001cb4:	08001df1 	.word	0x08001df1
 8001cb8:	08001e09 	.word	0x08001e09
 8001cbc:	08001e21 	.word	0x08001e21
 8001cc0:	08001e39 	.word	0x08001e39
 8001cc4:	08001e93 	.word	0x08001e93
 8001cc8:	08001edf 	.word	0x08001edf
 8001ccc:	08001f3b 	.word	0x08001f3b
 8001cd0:	08001f73 	.word	0x08001f73
 8001cd4:	0800200b 	.word	0x0800200b
 8001cd8:	0800200b 	.word	0x0800200b
 8001cdc:	080020c7 	.word	0x080020c7
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	2bfd      	cmp	r3, #253	@ 0xfd
 8001ce4:	d113      	bne.n	8001d0e <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	79fa      	ldrb	r2, [r7, #7]
 8001cf6:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	7b1b      	ldrb	r3, [r3, #12]
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7ff ff3c 	bl	8001b84 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8001d0c:	e22d      	b.n	800216a <mavlink_frame_char_buffer+0x4f2>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d12:	f040 822a 	bne.w	800216a <mavlink_frame_char_buffer+0x4f2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	79fa      	ldrb	r2, [r7, #7]
 8001d26:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	7b1b      	ldrb	r3, [r3, #12]
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7ff ff24 	bl	8001b84 <mavlink_start_checksum>
		break;
 8001d3c:	e215      	b.n	800216a <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00f      	beq.n	8001d66 <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	785b      	ldrb	r3, [r3, #1]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8001d52:	68b8      	ldr	r0, [r7, #8]
 8001d54:	f7ff fe27 	bl	80019a6 <_mav_parse_error>
			status->msg_received = 0;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2201      	movs	r2, #1
 8001d62:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8001d64:	e20a      	b.n	800217c <mavlink_frame_char_buffer+0x504>
			rxmsg->len = c;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	4619      	mov	r1, r3
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f7ff ff16 	bl	8001ba8 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	7b1b      	ldrb	r3, [r3, #12]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d009      	beq.n	8001d9c <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2205      	movs	r2, #5
 8001d98:	70da      	strb	r2, [r3, #3]
		break;
 8001d9a:	e1ef      	b.n	800217c <mavlink_frame_char_buffer+0x504>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2203      	movs	r2, #3
 8001da0:	70da      	strb	r2, [r3, #3]
		break;
 8001da2:	e1eb      	b.n	800217c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	791b      	ldrb	r3, [r3, #4]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d909      	bls.n	8001dc6 <mavlink_frame_char_buffer+0x14e>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001db2:	68b8      	ldr	r0, [r7, #8]
 8001db4:	f7ff fdf7 	bl	80019a6 <_mav_parse_error>
			status->msg_received = 0;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	70da      	strb	r2, [r3, #3]
			break;
 8001dc4:	e1da      	b.n	800217c <mavlink_frame_char_buffer+0x504>
		}
		mavlink_update_checksum(rxmsg, c);
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff feec 	bl	8001ba8 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	70da      	strb	r2, [r3, #3]
		break;
 8001dd6:	e1d1      	b.n	800217c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	79fa      	ldrb	r2, [r7, #7]
 8001ddc:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	4619      	mov	r1, r3
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f7ff fee0 	bl	8001ba8 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2205      	movs	r2, #5
 8001dec:	70da      	strb	r2, [r3, #3]
		break;
 8001dee:	e1c5      	b.n	800217c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	79fa      	ldrb	r2, [r7, #7]
 8001df4:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7ff fed4 	bl	8001ba8 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2206      	movs	r2, #6
 8001e04:	70da      	strb	r2, [r3, #3]
		break;
 8001e06:	e1b9      	b.n	800217c <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	79fa      	ldrb	r2, [r7, #7]
 8001e0c:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4619      	mov	r1, r3
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff fec8 	bl	8001ba8 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	70da      	strb	r2, [r3, #3]
		break;
 8001e1e:	e1ad      	b.n	800217c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	79fa      	ldrb	r2, [r7, #7]
 8001e24:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7ff febc 	bl	8001ba8 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2208      	movs	r2, #8
 8001e34:	70da      	strb	r2, [r3, #3]
		break;
 8001e36:	e1a1      	b.n	800217c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	b2d9      	uxtb	r1, r3
 8001e42:	2000      	movs	r0, #0
 8001e44:	4301      	orrs	r1, r0
 8001e46:	7251      	strb	r1, [r2, #9]
 8001e48:	0a19      	lsrs	r1, r3, #8
 8001e4a:	b2c9      	uxtb	r1, r1
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	7291      	strb	r1, [r2, #10]
 8001e52:	0c1b      	lsrs	r3, r3, #16
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2100      	movs	r1, #0
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f7ff fea1 	bl	8001ba8 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	7b1b      	ldrb	r3, [r3, #12]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <mavlink_frame_char_buffer+0x212>
			if(rxmsg->len > 0) {
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	78db      	ldrb	r3, [r3, #3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <mavlink_frame_char_buffer+0x20a>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	220b      	movs	r2, #11
 8001e7e:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8001e80:	e17c      	b.n	800217c <mavlink_frame_char_buffer+0x504>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	220c      	movs	r2, #12
 8001e86:	70da      	strb	r2, [r3, #3]
		break;
 8001e88:	e178      	b.n	800217c <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2209      	movs	r2, #9
 8001e8e:	70da      	strb	r2, [r3, #3]
		break;
 8001e90:	e174      	b.n	800217c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= ((uint32_t)c)<<8;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	7a5a      	ldrb	r2, [r3, #9]
 8001e96:	7a99      	ldrb	r1, [r3, #10]
 8001e98:	0209      	lsls	r1, r1, #8
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	7adb      	ldrb	r3, [r3, #11]
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	b2d1      	uxtb	r1, r2
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	4301      	orrs	r1, r0
 8001eb6:	7259      	strb	r1, [r3, #9]
 8001eb8:	0a11      	lsrs	r1, r2, #8
 8001eba:	b2c9      	uxtb	r1, r1
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	4301      	orrs	r1, r0
 8001ec0:	7299      	strb	r1, [r3, #10]
 8001ec2:	0c12      	lsrs	r2, r2, #16
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f7ff fe69 	bl	8001ba8 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	220a      	movs	r2, #10
 8001eda:	70da      	strb	r2, [r3, #3]
		break;
 8001edc:	e14e      	b.n	800217c <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	7a5a      	ldrb	r2, [r3, #9]
 8001ee2:	7a99      	ldrb	r1, [r3, #10]
 8001ee4:	0209      	lsls	r1, r1, #8
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	7adb      	ldrb	r3, [r3, #11]
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	4313      	orrs	r3, r2
 8001eee:	461a      	mov	r2, r3
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	041b      	lsls	r3, r3, #16
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	b2d1      	uxtb	r1, r2
 8001efe:	2000      	movs	r0, #0
 8001f00:	4301      	orrs	r1, r0
 8001f02:	7259      	strb	r1, [r3, #9]
 8001f04:	0a11      	lsrs	r1, r2, #8
 8001f06:	b2c9      	uxtb	r1, r1
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4301      	orrs	r1, r0
 8001f0c:	7299      	strb	r1, [r3, #10]
 8001f0e:	0c12      	lsrs	r2, r2, #16
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	2100      	movs	r1, #0
 8001f14:	430a      	orrs	r2, r1
 8001f16:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff fe43 	bl	8001ba8 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	78db      	ldrb	r3, [r3, #3]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <mavlink_frame_char_buffer+0x2ba>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	220b      	movs	r2, #11
 8001f2e:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8001f30:	e124      	b.n	800217c <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	220c      	movs	r2, #12
 8001f36:	70da      	strb	r2, [r3, #3]
		break;
 8001f38:	e120      	b.n	800217c <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f103 020c 	add.w	r2, r3, #12
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	791b      	ldrb	r3, [r3, #4]
 8001f44:	1c59      	adds	r1, r3, #1
 8001f46:	b2c8      	uxtb	r0, r1
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	7108      	strb	r0, [r1, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	79fa      	ldrb	r2, [r7, #7]
 8001f50:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	4619      	mov	r1, r3
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7ff fe26 	bl	8001ba8 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	791a      	ldrb	r2, [r3, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	78db      	ldrb	r3, [r3, #3]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	f040 8102 	bne.w	800216e <mavlink_frame_char_buffer+0x4f6>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	70da      	strb	r2, [r3, #3]
		}
		break;
 8001f70:	e0fd      	b.n	800216e <mavlink_frame_char_buffer+0x4f6>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	7a5a      	ldrb	r2, [r3, #9]
 8001f76:	7a99      	ldrb	r1, [r3, #10]
 8001f78:	0209      	lsls	r1, r1, #8
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	7adb      	ldrb	r3, [r3, #11]
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	4313      	orrs	r3, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fe28 	bl	8001bd8 <mavlink_get_msg_entry>
 8001f88:	61b8      	str	r0, [r7, #24]
		if (e == NULL) {
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <mavlink_frame_char_buffer+0x328>
			// Message not found in CRC_EXTRA table.
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	220e      	movs	r2, #14
 8001f94:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	79fa      	ldrb	r2, [r7, #7]
 8001f9a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			// zero-fill the packet to cope with short incoming packets
				if (e && status->packet_idx < e->max_msg_len) {
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
			}
		}
		break;
 8001f9e:	e0e8      	b.n	8002172 <mavlink_frame_char_buffer+0x4fa>
			uint8_t crc_extra = e->crc_extra;
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	791b      	ldrb	r3, [r3, #4]
 8001fa4:	75fb      	strb	r3, [r7, #23]
			mavlink_update_checksum(rxmsg, crc_extra);
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f7ff fdfc 	bl	8001ba8 <mavlink_update_checksum>
			if (c != (rxmsg->checksum & 0xFF)) {
 8001fb0:	79fa      	ldrb	r2, [r7, #7]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d003      	beq.n	8001fc6 <mavlink_frame_char_buffer+0x34e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	220e      	movs	r2, #14
 8001fc2:	70da      	strb	r2, [r3, #3]
 8001fc4:	e002      	b.n	8001fcc <mavlink_frame_char_buffer+0x354>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	220d      	movs	r2, #13
 8001fca:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	79fa      	ldrb	r2, [r7, #7]
 8001fd0:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				if (e && status->packet_idx < e->max_msg_len) {
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80cb 	beq.w	8002172 <mavlink_frame_char_buffer+0x4fa>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	791a      	ldrb	r2, [r3, #4]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	799b      	ldrb	r3, [r3, #6]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f080 80c4 	bcs.w	8002172 <mavlink_frame_char_buffer+0x4fa>
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	330c      	adds	r3, #12
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	7912      	ldrb	r2, [r2, #4]
 8001ff2:	1898      	adds	r0, r3, r2
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	799b      	ldrb	r3, [r3, #6]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	791b      	ldrb	r3, [r3, #4]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	461a      	mov	r2, r3
 8002002:	2100      	movs	r1, #0
 8002004:	f004 ff6f 	bl	8006ee6 <memset>
		break;
 8002008:	e0b3      	b.n	8002172 <mavlink_frame_char_buffer+0x4fa>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	78db      	ldrb	r3, [r3, #3]
 800200e:	2b0e      	cmp	r3, #14
 8002010:	d008      	beq.n	8002024 <mavlink_frame_char_buffer+0x3ac>
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	b29b      	uxth	r3, r3
 8002020:	429a      	cmp	r2, r3
 8002022:	d003      	beq.n	800202c <mavlink_frame_char_buffer+0x3b4>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2202      	movs	r2, #2
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	e002      	b.n	8002032 <mavlink_frame_char_buffer+0x3ba>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	79fa      	ldrb	r2, [r7, #7]
 8002036:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	791b      	ldrb	r3, [r3, #4]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00e      	beq.n	8002064 <mavlink_frame_char_buffer+0x3ec>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	220f      	movs	r2, #15
 800204a:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	220d      	movs	r2, #13
 8002050:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b02      	cmp	r3, #2
 8002058:	f000 808d 	beq.w	8002176 <mavlink_frame_char_buffer+0x4fe>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8002062:	e088      	b.n	8002176 <mavlink_frame_char_buffer+0x4fe>
			if (status->signing &&
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01f      	beq.n	80020ac <mavlink_frame_char_buffer+0x434>
			   	(status->signing->accept_unsigned_callback == NULL ||
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (status->signing &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d013      	beq.n	800209e <mavlink_frame_char_buffer+0x426>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	7a59      	ldrb	r1, [r3, #9]
 8002080:	7a98      	ldrb	r0, [r3, #10]
 8002082:	0200      	lsls	r0, r0, #8
 8002084:	4301      	orrs	r1, r0
 8002086:	7adb      	ldrb	r3, [r3, #11]
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	430b      	orrs	r3, r1
 800208c:	4619      	mov	r1, r3
 800208e:	68b8      	ldr	r0, [r7, #8]
 8002090:	4790      	blx	r2
 8002092:	4603      	mov	r3, r0
 8002094:	f083 0301 	eor.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <mavlink_frame_char_buffer+0x434>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d002      	beq.n	80020ac <mavlink_frame_char_buffer+0x434>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2203      	movs	r2, #3
 80020aa:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2201      	movs	r2, #1
 80020b0:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d05e      	beq.n	8002176 <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 80020b8:	f240 1223 	movw	r2, #291	@ 0x123
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	6838      	ldr	r0, [r7, #0]
 80020c0:	f004 ff3e 	bl	8006f40 <memcpy>
		break;
 80020c4:	e057      	b.n	8002176 <mavlink_frame_char_buffer+0x4fe>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	7b5b      	ldrb	r3, [r3, #13]
 80020ca:	f1c3 030d 	rsb	r3, r3, #13
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4413      	add	r3, r2
 80020d2:	79fa      	ldrb	r2, [r7, #7]
 80020d4:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
		status->signature_wait--;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	7b5b      	ldrb	r3, [r3, #13]
 80020dc:	3b01      	subs	r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	7b5b      	ldrb	r3, [r3, #13]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d146      	bne.n	800217a <mavlink_frame_char_buffer+0x502>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	6918      	ldr	r0, [r3, #16]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7ff f98c 	bl	8001414 <mavlink_signature_check>
 80020fc:	4603      	mov	r3, r0
 80020fe:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8002100:	7ffb      	ldrb	r3, [r7, #31]
 8002102:	f083 0301 	eor.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d017      	beq.n	800213c <mavlink_frame_char_buffer+0x4c4>
			   	(status->signing->accept_unsigned_callback &&
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (!sig_ok &&
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <mavlink_frame_char_buffer+0x4c4>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	7a59      	ldrb	r1, [r3, #9]
 8002120:	7a98      	ldrb	r0, [r3, #10]
 8002122:	0200      	lsls	r0, r0, #8
 8002124:	4301      	orrs	r1, r0
 8002126:	7adb      	ldrb	r3, [r3, #11]
 8002128:	041b      	lsls	r3, r3, #16
 800212a:	430b      	orrs	r3, r1
 800212c:	4619      	mov	r1, r3
 800212e:	68b8      	ldr	r0, [r7, #8]
 8002130:	4790      	blx	r2
 8002132:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <mavlink_frame_char_buffer+0x4c4>
				// accepted via application level override
				sig_ok = true;
 8002138:	2301      	movs	r3, #1
 800213a:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 800213c:	7ffb      	ldrb	r3, [r7, #31]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <mavlink_frame_char_buffer+0x4d2>
				status->msg_received = MAVLINK_FRAMING_OK;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e002      	b.n	8002150 <mavlink_frame_char_buffer+0x4d8>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2203      	movs	r2, #3
 800214e:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2201      	movs	r2, #1
 8002154:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00e      	beq.n	800217a <mavlink_frame_char_buffer+0x502>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 800215c:	f240 1223 	movw	r2, #291	@ 0x123
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	6838      	ldr	r0, [r7, #0]
 8002164:	f004 feec 	bl	8006f40 <memcpy>
			}
		}
		break;
 8002168:	e007      	b.n	800217a <mavlink_frame_char_buffer+0x502>
		break;
 800216a:	bf00      	nop
 800216c:	e006      	b.n	800217c <mavlink_frame_char_buffer+0x504>
		break;
 800216e:	bf00      	nop
 8002170:	e004      	b.n	800217c <mavlink_frame_char_buffer+0x504>
		break;
 8002172:	bf00      	nop
 8002174:	e002      	b.n	800217c <mavlink_frame_char_buffer+0x504>
		break;
 8002176:	bf00      	nop
 8002178:	e000      	b.n	800217c <mavlink_frame_char_buffer+0x504>
		break;
 800217a:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d110      	bne.n	80021a6 <mavlink_frame_char_buffer+0x52e>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	799a      	ldrb	r2, [r3, #6]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	891b      	ldrh	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <mavlink_frame_char_buffer+0x522>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2200      	movs	r2, #0
 8002198:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	891b      	ldrh	r3, [r3, #8]
 800219e:	3301      	adds	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <mavlink_frame_char_buffer+0x53c>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	78da      	ldrb	r2, [r3, #3]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 80021b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01a      	beq.n	80021f0 <mavlink_frame_char_buffer+0x578>
           r_mavlink_status->parse_state = status->parse_state;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	78da      	ldrb	r2, [r3, #3]
 80021be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c0:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	791a      	ldrb	r2, [r3, #4]
 80021c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c8:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	795b      	ldrb	r3, [r3, #5]
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d4:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	891a      	ldrh	r2, [r3, #8]
 80021da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021dc:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	789b      	ldrb	r3, [r3, #2]
 80021e2:	461a      	mov	r2, r3
 80021e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e6:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	7b1a      	ldrb	r2, [r3, #12]
 80021ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ee:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2200      	movs	r2, #0
 80021f4:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d110      	bne.n	8002220 <mavlink_frame_char_buffer+0x5a8>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00d      	beq.n	8002220 <mavlink_frame_char_buffer+0x5a8>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800220a:	b21a      	sxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	b21b      	sxth	r3, r3
 8002216:	4313      	orrs	r3, r2
 8002218:	b21b      	sxth	r3, r3
 800221a:	b29a      	uxth	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b087      	sub	sp, #28
 8002230:	af02      	add	r7, sp, #8
 8002232:	60ba      	str	r2, [r7, #8]
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	4603      	mov	r3, r0
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	460b      	mov	r3, r1
 800223c:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f851 	bl	80012e8 <mavlink_get_channel_buffer>
 8002246:	4604      	mov	r4, r0
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff f838 	bl	80012c0 <mavlink_get_channel_status>
 8002250:	4601      	mov	r1, r0
 8002252:	7bba      	ldrb	r2, [r7, #14]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4620      	mov	r0, r4
 800225c:	f7ff fd0c 	bl	8001c78 <mavlink_frame_char_buffer>
 8002260:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bd90      	pop	{r4, r7, pc}

0800226a <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b088      	sub	sp, #32
 800226e:	af00      	add	r7, sp, #0
 8002270:	60ba      	str	r2, [r7, #8]
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	4603      	mov	r3, r0
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	460b      	mov	r3, r1
 800227a:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 800227c:	7bb9      	ldrb	r1, [r7, #14]
 800227e:	7bf8      	ldrb	r0, [r7, #15]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f7ff ffd2 	bl	800222c <mavlink_frame_char>
 8002288:	4603      	mov	r3, r0
 800228a:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 800228c:	7ffb      	ldrb	r3, [r7, #31]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d002      	beq.n	8002298 <mavlink_parse_char+0x2e>
 8002292:	7ffb      	ldrb	r3, [r7, #31]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d120      	bne.n	80022da <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f824 	bl	80012e8 <mavlink_get_channel_buffer>
 80022a0:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff f80b 	bl	80012c0 <mavlink_get_channel_status>
 80022aa:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 80022ac:	6978      	ldr	r0, [r7, #20]
 80022ae:	f7ff fb7a 	bl	80019a6 <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2201      	movs	r2, #1
 80022bc:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 80022be:	7bbb      	ldrb	r3, [r7, #14]
 80022c0:	2bfd      	cmp	r3, #253	@ 0xfd
 80022c2:	d108      	bne.n	80022d6 <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2202      	movs	r2, #2
 80022c8:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2200      	movs	r2, #0
 80022ce:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 80022d0:	69b8      	ldr	r0, [r7, #24]
 80022d2:	f7ff fc57 	bl	8001b84 <mavlink_start_checksum>
	    }
	    return 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <mavlink_parse_char+0x72>
    }
    return msg_received;
 80022da:	7ffb      	ldrb	r3, [r7, #31]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <mavlink_msg_sys_status_decode>:
 *
 * @param msg The message to decode
 * @param sys_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_sys_status_decode(const mavlink_message_t* msg, mavlink_sys_status_t* sys_status)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
    sys_status->battery_remaining = mavlink_msg_sys_status_get_battery_remaining(msg);
    sys_status->onboard_control_sensors_present_extended = mavlink_msg_sys_status_get_onboard_control_sensors_present_extended(msg);
    sys_status->onboard_control_sensors_enabled_extended = mavlink_msg_sys_status_get_onboard_control_sensors_enabled_extended(msg);
    sys_status->onboard_control_sensors_health_extended = mavlink_msg_sys_status_get_onboard_control_sensors_health_extended(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_SYS_STATUS_LEN? msg->len : MAVLINK_MSG_ID_SYS_STATUS_LEN;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	78db      	ldrb	r3, [r3, #3]
 80022f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80022f4:	bf28      	it	cs
 80022f6:	232b      	movcs	r3, #43	@ 0x2b
 80022f8:	73fb      	strb	r3, [r7, #15]
        memset(sys_status, 0, MAVLINK_MSG_ID_SYS_STATUS_LEN);
 80022fa:	222b      	movs	r2, #43	@ 0x2b
 80022fc:	2100      	movs	r1, #0
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	f004 fdf1 	bl	8006ee6 <memset>
    memcpy(sys_status, _MAV_PAYLOAD(msg), len);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	330c      	adds	r3, #12
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	4619      	mov	r1, r3
 800230c:	6838      	ldr	r0, [r7, #0]
 800230e:	f004 fe17 	bl	8006f40 <memcpy>
#endif
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <mavlink_msg_attitude_decode>:
 *
 * @param msg The message to decode
 * @param attitude C-struct to decode the message contents into
 */
static inline void mavlink_msg_attitude_decode(const mavlink_message_t* msg, mavlink_attitude_t* attitude)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
    attitude->yaw = mavlink_msg_attitude_get_yaw(msg);
    attitude->rollspeed = mavlink_msg_attitude_get_rollspeed(msg);
    attitude->pitchspeed = mavlink_msg_attitude_get_pitchspeed(msg);
    attitude->yawspeed = mavlink_msg_attitude_get_yawspeed(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_ATTITUDE_LEN? msg->len : MAVLINK_MSG_ID_ATTITUDE_LEN;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	78db      	ldrb	r3, [r3, #3]
 8002328:	2b1c      	cmp	r3, #28
 800232a:	bf28      	it	cs
 800232c:	231c      	movcs	r3, #28
 800232e:	73fb      	strb	r3, [r7, #15]
        memset(attitude, 0, MAVLINK_MSG_ID_ATTITUDE_LEN);
 8002330:	221c      	movs	r2, #28
 8002332:	2100      	movs	r1, #0
 8002334:	6838      	ldr	r0, [r7, #0]
 8002336:	f004 fdd6 	bl	8006ee6 <memset>
    memcpy(attitude, _MAV_PAYLOAD(msg), len);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	330c      	adds	r3, #12
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	4619      	mov	r1, r3
 8002342:	6838      	ldr	r0, [r7, #0]
 8002344:	f004 fdfc 	bl	8006f40 <memcpy>
#endif
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
    global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
    global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
    global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
    global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN? msg->len : MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	78db      	ldrb	r3, [r3, #3]
 800235e:	2b1c      	cmp	r3, #28
 8002360:	bf28      	it	cs
 8002362:	231c      	movcs	r3, #28
 8002364:	73fb      	strb	r3, [r7, #15]
        memset(global_position_int, 0, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
 8002366:	221c      	movs	r2, #28
 8002368:	2100      	movs	r1, #0
 800236a:	6838      	ldr	r0, [r7, #0]
 800236c:	f004 fdbb 	bl	8006ee6 <memset>
    memcpy(global_position_int, _MAV_PAYLOAD(msg), len);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	330c      	adds	r3, #12
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	4619      	mov	r1, r3
 8002378:	6838      	ldr	r0, [r7, #0]
 800237a:	f004 fde1 	bl	8006f40 <memcpy>
#endif
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <mavlink_msg_vfr_hud_decode>:
 *
 * @param msg The message to decode
 * @param vfr_hud C-struct to decode the message contents into
 */
static inline void mavlink_msg_vfr_hud_decode(const mavlink_message_t* msg, mavlink_vfr_hud_t* vfr_hud)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
    vfr_hud->alt = mavlink_msg_vfr_hud_get_alt(msg);
    vfr_hud->climb = mavlink_msg_vfr_hud_get_climb(msg);
    vfr_hud->heading = mavlink_msg_vfr_hud_get_heading(msg);
    vfr_hud->throttle = mavlink_msg_vfr_hud_get_throttle(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_VFR_HUD_LEN? msg->len : MAVLINK_MSG_ID_VFR_HUD_LEN;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	78db      	ldrb	r3, [r3, #3]
 8002394:	2b14      	cmp	r3, #20
 8002396:	bf28      	it	cs
 8002398:	2314      	movcs	r3, #20
 800239a:	73fb      	strb	r3, [r7, #15]
        memset(vfr_hud, 0, MAVLINK_MSG_ID_VFR_HUD_LEN);
 800239c:	2214      	movs	r2, #20
 800239e:	2100      	movs	r1, #0
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	f004 fda0 	bl	8006ee6 <memset>
    memcpy(vfr_hud, _MAV_PAYLOAD(msg), len);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	330c      	adds	r3, #12
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	4619      	mov	r1, r3
 80023ae:	6838      	ldr	r0, [r7, #0]
 80023b0:	f004 fdc6 	bl	8006f40 <memcpy>
#endif
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <mavlink_msg_command_ack_decode>:
 *
 * @param msg The message to decode
 * @param command_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_ack_decode(const mavlink_message_t* msg, mavlink_command_ack_t* command_ack)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
    command_ack->progress = mavlink_msg_command_ack_get_progress(msg);
    command_ack->result_param2 = mavlink_msg_command_ack_get_result_param2(msg);
    command_ack->target_system = mavlink_msg_command_ack_get_target_system(msg);
    command_ack->target_component = mavlink_msg_command_ack_get_target_component(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COMMAND_ACK_LEN? msg->len : MAVLINK_MSG_ID_COMMAND_ACK_LEN;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	78db      	ldrb	r3, [r3, #3]
 80023ca:	2b0a      	cmp	r3, #10
 80023cc:	bf28      	it	cs
 80023ce:	230a      	movcs	r3, #10
 80023d0:	73fb      	strb	r3, [r7, #15]
        memset(command_ack, 0, MAVLINK_MSG_ID_COMMAND_ACK_LEN);
 80023d2:	220a      	movs	r2, #10
 80023d4:	2100      	movs	r1, #0
 80023d6:	6838      	ldr	r0, [r7, #0]
 80023d8:	f004 fd85 	bl	8006ee6 <memset>
    memcpy(command_ack, _MAV_PAYLOAD(msg), len);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	330c      	adds	r3, #12
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	4619      	mov	r1, r3
 80023e4:	6838      	ldr	r0, [r7, #0]
 80023e6:	f004 fdab 	bl	8006f40 <memcpy>
#endif
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <mavlink_msg_power_status_decode>:
 *
 * @param msg The message to decode
 * @param power_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_power_status_decode(const mavlink_message_t* msg, mavlink_power_status_t* power_status)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    power_status->Vcc = mavlink_msg_power_status_get_Vcc(msg);
    power_status->Vservo = mavlink_msg_power_status_get_Vservo(msg);
    power_status->flags = mavlink_msg_power_status_get_flags(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_POWER_STATUS_LEN? msg->len : MAVLINK_MSG_ID_POWER_STATUS_LEN;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	78db      	ldrb	r3, [r3, #3]
 8002400:	2b06      	cmp	r3, #6
 8002402:	bf28      	it	cs
 8002404:	2306      	movcs	r3, #6
 8002406:	73fb      	strb	r3, [r7, #15]
        memset(power_status, 0, MAVLINK_MSG_ID_POWER_STATUS_LEN);
 8002408:	2206      	movs	r2, #6
 800240a:	2100      	movs	r1, #0
 800240c:	6838      	ldr	r0, [r7, #0]
 800240e:	f004 fd6a 	bl	8006ee6 <memset>
    memcpy(power_status, _MAV_PAYLOAD(msg), len);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	330c      	adds	r3, #12
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	4619      	mov	r1, r3
 800241a:	6838      	ldr	r0, [r7, #0]
 800241c:	f004 fd90 	bl	8006f40 <memcpy>
#endif
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <mavlink_msg_battery_status_decode>:
 *
 * @param msg The message to decode
 * @param battery_status C-struct to decode the message contents into
 */
static inline void mavlink_msg_battery_status_decode(const mavlink_message_t* msg, mavlink_battery_status_t* battery_status)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
    battery_status->charge_state = mavlink_msg_battery_status_get_charge_state(msg);
    mavlink_msg_battery_status_get_voltages_ext(msg, battery_status->voltages_ext);
    battery_status->mode = mavlink_msg_battery_status_get_mode(msg);
    battery_status->fault_bitmask = mavlink_msg_battery_status_get_fault_bitmask(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_BATTERY_STATUS_LEN? msg->len : MAVLINK_MSG_ID_BATTERY_STATUS_LEN;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	78db      	ldrb	r3, [r3, #3]
 8002436:	2b36      	cmp	r3, #54	@ 0x36
 8002438:	bf28      	it	cs
 800243a:	2336      	movcs	r3, #54	@ 0x36
 800243c:	73fb      	strb	r3, [r7, #15]
        memset(battery_status, 0, MAVLINK_MSG_ID_BATTERY_STATUS_LEN);
 800243e:	2236      	movs	r2, #54	@ 0x36
 8002440:	2100      	movs	r1, #0
 8002442:	6838      	ldr	r0, [r7, #0]
 8002444:	f004 fd4f 	bl	8006ee6 <memset>
    memcpy(battery_status, _MAV_PAYLOAD(msg), len);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	330c      	adds	r3, #12
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	4619      	mov	r1, r3
 8002450:	6838      	ldr	r0, [r7, #0]
 8002452:	f004 fd75 	bl	8006f40 <memcpy>
#endif
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <mavlink_msg_autopilot_version_decode>:
 *
 * @param msg The message to decode
 * @param autopilot_version C-struct to decode the message contents into
 */
static inline void mavlink_msg_autopilot_version_decode(const mavlink_message_t* msg, mavlink_autopilot_version_t* autopilot_version)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
    mavlink_msg_autopilot_version_get_flight_custom_version(msg, autopilot_version->flight_custom_version);
    mavlink_msg_autopilot_version_get_middleware_custom_version(msg, autopilot_version->middleware_custom_version);
    mavlink_msg_autopilot_version_get_os_custom_version(msg, autopilot_version->os_custom_version);
    mavlink_msg_autopilot_version_get_uid2(msg, autopilot_version->uid2);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_AUTOPILOT_VERSION_LEN? msg->len : MAVLINK_MSG_ID_AUTOPILOT_VERSION_LEN;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	78db      	ldrb	r3, [r3, #3]
 800246c:	2b4e      	cmp	r3, #78	@ 0x4e
 800246e:	bf28      	it	cs
 8002470:	234e      	movcs	r3, #78	@ 0x4e
 8002472:	73fb      	strb	r3, [r7, #15]
        memset(autopilot_version, 0, MAVLINK_MSG_ID_AUTOPILOT_VERSION_LEN);
 8002474:	224e      	movs	r2, #78	@ 0x4e
 8002476:	2100      	movs	r1, #0
 8002478:	6838      	ldr	r0, [r7, #0]
 800247a:	f004 fd34 	bl	8006ee6 <memset>
    memcpy(autopilot_version, _MAV_PAYLOAD(msg), len);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	330c      	adds	r3, #12
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	4619      	mov	r1, r3
 8002486:	6838      	ldr	r0, [r7, #0]
 8002488:	f004 fd5a 	bl	8006f40 <memcpy>
#endif
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <mavlink_msg_collision_decode>:
 *
 * @param msg The message to decode
 * @param collision C-struct to decode the message contents into
 */
static inline void mavlink_msg_collision_decode(const mavlink_message_t* msg, mavlink_collision_t* collision)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
    collision->horizontal_minimum_delta = mavlink_msg_collision_get_horizontal_minimum_delta(msg);
    collision->src = mavlink_msg_collision_get_src(msg);
    collision->action = mavlink_msg_collision_get_action(msg);
    collision->threat_level = mavlink_msg_collision_get_threat_level(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_COLLISION_LEN? msg->len : MAVLINK_MSG_ID_COLLISION_LEN;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	78db      	ldrb	r3, [r3, #3]
 80024a2:	2b13      	cmp	r3, #19
 80024a4:	bf28      	it	cs
 80024a6:	2313      	movcs	r3, #19
 80024a8:	73fb      	strb	r3, [r7, #15]
        memset(collision, 0, MAVLINK_MSG_ID_COLLISION_LEN);
 80024aa:	2213      	movs	r2, #19
 80024ac:	2100      	movs	r1, #0
 80024ae:	6838      	ldr	r0, [r7, #0]
 80024b0:	f004 fd19 	bl	8006ee6 <memset>
    memcpy(collision, _MAV_PAYLOAD(msg), len);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	330c      	adds	r3, #12
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	4619      	mov	r1, r3
 80024bc:	6838      	ldr	r0, [r7, #0]
 80024be:	f004 fd3f 	bl	8006f40 <memcpy>
#endif
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <mavlink_msg_obstacle_distance_decode>:
 *
 * @param msg The message to decode
 * @param obstacle_distance C-struct to decode the message contents into
 */
static inline void mavlink_msg_obstacle_distance_decode(const mavlink_message_t* msg, mavlink_obstacle_distance_t* obstacle_distance)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
    obstacle_distance->increment = mavlink_msg_obstacle_distance_get_increment(msg);
    obstacle_distance->increment_f = mavlink_msg_obstacle_distance_get_increment_f(msg);
    obstacle_distance->angle_offset = mavlink_msg_obstacle_distance_get_angle_offset(msg);
    obstacle_distance->frame = mavlink_msg_obstacle_distance_get_frame(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_OBSTACLE_DISTANCE_LEN? msg->len : MAVLINK_MSG_ID_OBSTACLE_DISTANCE_LEN;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	78db      	ldrb	r3, [r3, #3]
 80024d8:	2ba7      	cmp	r3, #167	@ 0xa7
 80024da:	bf28      	it	cs
 80024dc:	23a7      	movcs	r3, #167	@ 0xa7
 80024de:	73fb      	strb	r3, [r7, #15]
        memset(obstacle_distance, 0, MAVLINK_MSG_ID_OBSTACLE_DISTANCE_LEN);
 80024e0:	22a7      	movs	r2, #167	@ 0xa7
 80024e2:	2100      	movs	r1, #0
 80024e4:	6838      	ldr	r0, [r7, #0]
 80024e6:	f004 fcfe 	bl	8006ee6 <memset>
    memcpy(obstacle_distance, _MAV_PAYLOAD(msg), len);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	330c      	adds	r3, #12
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	4619      	mov	r1, r3
 80024f2:	6838      	ldr	r0, [r7, #0]
 80024f4:	f004 fd24 	bl	8006f40 <memcpy>
#endif
}
 80024f8:	bf00      	nop
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	603a      	str	r2, [r7, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
 800250e:	460b      	mov	r3, r1
 8002510:	71bb      	strb	r3, [r7, #6]
 8002512:	4613      	mov	r3, r2
 8002514:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8002516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002518:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 800251a:	797b      	ldrb	r3, [r7, #5]
 800251c:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 800251e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002522:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8002524:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002528:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 800252a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800252e:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 8002530:	2303      	movs	r3, #3
 8002532:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	f107 010c 	add.w	r1, r7, #12
 800253c:	2209      	movs	r2, #9
 800253e:	4618      	mov	r0, r3
 8002540:	f004 fcfe 	bl	8006f40 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2200      	movs	r2, #0
 8002548:	725a      	strb	r2, [r3, #9]
 800254a:	2200      	movs	r2, #0
 800254c:	729a      	strb	r2, [r3, #10]
 800254e:	2200      	movs	r2, #0
 8002550:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8002552:	79ba      	ldrb	r2, [r7, #6]
 8002554:	79f9      	ldrb	r1, [r7, #7]
 8002556:	2332      	movs	r3, #50	@ 0x32
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	2309      	movs	r3, #9
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2309      	movs	r3, #9
 8002560:	6838      	ldr	r0, [r7, #0]
 8002562:	f7ff fa02 	bl	800196a <mavlink_finalize_message>
 8002566:	4603      	mov	r3, r0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <mavlink_msg_heartbeat_get_type>:
 * @brief Get field type from heartbeat message
 *
 * @return  Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.
 */
static inline uint8_t mavlink_msg_heartbeat_get_type(const mavlink_message_t* msg)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
    return _MAV_RETURN_uint8_t(msg,  4);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	330c      	adds	r3, #12
 800257c:	3304      	adds	r3, #4
 800257e:	781b      	ldrb	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	78db      	ldrb	r3, [r3, #3]
 800259a:	2b09      	cmp	r3, #9
 800259c:	bf28      	it	cs
 800259e:	2309      	movcs	r3, #9
 80025a0:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80025a2:	2209      	movs	r2, #9
 80025a4:	2100      	movs	r1, #0
 80025a6:	6838      	ldr	r0, [r7, #0]
 80025a8:	f004 fc9d 	bl	8006ee6 <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	330c      	adds	r3, #12
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	4619      	mov	r1, r3
 80025b4:	6838      	ldr	r0, [r7, #0]
 80025b6:	f004 fcc3 	bl	8006f40 <memcpy>
#endif
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <decode_mavlink_mssg>:
 *
 * @param byte:		Current byte of the message to decode
 *	@retval			1 if success, 0 if message was not found
 **/
uint8_t decode_mavlink_mssg(const unsigned char* byte, mavlink_message_t* msg)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
	if (mavlink_parse_char(chan, *byte, msg, &status))
 80025ce:	4b41      	ldr	r3, [pc, #260]	@ (80026d4 <decode_mavlink_mssg+0x110>)
 80025d0:	7818      	ldrb	r0, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7819      	ldrb	r1, [r3, #0]
 80025d6:	4b40      	ldr	r3, [pc, #256]	@ (80026d8 <decode_mavlink_mssg+0x114>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	f7ff fe46 	bl	800226a <mavlink_parse_char>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d071      	beq.n	80026c8 <decode_mavlink_mssg+0x104>
	{
		// ... DECODE THE MESSAGE PAYLOAD HERE ...
		 switch(msg->msgid)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	7a5a      	ldrb	r2, [r3, #9]
 80025e8:	7a99      	ldrb	r1, [r3, #10]
 80025ea:	0209      	lsls	r1, r1, #8
 80025ec:	430a      	orrs	r2, r1
 80025ee:	7adb      	ldrb	r3, [r3, #11]
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 80025f8:	d05b      	beq.n	80026b2 <decode_mavlink_mssg+0xee>
 80025fa:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 80025fe:	dc61      	bgt.n	80026c4 <decode_mavlink_mssg+0x100>
 8002600:	2bf7      	cmp	r3, #247	@ 0xf7
 8002602:	d04c      	beq.n	800269e <decode_mavlink_mssg+0xda>
 8002604:	2bf7      	cmp	r3, #247	@ 0xf7
 8002606:	dc5d      	bgt.n	80026c4 <decode_mavlink_mssg+0x100>
 8002608:	2b94      	cmp	r3, #148	@ 0x94
 800260a:	d04d      	beq.n	80026a8 <decode_mavlink_mssg+0xe4>
 800260c:	2b94      	cmp	r3, #148	@ 0x94
 800260e:	dc59      	bgt.n	80026c4 <decode_mavlink_mssg+0x100>
 8002610:	2b93      	cmp	r3, #147	@ 0x93
 8002612:	d03f      	beq.n	8002694 <decode_mavlink_mssg+0xd0>
 8002614:	2b93      	cmp	r3, #147	@ 0x93
 8002616:	dc55      	bgt.n	80026c4 <decode_mavlink_mssg+0x100>
 8002618:	2b7d      	cmp	r3, #125	@ 0x7d
 800261a:	d020      	beq.n	800265e <decode_mavlink_mssg+0x9a>
 800261c:	2b7d      	cmp	r3, #125	@ 0x7d
 800261e:	dc51      	bgt.n	80026c4 <decode_mavlink_mssg+0x100>
 8002620:	2b4d      	cmp	r3, #77	@ 0x4d
 8002622:	d032      	beq.n	800268a <decode_mavlink_mssg+0xc6>
 8002624:	2b4d      	cmp	r3, #77	@ 0x4d
 8002626:	dc4d      	bgt.n	80026c4 <decode_mavlink_mssg+0x100>
 8002628:	2b4a      	cmp	r3, #74	@ 0x4a
 800262a:	d047      	beq.n	80026bc <decode_mavlink_mssg+0xf8>
 800262c:	2b4a      	cmp	r3, #74	@ 0x4a
 800262e:	dc49      	bgt.n	80026c4 <decode_mavlink_mssg+0x100>
 8002630:	2b21      	cmp	r3, #33	@ 0x21
 8002632:	d00a      	beq.n	800264a <decode_mavlink_mssg+0x86>
 8002634:	2b21      	cmp	r3, #33	@ 0x21
 8002636:	dc45      	bgt.n	80026c4 <decode_mavlink_mssg+0x100>
 8002638:	2b1e      	cmp	r3, #30
 800263a:	d021      	beq.n	8002680 <decode_mavlink_mssg+0xbc>
 800263c:	2b1e      	cmp	r3, #30
 800263e:	dc41      	bgt.n	80026c4 <decode_mavlink_mssg+0x100>
 8002640:	2b00      	cmp	r3, #0
 8002642:	d011      	beq.n	8002668 <decode_mavlink_mssg+0xa4>
 8002644:	2b01      	cmp	r3, #1
 8002646:	d005      	beq.n	8002654 <decode_mavlink_mssg+0x90>
 8002648:	e03c      	b.n	80026c4 <decode_mavlink_mssg+0x100>
		 {
			case MAVLINK_MSG_ID_GLOBAL_POSITION_INT:
				mavlink_msg_global_position_int_decode(msg, &global_position);
 800264a:	4924      	ldr	r1, [pc, #144]	@ (80026dc <decode_mavlink_mssg+0x118>)
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	f7ff fe7f 	bl	8002350 <mavlink_msg_global_position_int_decode>
				break;
 8002652:	e039      	b.n	80026c8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_SYS_STATUS:
				mavlink_msg_sys_status_decode(msg, &sys_status);
 8002654:	4922      	ldr	r1, [pc, #136]	@ (80026e0 <decode_mavlink_mssg+0x11c>)
 8002656:	6838      	ldr	r0, [r7, #0]
 8002658:	f7ff fe44 	bl	80022e4 <mavlink_msg_sys_status_decode>
				break;
 800265c:	e034      	b.n	80026c8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_POWER_STATUS:
				mavlink_msg_power_status_decode(msg, &pwr_status);
 800265e:	4921      	ldr	r1, [pc, #132]	@ (80026e4 <decode_mavlink_mssg+0x120>)
 8002660:	6838      	ldr	r0, [r7, #0]
 8002662:	f7ff fec6 	bl	80023f2 <mavlink_msg_power_status_decode>
				break;
 8002666:	e02f      	b.n	80026c8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_HEARTBEAT:
				mavlink_msg_heartbeat_decode(msg, &hb);
 8002668:	491f      	ldr	r1, [pc, #124]	@ (80026e8 <decode_mavlink_mssg+0x124>)
 800266a:	6838      	ldr	r0, [r7, #0]
 800266c:	f7ff ff8e 	bl	800258c <mavlink_msg_heartbeat_decode>
			 	device_type=mavlink_msg_heartbeat_get_type(msg);
 8002670:	6838      	ldr	r0, [r7, #0]
 8002672:	f7ff ff7d 	bl	8002570 <mavlink_msg_heartbeat_get_type>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	4b1c      	ldr	r3, [pc, #112]	@ (80026ec <decode_mavlink_mssg+0x128>)
 800267c:	601a      	str	r2, [r3, #0]
			 	break;
 800267e:	e023      	b.n	80026c8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_ATTITUDE:
				mavlink_msg_attitude_decode(msg, &att);
 8002680:	491b      	ldr	r1, [pc, #108]	@ (80026f0 <decode_mavlink_mssg+0x12c>)
 8002682:	6838      	ldr	r0, [r7, #0]
 8002684:	f7ff fe49 	bl	800231a <mavlink_msg_attitude_decode>
				break;
 8002688:	e01e      	b.n	80026c8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_COMMAND_ACK:
				mavlink_msg_command_ack_decode(msg, &cmd_ack);
 800268a:	491a      	ldr	r1, [pc, #104]	@ (80026f4 <decode_mavlink_mssg+0x130>)
 800268c:	6838      	ldr	r0, [r7, #0]
 800268e:	f7ff fe95 	bl	80023bc <mavlink_msg_command_ack_decode>
				break;
 8002692:	e019      	b.n	80026c8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_BATTERY_STATUS:
				mavlink_msg_battery_status_decode(msg, &bat_stat);
 8002694:	4918      	ldr	r1, [pc, #96]	@ (80026f8 <decode_mavlink_mssg+0x134>)
 8002696:	6838      	ldr	r0, [r7, #0]
 8002698:	f7ff fec6 	bl	8002428 <mavlink_msg_battery_status_decode>
				break;
 800269c:	e014      	b.n	80026c8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_COLLISION:
				mavlink_msg_collision_decode(msg, &col);
 800269e:	4917      	ldr	r1, [pc, #92]	@ (80026fc <decode_mavlink_mssg+0x138>)
 80026a0:	6838      	ldr	r0, [r7, #0]
 80026a2:	f7ff fef7 	bl	8002494 <mavlink_msg_collision_decode>
				break;
 80026a6:	e00f      	b.n	80026c8 <decode_mavlink_mssg+0x104>

			case MAVLINK_MSG_ID_AUTOPILOT_VERSION:
				mavlink_msg_autopilot_version_decode(msg, &autopilot_v);
 80026a8:	4915      	ldr	r1, [pc, #84]	@ (8002700 <decode_mavlink_mssg+0x13c>)
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f7ff fed7 	bl	800245e <mavlink_msg_autopilot_version_decode>
				break;
 80026b0:	e00a      	b.n	80026c8 <decode_mavlink_mssg+0x104>
			case MAVLINK_MSG_ID_OBSTACLE_DISTANCE:
				mavlink_msg_obstacle_distance_decode(msg, &obstacle_distance);
 80026b2:	4914      	ldr	r1, [pc, #80]	@ (8002704 <decode_mavlink_mssg+0x140>)
 80026b4:	6838      	ldr	r0, [r7, #0]
 80026b6:	f7ff ff08 	bl	80024ca <mavlink_msg_obstacle_distance_decode>
				break;
 80026ba:	e005      	b.n	80026c8 <decode_mavlink_mssg+0x104>
			case MAVLINK_MSG_ID_VFR_HUD:
				mavlink_msg_vfr_hud_decode(msg, &vfr_hud);
 80026bc:	4912      	ldr	r1, [pc, #72]	@ (8002708 <decode_mavlink_mssg+0x144>)
 80026be:	6838      	ldr	r0, [r7, #0]
 80026c0:	f7ff fe61 	bl	8002386 <mavlink_msg_vfr_hud_decode>
			default:return 0;break;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e000      	b.n	80026ca <decode_mavlink_mssg+0x106>

			}
	}
	return 1;
 80026c8:	2301      	movs	r3, #1

}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000082f 	.word	0x2000082f
 80026d8:	20000830 	.word	0x20000830
 80026dc:	20000848 	.word	0x20000848
 80026e0:	20000864 	.word	0x20000864
 80026e4:	20000890 	.word	0x20000890
 80026e8:	20000898 	.word	0x20000898
 80026ec:	20000708 	.word	0x20000708
 80026f0:	200008a4 	.word	0x200008a4
 80026f4:	200008c0 	.word	0x200008c0
 80026f8:	200008cc 	.word	0x200008cc
 80026fc:	20000904 	.word	0x20000904
 8002700:	20000918 	.word	0x20000918
 8002704:	20000968 	.word	0x20000968
 8002708:	20000a10 	.word	0x20000a10

0800270c <mavlink_heartbeat>:
 *
 *	@param	buffer:		Empty array buffer
 * 	@retval 			Length of the HEARTBEAT message in bytes
 */
uint16_t mavlink_heartbeat(uint8_t* buffer)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af04      	add	r7, sp, #16
 8002712:	6078      	str	r0, [r7, #4]
	//prepare message
	mavlink_msg_heartbeat_pack(SYS_ID, MAV_COMP_ID_MISSIONPLANNER,
 8002714:	2300      	movs	r3, #0
 8002716:	9303      	str	r3, [sp, #12]
 8002718:	2300      	movs	r3, #0
 800271a:	9302      	str	r3, [sp, #8]
 800271c:	2300      	movs	r3, #0
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	2308      	movs	r3, #8
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2306      	movs	r3, #6
 8002726:	4a07      	ldr	r2, [pc, #28]	@ (8002744 <mavlink_heartbeat+0x38>)
 8002728:	21be      	movs	r1, #190	@ 0xbe
 800272a:	20ff      	movs	r0, #255	@ 0xff
 800272c:	f7ff fee8 	bl	8002500 <mavlink_msg_heartbeat_pack>
			&hb_mssg, MAV_TYPE_GCS,	MAV_AUTOPILOT_INVALID, 0, 0, MAV_STATE_UNINIT);

	//translate into bytes
	return mavlink_msg_to_send_buffer(buffer, &hb_mssg);
 8002730:	4904      	ldr	r1, [pc, #16]	@ (8002744 <mavlink_heartbeat+0x38>)
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff f947 	bl	80019c6 <mavlink_msg_to_send_buffer>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2000070c 	.word	0x2000070c

08002748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <HAL_MspInit+0x44>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a0e      	ldr	r2, [pc, #56]	@ (800278c <HAL_MspInit+0x44>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <HAL_MspInit+0x44>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002766:	4b09      	ldr	r3, [pc, #36]	@ (800278c <HAL_MspInit+0x44>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	4a08      	ldr	r2, [pc, #32]	@ (800278c <HAL_MspInit+0x44>)
 800276c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002770:	6453      	str	r3, [r2, #68]	@ 0x44
 8002772:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_MspInit+0x44>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08e      	sub	sp, #56	@ 0x38
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a4e      	ldr	r2, [pc, #312]	@ (80028e8 <HAL_ETH_MspInit+0x158>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	f040 8096 	bne.w	80028e0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80027b4:	4b4d      	ldr	r3, [pc, #308]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	4a4c      	ldr	r2, [pc, #304]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 80027ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027be:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c0:	4b4a      	ldr	r3, [pc, #296]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	4b47      	ldr	r3, [pc, #284]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d0:	4a46      	ldr	r2, [pc, #280]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 80027d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d8:	4b44      	ldr	r3, [pc, #272]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4b41      	ldr	r3, [pc, #260]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	4a40      	ldr	r2, [pc, #256]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 80027ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80027ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f0:	4b3e      	ldr	r3, [pc, #248]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fc:	4b3b      	ldr	r3, [pc, #236]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002800:	4a3a      	ldr	r2, [pc, #232]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	6313      	str	r3, [r2, #48]	@ 0x30
 8002808:	4b38      	ldr	r3, [pc, #224]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002814:	4b35      	ldr	r3, [pc, #212]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	4a34      	ldr	r2, [pc, #208]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002820:	4b32      	ldr	r3, [pc, #200]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282c:	4b2f      	ldr	r3, [pc, #188]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	4a2e      	ldr	r2, [pc, #184]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	6313      	str	r3, [r2, #48]	@ 0x30
 8002838:	4b2c      	ldr	r3, [pc, #176]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002844:	4b29      	ldr	r3, [pc, #164]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	4a28      	ldr	r2, [pc, #160]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 800284a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800284e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002850:	4b26      	ldr	r3, [pc, #152]	@ (80028ec <HAL_ETH_MspInit+0x15c>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800285c:	2332      	movs	r3, #50	@ 0x32
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002868:	2303      	movs	r3, #3
 800286a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800286c:	230b      	movs	r3, #11
 800286e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002874:	4619      	mov	r1, r3
 8002876:	481e      	ldr	r0, [pc, #120]	@ (80028f0 <HAL_ETH_MspInit+0x160>)
 8002878:	f000 ffc6 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800287c:	2386      	movs	r3, #134	@ 0x86
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800288c:	230b      	movs	r3, #11
 800288e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002894:	4619      	mov	r1, r3
 8002896:	4817      	ldr	r0, [pc, #92]	@ (80028f4 <HAL_ETH_MspInit+0x164>)
 8002898:	f000 ffb6 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800289c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028aa:	2303      	movs	r3, #3
 80028ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028ae:	230b      	movs	r3, #11
 80028b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80028b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b6:	4619      	mov	r1, r3
 80028b8:	480f      	ldr	r0, [pc, #60]	@ (80028f8 <HAL_ETH_MspInit+0x168>)
 80028ba:	f000 ffa5 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80028be:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028d0:	230b      	movs	r3, #11
 80028d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d8:	4619      	mov	r1, r3
 80028da:	4808      	ldr	r0, [pc, #32]	@ (80028fc <HAL_ETH_MspInit+0x16c>)
 80028dc:	f000 ff94 	bl	8003808 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80028e0:	bf00      	nop
 80028e2:	3738      	adds	r7, #56	@ 0x38
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40028000 	.word	0x40028000
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	40020400 	.word	0x40020400
 80028fc:	40021800 	.word	0x40021800

08002900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <HAL_TIM_Base_MspInit+0x44>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d113      	bne.n	800293a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002912:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <HAL_TIM_Base_MspInit+0x48>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	4a0c      	ldr	r2, [pc, #48]	@ (8002948 <HAL_TIM_Base_MspInit+0x48>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6413      	str	r3, [r2, #64]	@ 0x40
 800291e:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <HAL_TIM_Base_MspInit+0x48>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	201e      	movs	r0, #30
 8002930:	f000 fb53 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002934:	201e      	movs	r0, #30
 8002936:	f000 fb6c 	bl	8003012 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40000800 	.word	0x40000800
 8002948:	40023800 	.word	0x40023800

0800294c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b0b0      	sub	sp, #192	@ 0xc0
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002964:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002968:	2284      	movs	r2, #132	@ 0x84
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f004 faba 	bl	8006ee6 <memset>
  if(huart->Instance==USART1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a94      	ldr	r2, [pc, #592]	@ (8002bc8 <HAL_UART_MspInit+0x27c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d143      	bne.n	8002a04 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800297c:	2340      	movs	r3, #64	@ 0x40
 800297e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002980:	2300      	movs	r3, #0
 8002982:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002988:	4618      	mov	r0, r3
 800298a:	f001 fdf7 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002994:	f7fe f8e0 	bl	8000b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002998:	4b8c      	ldr	r3, [pc, #560]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 800299a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299c:	4a8b      	ldr	r2, [pc, #556]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 800299e:	f043 0310 	orr.w	r3, r3, #16
 80029a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a4:	4b89      	ldr	r3, [pc, #548]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 80029a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b0:	4b86      	ldr	r3, [pc, #536]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	4a85      	ldr	r2, [pc, #532]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80029bc:	4b83      	ldr	r3, [pc, #524]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	623b      	str	r3, [r7, #32]
 80029c6:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029c8:	2340      	movs	r3, #64	@ 0x40
 80029ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ce:	2312      	movs	r3, #18
 80029d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029e0:	2307      	movs	r3, #7
 80029e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80029ea:	4619      	mov	r1, r3
 80029ec:	4878      	ldr	r0, [pc, #480]	@ (8002bd0 <HAL_UART_MspInit+0x284>)
 80029ee:	f000 ff0b 	bl	8003808 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	2025      	movs	r0, #37	@ 0x25
 80029f8:	f000 faef 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029fc:	2025      	movs	r0, #37	@ 0x25
 80029fe:	f000 fb08 	bl	8003012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a02:	e0dd      	b.n	8002bc0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a72      	ldr	r2, [pc, #456]	@ (8002bd4 <HAL_UART_MspInit+0x288>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d143      	bne.n	8002a96 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a12:	2300      	movs	r3, #0
 8002a14:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 fdae 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_UART_MspInit+0xde>
      Error_Handler();
 8002a26:	f7fe f897 	bl	8000b58 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a2a:	4b68      	ldr	r3, [pc, #416]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	4a67      	ldr	r2, [pc, #412]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a36:	4b65      	ldr	r3, [pc, #404]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a42:	4b62      	ldr	r3, [pc, #392]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	4a61      	ldr	r2, [pc, #388]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002a48:	f043 0308 	orr.w	r3, r3, #8
 8002a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a60:	2312      	movs	r3, #18
 8002a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a72:	2307      	movs	r3, #7
 8002a74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a78:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4856      	ldr	r0, [pc, #344]	@ (8002bd8 <HAL_UART_MspInit+0x28c>)
 8002a80:	f000 fec2 	bl	8003808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2100      	movs	r1, #0
 8002a88:	2026      	movs	r0, #38	@ 0x26
 8002a8a:	f000 faa6 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a8e:	2026      	movs	r0, #38	@ 0x26
 8002a90:	f000 fabf 	bl	8003012 <HAL_NVIC_EnableIRQ>
}
 8002a94:	e094      	b.n	8002bc0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a50      	ldr	r2, [pc, #320]	@ (8002bdc <HAL_UART_MspInit+0x290>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d145      	bne.n	8002b2c <HAL_UART_MspInit+0x1e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002aa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aaa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f001 fd64 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002aba:	f7fe f84d 	bl	8000b58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002abe:	4b43      	ldr	r3, [pc, #268]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	4a42      	ldr	r2, [pc, #264]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aca:	4b40      	ldr	r3, [pc, #256]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	4a3c      	ldr	r2, [pc, #240]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002aee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002af2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b08:	2307      	movs	r3, #7
 8002b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b0e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b12:	4619      	mov	r1, r3
 8002b14:	4830      	ldr	r0, [pc, #192]	@ (8002bd8 <HAL_UART_MspInit+0x28c>)
 8002b16:	f000 fe77 	bl	8003808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2027      	movs	r0, #39	@ 0x27
 8002b20:	f000 fa5b 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b24:	2027      	movs	r0, #39	@ 0x27
 8002b26:	f000 fa74 	bl	8003012 <HAL_NVIC_EnableIRQ>
}
 8002b2a:	e049      	b.n	8002bc0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART6)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a2b      	ldr	r2, [pc, #172]	@ (8002be0 <HAL_UART_MspInit+0x294>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d144      	bne.n	8002bc0 <HAL_UART_MspInit+0x274>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002b36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fd18 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8002b52:	f7fe f801 	bl	8000b58 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b56:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002b5c:	f043 0320 	orr.w	r3, r3, #32
 8002b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b62:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6e:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	4a16      	ldr	r2, [pc, #88]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7a:	4b14      	ldr	r3, [pc, #80]	@ (8002bcc <HAL_UART_MspInit+0x280>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b86:	23c0      	movs	r3, #192	@ 0xc0
 8002b88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480e      	ldr	r0, [pc, #56]	@ (8002be4 <HAL_UART_MspInit+0x298>)
 8002bac:	f000 fe2c 	bl	8003808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2047      	movs	r0, #71	@ 0x47
 8002bb6:	f000 fa10 	bl	8002fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002bba:	2047      	movs	r0, #71	@ 0x47
 8002bbc:	f000 fa29 	bl	8003012 <HAL_NVIC_EnableIRQ>
}
 8002bc0:	bf00      	nop
 8002bc2:	37c0      	adds	r7, #192	@ 0xc0
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40011000 	.word	0x40011000
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40004400 	.word	0x40004400
 8002bd8:	40020c00 	.word	0x40020c00
 8002bdc:	40004800 	.word	0x40004800
 8002be0:	40011400 	.word	0x40011400
 8002be4:	40020800 	.word	0x40020800

08002be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <NMI_Handler+0x4>

08002bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <HardFault_Handler+0x4>

08002bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <MemManage_Handler+0x4>

08002c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <BusFault_Handler+0x4>

08002c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <UsageFault_Handler+0x4>

08002c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c3e:	f000 f8ad 	bl	8002d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c4c:	4802      	ldr	r0, [pc, #8]	@ (8002c58 <TIM4_IRQHandler+0x10>)
 8002c4e:	f002 f8dc 	bl	8004e0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000254 	.word	0x20000254

08002c5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c60:	4802      	ldr	r0, [pc, #8]	@ (8002c6c <USART1_IRQHandler+0x10>)
 8002c62:	f002 fdbf 	bl	80057e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200002a0 	.word	0x200002a0

08002c70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c74:	4802      	ldr	r0, [pc, #8]	@ (8002c80 <USART2_IRQHandler+0x10>)
 8002c76:	f002 fdb5 	bl	80057e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000328 	.word	0x20000328

08002c84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c88:	4802      	ldr	r0, [pc, #8]	@ (8002c94 <USART3_IRQHandler+0x10>)
 8002c8a:	f002 fdab 	bl	80057e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200003b0 	.word	0x200003b0

08002c98 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c9c:	4802      	ldr	r0, [pc, #8]	@ (8002ca8 <USART6_IRQHandler+0x10>)
 8002c9e:	f002 fda1 	bl	80057e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000438 	.word	0x20000438

08002cac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <SystemInit+0x20>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb6:	4a05      	ldr	r2, [pc, #20]	@ (8002ccc <SystemInit+0x20>)
 8002cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <Reset_Handler>:
 8002cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d08 <LoopFillZerobss+0xe>
 8002cd4:	f7ff ffea 	bl	8002cac <SystemInit>
 8002cd8:	480c      	ldr	r0, [pc, #48]	@ (8002d0c <LoopFillZerobss+0x12>)
 8002cda:	490d      	ldr	r1, [pc, #52]	@ (8002d10 <LoopFillZerobss+0x16>)
 8002cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d14 <LoopFillZerobss+0x1a>)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e002      	b.n	8002ce8 <LoopCopyDataInit>

08002ce2 <CopyDataInit>:
 8002ce2:	58d4      	ldr	r4, [r2, r3]
 8002ce4:	50c4      	str	r4, [r0, r3]
 8002ce6:	3304      	adds	r3, #4

08002ce8 <LoopCopyDataInit>:
 8002ce8:	18c4      	adds	r4, r0, r3
 8002cea:	428c      	cmp	r4, r1
 8002cec:	d3f9      	bcc.n	8002ce2 <CopyDataInit>
 8002cee:	4a0a      	ldr	r2, [pc, #40]	@ (8002d18 <LoopFillZerobss+0x1e>)
 8002cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8002d1c <LoopFillZerobss+0x22>)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e001      	b.n	8002cfa <LoopFillZerobss>

08002cf6 <FillZerobss>:
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	3204      	adds	r2, #4

08002cfa <LoopFillZerobss>:
 8002cfa:	42a2      	cmp	r2, r4
 8002cfc:	d3fb      	bcc.n	8002cf6 <FillZerobss>
 8002cfe:	f004 f8fb 	bl	8006ef8 <__libc_init_array>
 8002d02:	f7fd fc5f 	bl	80005c4 <main>
 8002d06:	4770      	bx	lr
 8002d08:	20050000 	.word	0x20050000
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	2000000c 	.word	0x2000000c
 8002d14:	0800820c 	.word	0x0800820c
 8002d18:	20000150 	.word	0x20000150
 8002d1c:	20000f14 	.word	0x20000f14

08002d20 <ADC_IRQHandler>:
 8002d20:	e7fe      	b.n	8002d20 <ADC_IRQHandler>

08002d22 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d26:	2003      	movs	r0, #3
 8002d28:	f000 f94c 	bl	8002fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f000 f805 	bl	8002d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d32:	f7ff fd09 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d44:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <HAL_InitTick+0x54>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <HAL_InitTick+0x58>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f967 	bl	800302e <HAL_SYSTICK_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00e      	b.n	8002d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d80a      	bhi.n	8002d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f000 f92f 	bl	8002fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d7c:	4a06      	ldr	r2, [pc, #24]	@ (8002d98 <HAL_InitTick+0x5c>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000008 	.word	0x20000008
 8002d98:	20000004 	.word	0x20000004

08002d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <HAL_IncTick+0x20>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <HAL_IncTick+0x24>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a04      	ldr	r2, [pc, #16]	@ (8002dc0 <HAL_IncTick+0x24>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000008 	.word	0x20000008
 8002dc0:	20000f10 	.word	0x20000f10

08002dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	@ (8002dd8 <HAL_GetTick+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000f10 	.word	0x20000f10

08002ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff ffee 	bl	8002dc4 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d005      	beq.n	8002e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e20 <HAL_Delay+0x44>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e02:	bf00      	nop
 8002e04:	f7ff ffde 	bl	8002dc4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d8f7      	bhi.n	8002e04 <HAL_Delay+0x28>
  {
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000008 	.word	0x20000008

08002e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <__NVIC_SetPriorityGrouping+0x40>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e40:	4013      	ands	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <__NVIC_SetPriorityGrouping+0x44>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e52:	4a04      	ldr	r2, [pc, #16]	@ (8002e64 <__NVIC_SetPriorityGrouping+0x40>)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	60d3      	str	r3, [r2, #12]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	e000ed00 	.word	0xe000ed00
 8002e68:	05fa0000 	.word	0x05fa0000

08002e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e70:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <__NVIC_GetPriorityGrouping+0x18>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	f003 0307 	and.w	r3, r3, #7
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	db0b      	blt.n	8002eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	f003 021f 	and.w	r2, r3, #31
 8002ea0:	4907      	ldr	r1, [pc, #28]	@ (8002ec0 <__NVIC_EnableIRQ+0x38>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000e100 	.word	0xe000e100

08002ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	6039      	str	r1, [r7, #0]
 8002ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	db0a      	blt.n	8002eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	490c      	ldr	r1, [pc, #48]	@ (8002f10 <__NVIC_SetPriority+0x4c>)
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	0112      	lsls	r2, r2, #4
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eec:	e00a      	b.n	8002f04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4908      	ldr	r1, [pc, #32]	@ (8002f14 <__NVIC_SetPriority+0x50>)
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	3b04      	subs	r3, #4
 8002efc:	0112      	lsls	r2, r2, #4
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	440b      	add	r3, r1
 8002f02:	761a      	strb	r2, [r3, #24]
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000e100 	.word	0xe000e100
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	@ 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f1c3 0307 	rsb	r3, r3, #7
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	bf28      	it	cs
 8002f36:	2304      	movcs	r3, #4
 8002f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d902      	bls.n	8002f48 <NVIC_EncodePriority+0x30>
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3b03      	subs	r3, #3
 8002f46:	e000      	b.n	8002f4a <NVIC_EncodePriority+0x32>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f60:	f04f 31ff 	mov.w	r1, #4294967295
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	43d9      	mvns	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f70:	4313      	orrs	r3, r2
         );
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3724      	adds	r7, #36	@ 0x24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f90:	d301      	bcc.n	8002f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00f      	b.n	8002fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f96:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc0 <SysTick_Config+0x40>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f9e:	210f      	movs	r1, #15
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	f7ff ff8e 	bl	8002ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa8:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <SysTick_Config+0x40>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fae:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <SysTick_Config+0x40>)
 8002fb0:	2207      	movs	r2, #7
 8002fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	e000e010 	.word	0xe000e010

08002fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff ff29 	bl	8002e24 <__NVIC_SetPriorityGrouping>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
 8002fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fec:	f7ff ff3e 	bl	8002e6c <__NVIC_GetPriorityGrouping>
 8002ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	6978      	ldr	r0, [r7, #20]
 8002ff8:	f7ff ff8e 	bl	8002f18 <NVIC_EncodePriority>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff5d 	bl	8002ec4 <__NVIC_SetPriority>
}
 800300a:	bf00      	nop
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff ff31 	bl	8002e88 <__NVIC_EnableIRQ>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ffa2 	bl	8002f80 <SysTick_Config>
 800303c:	4603      	mov	r3, r0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003052:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003054:	f7ff feb6 	bl	8002dc4 <HAL_GetTick>
 8003058:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d008      	beq.n	8003078 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2280      	movs	r2, #128	@ 0x80
 800306a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e052      	b.n	800311e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0216 	bic.w	r2, r2, #22
 8003086:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003096:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d103      	bne.n	80030a8 <HAL_DMA_Abort+0x62>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0208 	bic.w	r2, r2, #8
 80030b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c8:	e013      	b.n	80030f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ca:	f7ff fe7b 	bl	8002dc4 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	d90c      	bls.n	80030f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2203      	movs	r2, #3
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e015      	b.n	800311e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e4      	bne.n	80030ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003104:	223f      	movs	r2, #63	@ 0x3f
 8003106:	409a      	lsls	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d004      	beq.n	8003144 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2280      	movs	r2, #128	@ 0x80
 800313e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e00c      	b.n	800315e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2205      	movs	r2, #5
 8003148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e086      	b.n	800328c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003184:	2b00      	cmp	r3, #0
 8003186:	d106      	bne.n	8003196 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2223      	movs	r2, #35	@ 0x23
 800318c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fafd 	bl	8002790 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003196:	4b3f      	ldr	r3, [pc, #252]	@ (8003294 <HAL_ETH_Init+0x128>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	4a3e      	ldr	r2, [pc, #248]	@ (8003294 <HAL_ETH_Init+0x128>)
 800319c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003294 <HAL_ETH_Init+0x128>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80031ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003298 <HAL_ETH_Init+0x12c>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a39      	ldr	r2, [pc, #228]	@ (8003298 <HAL_ETH_Init+0x12c>)
 80031b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80031b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80031ba:	4b37      	ldr	r3, [pc, #220]	@ (8003298 <HAL_ETH_Init+0x12c>)
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	4935      	ldr	r1, [pc, #212]	@ (8003298 <HAL_ETH_Init+0x12c>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80031c8:	4b33      	ldr	r3, [pc, #204]	@ (8003298 <HAL_ETH_Init+0x12c>)
 80031ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e4:	f7ff fdee 	bl	8002dc4 <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80031ea:	e011      	b.n	8003210 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80031ec:	f7ff fdea 	bl	8002dc4 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80031fa:	d909      	bls.n	8003210 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2204      	movs	r2, #4
 8003200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	22e0      	movs	r2, #224	@ 0xe0
 8003208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e03d      	b.n	800328c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e4      	bne.n	80031ec <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f97a 	bl	800351c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fa25 	bl	8003678 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fa7b 	bl	800372a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	461a      	mov	r2, r3
 800323a:	2100      	movs	r1, #0
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f9e3 	bl	8003608 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003250:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b0f      	ldr	r3, [pc, #60]	@ (800329c <HAL_ETH_Init+0x130>)
 8003260:	430b      	orrs	r3, r1
 8003262:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003276:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2210      	movs	r2, #16
 8003286:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	40013800 	.word	0x40013800
 800329c:	00020060 	.word	0x00020060

080032a0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4b53      	ldr	r3, [pc, #332]	@ (8003404 <ETH_SetMACConfig+0x164>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	7b9b      	ldrb	r3, [r3, #14]
 80032be:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	7c12      	ldrb	r2, [r2, #16]
 80032c4:	2a00      	cmp	r2, #0
 80032c6:	d102      	bne.n	80032ce <ETH_SetMACConfig+0x2e>
 80032c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80032cc:	e000      	b.n	80032d0 <ETH_SetMACConfig+0x30>
 80032ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80032d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	7c52      	ldrb	r2, [r2, #17]
 80032d6:	2a00      	cmp	r2, #0
 80032d8:	d102      	bne.n	80032e0 <ETH_SetMACConfig+0x40>
 80032da:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80032de:	e000      	b.n	80032e2 <ETH_SetMACConfig+0x42>
 80032e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80032e2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80032e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	7fdb      	ldrb	r3, [r3, #31]
 80032ee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80032f0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80032f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	7f92      	ldrb	r2, [r2, #30]
 80032fc:	2a00      	cmp	r2, #0
 80032fe:	d102      	bne.n	8003306 <ETH_SetMACConfig+0x66>
 8003300:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003304:	e000      	b.n	8003308 <ETH_SetMACConfig+0x68>
 8003306:	2200      	movs	r2, #0
                        macconf->Speed |
 8003308:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	7f1b      	ldrb	r3, [r3, #28]
 800330e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003310:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003316:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	791b      	ldrb	r3, [r3, #4]
 800331c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800331e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003326:	2a00      	cmp	r2, #0
 8003328:	d102      	bne.n	8003330 <ETH_SetMACConfig+0x90>
 800332a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800332e:	e000      	b.n	8003332 <ETH_SetMACConfig+0x92>
 8003330:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003332:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	7bdb      	ldrb	r3, [r3, #15]
 8003338:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800333a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003340:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003348:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800334a:	4313      	orrs	r3, r2
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003362:	2001      	movs	r0, #1
 8003364:	f7ff fd3a 	bl	8002ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800337e:	4013      	ands	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003386:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800338e:	2a00      	cmp	r2, #0
 8003390:	d101      	bne.n	8003396 <ETH_SetMACConfig+0xf6>
 8003392:	2280      	movs	r2, #128	@ 0x80
 8003394:	e000      	b.n	8003398 <ETH_SetMACConfig+0xf8>
 8003396:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003398:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800339e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80033a6:	2a01      	cmp	r2, #1
 80033a8:	d101      	bne.n	80033ae <ETH_SetMACConfig+0x10e>
 80033aa:	2208      	movs	r2, #8
 80033ac:	e000      	b.n	80033b0 <ETH_SetMACConfig+0x110>
 80033ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80033b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80033b8:	2a01      	cmp	r2, #1
 80033ba:	d101      	bne.n	80033c0 <ETH_SetMACConfig+0x120>
 80033bc:	2204      	movs	r2, #4
 80033be:	e000      	b.n	80033c2 <ETH_SetMACConfig+0x122>
 80033c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80033c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80033ca:	2a01      	cmp	r2, #1
 80033cc:	d101      	bne.n	80033d2 <ETH_SetMACConfig+0x132>
 80033ce:	2202      	movs	r2, #2
 80033d0:	e000      	b.n	80033d4 <ETH_SetMACConfig+0x134>
 80033d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80033d4:	4313      	orrs	r3, r2
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033ec:	2001      	movs	r0, #1
 80033ee:	f7ff fcf5 	bl	8002ddc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	619a      	str	r2, [r3, #24]
}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	fd20810f 	.word	0xfd20810f

08003408 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4b3d      	ldr	r3, [pc, #244]	@ (8003518 <ETH_SetDMAConfig+0x110>)
 8003422:	4013      	ands	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	7b1b      	ldrb	r3, [r3, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <ETH_SetDMAConfig+0x2c>
 800342e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003432:	e000      	b.n	8003436 <ETH_SetDMAConfig+0x2e>
 8003434:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	7b5b      	ldrb	r3, [r3, #13]
 800343a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800343c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	7f52      	ldrb	r2, [r2, #29]
 8003442:	2a00      	cmp	r2, #0
 8003444:	d102      	bne.n	800344c <ETH_SetDMAConfig+0x44>
 8003446:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800344a:	e000      	b.n	800344e <ETH_SetDMAConfig+0x46>
 800344c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800344e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	7b9b      	ldrb	r3, [r3, #14]
 8003454:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003456:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800345c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	7f1b      	ldrb	r3, [r3, #28]
 8003462:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003464:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	7f9b      	ldrb	r3, [r3, #30]
 800346a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800346c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003472:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800347a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800347c:	4313      	orrs	r3, r2
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800348c:	461a      	mov	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800349e:	2001      	movs	r0, #1
 80034a0:	f7ff fc9c 	bl	8002ddc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ac:	461a      	mov	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	791b      	ldrb	r3, [r3, #4]
 80034b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80034c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80034c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80034d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80034da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80034e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034fc:	2001      	movs	r0, #1
 80034fe:	f7ff fc6d 	bl	8002ddc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6013      	str	r3, [r2, #0]
}
 8003510:	bf00      	nop
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	f8de3f23 	.word	0xf8de3f23

0800351c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b0a6      	sub	sp, #152	@ 0x98
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003530:	2300      	movs	r3, #0
 8003532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003534:	2300      	movs	r3, #0
 8003536:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800354c:	2301      	movs	r3, #1
 800354e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003558:	2300      	movs	r3, #0
 800355a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800355e:	2300      	movs	r3, #0
 8003560:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003562:	2300      	movs	r3, #0
 8003564:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003568:	2300      	movs	r3, #0
 800356a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003572:	2300      	movs	r3, #0
 8003574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003584:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003588:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800358a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800358e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003590:	2300      	movs	r3, #0
 8003592:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003596:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800359a:	4619      	mov	r1, r3
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff fe7f 	bl	80032a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80035a2:	2301      	movs	r3, #1
 80035a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80035a6:	2301      	movs	r3, #1
 80035a8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80035be:	2300      	movs	r3, #0
 80035c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80035c4:	2300      	movs	r3, #0
 80035c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80035ce:	2301      	movs	r3, #1
 80035d0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80035d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035d6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80035d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035dc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80035de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035e2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80035f2:	f107 0308 	add.w	r3, r7, #8
 80035f6:	4619      	mov	r1, r3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff05 	bl	8003408 <ETH_SetDMAConfig>
}
 80035fe:	bf00      	nop
 8003600:	3798      	adds	r7, #152	@ 0x98
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3305      	adds	r3, #5
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	021b      	lsls	r3, r3, #8
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	3204      	adds	r2, #4
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <ETH_MACAddressConfig+0x68>)
 800362a:	4413      	add	r3, r2
 800362c:	461a      	mov	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3303      	adds	r3, #3
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	061a      	lsls	r2, r3, #24
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3302      	adds	r3, #2
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3301      	adds	r3, #1
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	4313      	orrs	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <ETH_MACAddressConfig+0x6c>)
 800365a:	4413      	add	r3, r2
 800365c:	461a      	mov	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	6013      	str	r3, [r2, #0]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40028040 	.word	0x40028040
 8003674:	40028044 	.word	0x40028044

08003678 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e03e      	b.n	8003704 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68d9      	ldr	r1, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	440b      	add	r3, r1
 8003696:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2200      	movs	r2, #0
 80036a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2200      	movs	r2, #0
 80036ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	3206      	adds	r2, #6
 80036b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d80c      	bhi.n	80036e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68d9      	ldr	r1, [r3, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	461a      	mov	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e004      	b.n	80036f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3301      	adds	r3, #1
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b03      	cmp	r3, #3
 8003708:	d9bd      	bls.n	8003686 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800371c:	611a      	str	r2, [r3, #16]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800372a:	b480      	push	{r7}
 800372c:	b085      	sub	sp, #20
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	e048      	b.n	80037ca <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6919      	ldr	r1, [r3, #16]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	440b      	add	r3, r1
 8003748:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2200      	movs	r2, #0
 8003766:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003774:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	3212      	adds	r2, #18
 8003796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d80c      	bhi.n	80037ba <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6919      	ldr	r1, [r3, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	440b      	add	r3, r1
 80037b2:	461a      	mov	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	60da      	str	r2, [r3, #12]
 80037b8:	e004      	b.n	80037c4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3301      	adds	r3, #1
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d9b3      	bls.n	8003738 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037fa:	60da      	str	r2, [r3, #12]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	@ 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800381a:	2300      	movs	r3, #0
 800381c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	e175      	b.n	8003b14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003828:	2201      	movs	r2, #1
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4013      	ands	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	429a      	cmp	r2, r3
 8003842:	f040 8164 	bne.w	8003b0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d005      	beq.n	800385e <HAL_GPIO_Init+0x56>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d130      	bne.n	80038c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	2203      	movs	r2, #3
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003894:	2201      	movs	r2, #1
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 0201 	and.w	r2, r3, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d017      	beq.n	80038fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	2203      	movs	r2, #3
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d123      	bne.n	8003950 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	08da      	lsrs	r2, r3, #3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3208      	adds	r2, #8
 8003910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	220f      	movs	r2, #15
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	08da      	lsrs	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3208      	adds	r2, #8
 800394a:	69b9      	ldr	r1, [r7, #24]
 800394c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	2203      	movs	r2, #3
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0203 	and.w	r2, r3, #3
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80be 	beq.w	8003b0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003992:	4b66      	ldr	r3, [pc, #408]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	4a65      	ldr	r2, [pc, #404]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 8003998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800399c:	6453      	str	r3, [r2, #68]	@ 0x44
 800399e:	4b63      	ldr	r3, [pc, #396]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039aa:	4a61      	ldr	r2, [pc, #388]	@ (8003b30 <HAL_GPIO_Init+0x328>)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	3302      	adds	r3, #2
 80039b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	220f      	movs	r2, #15
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a58      	ldr	r2, [pc, #352]	@ (8003b34 <HAL_GPIO_Init+0x32c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d037      	beq.n	8003a46 <HAL_GPIO_Init+0x23e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a57      	ldr	r2, [pc, #348]	@ (8003b38 <HAL_GPIO_Init+0x330>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d031      	beq.n	8003a42 <HAL_GPIO_Init+0x23a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a56      	ldr	r2, [pc, #344]	@ (8003b3c <HAL_GPIO_Init+0x334>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d02b      	beq.n	8003a3e <HAL_GPIO_Init+0x236>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a55      	ldr	r2, [pc, #340]	@ (8003b40 <HAL_GPIO_Init+0x338>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d025      	beq.n	8003a3a <HAL_GPIO_Init+0x232>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a54      	ldr	r2, [pc, #336]	@ (8003b44 <HAL_GPIO_Init+0x33c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d01f      	beq.n	8003a36 <HAL_GPIO_Init+0x22e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a53      	ldr	r2, [pc, #332]	@ (8003b48 <HAL_GPIO_Init+0x340>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d019      	beq.n	8003a32 <HAL_GPIO_Init+0x22a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a52      	ldr	r2, [pc, #328]	@ (8003b4c <HAL_GPIO_Init+0x344>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_GPIO_Init+0x226>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a51      	ldr	r2, [pc, #324]	@ (8003b50 <HAL_GPIO_Init+0x348>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00d      	beq.n	8003a2a <HAL_GPIO_Init+0x222>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a50      	ldr	r2, [pc, #320]	@ (8003b54 <HAL_GPIO_Init+0x34c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <HAL_GPIO_Init+0x21e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4f      	ldr	r2, [pc, #316]	@ (8003b58 <HAL_GPIO_Init+0x350>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_GPIO_Init+0x21a>
 8003a1e:	2309      	movs	r3, #9
 8003a20:	e012      	b.n	8003a48 <HAL_GPIO_Init+0x240>
 8003a22:	230a      	movs	r3, #10
 8003a24:	e010      	b.n	8003a48 <HAL_GPIO_Init+0x240>
 8003a26:	2308      	movs	r3, #8
 8003a28:	e00e      	b.n	8003a48 <HAL_GPIO_Init+0x240>
 8003a2a:	2307      	movs	r3, #7
 8003a2c:	e00c      	b.n	8003a48 <HAL_GPIO_Init+0x240>
 8003a2e:	2306      	movs	r3, #6
 8003a30:	e00a      	b.n	8003a48 <HAL_GPIO_Init+0x240>
 8003a32:	2305      	movs	r3, #5
 8003a34:	e008      	b.n	8003a48 <HAL_GPIO_Init+0x240>
 8003a36:	2304      	movs	r3, #4
 8003a38:	e006      	b.n	8003a48 <HAL_GPIO_Init+0x240>
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e004      	b.n	8003a48 <HAL_GPIO_Init+0x240>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e002      	b.n	8003a48 <HAL_GPIO_Init+0x240>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_GPIO_Init+0x240>
 8003a46:	2300      	movs	r3, #0
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	f002 0203 	and.w	r2, r2, #3
 8003a4e:	0092      	lsls	r2, r2, #2
 8003a50:	4093      	lsls	r3, r2
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a58:	4935      	ldr	r1, [pc, #212]	@ (8003b30 <HAL_GPIO_Init+0x328>)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	3302      	adds	r3, #2
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a66:	4b3d      	ldr	r3, [pc, #244]	@ (8003b5c <HAL_GPIO_Init+0x354>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a8a:	4a34      	ldr	r2, [pc, #208]	@ (8003b5c <HAL_GPIO_Init+0x354>)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a90:	4b32      	ldr	r3, [pc, #200]	@ (8003b5c <HAL_GPIO_Init+0x354>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab4:	4a29      	ldr	r2, [pc, #164]	@ (8003b5c <HAL_GPIO_Init+0x354>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aba:	4b28      	ldr	r3, [pc, #160]	@ (8003b5c <HAL_GPIO_Init+0x354>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ade:	4a1f      	ldr	r2, [pc, #124]	@ (8003b5c <HAL_GPIO_Init+0x354>)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b5c <HAL_GPIO_Init+0x354>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b08:	4a14      	ldr	r2, [pc, #80]	@ (8003b5c <HAL_GPIO_Init+0x354>)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3301      	adds	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b0f      	cmp	r3, #15
 8003b18:	f67f ae86 	bls.w	8003828 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	3724      	adds	r7, #36	@ 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40013800 	.word	0x40013800
 8003b34:	40020000 	.word	0x40020000
 8003b38:	40020400 	.word	0x40020400
 8003b3c:	40020800 	.word	0x40020800
 8003b40:	40020c00 	.word	0x40020c00
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40021400 	.word	0x40021400
 8003b4c:	40021800 	.word	0x40021800
 8003b50:	40021c00 	.word	0x40021c00
 8003b54:	40022000 	.word	0x40022000
 8003b58:	40022400 	.word	0x40022400
 8003b5c:	40013c00 	.word	0x40013c00

08003b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b70:	787b      	ldrb	r3, [r7, #1]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b76:	887a      	ldrh	r2, [r7, #2]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b7c:	e003      	b.n	8003b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b7e:	887b      	ldrh	r3, [r7, #2]
 8003b80:	041a      	lsls	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	619a      	str	r2, [r3, #24]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ba4:	887a      	ldrh	r2, [r7, #2]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	041a      	lsls	r2, r3, #16
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	43d9      	mvns	r1, r3
 8003bb0:	887b      	ldrh	r3, [r7, #2]
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	619a      	str	r2, [r3, #24]
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd6:	6013      	str	r3, [r2, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40007000 	.word	0x40007000

08003be8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e291      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8087 	beq.w	8003d1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c0c:	4b96      	ldr	r3, [pc, #600]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d00c      	beq.n	8003c32 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c18:	4b93      	ldr	r3, [pc, #588]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d112      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62>
 8003c24:	4b90      	ldr	r3, [pc, #576]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c30:	d10b      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c32:	4b8d      	ldr	r3, [pc, #564]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d06c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x130>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d168      	bne.n	8003d18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e26b      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x7a>
 8003c54:	4b84      	ldr	r3, [pc, #528]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a83      	ldr	r2, [pc, #524]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e02e      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x9c>
 8003c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	4b7c      	ldr	r3, [pc, #496]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a7b      	ldr	r2, [pc, #492]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e01d      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0xc0>
 8003c8e:	4b76      	ldr	r3, [pc, #472]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a75      	ldr	r2, [pc, #468]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b73      	ldr	r3, [pc, #460]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a72      	ldr	r2, [pc, #456]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd8>
 8003ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a6e      	ldr	r2, [pc, #440]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6b      	ldr	r2, [pc, #428]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d013      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7ff f87c 	bl	8002dc4 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7ff f878 	bl	8002dc4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	@ 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e21f      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	4b61      	ldr	r3, [pc, #388]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xe8>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7ff f868 	bl	8002dc4 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7ff f864 	bl	8002dc4 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	@ 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e20b      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	4b57      	ldr	r3, [pc, #348]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x110>
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d069      	beq.n	8003dfa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d26:	4b50      	ldr	r3, [pc, #320]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d32:	4b4d      	ldr	r3, [pc, #308]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d11c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x190>
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d116      	bne.n	8003d78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	4b47      	ldr	r3, [pc, #284]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_RCC_OscConfig+0x17a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e1df      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d62:	4b41      	ldr	r3, [pc, #260]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	493d      	ldr	r1, [pc, #244]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	e040      	b.n	8003dfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d023      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d80:	4b39      	ldr	r3, [pc, #228]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a38      	ldr	r2, [pc, #224]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7ff f81a 	bl	8002dc4 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d94:	f7ff f816 	bl	8002dc4 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e1bd      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da6:	4b30      	ldr	r3, [pc, #192]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4929      	ldr	r1, [pc, #164]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]
 8003dc6:	e018      	b.n	8003dfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc8:	4b27      	ldr	r3, [pc, #156]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a26      	ldr	r2, [pc, #152]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fff6 	bl	8002dc4 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7fe fff2 	bl	8002dc4 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e199      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	4b1e      	ldr	r3, [pc, #120]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d038      	beq.n	8003e78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d019      	beq.n	8003e42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0e:	4b16      	ldr	r3, [pc, #88]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e12:	4a15      	ldr	r2, [pc, #84]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1a:	f7fe ffd3 	bl	8002dc4 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e22:	f7fe ffcf 	bl	8002dc4 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e176      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e34:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x23a>
 8003e40:	e01a      	b.n	8003e78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e46:	4a08      	ldr	r2, [pc, #32]	@ (8003e68 <HAL_RCC_OscConfig+0x280>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4e:	f7fe ffb9 	bl	8002dc4 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e56:	f7fe ffb5 	bl	8002dc4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d903      	bls.n	8003e6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e15c      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
 8003e68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e6c:	4b91      	ldr	r3, [pc, #580]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ee      	bne.n	8003e56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80a4 	beq.w	8003fce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e86:	4b8b      	ldr	r3, [pc, #556]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	4b88      	ldr	r3, [pc, #544]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	4a87      	ldr	r2, [pc, #540]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e9e:	4b85      	ldr	r3, [pc, #532]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eae:	4b82      	ldr	r3, [pc, #520]	@ (80040b8 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d118      	bne.n	8003eec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003eba:	4b7f      	ldr	r3, [pc, #508]	@ (80040b8 <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a7e      	ldr	r2, [pc, #504]	@ (80040b8 <HAL_RCC_OscConfig+0x4d0>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe ff7d 	bl	8002dc4 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fe ff79 	bl	8002dc4 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b64      	cmp	r3, #100	@ 0x64
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e120      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee0:	4b75      	ldr	r3, [pc, #468]	@ (80040b8 <HAL_RCC_OscConfig+0x4d0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCC_OscConfig+0x31a>
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef8:	4a6e      	ldr	r2, [pc, #440]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f00:	e02d      	b.n	8003f5e <HAL_RCC_OscConfig+0x376>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x33c>
 8003f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	4a69      	ldr	r2, [pc, #420]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f16:	4b67      	ldr	r3, [pc, #412]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1a:	4a66      	ldr	r2, [pc, #408]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f1c:	f023 0304 	bic.w	r3, r3, #4
 8003f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f22:	e01c      	b.n	8003f5e <HAL_RCC_OscConfig+0x376>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b05      	cmp	r3, #5
 8003f2a:	d10c      	bne.n	8003f46 <HAL_RCC_OscConfig+0x35e>
 8003f2c:	4b61      	ldr	r3, [pc, #388]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f30:	4a60      	ldr	r2, [pc, #384]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f38:	4b5e      	ldr	r3, [pc, #376]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3c:	4a5d      	ldr	r2, [pc, #372]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f44:	e00b      	b.n	8003f5e <HAL_RCC_OscConfig+0x376>
 8003f46:	4b5b      	ldr	r3, [pc, #364]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4a:	4a5a      	ldr	r2, [pc, #360]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f52:	4b58      	ldr	r3, [pc, #352]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f56:	4a57      	ldr	r2, [pc, #348]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f58:	f023 0304 	bic.w	r3, r3, #4
 8003f5c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d015      	beq.n	8003f92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f66:	f7fe ff2d 	bl	8002dc4 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7fe ff29 	bl	8002dc4 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e0ce      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f84:	4b4b      	ldr	r3, [pc, #300]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0ee      	beq.n	8003f6e <HAL_RCC_OscConfig+0x386>
 8003f90:	e014      	b.n	8003fbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f92:	f7fe ff17 	bl	8002dc4 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fe ff13 	bl	8002dc4 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e0b8      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb0:	4b40      	ldr	r3, [pc, #256]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ee      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d105      	bne.n	8003fce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc2:	4b3c      	ldr	r3, [pc, #240]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	4a3b      	ldr	r2, [pc, #236]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003fc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fcc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80a4 	beq.w	8004120 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fd8:	4b36      	ldr	r3, [pc, #216]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d06b      	beq.n	80040bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d149      	bne.n	8004080 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fec:	4b31      	ldr	r3, [pc, #196]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a30      	ldr	r2, [pc, #192]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fee4 	bl	8002dc4 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fe fee0 	bl	8002dc4 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e087      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	4b28      	ldr	r3, [pc, #160]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	019b      	lsls	r3, r3, #6
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	3b01      	subs	r3, #1
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	4313      	orrs	r3, r2
 8004044:	4a1b      	ldr	r2, [pc, #108]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004046:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800404a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800404c:	4b19      	ldr	r3, [pc, #100]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a18      	ldr	r2, [pc, #96]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7fe feb4 	bl	8002dc4 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe feb0 	bl	8002dc4 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e057      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b10      	ldr	r3, [pc, #64]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x478>
 800407e:	e04f      	b.n	8004120 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004080:	4b0c      	ldr	r3, [pc, #48]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0b      	ldr	r2, [pc, #44]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 8004086:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800408a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fe fe9a 	bl	8002dc4 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004094:	f7fe fe96 	bl	8002dc4 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e03d      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b03      	ldr	r3, [pc, #12]	@ (80040b4 <HAL_RCC_OscConfig+0x4cc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x4ac>
 80040b2:	e035      	b.n	8004120 <HAL_RCC_OscConfig+0x538>
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040bc:	4b1b      	ldr	r3, [pc, #108]	@ (800412c <HAL_RCC_OscConfig+0x544>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d028      	beq.n	800411c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d121      	bne.n	800411c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d11a      	bne.n	800411c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040ec:	4013      	ands	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d111      	bne.n	800411c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	085b      	lsrs	r3, r3, #1
 8004104:	3b01      	subs	r3, #1
 8004106:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d107      	bne.n	800411c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800

08004130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0d0      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b6a      	ldr	r3, [pc, #424]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d910      	bls.n	8004178 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b67      	ldr	r3, [pc, #412]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 020f 	bic.w	r2, r3, #15
 800415e:	4965      	ldr	r1, [pc, #404]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b63      	ldr	r3, [pc, #396]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0b8      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004190:	4b59      	ldr	r3, [pc, #356]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4a58      	ldr	r2, [pc, #352]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004196:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800419a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a8:	4b53      	ldr	r3, [pc, #332]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4a52      	ldr	r2, [pc, #328]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b4:	4b50      	ldr	r3, [pc, #320]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	494d      	ldr	r1, [pc, #308]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d040      	beq.n	8004254 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b47      	ldr	r3, [pc, #284]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d115      	bne.n	8004212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e07f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f2:	4b41      	ldr	r3, [pc, #260]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e073      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	4b3d      	ldr	r3, [pc, #244]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06b      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b39      	ldr	r3, [pc, #228]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4936      	ldr	r1, [pc, #216]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004220:	4313      	orrs	r3, r2
 8004222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004224:	f7fe fdce 	bl	8002dc4 <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fe fdca 	bl	8002dc4 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e053      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b2d      	ldr	r3, [pc, #180]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b27      	ldr	r3, [pc, #156]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d210      	bcs.n	8004284 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b24      	ldr	r3, [pc, #144]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 020f 	bic.w	r2, r3, #15
 800426a:	4922      	ldr	r1, [pc, #136]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b20      	ldr	r3, [pc, #128]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e032      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004290:	4b19      	ldr	r3, [pc, #100]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4916      	ldr	r1, [pc, #88]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042ae:	4b12      	ldr	r3, [pc, #72]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	490e      	ldr	r1, [pc, #56]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042c2:	f000 f821 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042c6:	4602      	mov	r2, r0
 80042c8:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c8>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	490a      	ldr	r1, [pc, #40]	@ (80042fc <HAL_RCC_ClockConfig+0x1cc>)
 80042d4:	5ccb      	ldrb	r3, [r1, r3]
 80042d6:	fa22 f303 	lsr.w	r3, r2, r3
 80042da:	4a09      	ldr	r2, [pc, #36]	@ (8004300 <HAL_RCC_ClockConfig+0x1d0>)
 80042dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042de:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_RCC_ClockConfig+0x1d4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fd2a 	bl	8002d3c <HAL_InitTick>

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023c00 	.word	0x40023c00
 80042f8:	40023800 	.word	0x40023800
 80042fc:	080081e4 	.word	0x080081e4
 8004300:	20000000 	.word	0x20000000
 8004304:	20000004 	.word	0x20000004

08004308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800430c:	b094      	sub	sp, #80	@ 0x50
 800430e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	647b      	str	r3, [r7, #68]	@ 0x44
 8004314:	2300      	movs	r3, #0
 8004316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004318:	2300      	movs	r3, #0
 800431a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004320:	4b79      	ldr	r3, [pc, #484]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b08      	cmp	r3, #8
 800432a:	d00d      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x40>
 800432c:	2b08      	cmp	r3, #8
 800432e:	f200 80e1 	bhi.w	80044f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x34>
 8004336:	2b04      	cmp	r3, #4
 8004338:	d003      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x3a>
 800433a:	e0db      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b73      	ldr	r3, [pc, #460]	@ (800450c <HAL_RCC_GetSysClockFreq+0x204>)
 800433e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004340:	e0db      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004342:	4b73      	ldr	r3, [pc, #460]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x208>)
 8004344:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004346:	e0d8      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004348:	4b6f      	ldr	r3, [pc, #444]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004350:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004352:	4b6d      	ldr	r3, [pc, #436]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d063      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435e:	4b6a      	ldr	r3, [pc, #424]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	2200      	movs	r2, #0
 8004366:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004368:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800436a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800436c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004370:	633b      	str	r3, [r7, #48]	@ 0x30
 8004372:	2300      	movs	r3, #0
 8004374:	637b      	str	r3, [r7, #52]	@ 0x34
 8004376:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800437a:	4622      	mov	r2, r4
 800437c:	462b      	mov	r3, r5
 800437e:	f04f 0000 	mov.w	r0, #0
 8004382:	f04f 0100 	mov.w	r1, #0
 8004386:	0159      	lsls	r1, r3, #5
 8004388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800438c:	0150      	lsls	r0, r2, #5
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4621      	mov	r1, r4
 8004394:	1a51      	subs	r1, r2, r1
 8004396:	6139      	str	r1, [r7, #16]
 8004398:	4629      	mov	r1, r5
 800439a:	eb63 0301 	sbc.w	r3, r3, r1
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043ac:	4659      	mov	r1, fp
 80043ae:	018b      	lsls	r3, r1, #6
 80043b0:	4651      	mov	r1, sl
 80043b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043b6:	4651      	mov	r1, sl
 80043b8:	018a      	lsls	r2, r1, #6
 80043ba:	4651      	mov	r1, sl
 80043bc:	ebb2 0801 	subs.w	r8, r2, r1
 80043c0:	4659      	mov	r1, fp
 80043c2:	eb63 0901 	sbc.w	r9, r3, r1
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043da:	4690      	mov	r8, r2
 80043dc:	4699      	mov	r9, r3
 80043de:	4623      	mov	r3, r4
 80043e0:	eb18 0303 	adds.w	r3, r8, r3
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	462b      	mov	r3, r5
 80043e8:	eb49 0303 	adc.w	r3, r9, r3
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043fa:	4629      	mov	r1, r5
 80043fc:	024b      	lsls	r3, r1, #9
 80043fe:	4621      	mov	r1, r4
 8004400:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004404:	4621      	mov	r1, r4
 8004406:	024a      	lsls	r2, r1, #9
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800440e:	2200      	movs	r2, #0
 8004410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004412:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004414:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004418:	f7fb fef6 	bl	8000208 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4613      	mov	r3, r2
 8004422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004424:	e058      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004426:	4b38      	ldr	r3, [pc, #224]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	099b      	lsrs	r3, r3, #6
 800442c:	2200      	movs	r2, #0
 800442e:	4618      	mov	r0, r3
 8004430:	4611      	mov	r1, r2
 8004432:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004436:	623b      	str	r3, [r7, #32]
 8004438:	2300      	movs	r3, #0
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
 800443c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004440:	4642      	mov	r2, r8
 8004442:	464b      	mov	r3, r9
 8004444:	f04f 0000 	mov.w	r0, #0
 8004448:	f04f 0100 	mov.w	r1, #0
 800444c:	0159      	lsls	r1, r3, #5
 800444e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004452:	0150      	lsls	r0, r2, #5
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4641      	mov	r1, r8
 800445a:	ebb2 0a01 	subs.w	sl, r2, r1
 800445e:	4649      	mov	r1, r9
 8004460:	eb63 0b01 	sbc.w	fp, r3, r1
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004470:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004474:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004478:	ebb2 040a 	subs.w	r4, r2, sl
 800447c:	eb63 050b 	sbc.w	r5, r3, fp
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	00eb      	lsls	r3, r5, #3
 800448a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800448e:	00e2      	lsls	r2, r4, #3
 8004490:	4614      	mov	r4, r2
 8004492:	461d      	mov	r5, r3
 8004494:	4643      	mov	r3, r8
 8004496:	18e3      	adds	r3, r4, r3
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	464b      	mov	r3, r9
 800449c:	eb45 0303 	adc.w	r3, r5, r3
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044ae:	4629      	mov	r1, r5
 80044b0:	028b      	lsls	r3, r1, #10
 80044b2:	4621      	mov	r1, r4
 80044b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044b8:	4621      	mov	r1, r4
 80044ba:	028a      	lsls	r2, r1, #10
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044c2:	2200      	movs	r2, #0
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	61fa      	str	r2, [r7, #28]
 80044c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044cc:	f7fb fe9c 	bl	8000208 <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4613      	mov	r3, r2
 80044d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	3301      	adds	r3, #1
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80044e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044f2:	e002      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044f4:	4b05      	ldr	r3, [pc, #20]	@ (800450c <HAL_RCC_GetSysClockFreq+0x204>)
 80044f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3750      	adds	r7, #80	@ 0x50
 8004500:	46bd      	mov	sp, r7
 8004502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
 800450c:	00f42400 	.word	0x00f42400
 8004510:	007a1200 	.word	0x007a1200

08004514 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004518:	4b03      	ldr	r3, [pc, #12]	@ (8004528 <HAL_RCC_GetHCLKFreq+0x14>)
 800451a:	681b      	ldr	r3, [r3, #0]
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000000 	.word	0x20000000

0800452c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004530:	f7ff fff0 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b05      	ldr	r3, [pc, #20]	@ (800454c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	0a9b      	lsrs	r3, r3, #10
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4903      	ldr	r1, [pc, #12]	@ (8004550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40023800 	.word	0x40023800
 8004550:	080081f4 	.word	0x080081f4

08004554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004558:	f7ff ffdc 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0b5b      	lsrs	r3, r3, #13
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	@ (8004578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	080081f4 	.word	0x080081f4

0800457c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d012      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045a4:	4b69      	ldr	r3, [pc, #420]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4a68      	ldr	r2, [pc, #416]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045ae:	6093      	str	r3, [r2, #8]
 80045b0:	4b66      	ldr	r3, [pc, #408]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b8:	4964      	ldr	r1, [pc, #400]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d017      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045d6:	4b5d      	ldr	r3, [pc, #372]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e4:	4959      	ldr	r1, [pc, #356]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f4:	d101      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045f6:	2301      	movs	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004602:	2301      	movs	r3, #1
 8004604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d017      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004612:	4b4e      	ldr	r3, [pc, #312]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004618:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004620:	494a      	ldr	r1, [pc, #296]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004622:	4313      	orrs	r3, r2
 8004624:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004630:	d101      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800463e:	2301      	movs	r3, #1
 8004640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800464e:	2301      	movs	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 808b 	beq.w	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004660:	4b3a      	ldr	r3, [pc, #232]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	4a39      	ldr	r2, [pc, #228]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800466a:	6413      	str	r3, [r2, #64]	@ 0x40
 800466c:	4b37      	ldr	r3, [pc, #220]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004678:	4b35      	ldr	r3, [pc, #212]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a34      	ldr	r2, [pc, #208]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800467e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004684:	f7fe fb9e 	bl	8002dc4 <HAL_GetTick>
 8004688:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800468c:	f7fe fb9a 	bl	8002dc4 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	@ 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e357      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800469e:	4b2c      	ldr	r3, [pc, #176]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046aa:	4b28      	ldr	r3, [pc, #160]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d035      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d02e      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046c8:	4b20      	ldr	r3, [pc, #128]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046d2:	4b1e      	ldr	r3, [pc, #120]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d6:	4a1d      	ldr	r2, [pc, #116]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046de:	4b1b      	ldr	r3, [pc, #108]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	4a1a      	ldr	r2, [pc, #104]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046ea:	4a18      	ldr	r2, [pc, #96]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046f0:	4b16      	ldr	r3, [pc, #88]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d114      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fe fb62 	bl	8002dc4 <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004702:	e00a      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004704:	f7fe fb5e 	bl	8002dc4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e319      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471a:	4b0c      	ldr	r3, [pc, #48]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0ee      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004732:	d111      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004734:	4b05      	ldr	r3, [pc, #20]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004740:	4b04      	ldr	r3, [pc, #16]	@ (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004742:	400b      	ands	r3, r1
 8004744:	4901      	ldr	r1, [pc, #4]	@ (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
 800474a:	e00b      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800474c:	40023800 	.word	0x40023800
 8004750:	40007000 	.word	0x40007000
 8004754:	0ffffcff 	.word	0x0ffffcff
 8004758:	4baa      	ldr	r3, [pc, #680]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4aa9      	ldr	r2, [pc, #676]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004762:	6093      	str	r3, [r2, #8]
 8004764:	4ba7      	ldr	r3, [pc, #668]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004766:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004770:	49a4      	ldr	r1, [pc, #656]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004772:	4313      	orrs	r3, r2
 8004774:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004782:	4ba0      	ldr	r3, [pc, #640]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004788:	4a9e      	ldr	r2, [pc, #632]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800478e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004792:	4b9c      	ldr	r3, [pc, #624]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004794:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479c:	4999      	ldr	r1, [pc, #612]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047b0:	4b94      	ldr	r3, [pc, #592]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047be:	4991      	ldr	r1, [pc, #580]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047d2:	4b8c      	ldr	r3, [pc, #560]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047e0:	4988      	ldr	r1, [pc, #544]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047f4:	4b83      	ldr	r3, [pc, #524]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004802:	4980      	ldr	r1, [pc, #512]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004816:	4b7b      	ldr	r3, [pc, #492]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004824:	4977      	ldr	r1, [pc, #476]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004838:	4b72      	ldr	r3, [pc, #456]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	f023 0203 	bic.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004846:	496f      	ldr	r1, [pc, #444]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800485a:	4b6a      	ldr	r3, [pc, #424]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004860:	f023 020c 	bic.w	r2, r3, #12
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004868:	4966      	ldr	r1, [pc, #408]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800487c:	4b61      	ldr	r3, [pc, #388]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004882:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488a:	495e      	ldr	r1, [pc, #376]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800489e:	4b59      	ldr	r3, [pc, #356]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ac:	4955      	ldr	r1, [pc, #340]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048c0:	4b50      	ldr	r3, [pc, #320]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ce:	494d      	ldr	r1, [pc, #308]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048e2:	4b48      	ldr	r3, [pc, #288]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f0:	4944      	ldr	r1, [pc, #272]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004904:	4b3f      	ldr	r3, [pc, #252]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004912:	493c      	ldr	r1, [pc, #240]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004926:	4b37      	ldr	r3, [pc, #220]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004934:	4933      	ldr	r1, [pc, #204]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004948:	4b2e      	ldr	r3, [pc, #184]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004956:	492b      	ldr	r1, [pc, #172]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d011      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800496a:	4b26      	ldr	r3, [pc, #152]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004970:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004978:	4922      	ldr	r1, [pc, #136]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004984:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004988:	d101      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800498a:	2301      	movs	r3, #1
 800498c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800499a:	2301      	movs	r3, #1
 800499c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049aa:	4b16      	ldr	r3, [pc, #88]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b8:	4912      	ldr	r1, [pc, #72]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049dc:	4909      	ldr	r1, [pc, #36]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d006      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80d9 	beq.w	8004baa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049f8:	4b02      	ldr	r3, [pc, #8]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a01      	ldr	r2, [pc, #4]	@ (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a02:	e001      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004a04:	40023800 	.word	0x40023800
 8004a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0a:	f7fe f9db 	bl	8002dc4 <HAL_GetTick>
 8004a0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a12:	f7fe f9d7 	bl	8002dc4 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b64      	cmp	r3, #100	@ 0x64
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e194      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a24:	4b6c      	ldr	r3, [pc, #432]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d021      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d11d      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a44:	4b64      	ldr	r3, [pc, #400]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a52:	4b61      	ldr	r3, [pc, #388]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a58:	0e1b      	lsrs	r3, r3, #24
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	019a      	lsls	r2, r3, #6
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	061b      	lsls	r3, r3, #24
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	071b      	lsls	r3, r3, #28
 8004a78:	4957      	ldr	r1, [pc, #348]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d02e      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aaa:	d129      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aac:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004aba:	4b47      	ldr	r3, [pc, #284]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac0:	0f1b      	lsrs	r3, r3, #28
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	019a      	lsls	r2, r3, #6
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	041b      	lsls	r3, r3, #16
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	431a      	orrs	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	071b      	lsls	r3, r3, #28
 8004ae0:	493d      	ldr	r1, [pc, #244]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004aee:	f023 021f 	bic.w	r2, r3, #31
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	3b01      	subs	r3, #1
 8004af8:	4937      	ldr	r1, [pc, #220]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01d      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b0c:	4b32      	ldr	r3, [pc, #200]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b12:	0e1b      	lsrs	r3, r3, #24
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b20:	0f1b      	lsrs	r3, r3, #28
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	019a      	lsls	r2, r3, #6
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	431a      	orrs	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	061b      	lsls	r3, r3, #24
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	071b      	lsls	r3, r3, #28
 8004b40:	4925      	ldr	r1, [pc, #148]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d011      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	019a      	lsls	r2, r3, #6
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	061b      	lsls	r3, r3, #24
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	071b      	lsls	r3, r3, #28
 8004b70:	4919      	ldr	r1, [pc, #100]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b78:	4b17      	ldr	r3, [pc, #92]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a16      	ldr	r2, [pc, #88]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b84:	f7fe f91e 	bl	8002dc4 <HAL_GetTick>
 8004b88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b8c:	f7fe f91a 	bl	8002dc4 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	@ 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e0d7      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	f040 80cd 	bne.w	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bb2:	4b09      	ldr	r3, [pc, #36]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a08      	ldr	r2, [pc, #32]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbe:	f7fe f901 	bl	8002dc4 <HAL_GetTick>
 8004bc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bc6:	f7fe f8fd 	bl	8002dc4 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b64      	cmp	r3, #100	@ 0x64
 8004bd2:	d903      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e0ba      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004bd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bdc:	4b5e      	ldr	r3, [pc, #376]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004be8:	d0ed      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d02e      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d12a      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c12:	4b51      	ldr	r3, [pc, #324]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c20:	4b4d      	ldr	r3, [pc, #308]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c26:	0f1b      	lsrs	r3, r3, #28
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	019a      	lsls	r2, r3, #6
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	071b      	lsls	r3, r3, #28
 8004c46:	4944      	ldr	r1, [pc, #272]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c4e:	4b42      	ldr	r3, [pc, #264]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c54:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	493d      	ldr	r1, [pc, #244]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d022      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c7c:	d11d      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c7e:	4b36      	ldr	r3, [pc, #216]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c84:	0e1b      	lsrs	r3, r3, #24
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c8c:	4b32      	ldr	r3, [pc, #200]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	0f1b      	lsrs	r3, r3, #28
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	019a      	lsls	r2, r3, #6
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	041b      	lsls	r3, r3, #16
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	071b      	lsls	r3, r3, #28
 8004cb2:	4929      	ldr	r1, [pc, #164]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d028      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cc6:	4b24      	ldr	r3, [pc, #144]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ccc:	0e1b      	lsrs	r3, r3, #24
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cd4:	4b20      	ldr	r3, [pc, #128]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cda:	0c1b      	lsrs	r3, r3, #16
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	019a      	lsls	r2, r3, #6
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	431a      	orrs	r2, r3
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	061b      	lsls	r3, r3, #24
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	071b      	lsls	r3, r3, #28
 8004cfa:	4917      	ldr	r1, [pc, #92]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d02:	4b15      	ldr	r3, [pc, #84]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	4911      	ldr	r1, [pc, #68]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d18:	4b0f      	ldr	r3, [pc, #60]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a0e      	ldr	r2, [pc, #56]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d24:	f7fe f84e 	bl	8002dc4 <HAL_GetTick>
 8004d28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d2c:	f7fe f84a 	bl	8002dc4 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	@ 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e007      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d3e:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d4a:	d1ef      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800

08004d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e049      	b.n	8004e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fd fdbc 	bl	8002900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f000 fa2e 	bl	80051fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d020      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01b      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f06f 0202 	mvn.w	r2, #2
 8004e3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f9b3 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004e5a:	e005      	b.n	8004e68 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f9a5 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f9b6 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d020      	beq.n	8004eba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01b      	beq.n	8004eba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f06f 0204 	mvn.w	r2, #4
 8004e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f98d 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004ea6:	e005      	b.n	8004eb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f97f 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f990 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d020      	beq.n	8004f06 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01b      	beq.n	8004f06 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f06f 0208 	mvn.w	r2, #8
 8004ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2204      	movs	r2, #4
 8004edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f003 0303 	and.w	r3, r3, #3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f967 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004ef2:	e005      	b.n	8004f00 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f959 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f96a 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d020      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01b      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f06f 0210 	mvn.w	r2, #16
 8004f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2208      	movs	r2, #8
 8004f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f941 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004f3e:	e005      	b.n	8004f4c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f933 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f944 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00c      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0201 	mvn.w	r2, #1
 8004f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7fb faff 	bl	8000574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00c      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fb0a 	bl	80055b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fb02 	bl	80055cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00c      	beq.n	8004fec <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8fe 	bl	80051e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d007      	beq.n	8005010 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0220 	mvn.w	r2, #32
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 faca 	bl	80055a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005010:	bf00      	nop
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_TIM_ConfigClockSource+0x1c>
 8005030:	2302      	movs	r3, #2
 8005032:	e0b4      	b.n	800519e <HAL_TIM_ConfigClockSource+0x186>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	4b56      	ldr	r3, [pc, #344]	@ (80051a8 <HAL_TIM_ConfigClockSource+0x190>)
 8005050:	4013      	ands	r3, r2
 8005052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800505a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800506c:	d03e      	beq.n	80050ec <HAL_TIM_ConfigClockSource+0xd4>
 800506e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005072:	f200 8087 	bhi.w	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800507a:	f000 8086 	beq.w	800518a <HAL_TIM_ConfigClockSource+0x172>
 800507e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005082:	d87f      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b70      	cmp	r3, #112	@ 0x70
 8005086:	d01a      	beq.n	80050be <HAL_TIM_ConfigClockSource+0xa6>
 8005088:	2b70      	cmp	r3, #112	@ 0x70
 800508a:	d87b      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b60      	cmp	r3, #96	@ 0x60
 800508e:	d050      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x11a>
 8005090:	2b60      	cmp	r3, #96	@ 0x60
 8005092:	d877      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b50      	cmp	r3, #80	@ 0x50
 8005096:	d03c      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0xfa>
 8005098:	2b50      	cmp	r3, #80	@ 0x50
 800509a:	d873      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b40      	cmp	r3, #64	@ 0x40
 800509e:	d058      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x13a>
 80050a0:	2b40      	cmp	r3, #64	@ 0x40
 80050a2:	d86f      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b30      	cmp	r3, #48	@ 0x30
 80050a6:	d064      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050a8:	2b30      	cmp	r3, #48	@ 0x30
 80050aa:	d86b      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d060      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d867      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d05c      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d05a      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050bc:	e062      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ce:	f000 f9bb 	bl	8005448 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	609a      	str	r2, [r3, #8]
      break;
 80050ea:	e04f      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050fc:	f000 f9a4 	bl	8005448 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800510e:	609a      	str	r2, [r3, #8]
      break;
 8005110:	e03c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511e:	461a      	mov	r2, r3
 8005120:	f000 f918 	bl	8005354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2150      	movs	r1, #80	@ 0x50
 800512a:	4618      	mov	r0, r3
 800512c:	f000 f971 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8005130:	e02c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800513e:	461a      	mov	r2, r3
 8005140:	f000 f937 	bl	80053b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2160      	movs	r1, #96	@ 0x60
 800514a:	4618      	mov	r0, r3
 800514c:	f000 f961 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8005150:	e01c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800515e:	461a      	mov	r2, r3
 8005160:	f000 f8f8 	bl	8005354 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2140      	movs	r1, #64	@ 0x40
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f951 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8005170:	e00c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f000 f948 	bl	8005412 <TIM_ITRx_SetConfig>
      break;
 8005182:	e003      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
      break;
 8005188:	e000      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800518a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	fffeff88 	.word	0xfffeff88

080051ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a46      	ldr	r2, [pc, #280]	@ (8005328 <TIM_Base_SetConfig+0x12c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800521a:	d00f      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a43      	ldr	r2, [pc, #268]	@ (800532c <TIM_Base_SetConfig+0x130>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00b      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a42      	ldr	r2, [pc, #264]	@ (8005330 <TIM_Base_SetConfig+0x134>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a41      	ldr	r2, [pc, #260]	@ (8005334 <TIM_Base_SetConfig+0x138>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a40      	ldr	r2, [pc, #256]	@ (8005338 <TIM_Base_SetConfig+0x13c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d108      	bne.n	800524e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a35      	ldr	r2, [pc, #212]	@ (8005328 <TIM_Base_SetConfig+0x12c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d02b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800525c:	d027      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a32      	ldr	r2, [pc, #200]	@ (800532c <TIM_Base_SetConfig+0x130>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d023      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a31      	ldr	r2, [pc, #196]	@ (8005330 <TIM_Base_SetConfig+0x134>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01f      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a30      	ldr	r2, [pc, #192]	@ (8005334 <TIM_Base_SetConfig+0x138>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2f      	ldr	r2, [pc, #188]	@ (8005338 <TIM_Base_SetConfig+0x13c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d017      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2e      	ldr	r2, [pc, #184]	@ (800533c <TIM_Base_SetConfig+0x140>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d013      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a2d      	ldr	r2, [pc, #180]	@ (8005340 <TIM_Base_SetConfig+0x144>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00f      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2c      	ldr	r2, [pc, #176]	@ (8005344 <TIM_Base_SetConfig+0x148>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a2b      	ldr	r2, [pc, #172]	@ (8005348 <TIM_Base_SetConfig+0x14c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2a      	ldr	r2, [pc, #168]	@ (800534c <TIM_Base_SetConfig+0x150>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a29      	ldr	r2, [pc, #164]	@ (8005350 <TIM_Base_SetConfig+0x154>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d108      	bne.n	80052c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a10      	ldr	r2, [pc, #64]	@ (8005328 <TIM_Base_SetConfig+0x12c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0xf8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a12      	ldr	r2, [pc, #72]	@ (8005338 <TIM_Base_SetConfig+0x13c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d103      	bne.n	80052fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d105      	bne.n	800531a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	611a      	str	r2, [r3, #16]
  }
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40010400 	.word	0x40010400
 800533c:	40014000 	.word	0x40014000
 8005340:	40014400 	.word	0x40014400
 8005344:	40014800 	.word	0x40014800
 8005348:	40001800 	.word	0x40001800
 800534c:	40001c00 	.word	0x40001c00
 8005350:	40002000 	.word	0x40002000

08005354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f023 0201 	bic.w	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800537e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f023 030a 	bic.w	r3, r3, #10
 8005390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b087      	sub	sp, #28
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	f023 0210 	bic.w	r2, r3, #16
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	031b      	lsls	r3, r3, #12
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	621a      	str	r2, [r3, #32]
}
 8005406:	bf00      	nop
 8005408:	371c      	adds	r7, #28
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005412:	b480      	push	{r7}
 8005414:	b085      	sub	sp, #20
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005428:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	f043 0307 	orr.w	r3, r3, #7
 8005434:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	609a      	str	r2, [r3, #8]
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005462:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	021a      	lsls	r2, r3, #8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	431a      	orrs	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4313      	orrs	r3, r2
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	609a      	str	r2, [r3, #8]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800549c:	2302      	movs	r3, #2
 800549e:	e06d      	b.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a30      	ldr	r2, [pc, #192]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a2f      	ldr	r2, [pc, #188]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d108      	bne.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a20      	ldr	r2, [pc, #128]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d022      	beq.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005512:	d01d      	beq.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1d      	ldr	r2, [pc, #116]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d018      	beq.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1c      	ldr	r2, [pc, #112]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1a      	ldr	r2, [pc, #104]	@ (8005598 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00e      	beq.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a15      	ldr	r2, [pc, #84]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d009      	beq.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a16      	ldr	r2, [pc, #88]	@ (800559c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a15      	ldr	r2, [pc, #84]	@ (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d10c      	bne.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005556:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	4313      	orrs	r3, r2
 8005560:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40010000 	.word	0x40010000
 800558c:	40010400 	.word	0x40010400
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40014000 	.word	0x40014000
 80055a0:	40001800 	.word	0x40001800

080055a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e040      	b.n	8005674 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fd f9a2 	bl	800294c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	@ 0x24
 800560c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0201 	bic.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 feca 	bl	80063c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fc63 	bl	8005ef8 <UART_SetConfig>
 8005632:	4603      	mov	r3, r0
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e01b      	b.n	8005674 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800564a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800565a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 ff49 	bl	8006504 <UART_CheckIdleState>
 8005672:	4603      	mov	r3, r0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e048      	b.n	8005720 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fd f954 	bl	800294c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2224      	movs	r2, #36	@ 0x24
 80056a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fe7c 	bl	80063c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fc15 	bl	8005ef8 <UART_SetConfig>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e023      	b.n	8005720 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80056f6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0208 	orr.w	r2, r2, #8
 8005706:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fef3 	bl	8006504 <UART_CheckIdleState>
 800571e:	4603      	mov	r3, r0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005728:	b480      	push	{r7}
 800572a:	b08b      	sub	sp, #44	@ 0x2c
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	4613      	mov	r3, r2
 8005734:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800573a:	2b20      	cmp	r3, #32
 800573c:	d147      	bne.n	80057ce <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <HAL_UART_Transmit_IT+0x22>
 8005744:	88fb      	ldrh	r3, [r7, #6]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e040      	b.n	80057d0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2221      	movs	r2, #33	@ 0x21
 8005776:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005780:	d107      	bne.n	8005792 <HAL_UART_Transmit_IT+0x6a>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a13      	ldr	r2, [pc, #76]	@ (80057dc <HAL_UART_Transmit_IT+0xb4>)
 800578e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005790:	e002      	b.n	8005798 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4a12      	ldr	r2, [pc, #72]	@ (80057e0 <HAL_UART_Transmit_IT+0xb8>)
 8005796:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	613b      	str	r3, [r7, #16]
   return(result);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	623b      	str	r3, [r7, #32]
 80057b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	69f9      	ldr	r1, [r7, #28]
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e6      	bne.n	8005798 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e000      	b.n	80057d0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
  }
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	372c      	adds	r7, #44	@ 0x2c
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	080069c3 	.word	0x080069c3
 80057e0:	0800690d 	.word	0x0800690d

080057e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b0ba      	sub	sp, #232	@ 0xe8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800580a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800580e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005812:	4013      	ands	r3, r2
 8005814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800581c:	2b00      	cmp	r3, #0
 800581e:	d115      	bne.n	800584c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00f      	beq.n	800584c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d009      	beq.n	800584c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 8297 	beq.w	8005d70 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4798      	blx	r3
      }
      return;
 800584a:	e291      	b.n	8005d70 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800584c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8117 	beq.w	8005a84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005862:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005866:	4b85      	ldr	r3, [pc, #532]	@ (8005a7c <HAL_UART_IRQHandler+0x298>)
 8005868:	4013      	ands	r3, r2
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 810a 	beq.w	8005a84 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d011      	beq.n	80058a0 <HAL_UART_IRQHandler+0xbc>
 800587c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00b      	beq.n	80058a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2201      	movs	r2, #1
 800588e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005896:	f043 0201 	orr.w	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d011      	beq.n	80058d0 <HAL_UART_IRQHandler+0xec>
 80058ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2202      	movs	r2, #2
 80058be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058c6:	f043 0204 	orr.w	r2, r3, #4
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d011      	beq.n	8005900 <HAL_UART_IRQHandler+0x11c>
 80058dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00b      	beq.n	8005900 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2204      	movs	r2, #4
 80058ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058f6:	f043 0202 	orr.w	r2, r3, #2
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b00      	cmp	r3, #0
 800590a:	d017      	beq.n	800593c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800590c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d105      	bne.n	8005924 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800591c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2208      	movs	r2, #8
 800592a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005932:	f043 0208 	orr.w	r2, r3, #8
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800593c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005944:	2b00      	cmp	r3, #0
 8005946:	d012      	beq.n	800596e <HAL_UART_IRQHandler+0x18a>
 8005948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800594c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800595c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 81fd 	beq.w	8005d74 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00d      	beq.n	80059a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d007      	beq.n	80059a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b6:	2b40      	cmp	r3, #64	@ 0x40
 80059b8:	d005      	beq.n	80059c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d04f      	beq.n	8005a66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 ff26 	bl	8006818 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d6:	2b40      	cmp	r3, #64	@ 0x40
 80059d8:	d141      	bne.n	8005a5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3308      	adds	r3, #8
 8005a02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1d9      	bne.n	80059da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d013      	beq.n	8005a56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a32:	4a13      	ldr	r2, [pc, #76]	@ (8005a80 <HAL_UART_IRQHandler+0x29c>)
 8005a34:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fd fb73 	bl	8003126 <HAL_DMA_Abort_IT>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d017      	beq.n	8005a76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a50:	4610      	mov	r0, r2
 8005a52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a54:	e00f      	b.n	8005a76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f9a0 	bl	8005d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5c:	e00b      	b.n	8005a76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f99c 	bl	8005d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a64:	e007      	b.n	8005a76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f998 	bl	8005d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005a74:	e17e      	b.n	8005d74 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a76:	bf00      	nop
    return;
 8005a78:	e17c      	b.n	8005d74 <HAL_UART_IRQHandler+0x590>
 8005a7a:	bf00      	nop
 8005a7c:	04000120 	.word	0x04000120
 8005a80:	080068e1 	.word	0x080068e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	f040 814c 	bne.w	8005d26 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 8145 	beq.w	8005d26 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 813e 	beq.w	8005d26 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2210      	movs	r2, #16
 8005ab0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abc:	2b40      	cmp	r3, #64	@ 0x40
 8005abe:	f040 80b6 	bne.w	8005c2e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ace:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 8150 	beq.w	8005d78 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	f080 8148 	bcs.w	8005d78 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005afc:	f000 8086 	beq.w	8005c0c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b2e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1da      	bne.n	8005b00 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3308      	adds	r3, #8
 8005b50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b5c:	f023 0301 	bic.w	r3, r3, #1
 8005b60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e1      	bne.n	8005b4a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3308      	adds	r3, #8
 8005ba6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005baa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e3      	bne.n	8005b86 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bdc:	f023 0310 	bic.w	r3, r3, #16
 8005be0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bf0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e4      	bne.n	8005bcc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fd fa1d 	bl	8003046 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fa fc66 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c2c:	e0a4      	b.n	8005d78 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8096 	beq.w	8005d7c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8091 	beq.w	8005d7c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e4      	bne.n	8005c5a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3308      	adds	r3, #8
 8005c96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e3      	bne.n	8005c90 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f023 0310 	bic.w	r3, r3, #16
 8005cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005cfe:	61fb      	str	r3, [r7, #28]
 8005d00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	69b9      	ldr	r1, [r7, #24]
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e4      	bne.n	8005cdc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fa fbea 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d24:	e02a      	b.n	8005d7c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00e      	beq.n	8005d50 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d008      	beq.n	8005d50 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d01c      	beq.n	8005d80 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
    }
    return;
 8005d4e:	e017      	b.n	8005d80 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d012      	beq.n	8005d82 <HAL_UART_IRQHandler+0x59e>
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00c      	beq.n	8005d82 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fe8a 	bl	8006a82 <UART_EndTransmit_IT>
    return;
 8005d6e:	e008      	b.n	8005d82 <HAL_UART_IRQHandler+0x59e>
      return;
 8005d70:	bf00      	nop
 8005d72:	e006      	b.n	8005d82 <HAL_UART_IRQHandler+0x59e>
    return;
 8005d74:	bf00      	nop
 8005d76:	e004      	b.n	8005d82 <HAL_UART_IRQHandler+0x59e>
      return;
 8005d78:	bf00      	nop
 8005d7a:	e002      	b.n	8005d82 <HAL_UART_IRQHandler+0x59e>
      return;
 8005d7c:	bf00      	nop
 8005d7e:	e000      	b.n	8005d82 <HAL_UART_IRQHandler+0x59e>
    return;
 8005d80:	bf00      	nop
  }

}
 8005d82:	37e8      	adds	r7, #232	@ 0xe8
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b08f      	sub	sp, #60	@ 0x3c
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e040      	b.n	8005e48 <HAL_HalfDuplex_EnableTransmitter+0x98>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_BUSY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2224      	movs	r2, #36	@ 0x24
 8005dd2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	f023 030c 	bic.w	r3, r3, #12
 8005de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005df4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e6      	bne.n	8005dd4 <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f043 0308 	orr.w	r3, r3, #8
 8005e1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	461a      	mov	r2, r3
 8005e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e24:	61bb      	str	r3, [r7, #24]
 8005e26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6979      	ldr	r1, [r7, #20]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	613b      	str	r3, [r7, #16]
   return(result);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e6      	bne.n	8005e06 <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UNLOCK(huart);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	373c      	adds	r7, #60	@ 0x3c
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b08f      	sub	sp, #60	@ 0x3c
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_HalfDuplex_EnableReceiver+0x16>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e040      	b.n	8005eec <HAL_HalfDuplex_EnableReceiver+0x98>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_BUSY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2224      	movs	r2, #36	@ 0x24
 8005e76:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	f023 030c 	bic.w	r3, r3, #12
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e98:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e6      	bne.n	8005e78 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f043 0304 	orr.w	r3, r3, #4
 8005ebe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6979      	ldr	r1, [r7, #20]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e6      	bne.n	8005eaa <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UNLOCK(huart);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	373c      	adds	r7, #60	@ 0x3c
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4ba6      	ldr	r3, [pc, #664]	@ (80061bc <UART_SetConfig+0x2c4>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	6979      	ldr	r1, [r7, #20]
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a94      	ldr	r2, [pc, #592]	@ (80061c0 <UART_SetConfig+0x2c8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d120      	bne.n	8005fb6 <UART_SetConfig+0xbe>
 8005f74:	4b93      	ldr	r3, [pc, #588]	@ (80061c4 <UART_SetConfig+0x2cc>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d816      	bhi.n	8005fb0 <UART_SetConfig+0xb8>
 8005f82:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <UART_SetConfig+0x90>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005fa5 	.word	0x08005fa5
 8005f90:	08005f9f 	.word	0x08005f9f
 8005f94:	08005fab 	.word	0x08005fab
 8005f98:	2301      	movs	r3, #1
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	e150      	b.n	8006240 <UART_SetConfig+0x348>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	77fb      	strb	r3, [r7, #31]
 8005fa2:	e14d      	b.n	8006240 <UART_SetConfig+0x348>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e14a      	b.n	8006240 <UART_SetConfig+0x348>
 8005faa:	2308      	movs	r3, #8
 8005fac:	77fb      	strb	r3, [r7, #31]
 8005fae:	e147      	b.n	8006240 <UART_SetConfig+0x348>
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e144      	b.n	8006240 <UART_SetConfig+0x348>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a83      	ldr	r2, [pc, #524]	@ (80061c8 <UART_SetConfig+0x2d0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d132      	bne.n	8006026 <UART_SetConfig+0x12e>
 8005fc0:	4b80      	ldr	r3, [pc, #512]	@ (80061c4 <UART_SetConfig+0x2cc>)
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc6:	f003 030c 	and.w	r3, r3, #12
 8005fca:	2b0c      	cmp	r3, #12
 8005fcc:	d828      	bhi.n	8006020 <UART_SetConfig+0x128>
 8005fce:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd4 <UART_SetConfig+0xdc>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08006009 	.word	0x08006009
 8005fd8:	08006021 	.word	0x08006021
 8005fdc:	08006021 	.word	0x08006021
 8005fe0:	08006021 	.word	0x08006021
 8005fe4:	08006015 	.word	0x08006015
 8005fe8:	08006021 	.word	0x08006021
 8005fec:	08006021 	.word	0x08006021
 8005ff0:	08006021 	.word	0x08006021
 8005ff4:	0800600f 	.word	0x0800600f
 8005ff8:	08006021 	.word	0x08006021
 8005ffc:	08006021 	.word	0x08006021
 8006000:	08006021 	.word	0x08006021
 8006004:	0800601b 	.word	0x0800601b
 8006008:	2300      	movs	r3, #0
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e118      	b.n	8006240 <UART_SetConfig+0x348>
 800600e:	2302      	movs	r3, #2
 8006010:	77fb      	strb	r3, [r7, #31]
 8006012:	e115      	b.n	8006240 <UART_SetConfig+0x348>
 8006014:	2304      	movs	r3, #4
 8006016:	77fb      	strb	r3, [r7, #31]
 8006018:	e112      	b.n	8006240 <UART_SetConfig+0x348>
 800601a:	2308      	movs	r3, #8
 800601c:	77fb      	strb	r3, [r7, #31]
 800601e:	e10f      	b.n	8006240 <UART_SetConfig+0x348>
 8006020:	2310      	movs	r3, #16
 8006022:	77fb      	strb	r3, [r7, #31]
 8006024:	e10c      	b.n	8006240 <UART_SetConfig+0x348>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a68      	ldr	r2, [pc, #416]	@ (80061cc <UART_SetConfig+0x2d4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d120      	bne.n	8006072 <UART_SetConfig+0x17a>
 8006030:	4b64      	ldr	r3, [pc, #400]	@ (80061c4 <UART_SetConfig+0x2cc>)
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006036:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800603a:	2b30      	cmp	r3, #48	@ 0x30
 800603c:	d013      	beq.n	8006066 <UART_SetConfig+0x16e>
 800603e:	2b30      	cmp	r3, #48	@ 0x30
 8006040:	d814      	bhi.n	800606c <UART_SetConfig+0x174>
 8006042:	2b20      	cmp	r3, #32
 8006044:	d009      	beq.n	800605a <UART_SetConfig+0x162>
 8006046:	2b20      	cmp	r3, #32
 8006048:	d810      	bhi.n	800606c <UART_SetConfig+0x174>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <UART_SetConfig+0x15c>
 800604e:	2b10      	cmp	r3, #16
 8006050:	d006      	beq.n	8006060 <UART_SetConfig+0x168>
 8006052:	e00b      	b.n	800606c <UART_SetConfig+0x174>
 8006054:	2300      	movs	r3, #0
 8006056:	77fb      	strb	r3, [r7, #31]
 8006058:	e0f2      	b.n	8006240 <UART_SetConfig+0x348>
 800605a:	2302      	movs	r3, #2
 800605c:	77fb      	strb	r3, [r7, #31]
 800605e:	e0ef      	b.n	8006240 <UART_SetConfig+0x348>
 8006060:	2304      	movs	r3, #4
 8006062:	77fb      	strb	r3, [r7, #31]
 8006064:	e0ec      	b.n	8006240 <UART_SetConfig+0x348>
 8006066:	2308      	movs	r3, #8
 8006068:	77fb      	strb	r3, [r7, #31]
 800606a:	e0e9      	b.n	8006240 <UART_SetConfig+0x348>
 800606c:	2310      	movs	r3, #16
 800606e:	77fb      	strb	r3, [r7, #31]
 8006070:	e0e6      	b.n	8006240 <UART_SetConfig+0x348>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a56      	ldr	r2, [pc, #344]	@ (80061d0 <UART_SetConfig+0x2d8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d120      	bne.n	80060be <UART_SetConfig+0x1c6>
 800607c:	4b51      	ldr	r3, [pc, #324]	@ (80061c4 <UART_SetConfig+0x2cc>)
 800607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006082:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006086:	2bc0      	cmp	r3, #192	@ 0xc0
 8006088:	d013      	beq.n	80060b2 <UART_SetConfig+0x1ba>
 800608a:	2bc0      	cmp	r3, #192	@ 0xc0
 800608c:	d814      	bhi.n	80060b8 <UART_SetConfig+0x1c0>
 800608e:	2b80      	cmp	r3, #128	@ 0x80
 8006090:	d009      	beq.n	80060a6 <UART_SetConfig+0x1ae>
 8006092:	2b80      	cmp	r3, #128	@ 0x80
 8006094:	d810      	bhi.n	80060b8 <UART_SetConfig+0x1c0>
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <UART_SetConfig+0x1a8>
 800609a:	2b40      	cmp	r3, #64	@ 0x40
 800609c:	d006      	beq.n	80060ac <UART_SetConfig+0x1b4>
 800609e:	e00b      	b.n	80060b8 <UART_SetConfig+0x1c0>
 80060a0:	2300      	movs	r3, #0
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e0cc      	b.n	8006240 <UART_SetConfig+0x348>
 80060a6:	2302      	movs	r3, #2
 80060a8:	77fb      	strb	r3, [r7, #31]
 80060aa:	e0c9      	b.n	8006240 <UART_SetConfig+0x348>
 80060ac:	2304      	movs	r3, #4
 80060ae:	77fb      	strb	r3, [r7, #31]
 80060b0:	e0c6      	b.n	8006240 <UART_SetConfig+0x348>
 80060b2:	2308      	movs	r3, #8
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e0c3      	b.n	8006240 <UART_SetConfig+0x348>
 80060b8:	2310      	movs	r3, #16
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e0c0      	b.n	8006240 <UART_SetConfig+0x348>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a44      	ldr	r2, [pc, #272]	@ (80061d4 <UART_SetConfig+0x2dc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d125      	bne.n	8006114 <UART_SetConfig+0x21c>
 80060c8:	4b3e      	ldr	r3, [pc, #248]	@ (80061c4 <UART_SetConfig+0x2cc>)
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060d6:	d017      	beq.n	8006108 <UART_SetConfig+0x210>
 80060d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060dc:	d817      	bhi.n	800610e <UART_SetConfig+0x216>
 80060de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060e2:	d00b      	beq.n	80060fc <UART_SetConfig+0x204>
 80060e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060e8:	d811      	bhi.n	800610e <UART_SetConfig+0x216>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <UART_SetConfig+0x1fe>
 80060ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f2:	d006      	beq.n	8006102 <UART_SetConfig+0x20a>
 80060f4:	e00b      	b.n	800610e <UART_SetConfig+0x216>
 80060f6:	2300      	movs	r3, #0
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e0a1      	b.n	8006240 <UART_SetConfig+0x348>
 80060fc:	2302      	movs	r3, #2
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e09e      	b.n	8006240 <UART_SetConfig+0x348>
 8006102:	2304      	movs	r3, #4
 8006104:	77fb      	strb	r3, [r7, #31]
 8006106:	e09b      	b.n	8006240 <UART_SetConfig+0x348>
 8006108:	2308      	movs	r3, #8
 800610a:	77fb      	strb	r3, [r7, #31]
 800610c:	e098      	b.n	8006240 <UART_SetConfig+0x348>
 800610e:	2310      	movs	r3, #16
 8006110:	77fb      	strb	r3, [r7, #31]
 8006112:	e095      	b.n	8006240 <UART_SetConfig+0x348>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a2f      	ldr	r2, [pc, #188]	@ (80061d8 <UART_SetConfig+0x2e0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d125      	bne.n	800616a <UART_SetConfig+0x272>
 800611e:	4b29      	ldr	r3, [pc, #164]	@ (80061c4 <UART_SetConfig+0x2cc>)
 8006120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006124:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006128:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800612c:	d017      	beq.n	800615e <UART_SetConfig+0x266>
 800612e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006132:	d817      	bhi.n	8006164 <UART_SetConfig+0x26c>
 8006134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006138:	d00b      	beq.n	8006152 <UART_SetConfig+0x25a>
 800613a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800613e:	d811      	bhi.n	8006164 <UART_SetConfig+0x26c>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <UART_SetConfig+0x254>
 8006144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006148:	d006      	beq.n	8006158 <UART_SetConfig+0x260>
 800614a:	e00b      	b.n	8006164 <UART_SetConfig+0x26c>
 800614c:	2301      	movs	r3, #1
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e076      	b.n	8006240 <UART_SetConfig+0x348>
 8006152:	2302      	movs	r3, #2
 8006154:	77fb      	strb	r3, [r7, #31]
 8006156:	e073      	b.n	8006240 <UART_SetConfig+0x348>
 8006158:	2304      	movs	r3, #4
 800615a:	77fb      	strb	r3, [r7, #31]
 800615c:	e070      	b.n	8006240 <UART_SetConfig+0x348>
 800615e:	2308      	movs	r3, #8
 8006160:	77fb      	strb	r3, [r7, #31]
 8006162:	e06d      	b.n	8006240 <UART_SetConfig+0x348>
 8006164:	2310      	movs	r3, #16
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e06a      	b.n	8006240 <UART_SetConfig+0x348>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1b      	ldr	r2, [pc, #108]	@ (80061dc <UART_SetConfig+0x2e4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d138      	bne.n	80061e6 <UART_SetConfig+0x2ee>
 8006174:	4b13      	ldr	r3, [pc, #76]	@ (80061c4 <UART_SetConfig+0x2cc>)
 8006176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800617e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006182:	d017      	beq.n	80061b4 <UART_SetConfig+0x2bc>
 8006184:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006188:	d82a      	bhi.n	80061e0 <UART_SetConfig+0x2e8>
 800618a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800618e:	d00b      	beq.n	80061a8 <UART_SetConfig+0x2b0>
 8006190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006194:	d824      	bhi.n	80061e0 <UART_SetConfig+0x2e8>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <UART_SetConfig+0x2aa>
 800619a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619e:	d006      	beq.n	80061ae <UART_SetConfig+0x2b6>
 80061a0:	e01e      	b.n	80061e0 <UART_SetConfig+0x2e8>
 80061a2:	2300      	movs	r3, #0
 80061a4:	77fb      	strb	r3, [r7, #31]
 80061a6:	e04b      	b.n	8006240 <UART_SetConfig+0x348>
 80061a8:	2302      	movs	r3, #2
 80061aa:	77fb      	strb	r3, [r7, #31]
 80061ac:	e048      	b.n	8006240 <UART_SetConfig+0x348>
 80061ae:	2304      	movs	r3, #4
 80061b0:	77fb      	strb	r3, [r7, #31]
 80061b2:	e045      	b.n	8006240 <UART_SetConfig+0x348>
 80061b4:	2308      	movs	r3, #8
 80061b6:	77fb      	strb	r3, [r7, #31]
 80061b8:	e042      	b.n	8006240 <UART_SetConfig+0x348>
 80061ba:	bf00      	nop
 80061bc:	efff69f3 	.word	0xefff69f3
 80061c0:	40011000 	.word	0x40011000
 80061c4:	40023800 	.word	0x40023800
 80061c8:	40004400 	.word	0x40004400
 80061cc:	40004800 	.word	0x40004800
 80061d0:	40004c00 	.word	0x40004c00
 80061d4:	40005000 	.word	0x40005000
 80061d8:	40011400 	.word	0x40011400
 80061dc:	40007800 	.word	0x40007800
 80061e0:	2310      	movs	r3, #16
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e02c      	b.n	8006240 <UART_SetConfig+0x348>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a72      	ldr	r2, [pc, #456]	@ (80063b4 <UART_SetConfig+0x4bc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d125      	bne.n	800623c <UART_SetConfig+0x344>
 80061f0:	4b71      	ldr	r3, [pc, #452]	@ (80063b8 <UART_SetConfig+0x4c0>)
 80061f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80061fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80061fe:	d017      	beq.n	8006230 <UART_SetConfig+0x338>
 8006200:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006204:	d817      	bhi.n	8006236 <UART_SetConfig+0x33e>
 8006206:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800620a:	d00b      	beq.n	8006224 <UART_SetConfig+0x32c>
 800620c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006210:	d811      	bhi.n	8006236 <UART_SetConfig+0x33e>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <UART_SetConfig+0x326>
 8006216:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800621a:	d006      	beq.n	800622a <UART_SetConfig+0x332>
 800621c:	e00b      	b.n	8006236 <UART_SetConfig+0x33e>
 800621e:	2300      	movs	r3, #0
 8006220:	77fb      	strb	r3, [r7, #31]
 8006222:	e00d      	b.n	8006240 <UART_SetConfig+0x348>
 8006224:	2302      	movs	r3, #2
 8006226:	77fb      	strb	r3, [r7, #31]
 8006228:	e00a      	b.n	8006240 <UART_SetConfig+0x348>
 800622a:	2304      	movs	r3, #4
 800622c:	77fb      	strb	r3, [r7, #31]
 800622e:	e007      	b.n	8006240 <UART_SetConfig+0x348>
 8006230:	2308      	movs	r3, #8
 8006232:	77fb      	strb	r3, [r7, #31]
 8006234:	e004      	b.n	8006240 <UART_SetConfig+0x348>
 8006236:	2310      	movs	r3, #16
 8006238:	77fb      	strb	r3, [r7, #31]
 800623a:	e001      	b.n	8006240 <UART_SetConfig+0x348>
 800623c:	2310      	movs	r3, #16
 800623e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006248:	d15b      	bne.n	8006302 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800624a:	7ffb      	ldrb	r3, [r7, #31]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d828      	bhi.n	80062a2 <UART_SetConfig+0x3aa>
 8006250:	a201      	add	r2, pc, #4	@ (adr r2, 8006258 <UART_SetConfig+0x360>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	0800627d 	.word	0x0800627d
 800625c:	08006285 	.word	0x08006285
 8006260:	0800628d 	.word	0x0800628d
 8006264:	080062a3 	.word	0x080062a3
 8006268:	08006293 	.word	0x08006293
 800626c:	080062a3 	.word	0x080062a3
 8006270:	080062a3 	.word	0x080062a3
 8006274:	080062a3 	.word	0x080062a3
 8006278:	0800629b 	.word	0x0800629b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800627c:	f7fe f956 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8006280:	61b8      	str	r0, [r7, #24]
        break;
 8006282:	e013      	b.n	80062ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006284:	f7fe f966 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
 8006288:	61b8      	str	r0, [r7, #24]
        break;
 800628a:	e00f      	b.n	80062ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800628c:	4b4b      	ldr	r3, [pc, #300]	@ (80063bc <UART_SetConfig+0x4c4>)
 800628e:	61bb      	str	r3, [r7, #24]
        break;
 8006290:	e00c      	b.n	80062ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006292:	f7fe f839 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 8006296:	61b8      	str	r0, [r7, #24]
        break;
 8006298:	e008      	b.n	80062ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800629e:	61bb      	str	r3, [r7, #24]
        break;
 80062a0:	e004      	b.n	80062ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	77bb      	strb	r3, [r7, #30]
        break;
 80062aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d074      	beq.n	800639c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	005a      	lsls	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	085b      	lsrs	r3, r3, #1
 80062bc:	441a      	add	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b0f      	cmp	r3, #15
 80062cc:	d916      	bls.n	80062fc <UART_SetConfig+0x404>
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062d4:	d212      	bcs.n	80062fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	b29b      	uxth	r3, r3
 80062da:	f023 030f 	bic.w	r3, r3, #15
 80062de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	085b      	lsrs	r3, r3, #1
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	89fb      	ldrh	r3, [r7, #14]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	89fa      	ldrh	r2, [r7, #14]
 80062f8:	60da      	str	r2, [r3, #12]
 80062fa:	e04f      	b.n	800639c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	77bb      	strb	r3, [r7, #30]
 8006300:	e04c      	b.n	800639c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006302:	7ffb      	ldrb	r3, [r7, #31]
 8006304:	2b08      	cmp	r3, #8
 8006306:	d828      	bhi.n	800635a <UART_SetConfig+0x462>
 8006308:	a201      	add	r2, pc, #4	@ (adr r2, 8006310 <UART_SetConfig+0x418>)
 800630a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630e:	bf00      	nop
 8006310:	08006335 	.word	0x08006335
 8006314:	0800633d 	.word	0x0800633d
 8006318:	08006345 	.word	0x08006345
 800631c:	0800635b 	.word	0x0800635b
 8006320:	0800634b 	.word	0x0800634b
 8006324:	0800635b 	.word	0x0800635b
 8006328:	0800635b 	.word	0x0800635b
 800632c:	0800635b 	.word	0x0800635b
 8006330:	08006353 	.word	0x08006353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006334:	f7fe f8fa 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8006338:	61b8      	str	r0, [r7, #24]
        break;
 800633a:	e013      	b.n	8006364 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800633c:	f7fe f90a 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
 8006340:	61b8      	str	r0, [r7, #24]
        break;
 8006342:	e00f      	b.n	8006364 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006344:	4b1d      	ldr	r3, [pc, #116]	@ (80063bc <UART_SetConfig+0x4c4>)
 8006346:	61bb      	str	r3, [r7, #24]
        break;
 8006348:	e00c      	b.n	8006364 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800634a:	f7fd ffdd 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 800634e:	61b8      	str	r0, [r7, #24]
        break;
 8006350:	e008      	b.n	8006364 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006356:	61bb      	str	r3, [r7, #24]
        break;
 8006358:	e004      	b.n	8006364 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	77bb      	strb	r3, [r7, #30]
        break;
 8006362:	bf00      	nop
    }

    if (pclk != 0U)
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d018      	beq.n	800639c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	085a      	lsrs	r2, r3, #1
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	441a      	add	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	fbb2 f3f3 	udiv	r3, r2, r3
 800637c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b0f      	cmp	r3, #15
 8006382:	d909      	bls.n	8006398 <UART_SetConfig+0x4a0>
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800638a:	d205      	bcs.n	8006398 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	b29a      	uxth	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60da      	str	r2, [r3, #12]
 8006396:	e001      	b.n	800639c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80063a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	40007c00 	.word	0x40007c00
 80063b8:	40023800 	.word	0x40023800
 80063bc:	00f42400 	.word	0x00f42400

080063c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01a      	beq.n	80064d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064be:	d10a      	bne.n	80064d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
  }
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08c      	sub	sp, #48	@ 0x30
 8006508:	af02      	add	r7, sp, #8
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006514:	f7fc fc56 	bl	8002dc4 <HAL_GetTick>
 8006518:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b08      	cmp	r3, #8
 8006526:	d12e      	bne.n	8006586 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006530:	2200      	movs	r2, #0
 8006532:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f83b 	bl	80065b2 <UART_WaitOnFlagUntilTimeout>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d021      	beq.n	8006586 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006556:	623b      	str	r3, [r7, #32]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	69b9      	ldr	r1, [r7, #24]
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	617b      	str	r3, [r7, #20]
   return(result);
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e6      	bne.n	8006542 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e011      	b.n	80065aa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3728      	adds	r7, #40	@ 0x28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	4613      	mov	r3, r2
 80065c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c2:	e04f      	b.n	8006664 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d04b      	beq.n	8006664 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065cc:	f7fc fbfa 	bl	8002dc4 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d302      	bcc.n	80065e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e04e      	b.n	8006684 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0304 	and.w	r3, r3, #4
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d037      	beq.n	8006664 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b80      	cmp	r3, #128	@ 0x80
 80065f8:	d034      	beq.n	8006664 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b40      	cmp	r3, #64	@ 0x40
 80065fe:	d031      	beq.n	8006664 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b08      	cmp	r3, #8
 800660c:	d110      	bne.n	8006630 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2208      	movs	r2, #8
 8006614:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f8fe 	bl	8006818 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2208      	movs	r2, #8
 8006620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e029      	b.n	8006684 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800663a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800663e:	d111      	bne.n	8006664 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006648:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 f8e4 	bl	8006818 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2220      	movs	r2, #32
 8006654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e00f      	b.n	8006684 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	69da      	ldr	r2, [r3, #28]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	4013      	ands	r3, r2
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	429a      	cmp	r2, r3
 8006672:	bf0c      	ite	eq
 8006674:	2301      	moveq	r3, #1
 8006676:	2300      	movne	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	461a      	mov	r2, r3
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	429a      	cmp	r2, r3
 8006680:	d0a0      	beq.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800668c:	b480      	push	{r7}
 800668e:	b097      	sub	sp, #92	@ 0x5c
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	88fa      	ldrh	r2, [r7, #6]
 80066ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066be:	d10e      	bne.n	80066de <UART_Start_Receive_IT+0x52>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <UART_Start_Receive_IT+0x48>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80066ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066d2:	e02d      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	22ff      	movs	r2, #255	@ 0xff
 80066d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066dc:	e028      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <UART_Start_Receive_IT+0x76>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <UART_Start_Receive_IT+0x6c>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	22ff      	movs	r2, #255	@ 0xff
 80066f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80066f6:	e01b      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	227f      	movs	r2, #127	@ 0x7f
 80066fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006700:	e016      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800670a:	d10d      	bne.n	8006728 <UART_Start_Receive_IT+0x9c>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <UART_Start_Receive_IT+0x92>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	227f      	movs	r2, #127	@ 0x7f
 8006718:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800671c:	e008      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	223f      	movs	r2, #63	@ 0x3f
 8006722:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006726:	e003      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2222      	movs	r2, #34	@ 0x22
 800673c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3308      	adds	r3, #8
 8006746:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006752:	f043 0301 	orr.w	r3, r3, #1
 8006756:	657b      	str	r3, [r7, #84]	@ 0x54
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3308      	adds	r3, #8
 800675e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006760:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006762:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006766:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800676e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e5      	bne.n	8006740 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800677c:	d107      	bne.n	800678e <UART_Start_Receive_IT+0x102>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d103      	bne.n	800678e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4a21      	ldr	r2, [pc, #132]	@ (8006810 <UART_Start_Receive_IT+0x184>)
 800678a:	669a      	str	r2, [r3, #104]	@ 0x68
 800678c:	e002      	b.n	8006794 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a20      	ldr	r2, [pc, #128]	@ (8006814 <UART_Start_Receive_IT+0x188>)
 8006792:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d019      	beq.n	80067d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80067b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80067bc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80067c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e6      	bne.n	800679c <UART_Start_Receive_IT+0x110>
 80067ce:	e018      	b.n	8006802 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	613b      	str	r3, [r7, #16]
   return(result);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f043 0320 	orr.w	r3, r3, #32
 80067e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067ee:	623b      	str	r3, [r7, #32]
 80067f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	69f9      	ldr	r1, [r7, #28]
 80067f4:	6a3a      	ldr	r2, [r7, #32]
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e6      	bne.n	80067d0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	375c      	adds	r7, #92	@ 0x5c
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	08006c7f 	.word	0x08006c7f
 8006814:	08006ad7 	.word	0x08006ad7

08006818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006818:	b480      	push	{r7}
 800681a:	b095      	sub	sp, #84	@ 0x54
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800683e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006840:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006844:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e6      	bne.n	8006820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	61fb      	str	r3, [r7, #28]
   return(result);
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3308      	adds	r3, #8
 8006870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006874:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006878:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e5      	bne.n	8006852 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800688a:	2b01      	cmp	r3, #1
 800688c:	d118      	bne.n	80068c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	60bb      	str	r3, [r7, #8]
   return(result);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f023 0310 	bic.w	r3, r3, #16
 80068a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6979      	ldr	r1, [r7, #20]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e6      	bne.n	800688e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068d4:	bf00      	nop
 80068d6:	3754      	adds	r7, #84	@ 0x54
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f7ff fa4c 	bl	8005d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b08f      	sub	sp, #60	@ 0x3c
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006918:	2b21      	cmp	r3, #33	@ 0x21
 800691a:	d14c      	bne.n	80069b6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d132      	bne.n	800698e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	61fb      	str	r3, [r7, #28]
   return(result);
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800693c:	637b      	str	r3, [r7, #52]	@ 0x34
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006946:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006948:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800694c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	60bb      	str	r3, [r7, #8]
   return(result);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800696e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	6979      	ldr	r1, [r7, #20]
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	613b      	str	r3, [r7, #16]
   return(result);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e6      	bne.n	800695a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800698c:	e013      	b.n	80069b6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006992:	781a      	ldrb	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80069b6:	bf00      	nop
 80069b8:	373c      	adds	r7, #60	@ 0x3c
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b091      	sub	sp, #68	@ 0x44
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069ce:	2b21      	cmp	r3, #33	@ 0x21
 80069d0:	d151      	bne.n	8006a76 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d132      	bne.n	8006a44 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	623b      	str	r3, [r7, #32]
   return(result);
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80069fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e6      	bne.n	80069de <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	69b9      	ldr	r1, [r7, #24]
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e6      	bne.n	8006a10 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006a42:	e018      	b.n	8006a76 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a58:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a5e:	1c9a      	adds	r2, r3, #2
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8006a76:	bf00      	nop
 8006a78:	3744      	adds	r7, #68	@ 0x44
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b088      	sub	sp, #32
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a9e:	61fb      	str	r3, [r7, #28]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6979      	ldr	r1, [r7, #20]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7f9 fd35 	bl	8000538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ace:	bf00      	nop
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b09c      	sub	sp, #112	@ 0x70
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ae4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aee:	2b22      	cmp	r3, #34	@ 0x22
 8006af0:	f040 80b9 	bne.w	8006c66 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006afe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b02:	b2d9      	uxtb	r1, r3
 8006b04:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0e:	400a      	ands	r2, r1
 8006b10:	b2d2      	uxtb	r2, r2
 8006b12:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f040 809c 	bne.w	8006c76 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b5e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e6      	bne.n	8006b3e <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3308      	adds	r3, #8
 8006b76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b82:	f023 0301 	bic.w	r3, r3, #1
 8006b86:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b90:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b92:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e5      	bne.n	8006b70 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d018      	beq.n	8006bf8 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bda:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006be6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e6      	bne.n	8006bc6 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d12e      	bne.n	8006c5e <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0310 	bic.w	r3, r3, #16
 8006c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	69b9      	ldr	r1, [r7, #24]
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	617b      	str	r3, [r7, #20]
   return(result);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e6      	bne.n	8006c06 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f003 0310 	and.w	r3, r3, #16
 8006c42:	2b10      	cmp	r3, #16
 8006c44:	d103      	bne.n	8006c4e <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2210      	movs	r2, #16
 8006c4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7f9 fc4e 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c5c:	e00b      	b.n	8006c76 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7ff f892 	bl	8005d88 <HAL_UART_RxCpltCallback>
}
 8006c64:	e007      	b.n	8006c76 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	699a      	ldr	r2, [r3, #24]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0208 	orr.w	r2, r2, #8
 8006c74:	619a      	str	r2, [r3, #24]
}
 8006c76:	bf00      	nop
 8006c78:	3770      	adds	r7, #112	@ 0x70
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b09c      	sub	sp, #112	@ 0x70
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c8c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c96:	2b22      	cmp	r3, #34	@ 0x22
 8006c98:	f040 80b9 	bne.w	8006e0e <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006caa:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cac:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006cb0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006cba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc0:	1c9a      	adds	r2, r3, #2
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f040 809c 	bne.w	8006e1e <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d04:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d06:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d0c:	e841 2300 	strex	r3, r2, [r1]
 8006d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1e6      	bne.n	8006ce6 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3308      	adds	r3, #8
 8006d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3308      	adds	r3, #8
 8006d36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d38:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e5      	bne.n	8006d18 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d018      	beq.n	8006da0 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	e853 3f00 	ldrex	r3, [r3]
 8006d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d8e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e6      	bne.n	8006d6e <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d12e      	bne.n	8006e06 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f023 0310 	bic.w	r3, r3, #16
 8006dc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6979      	ldr	r1, [r7, #20]
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e6      	bne.n	8006dae <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b10      	cmp	r3, #16
 8006dec:	d103      	bne.n	8006df6 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2210      	movs	r2, #16
 8006df4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7f9 fb7a 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e04:	e00b      	b.n	8006e1e <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fe ffbe 	bl	8005d88 <HAL_UART_RxCpltCallback>
}
 8006e0c:	e007      	b.n	8006e1e <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699a      	ldr	r2, [r3, #24]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0208 	orr.w	r2, r2, #8
 8006e1c:	619a      	str	r2, [r3, #24]
}
 8006e1e:	bf00      	nop
 8006e20:	3770      	adds	r7, #112	@ 0x70
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b08c      	sub	sp, #48	@ 0x30
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	4613      	mov	r3, r2
 8006e32:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d13b      	bne.n	8006ebc <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8006e4a:	88fb      	ldrh	r3, [r7, #6]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e034      	b.n	8006ebe <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	461a      	mov	r2, r3
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f7ff fc10 	bl	800668c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d11d      	bne.n	8006eb0 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2210      	movs	r2, #16
 8006e7a:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	617b      	str	r3, [r7, #20]
   return(result);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f043 0310 	orr.w	r3, r3, #16
 8006e90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e9c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6a39      	ldr	r1, [r7, #32]
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e6      	bne.n	8006e7c <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8006eae:	e002      	b.n	8006eb6 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8006eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006eba:	e000      	b.n	8006ebe <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8006ebc:	2302      	movs	r3, #2
  }
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3730      	adds	r7, #48	@ 0x30
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <memcmp>:
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	3901      	subs	r1, #1
 8006eca:	4402      	add	r2, r0
 8006ecc:	4290      	cmp	r0, r2
 8006ece:	d101      	bne.n	8006ed4 <memcmp+0xe>
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e005      	b.n	8006ee0 <memcmp+0x1a>
 8006ed4:	7803      	ldrb	r3, [r0, #0]
 8006ed6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006eda:	42a3      	cmp	r3, r4
 8006edc:	d001      	beq.n	8006ee2 <memcmp+0x1c>
 8006ede:	1b18      	subs	r0, r3, r4
 8006ee0:	bd10      	pop	{r4, pc}
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	e7f2      	b.n	8006ecc <memcmp+0x6>

08006ee6 <memset>:
 8006ee6:	4402      	add	r2, r0
 8006ee8:	4603      	mov	r3, r0
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d100      	bne.n	8006ef0 <memset+0xa>
 8006eee:	4770      	bx	lr
 8006ef0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef4:	e7f9      	b.n	8006eea <memset+0x4>
	...

08006ef8 <__libc_init_array>:
 8006ef8:	b570      	push	{r4, r5, r6, lr}
 8006efa:	4d0d      	ldr	r5, [pc, #52]	@ (8006f30 <__libc_init_array+0x38>)
 8006efc:	4c0d      	ldr	r4, [pc, #52]	@ (8006f34 <__libc_init_array+0x3c>)
 8006efe:	1b64      	subs	r4, r4, r5
 8006f00:	10a4      	asrs	r4, r4, #2
 8006f02:	2600      	movs	r6, #0
 8006f04:	42a6      	cmp	r6, r4
 8006f06:	d109      	bne.n	8006f1c <__libc_init_array+0x24>
 8006f08:	4d0b      	ldr	r5, [pc, #44]	@ (8006f38 <__libc_init_array+0x40>)
 8006f0a:	4c0c      	ldr	r4, [pc, #48]	@ (8006f3c <__libc_init_array+0x44>)
 8006f0c:	f000 f826 	bl	8006f5c <_init>
 8006f10:	1b64      	subs	r4, r4, r5
 8006f12:	10a4      	asrs	r4, r4, #2
 8006f14:	2600      	movs	r6, #0
 8006f16:	42a6      	cmp	r6, r4
 8006f18:	d105      	bne.n	8006f26 <__libc_init_array+0x2e>
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f20:	4798      	blx	r3
 8006f22:	3601      	adds	r6, #1
 8006f24:	e7ee      	b.n	8006f04 <__libc_init_array+0xc>
 8006f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2a:	4798      	blx	r3
 8006f2c:	3601      	adds	r6, #1
 8006f2e:	e7f2      	b.n	8006f16 <__libc_init_array+0x1e>
 8006f30:	08008204 	.word	0x08008204
 8006f34:	08008204 	.word	0x08008204
 8006f38:	08008204 	.word	0x08008204
 8006f3c:	08008208 	.word	0x08008208

08006f40 <memcpy>:
 8006f40:	440a      	add	r2, r1
 8006f42:	4291      	cmp	r1, r2
 8006f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f48:	d100      	bne.n	8006f4c <memcpy+0xc>
 8006f4a:	4770      	bx	lr
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f56:	4291      	cmp	r1, r2
 8006f58:	d1f9      	bne.n	8006f4e <memcpy+0xe>
 8006f5a:	bd10      	pop	{r4, pc}

08006f5c <_init>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	bf00      	nop
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr

08006f68 <_fini>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr


betafpv_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a0  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005268  08005268  00006268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005280  08005280  0000714c  2**0
                  CONTENTS
  4 .ARM          00000008  08005280  08005280  00006280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005288  08005288  0000714c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005288  08005288  00006288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800528c  0800528c  0000628c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005290  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  0800529c  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  0800533c  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000380  2000014c  080053dc  0000714c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200004cc  080053dc  000074cc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000714c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013778  00000000  00000000  0000717c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000261a  00000000  00000000  0001a8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fd0  00000000  00000000  0001cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c67  00000000  00000000  0001dee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e660  00000000  00000000  0001eb47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001701f  00000000  00000000  0004d1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016bc41  00000000  00000000  000641c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001cfe07  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000042d8  00000000  00000000  001cfe4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  001d4124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005250 	.word	0x08005250

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	08005250 	.word	0x08005250

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <HAL_UARTEx_RxEventCallback>:



#if MODE==2	//Read from UART live and send to terminal
	void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
	{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	807b      	strh	r3, [r7, #2]
		//RECEIVE AND PRINT TO TERMINAL
		if(huart==&huart2)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <HAL_UARTEx_RxEventCallback+0x28>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d104      	bne.n	8000516 <HAL_UARTEx_RxEventCallback+0x1e>
		{
			HAL_UART_Transmit_IT(&huart3, &rx_byte, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	4905      	ldr	r1, [pc, #20]	@ (8000524 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000510:	4805      	ldr	r0, [pc, #20]	@ (8000528 <HAL_UARTEx_RxEventCallback+0x30>)
 8000512:	f003 faf3 	bl	8003afc <HAL_UART_Transmit_IT>
		}

	}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000324 	.word	0x20000324
 8000524:	200004bc 	.word	0x200004bc
 8000528:	200003ac 	.word	0x200003ac

0800052c <HAL_UART_TxCpltCallback>:

	void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
	{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

		if(huart==&huart3)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <HAL_UART_TxCpltCallback+0x2c>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d108      	bne.n	800054e <HAL_UART_TxCpltCallback+0x22>
		{
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);				//DEBUG LIGHT
 800053c:	2101      	movs	r1, #1
 800053e:	4807      	ldr	r0, [pc, #28]	@ (800055c <HAL_UART_TxCpltCallback+0x30>)
 8000540:	f001 fd07 	bl	8001f52 <HAL_GPIO_TogglePin>
			HAL_UARTEx_ReceiveToIdle_IT(&huart2, &rx_byte, 1);		//KEEP READING
 8000544:	2201      	movs	r2, #1
 8000546:	4906      	ldr	r1, [pc, #24]	@ (8000560 <HAL_UART_TxCpltCallback+0x34>)
 8000548:	4806      	ldr	r0, [pc, #24]	@ (8000564 <HAL_UART_TxCpltCallback+0x38>)
 800054a:	f004 fe04 	bl	8005156 <HAL_UARTEx_ReceiveToIdle_IT>

		}
	}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200003ac 	.word	0x200003ac
 800055c:	40020400 	.word	0x40020400
 8000560:	200004bc 	.word	0x200004bc
 8000564:	20000324 	.word	0x20000324

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fdb9 	bl	80010e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f82c 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f9f0 	bl	8000958 <MX_GPIO_Init>
  MX_ETH_Init();
 8000578:	f000 f890 	bl	800069c <MX_ETH_Init>
  MX_USART3_UART_Init();
 800057c:	f000 f98c 	bl	8000898 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000580:	f000 f92a 	bl	80007d8 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000584:	f000 f8d8 	bl	8000738 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f956 	bl	8000838 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800058c:	f000 f9b4 	bl	80008f8 <MX_USART6_UART_Init>


#if MODE==2
  //HAL_UART_Receive_IT(&huart2, &rx_byte, 1);			//For normal mode

  HAL_HalfDuplex_Init(&huart2);
 8000590:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <main+0x5c>)
 8000592:	f003 fa5d 	bl	8003a50 <HAL_HalfDuplex_Init>
  HAL_HalfDuplex_EnableReceiver(&huart2);
 8000596:	480b      	ldr	r0, [pc, #44]	@ (80005c4 <main+0x5c>)
 8000598:	f003 fdf4 	bl	8004184 <HAL_HalfDuplex_EnableReceiver>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, &rx_byte, 1);  	//for half-duplex mode
 800059c:	2201      	movs	r2, #1
 800059e:	490a      	ldr	r1, [pc, #40]	@ (80005c8 <main+0x60>)
 80005a0:	4808      	ldr	r0, [pc, #32]	@ (80005c4 <main+0x5c>)
 80005a2:	f004 fdd8 	bl	8005156 <HAL_UARTEx_ReceiveToIdle_IT>

  //uint8_t x=0;
  //encode_mavlink_cmd(&x);

#if MODE==2
  HAL_HalfDuplex_Init(&huart2);
 80005a6:	4807      	ldr	r0, [pc, #28]	@ (80005c4 <main+0x5c>)
 80005a8:	f003 fa52 	bl	8003a50 <HAL_HalfDuplex_Init>
  HAL_HalfDuplex_EnableReceiver(&huart2);
 80005ac:	4805      	ldr	r0, [pc, #20]	@ (80005c4 <main+0x5c>)
 80005ae:	f003 fde9 	bl	8004184 <HAL_HalfDuplex_EnableReceiver>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, &rx_byte, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	4904      	ldr	r1, [pc, #16]	@ (80005c8 <main+0x60>)
 80005b6:	4803      	ldr	r0, [pc, #12]	@ (80005c4 <main+0x5c>)
 80005b8:	f004 fdcd 	bl	8005156 <HAL_UARTEx_ReceiveToIdle_IT>
//		decode_mavlink_mssg(&bt, &mav_rx_msg);




		HAL_Delay(10);
 80005bc:	200a      	movs	r0, #10
 80005be:	f000 fded 	bl	800119c <HAL_Delay>
 80005c2:	e7fb      	b.n	80005bc <main+0x54>
 80005c4:	20000324 	.word	0x20000324
 80005c8:	200004bc 	.word	0x200004bc

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fe0b 	bl	80051f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f0:	f001 fcca 	bl	8001f88 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	4b27      	ldr	r3, [pc, #156]	@ (8000694 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a26      	ldr	r2, [pc, #152]	@ (8000694 <SystemClock_Config+0xc8>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <SystemClock_Config+0xc8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000614:	4a20      	ldr	r2, [pc, #128]	@ (8000698 <SystemClock_Config+0xcc>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800062c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000640:	2348      	movs	r3, #72	@ 0x48
 8000642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000648:	2303      	movs	r3, #3
 800064a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fca9 	bl	8001fa8 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 fa4e 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2102      	movs	r1, #2
 800067c:	4618      	mov	r0, r3
 800067e:	f001 ff37 	bl	80024f0 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000688:	f000 fa38 	bl	8000afc <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	@ 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <MX_ETH_Init+0x84>)
 80006a2:	4a20      	ldr	r2, [pc, #128]	@ (8000724 <MX_ETH_Init+0x88>)
 80006a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006a6:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <MX_ETH_Init+0x8c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <MX_ETH_Init+0x8c>)
 80006ae:	2280      	movs	r2, #128	@ 0x80
 80006b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <MX_ETH_Init+0x8c>)
 80006b4:	22e1      	movs	r2, #225	@ 0xe1
 80006b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_ETH_Init+0x8c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006be:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_ETH_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_ETH_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ca:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <MX_ETH_Init+0x84>)
 80006cc:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <MX_ETH_Init+0x8c>)
 80006ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MX_ETH_Init+0x84>)
 80006d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_ETH_Init+0x84>)
 80006da:	4a14      	ldr	r2, [pc, #80]	@ (800072c <MX_ETH_Init+0x90>)
 80006dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_ETH_Init+0x84>)
 80006e0:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <MX_ETH_Init+0x94>)
 80006e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_ETH_Init+0x84>)
 80006e6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006ec:	480c      	ldr	r0, [pc, #48]	@ (8000720 <MX_ETH_Init+0x84>)
 80006ee:	f000 ff1d 	bl	800152c <HAL_ETH_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006f8:	f000 fa00 	bl	8000afc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006fc:	2238      	movs	r2, #56	@ 0x38
 80006fe:	2100      	movs	r1, #0
 8000700:	480c      	ldr	r0, [pc, #48]	@ (8000734 <MX_ETH_Init+0x98>)
 8000702:	f004 fd78 	bl	80051f6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <MX_ETH_Init+0x98>)
 8000708:	2221      	movs	r2, #33	@ 0x21
 800070a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_ETH_Init+0x98>)
 800070e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000712:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <MX_ETH_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200001a0 	.word	0x200001a0
 8000724:	40028000 	.word	0x40028000
 8000728:	200004c0 	.word	0x200004c0
 800072c:	200000ac 	.word	0x200000ac
 8000730:	2000000c 	.word	0x2000000c
 8000734:	20000168 	.word	0x20000168

08000738 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000756:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <MX_TIM4_Init+0x98>)
 8000758:	4a1e      	ldr	r2, [pc, #120]	@ (80007d4 <MX_TIM4_Init+0x9c>)
 800075a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 800075c:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_TIM4_Init+0x98>)
 800075e:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000762:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_TIM4_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000-1;
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_TIM4_Init+0x98>)
 800076c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000770:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_TIM4_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <MX_TIM4_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800077e:	4814      	ldr	r0, [pc, #80]	@ (80007d0 <MX_TIM4_Init+0x98>)
 8000780:	f002 fccc 	bl	800311c <HAL_TIM_Base_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800078a:	f000 f9b7 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000792:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_TIM4_Init+0x98>)
 800079c:	f002 fe1c 	bl	80033d8 <HAL_TIM_ConfigClockSource>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80007a6:	f000 f9a9 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	@ (80007d0 <MX_TIM4_Init+0x98>)
 80007b8:	f003 f850 	bl	800385c <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80007c2:	f000 f99b 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000250 	.word	0x20000250
 80007d4:	40000800 	.word	0x40000800

080007d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	@ (8000834 <MX_USART1_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007e4:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80007e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007fe:	2208      	movs	r2, #8
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 800081c:	f003 f918 	bl	8003a50 <HAL_HalfDuplex_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 f969 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000029c 	.word	0x2000029c
 8000834:	40011000 	.word	0x40011000

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	@ (8000894 <MX_USART2_UART_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000844:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 800087c:	f003 f8e8 	bl	8003a50 <HAL_HalfDuplex_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 f939 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000324 	.word	0x20000324
 8000894:	40004400 	.word	0x40004400

08000898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	@ (80008f4 <MX_USART3_UART_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008a2:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_USART3_UART_Init+0x58>)
 80008dc:	f003 f86a 	bl	80039b4 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008e6:	f000 f909 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200003ac 	.word	0x200003ac
 80008f4:	40004800 	.word	0x40004800

080008f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USART6_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	@ (8000954 <MX_USART6_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_USART6_UART_Init+0x58>)
 8000904:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000908:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART6_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_USART6_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART6_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART6_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART6_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART6_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART6_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART6_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USART6_UART_Init+0x58>)
 800093c:	f003 f83a 	bl	80039b4 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f8d9 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000434 	.word	0x20000434
 8000954:	40011400 	.word	0x40011400

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	@ 0x30
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a5d      	ldr	r2, [pc, #372]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	4b58      	ldr	r3, [pc, #352]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a57      	ldr	r2, [pc, #348]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b55      	ldr	r3, [pc, #340]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b52      	ldr	r3, [pc, #328]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a51      	ldr	r2, [pc, #324]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b4f      	ldr	r3, [pc, #316]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a4b      	ldr	r2, [pc, #300]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b49      	ldr	r3, [pc, #292]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	4b46      	ldr	r3, [pc, #280]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a45      	ldr	r2, [pc, #276]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b43      	ldr	r3, [pc, #268]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e6:	4b40      	ldr	r3, [pc, #256]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a3f      	ldr	r2, [pc, #252]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae8 <MX_GPIO_Init+0x190>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a04:	4839      	ldr	r0, [pc, #228]	@ (8000aec <MX_GPIO_Init+0x194>)
 8000a06:	f001 fa8b 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2140      	movs	r1, #64	@ 0x40
 8000a0e:	4838      	ldr	r0, [pc, #224]	@ (8000af0 <MX_GPIO_Init+0x198>)
 8000a10:	f001 fa86 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4832      	ldr	r0, [pc, #200]	@ (8000af4 <MX_GPIO_Init+0x19c>)
 8000a2c:	f001 f8cc 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a30:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4828      	ldr	r0, [pc, #160]	@ (8000aec <MX_GPIO_Init+0x194>)
 8000a4a:	f001 f8bd 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a4e:	2340      	movs	r3, #64	@ 0x40
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4822      	ldr	r0, [pc, #136]	@ (8000af0 <MX_GPIO_Init+0x198>)
 8000a66:	f001 f8af 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a6a:	2380      	movs	r3, #128	@ 0x80
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481c      	ldr	r0, [pc, #112]	@ (8000af0 <MX_GPIO_Init+0x198>)
 8000a7e:	f001 f8a3 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8000a82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a94:	230a      	movs	r3, #10
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4816      	ldr	r0, [pc, #88]	@ (8000af8 <MX_GPIO_Init+0x1a0>)
 8000aa0:	f001 f892 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <MX_GPIO_Init+0x194>)
 8000aba:	f001 f885 	bl	8001bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000abe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac4:	2312      	movs	r3, #18
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_GPIO_Init+0x194>)
 8000adc:	f001 f874 	bl	8001bc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3730      	adds	r7, #48	@ 0x30
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020400 	.word	0x40020400
 8000af0:	40021800 	.word	0x40021800
 8000af4:	40020800 	.word	0x40020800
 8000af8:	40020000 	.word	0x40020000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a0e      	ldr	r2, [pc, #56]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	4a08      	ldr	r2, [pc, #32]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_MspInit+0x44>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	@ 0x38
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a4e      	ldr	r2, [pc, #312]	@ (8000ca8 <HAL_ETH_MspInit+0x158>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	f040 8096 	bne.w	8000ca0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b74:	4b4d      	ldr	r3, [pc, #308]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	4a4c      	ldr	r2, [pc, #304]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000b7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b80:	4b4a      	ldr	r3, [pc, #296]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b88:	623b      	str	r3, [r7, #32]
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
 8000b8c:	4b47      	ldr	r3, [pc, #284]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	4a46      	ldr	r2, [pc, #280]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000b92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b98:	4b44      	ldr	r3, [pc, #272]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	4a40      	ldr	r2, [pc, #256]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000baa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000bb8:	61bb      	str	r3, [r7, #24]
 8000bba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc8:	4b38      	ldr	r3, [pc, #224]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b35      	ldr	r3, [pc, #212]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	4a34      	ldr	r2, [pc, #208]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be0:	4b32      	ldr	r3, [pc, #200]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bec:	4b2f      	ldr	r3, [pc, #188]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c08:	4a28      	ldr	r2, [pc, #160]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c10:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <HAL_ETH_MspInit+0x15c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c1c:	2332      	movs	r3, #50	@ 0x32
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2c:	230b      	movs	r3, #11
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	481e      	ldr	r0, [pc, #120]	@ (8000cb0 <HAL_ETH_MspInit+0x160>)
 8000c38:	f000 ffc6 	bl	8001bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c3c:	2386      	movs	r3, #134	@ 0x86
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4817      	ldr	r0, [pc, #92]	@ (8000cb4 <HAL_ETH_MspInit+0x164>)
 8000c58:	f000 ffb6 	bl	8001bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	480f      	ldr	r0, [pc, #60]	@ (8000cb8 <HAL_ETH_MspInit+0x168>)
 8000c7a:	f000 ffa5 	bl	8001bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c7e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c90:	230b      	movs	r3, #11
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4808      	ldr	r0, [pc, #32]	@ (8000cbc <HAL_ETH_MspInit+0x16c>)
 8000c9c:	f000 ff94 	bl	8001bc8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ca0:	bf00      	nop
 8000ca2:	3738      	adds	r7, #56	@ 0x38
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40028000 	.word	0x40028000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40021800 	.word	0x40021800

08000cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <HAL_TIM_Base_MspInit+0x44>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d113      	bne.n	8000cfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_TIM_Base_MspInit+0x48>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	201e      	movs	r0, #30
 8000cf0:	f000 fb53 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cf4:	201e      	movs	r0, #30
 8000cf6:	f000 fb6c 	bl	80013d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40000800 	.word	0x40000800
 8000d08:	40023800 	.word	0x40023800

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0b0      	sub	sp, #192	@ 0xc0
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d28:	2284      	movs	r2, #132	@ 0x84
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 fa62 	bl	80051f6 <memset>
  if(huart->Instance==USART1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a94      	ldr	r2, [pc, #592]	@ (8000f88 <HAL_UART_MspInit+0x27c>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d143      	bne.n	8000dc4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d3c:	2340      	movs	r3, #64	@ 0x40
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d40:	2300      	movs	r3, #0
 8000d42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 fdf7 	bl	800293c <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff fed2 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d58:	4b8c      	ldr	r3, [pc, #560]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5c:	4a8b      	ldr	r2, [pc, #556]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d64:	4b89      	ldr	r3, [pc, #548]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	4b86      	ldr	r3, [pc, #536]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d74:	4a85      	ldr	r2, [pc, #532]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7c:	4b83      	ldr	r3, [pc, #524]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	623b      	str	r3, [r7, #32]
 8000d86:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d88:	2340      	movs	r3, #64	@ 0x40
 8000d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8e:	2312      	movs	r3, #18
 8000d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da0:	2307      	movs	r3, #7
 8000da2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000daa:	4619      	mov	r1, r3
 8000dac:	4878      	ldr	r0, [pc, #480]	@ (8000f90 <HAL_UART_MspInit+0x284>)
 8000dae:	f000 ff0b 	bl	8001bc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2025      	movs	r0, #37	@ 0x25
 8000db8:	f000 faef 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dbc:	2025      	movs	r0, #37	@ 0x25
 8000dbe:	f000 fb08 	bl	80013d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000dc2:	e0dd      	b.n	8000f80 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a72      	ldr	r2, [pc, #456]	@ (8000f94 <HAL_UART_MspInit+0x288>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d143      	bne.n	8000e56 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dce:	2380      	movs	r3, #128	@ 0x80
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fdae 	bl	800293c <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000de6:	f7ff fe89 	bl	8000afc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dea:	4b68      	ldr	r3, [pc, #416]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	4a67      	ldr	r2, [pc, #412]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df6:	4b65      	ldr	r3, [pc, #404]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e02:	4b62      	ldr	r3, [pc, #392]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a61      	ldr	r2, [pc, #388]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b5f      	ldr	r3, [pc, #380]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	61bb      	str	r3, [r7, #24]
 8000e18:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e1a:	2320      	movs	r3, #32
 8000e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e20:	2312      	movs	r3, #18
 8000e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e32:	2307      	movs	r3, #7
 8000e34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e38:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4856      	ldr	r0, [pc, #344]	@ (8000f98 <HAL_UART_MspInit+0x28c>)
 8000e40:	f000 fec2 	bl	8001bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2026      	movs	r0, #38	@ 0x26
 8000e4a:	f000 faa6 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e4e:	2026      	movs	r0, #38	@ 0x26
 8000e50:	f000 fabf 	bl	80013d2 <HAL_NVIC_EnableIRQ>
}
 8000e54:	e094      	b.n	8000f80 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a50      	ldr	r2, [pc, #320]	@ (8000f9c <HAL_UART_MspInit+0x290>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d145      	bne.n	8000eec <HAL_UART_MspInit+0x1e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fd64 	bl	800293c <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0x172>
      Error_Handler();
 8000e7a:	f7ff fe3f 	bl	8000afc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e7e:	4b43      	ldr	r3, [pc, #268]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	4a42      	ldr	r2, [pc, #264]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8a:	4b40      	ldr	r3, [pc, #256]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	4b3d      	ldr	r3, [pc, #244]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a3c      	ldr	r2, [pc, #240]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ece:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4830      	ldr	r0, [pc, #192]	@ (8000f98 <HAL_UART_MspInit+0x28c>)
 8000ed6:	f000 fe77 	bl	8001bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2027      	movs	r0, #39	@ 0x27
 8000ee0:	f000 fa5b 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ee4:	2027      	movs	r0, #39	@ 0x27
 8000ee6:	f000 fa74 	bl	80013d2 <HAL_NVIC_EnableIRQ>
}
 8000eea:	e049      	b.n	8000f80 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART6)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a2b      	ldr	r2, [pc, #172]	@ (8000fa0 <HAL_UART_MspInit+0x294>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d144      	bne.n	8000f80 <HAL_UART_MspInit+0x274>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000ef6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 fd18 	bl	800293c <HAL_RCCEx_PeriphCLKConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8000f12:	f7ff fdf3 	bl	8000afc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f16:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000f1c:	f043 0320 	orr.w	r3, r3, #32
 8000f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f003 0320 	and.w	r3, r3, #32
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a16      	ldr	r2, [pc, #88]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <HAL_UART_MspInit+0x280>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f46:	23c0      	movs	r3, #192	@ 0xc0
 8000f48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f64:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480e      	ldr	r0, [pc, #56]	@ (8000fa4 <HAL_UART_MspInit+0x298>)
 8000f6c:	f000 fe2c 	bl	8001bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2047      	movs	r0, #71	@ 0x47
 8000f76:	f000 fa10 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f7a:	2047      	movs	r0, #71	@ 0x47
 8000f7c:	f000 fa29 	bl	80013d2 <HAL_NVIC_EnableIRQ>
}
 8000f80:	bf00      	nop
 8000f82:	37c0      	adds	r7, #192	@ 0xc0
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40004400 	.word	0x40004400
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40004800 	.word	0x40004800
 8000fa0:	40011400 	.word	0x40011400
 8000fa4:	40020800 	.word	0x40020800

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <MemManage_Handler+0x4>

08000fc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffe:	f000 f8ad 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <TIM4_IRQHandler+0x10>)
 800100e:	f002 f8dc 	bl	80031ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000250 	.word	0x20000250

0800101c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <USART1_IRQHandler+0x10>)
 8001022:	f002 fdc9 	bl	8003bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000029c 	.word	0x2000029c

08001030 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <USART2_IRQHandler+0x10>)
 8001036:	f002 fdbf 	bl	8003bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000324 	.word	0x20000324

08001044 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <USART3_IRQHandler+0x10>)
 800104a:	f002 fdb5 	bl	8003bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200003ac 	.word	0x200003ac

08001058 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800105c:	4802      	ldr	r0, [pc, #8]	@ (8001068 <USART6_IRQHandler+0x10>)
 800105e:	f002 fdab 	bl	8003bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000434 	.word	0x20000434

0800106c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <SystemInit+0x20>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001076:	4a05      	ldr	r2, [pc, #20]	@ (800108c <SystemInit+0x20>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <Reset_Handler>:
 8001090:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010c8 <LoopFillZerobss+0xe>
 8001094:	f7ff ffea 	bl	800106c <SystemInit>
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <LoopFillZerobss+0x12>)
 800109a:	490d      	ldr	r1, [pc, #52]	@ (80010d0 <LoopFillZerobss+0x16>)
 800109c:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <LoopFillZerobss+0x1a>)
 800109e:	2300      	movs	r3, #0
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:
 80010a2:	58d4      	ldr	r4, [r2, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:
 80010a8:	18c4      	adds	r4, r0, r3
 80010aa:	428c      	cmp	r4, r1
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <LoopFillZerobss+0x1e>)
 80010b0:	4c0a      	ldr	r4, [pc, #40]	@ (80010dc <LoopFillZerobss+0x22>)
 80010b2:	2300      	movs	r3, #0
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:
 80010ba:	42a2      	cmp	r2, r4
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>
 80010be:	f004 f8a3 	bl	8005208 <__libc_init_array>
 80010c2:	f7ff fa51 	bl	8000568 <main>
 80010c6:	4770      	bx	lr
 80010c8:	20050000 	.word	0x20050000
 80010cc:	20000000 	.word	0x20000000
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	08005290 	.word	0x08005290
 80010d8:	2000014c 	.word	0x2000014c
 80010dc:	200004cc 	.word	0x200004cc

080010e0 <ADC_IRQHandler>:
 80010e0:	e7fe      	b.n	80010e0 <ADC_IRQHandler>

080010e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e6:	2003      	movs	r0, #3
 80010e8:	f000 f94c 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ec:	2000      	movs	r0, #0
 80010ee:	f000 f805 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f2:	f7ff fd09 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f967 	bl	80013ee <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f92f 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	@ (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008
 8001180:	200004c8 	.word	0x200004c8

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200004c8 	.word	0x200004c8

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	bf00      	nop
 80011c4:	f7ff ffde 	bl	8001184 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	4313      	orrs	r3, r2
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00
 8001228:	05fa0000 	.word	0x05fa0000

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	@ (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	@ (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	@ 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff29 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff3e 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff8e 	bl	80012d8 <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff31 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffa2 	bl	8001340 <SysTick_Config>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b084      	sub	sp, #16
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001414:	f7ff feb6 	bl	8001184 <HAL_GetTick>
 8001418:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d008      	beq.n	8001438 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2280      	movs	r2, #128	@ 0x80
 800142a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e052      	b.n	80014de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0216 	bic.w	r2, r2, #22
 8001446:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001456:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <HAL_DMA_Abort+0x62>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0208 	bic.w	r2, r2, #8
 8001476:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0201 	bic.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001488:	e013      	b.n	80014b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800148a:	f7ff fe7b 	bl	8001184 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b05      	cmp	r3, #5
 8001496:	d90c      	bls.n	80014b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2220      	movs	r2, #32
 800149c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2203      	movs	r2, #3
 80014a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e015      	b.n	80014de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e4      	bne.n	800148a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c4:	223f      	movs	r2, #63	@ 0x3f
 80014c6:	409a      	lsls	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d004      	beq.n	8001504 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2280      	movs	r2, #128	@ 0x80
 80014fe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e00c      	b.n	800151e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2205      	movs	r2, #5
 8001508:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e086      	b.n	800164c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001544:	2b00      	cmp	r3, #0
 8001546:	d106      	bne.n	8001556 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2223      	movs	r2, #35	@ 0x23
 800154c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fafd 	bl	8000b50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4b3f      	ldr	r3, [pc, #252]	@ (8001654 <HAL_ETH_Init+0x128>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	4a3e      	ldr	r2, [pc, #248]	@ (8001654 <HAL_ETH_Init+0x128>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001560:	6453      	str	r3, [r2, #68]	@ 0x44
 8001562:	4b3c      	ldr	r3, [pc, #240]	@ (8001654 <HAL_ETH_Init+0x128>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800156e:	4b3a      	ldr	r3, [pc, #232]	@ (8001658 <HAL_ETH_Init+0x12c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a39      	ldr	r2, [pc, #228]	@ (8001658 <HAL_ETH_Init+0x12c>)
 8001574:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001578:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800157a:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <HAL_ETH_Init+0x12c>)
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	4935      	ldr	r1, [pc, #212]	@ (8001658 <HAL_ETH_Init+0x12c>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001588:	4b33      	ldr	r3, [pc, #204]	@ (8001658 <HAL_ETH_Init+0x12c>)
 800158a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a4:	f7ff fdee 	bl	8001184 <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015aa:	e011      	b.n	80015d0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015ac:	f7ff fdea 	bl	8001184 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015ba:	d909      	bls.n	80015d0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2204      	movs	r2, #4
 80015c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	22e0      	movs	r2, #224	@ 0xe0
 80015c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e03d      	b.n	800164c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1e4      	bne.n	80015ac <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f97a 	bl	80018dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fa25 	bl	8001a38 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fa7b 	bl	8001aea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	461a      	mov	r2, r3
 80015fa:	2100      	movs	r1, #0
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f9e3 	bl	80019c8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001610:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_ETH_Init+0x130>)
 8001620:	430b      	orrs	r3, r1
 8001622:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001636:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2210      	movs	r2, #16
 8001646:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	40013800 	.word	0x40013800
 800165c:	00020060 	.word	0x00020060

08001660 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4b53      	ldr	r3, [pc, #332]	@ (80017c4 <ETH_SetMACConfig+0x164>)
 8001676:	4013      	ands	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	7b9b      	ldrb	r3, [r3, #14]
 800167e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	7c12      	ldrb	r2, [r2, #16]
 8001684:	2a00      	cmp	r2, #0
 8001686:	d102      	bne.n	800168e <ETH_SetMACConfig+0x2e>
 8001688:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800168c:	e000      	b.n	8001690 <ETH_SetMACConfig+0x30>
 800168e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001690:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	7c52      	ldrb	r2, [r2, #17]
 8001696:	2a00      	cmp	r2, #0
 8001698:	d102      	bne.n	80016a0 <ETH_SetMACConfig+0x40>
 800169a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800169e:	e000      	b.n	80016a2 <ETH_SetMACConfig+0x42>
 80016a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	7fdb      	ldrb	r3, [r3, #31]
 80016ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80016b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	7f92      	ldrb	r2, [r2, #30]
 80016bc:	2a00      	cmp	r2, #0
 80016be:	d102      	bne.n	80016c6 <ETH_SetMACConfig+0x66>
 80016c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c4:	e000      	b.n	80016c8 <ETH_SetMACConfig+0x68>
 80016c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80016c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	7f1b      	ldrb	r3, [r3, #28]
 80016ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80016d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80016d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	791b      	ldrb	r3, [r3, #4]
 80016dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80016de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016e6:	2a00      	cmp	r2, #0
 80016e8:	d102      	bne.n	80016f0 <ETH_SetMACConfig+0x90>
 80016ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ee:	e000      	b.n	80016f2 <ETH_SetMACConfig+0x92>
 80016f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80016f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	7bdb      	ldrb	r3, [r3, #15]
 80016f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80016fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001700:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001708:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800170a:	4313      	orrs	r3, r2
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff fd3a 	bl	800119c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800173e:	4013      	ands	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001746:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800174e:	2a00      	cmp	r2, #0
 8001750:	d101      	bne.n	8001756 <ETH_SetMACConfig+0xf6>
 8001752:	2280      	movs	r2, #128	@ 0x80
 8001754:	e000      	b.n	8001758 <ETH_SetMACConfig+0xf8>
 8001756:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001758:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800175e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001766:	2a01      	cmp	r2, #1
 8001768:	d101      	bne.n	800176e <ETH_SetMACConfig+0x10e>
 800176a:	2208      	movs	r2, #8
 800176c:	e000      	b.n	8001770 <ETH_SetMACConfig+0x110>
 800176e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001770:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001778:	2a01      	cmp	r2, #1
 800177a:	d101      	bne.n	8001780 <ETH_SetMACConfig+0x120>
 800177c:	2204      	movs	r2, #4
 800177e:	e000      	b.n	8001782 <ETH_SetMACConfig+0x122>
 8001780:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001782:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800178a:	2a01      	cmp	r2, #1
 800178c:	d101      	bne.n	8001792 <ETH_SetMACConfig+0x132>
 800178e:	2202      	movs	r2, #2
 8001790:	e000      	b.n	8001794 <ETH_SetMACConfig+0x134>
 8001792:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001794:	4313      	orrs	r3, r2
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4313      	orrs	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff fcf5 	bl	800119c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	619a      	str	r2, [r3, #24]
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	fd20810f 	.word	0xfd20810f

080017c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4b3d      	ldr	r3, [pc, #244]	@ (80018d8 <ETH_SetDMAConfig+0x110>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	7b1b      	ldrb	r3, [r3, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <ETH_SetDMAConfig+0x2c>
 80017ee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017f2:	e000      	b.n	80017f6 <ETH_SetDMAConfig+0x2e>
 80017f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	7b5b      	ldrb	r3, [r3, #13]
 80017fa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80017fc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	7f52      	ldrb	r2, [r2, #29]
 8001802:	2a00      	cmp	r2, #0
 8001804:	d102      	bne.n	800180c <ETH_SetDMAConfig+0x44>
 8001806:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800180a:	e000      	b.n	800180e <ETH_SetDMAConfig+0x46>
 800180c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800180e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	7b9b      	ldrb	r3, [r3, #14]
 8001814:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001816:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800181c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	7f1b      	ldrb	r3, [r3, #28]
 8001822:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001824:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	7f9b      	ldrb	r3, [r3, #30]
 800182a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800182c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001832:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800183a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800183c:	4313      	orrs	r3, r2
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800184c:	461a      	mov	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800185e:	2001      	movs	r0, #1
 8001860:	f7ff fc9c 	bl	800119c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800186c:	461a      	mov	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	791b      	ldrb	r3, [r3, #4]
 8001876:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800187c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001882:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001888:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001890:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001892:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800189a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fc6d 	bl	800119c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	f8de3f23 	.word	0xf8de3f23

080018dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0a6      	sub	sp, #152	@ 0x98
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800190c:	2301      	movs	r3, #1
 800190e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800191e:	2300      	movs	r3, #0
 8001920:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001928:	2300      	movs	r3, #0
 800192a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001944:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001948:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800194a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800194e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001956:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fe7f 	bl	8001660 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001962:	2301      	movs	r3, #1
 8001964:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001966:	2301      	movs	r3, #1
 8001968:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800196a:	2301      	movs	r3, #1
 800196c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001970:	2301      	movs	r3, #1
 8001972:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800198e:	2301      	movs	r3, #1
 8001990:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001992:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001996:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001998:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800199c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800199e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019a2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	4619      	mov	r1, r3
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff05 	bl	80017c8 <ETH_SetDMAConfig>
}
 80019be:	bf00      	nop
 80019c0:	3798      	adds	r7, #152	@ 0x98
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3305      	adds	r3, #5
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	3204      	adds	r2, #4
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <ETH_MACAddressConfig+0x68>)
 80019ea:	4413      	add	r3, r2
 80019ec:	461a      	mov	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3303      	adds	r3, #3
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	061a      	lsls	r2, r3, #24
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3302      	adds	r3, #2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3301      	adds	r3, #1
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	7812      	ldrb	r2, [r2, #0]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <ETH_MACAddressConfig+0x6c>)
 8001a1a:	4413      	add	r3, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	6013      	str	r3, [r2, #0]
}
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40028040 	.word	0x40028040
 8001a34:	40028044 	.word	0x40028044

08001a38 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e03e      	b.n	8001ac4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68d9      	ldr	r1, [r3, #12]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2200      	movs	r2, #0
 8001a62:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	3206      	adds	r2, #6
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d80c      	bhi.n	8001aa8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68d9      	ldr	r1, [r3, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	e004      	b.n	8001ab2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	461a      	mov	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d9bd      	bls.n	8001a46 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001adc:	611a      	str	r2, [r3, #16]
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	e048      	b.n	8001b8a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6919      	ldr	r1, [r3, #16]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001b34:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	3212      	adds	r2, #18
 8001b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d80c      	bhi.n	8001b7a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6919      	ldr	r1, [r3, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	e004      	b.n	8001b84 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3301      	adds	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d9b3      	bls.n	8001af8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bba:	60da      	str	r2, [r3, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e175      	b.n	8001ed4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001be8:	2201      	movs	r2, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	f040 8164 	bne.w	8001ece <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d005      	beq.n	8001c1e <HAL_GPIO_Init+0x56>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d130      	bne.n	8001c80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c54:	2201      	movs	r2, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 0201 	and.w	r2, r3, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d017      	beq.n	8001cbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d123      	bne.n	8001d10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	08da      	lsrs	r2, r3, #3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3208      	adds	r2, #8
 8001cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	08da      	lsrs	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3208      	adds	r2, #8
 8001d0a:	69b9      	ldr	r1, [r7, #24]
 8001d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0203 	and.w	r2, r3, #3
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80be 	beq.w	8001ece <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	4b66      	ldr	r3, [pc, #408]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	4a65      	ldr	r2, [pc, #404]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5e:	4b63      	ldr	r3, [pc, #396]	@ (8001eec <HAL_GPIO_Init+0x324>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d6a:	4a61      	ldr	r2, [pc, #388]	@ (8001ef0 <HAL_GPIO_Init+0x328>)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a58      	ldr	r2, [pc, #352]	@ (8001ef4 <HAL_GPIO_Init+0x32c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d037      	beq.n	8001e06 <HAL_GPIO_Init+0x23e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a57      	ldr	r2, [pc, #348]	@ (8001ef8 <HAL_GPIO_Init+0x330>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d031      	beq.n	8001e02 <HAL_GPIO_Init+0x23a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a56      	ldr	r2, [pc, #344]	@ (8001efc <HAL_GPIO_Init+0x334>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d02b      	beq.n	8001dfe <HAL_GPIO_Init+0x236>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a55      	ldr	r2, [pc, #340]	@ (8001f00 <HAL_GPIO_Init+0x338>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d025      	beq.n	8001dfa <HAL_GPIO_Init+0x232>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a54      	ldr	r2, [pc, #336]	@ (8001f04 <HAL_GPIO_Init+0x33c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01f      	beq.n	8001df6 <HAL_GPIO_Init+0x22e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a53      	ldr	r2, [pc, #332]	@ (8001f08 <HAL_GPIO_Init+0x340>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_Init+0x22a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	@ (8001f0c <HAL_GPIO_Init+0x344>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_Init+0x226>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a51      	ldr	r2, [pc, #324]	@ (8001f10 <HAL_GPIO_Init+0x348>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_Init+0x222>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a50      	ldr	r2, [pc, #320]	@ (8001f14 <HAL_GPIO_Init+0x34c>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_Init+0x21e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4f      	ldr	r2, [pc, #316]	@ (8001f18 <HAL_GPIO_Init+0x350>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_Init+0x21a>
 8001dde:	2309      	movs	r3, #9
 8001de0:	e012      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001de2:	230a      	movs	r3, #10
 8001de4:	e010      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001de6:	2308      	movs	r3, #8
 8001de8:	e00e      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001dea:	2307      	movs	r3, #7
 8001dec:	e00c      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001dee:	2306      	movs	r3, #6
 8001df0:	e00a      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001df2:	2305      	movs	r3, #5
 8001df4:	e008      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001df6:	2304      	movs	r3, #4
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e004      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e002      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_GPIO_Init+0x240>
 8001e06:	2300      	movs	r3, #0
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	f002 0203 	and.w	r2, r2, #3
 8001e0e:	0092      	lsls	r2, r2, #2
 8001e10:	4093      	lsls	r3, r2
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e18:	4935      	ldr	r1, [pc, #212]	@ (8001ef0 <HAL_GPIO_Init+0x328>)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e26:	4b3d      	ldr	r3, [pc, #244]	@ (8001f1c <HAL_GPIO_Init+0x354>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4a:	4a34      	ldr	r2, [pc, #208]	@ (8001f1c <HAL_GPIO_Init+0x354>)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e50:	4b32      	ldr	r3, [pc, #200]	@ (8001f1c <HAL_GPIO_Init+0x354>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e74:	4a29      	ldr	r2, [pc, #164]	@ (8001f1c <HAL_GPIO_Init+0x354>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7a:	4b28      	ldr	r3, [pc, #160]	@ (8001f1c <HAL_GPIO_Init+0x354>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f1c <HAL_GPIO_Init+0x354>)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <HAL_GPIO_Init+0x354>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec8:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <HAL_GPIO_Init+0x354>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2b0f      	cmp	r3, #15
 8001ed8:	f67f ae86 	bls.w	8001be8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3724      	adds	r7, #36	@ 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40013800 	.word	0x40013800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40020800 	.word	0x40020800
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40021400 	.word	0x40021400
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	40021c00 	.word	0x40021c00
 8001f14:	40022000 	.word	0x40022000
 8001f18:	40022400 	.word	0x40022400
 8001f1c:	40013c00 	.word	0x40013c00

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f3c:	e003      	b.n	8001f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	041a      	lsls	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	619a      	str	r2, [r3, #24]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f64:	887a      	ldrh	r2, [r7, #2]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	041a      	lsls	r2, r3, #16
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	400b      	ands	r3, r1
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40007000 	.word	0x40007000

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e291      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8087 	beq.w	80020da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fcc:	4b96      	ldr	r3, [pc, #600]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d00c      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd8:	4b93      	ldr	r3, [pc, #588]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d112      	bne.n	800200a <HAL_RCC_OscConfig+0x62>
 8001fe4:	4b90      	ldr	r3, [pc, #576]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ff0:	d10b      	bne.n	800200a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff2:	4b8d      	ldr	r3, [pc, #564]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d06c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x130>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d168      	bne.n	80020d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e26b      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x7a>
 8002014:	4b84      	ldr	r3, [pc, #528]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a83      	ldr	r2, [pc, #524]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	e02e      	b.n	8002080 <HAL_RCC_OscConfig+0xd8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x9c>
 800202a:	4b7f      	ldr	r3, [pc, #508]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a7e      	ldr	r2, [pc, #504]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b7c      	ldr	r3, [pc, #496]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a7b      	ldr	r2, [pc, #492]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800203c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e01d      	b.n	8002080 <HAL_RCC_OscConfig+0xd8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0xc0>
 800204e:	4b76      	ldr	r3, [pc, #472]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a75      	ldr	r2, [pc, #468]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b73      	ldr	r3, [pc, #460]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a72      	ldr	r2, [pc, #456]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e00b      	b.n	8002080 <HAL_RCC_OscConfig+0xd8>
 8002068:	4b6f      	ldr	r3, [pc, #444]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6e      	ldr	r2, [pc, #440]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800206e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b6c      	ldr	r3, [pc, #432]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a6b      	ldr	r2, [pc, #428]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800207a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800207e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f87c 	bl	8001184 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff f878 	bl	8001184 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	@ 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e21f      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	4b61      	ldr	r3, [pc, #388]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0xe8>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff f868 	bl	8001184 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff f864 	bl	8001184 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	@ 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e20b      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	4b57      	ldr	r3, [pc, #348]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x110>
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d069      	beq.n	80021ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e6:	4b50      	ldr	r3, [pc, #320]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d11c      	bne.n	8002138 <HAL_RCC_OscConfig+0x190>
 80020fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d116      	bne.n	8002138 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	4b47      	ldr	r3, [pc, #284]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_RCC_OscConfig+0x17a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e1df      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b41      	ldr	r3, [pc, #260]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	493d      	ldr	r1, [pc, #244]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	e040      	b.n	80021ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d023      	beq.n	8002188 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002140:	4b39      	ldr	r3, [pc, #228]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a38      	ldr	r2, [pc, #224]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff f81a 	bl	8001184 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002154:	f7ff f816 	bl	8001184 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e1bd      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	4b30      	ldr	r3, [pc, #192]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b2d      	ldr	r3, [pc, #180]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4929      	ldr	r1, [pc, #164]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
 8002186:	e018      	b.n	80021ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002188:	4b27      	ldr	r3, [pc, #156]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a26      	ldr	r2, [pc, #152]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe fff6 	bl	8001184 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7fe fff2 	bl	8001184 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e199      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d038      	beq.n	8002238 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d019      	beq.n	8002202 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ce:	4b16      	ldr	r3, [pc, #88]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021d2:	4a15      	ldr	r2, [pc, #84]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7fe ffd3 	bl	8001184 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e2:	f7fe ffcf 	bl	8001184 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e176      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 80021f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x23a>
 8002200:	e01a      	b.n	8002238 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002202:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002206:	4a08      	ldr	r2, [pc, #32]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7fe ffb9 	bl	8001184 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002216:	f7fe ffb5 	bl	8001184 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d903      	bls.n	800222c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e15c      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
 8002228:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	4b91      	ldr	r3, [pc, #580]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 800222e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1ee      	bne.n	8002216 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80a4 	beq.w	800238e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b8b      	ldr	r3, [pc, #556]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b88      	ldr	r3, [pc, #544]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	4a87      	ldr	r2, [pc, #540]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800225c:	6413      	str	r3, [r2, #64]	@ 0x40
 800225e:	4b85      	ldr	r3, [pc, #532]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226e:	4b82      	ldr	r3, [pc, #520]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800227a:	4b7f      	ldr	r3, [pc, #508]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7e      	ldr	r2, [pc, #504]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7fe ff7d 	bl	8001184 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7fe ff79 	bl	8001184 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	@ 0x64
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e120      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a0:	4b75      	ldr	r3, [pc, #468]	@ (8002478 <HAL_RCC_OscConfig+0x4d0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x31a>
 80022b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c0:	e02d      	b.n	800231e <HAL_RCC_OscConfig+0x376>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x33c>
 80022ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ce:	4a69      	ldr	r2, [pc, #420]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d6:	4b67      	ldr	r3, [pc, #412]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022da:	4a66      	ldr	r2, [pc, #408]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e2:	e01c      	b.n	800231e <HAL_RCC_OscConfig+0x376>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d10c      	bne.n	8002306 <HAL_RCC_OscConfig+0x35e>
 80022ec:	4b61      	ldr	r3, [pc, #388]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f0:	4a60      	ldr	r2, [pc, #384]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6713      	str	r3, [r2, #112]	@ 0x70
 8002304:	e00b      	b.n	800231e <HAL_RCC_OscConfig+0x376>
 8002306:	4b5b      	ldr	r3, [pc, #364]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230a:	4a5a      	ldr	r2, [pc, #360]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	6713      	str	r3, [r2, #112]	@ 0x70
 8002312:	4b58      	ldr	r3, [pc, #352]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002316:	4a57      	ldr	r2, [pc, #348]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d015      	beq.n	8002352 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002326:	f7fe ff2d 	bl	8001184 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7fe ff29 	bl	8001184 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0ce      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	4b4b      	ldr	r3, [pc, #300]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ee      	beq.n	800232e <HAL_RCC_OscConfig+0x386>
 8002350:	e014      	b.n	800237c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7fe ff17 	bl	8001184 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe ff13 	bl	8001184 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e0b8      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	4b40      	ldr	r3, [pc, #256]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1ee      	bne.n	800235a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002382:	4b3c      	ldr	r3, [pc, #240]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a3b      	ldr	r2, [pc, #236]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002388:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80a4 	beq.w	80024e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002398:	4b36      	ldr	r3, [pc, #216]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d06b      	beq.n	800247c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d149      	bne.n	8002440 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b31      	ldr	r3, [pc, #196]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a30      	ldr	r2, [pc, #192]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80023b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fee4 	bl	8001184 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe fee0 	bl	8001184 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e087      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b28      	ldr	r3, [pc, #160]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	4313      	orrs	r3, r2
 8002404:	4a1b      	ldr	r2, [pc, #108]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002406:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800240a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240c:	4b19      	ldr	r3, [pc, #100]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a18      	ldr	r2, [pc, #96]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe feb4 	bl	8001184 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002420:	f7fe feb0 	bl	8001184 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e057      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x478>
 800243e:	e04f      	b.n	80024e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0b      	ldr	r2, [pc, #44]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002446:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800244a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fe9a 	bl	8001184 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fe96 	bl	8001184 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e03d      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002466:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x4ac>
 8002472:	e035      	b.n	80024e0 <HAL_RCC_OscConfig+0x538>
 8002474:	40023800 	.word	0x40023800
 8002478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800247c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <HAL_RCC_OscConfig+0x544>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d028      	beq.n	80024dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d121      	bne.n	80024dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d11a      	bne.n	80024dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024ac:	4013      	ands	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d111      	bne.n	80024dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	3b01      	subs	r3, #1
 80024c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800

080024f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0d0      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002508:	4b6a      	ldr	r3, [pc, #424]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d910      	bls.n	8002538 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b67      	ldr	r3, [pc, #412]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 020f 	bic.w	r2, r3, #15
 800251e:	4965      	ldr	r1, [pc, #404]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b63      	ldr	r3, [pc, #396]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0b8      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002550:	4b59      	ldr	r3, [pc, #356]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a58      	ldr	r2, [pc, #352]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002556:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800255a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002568:	4b53      	ldr	r3, [pc, #332]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4a52      	ldr	r2, [pc, #328]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 800256e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002572:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002574:	4b50      	ldr	r3, [pc, #320]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	494d      	ldr	r1, [pc, #308]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d040      	beq.n	8002614 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b47      	ldr	r3, [pc, #284]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d115      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e07f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b2:	4b41      	ldr	r3, [pc, #260]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e073      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c2:	4b3d      	ldr	r3, [pc, #244]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06b      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	4b39      	ldr	r3, [pc, #228]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4936      	ldr	r1, [pc, #216]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025e4:	f7fe fdce 	bl	8001184 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7fe fdca 	bl	8001184 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e053      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	4b2d      	ldr	r3, [pc, #180]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 020c 	and.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	429a      	cmp	r2, r3
 8002612:	d1eb      	bne.n	80025ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002614:	4b27      	ldr	r3, [pc, #156]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d210      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b24      	ldr	r3, [pc, #144]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 020f 	bic.w	r2, r3, #15
 800262a:	4922      	ldr	r1, [pc, #136]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e032      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4916      	ldr	r1, [pc, #88]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800266e:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	490e      	ldr	r1, [pc, #56]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002682:	f000 f821 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002686:	4602      	mov	r2, r0
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	490a      	ldr	r1, [pc, #40]	@ (80026bc <HAL_RCC_ClockConfig+0x1cc>)
 8002694:	5ccb      	ldrb	r3, [r1, r3]
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	4a09      	ldr	r2, [pc, #36]	@ (80026c0 <HAL_RCC_ClockConfig+0x1d0>)
 800269c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800269e:	4b09      	ldr	r3, [pc, #36]	@ (80026c4 <HAL_RCC_ClockConfig+0x1d4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fd2a 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023c00 	.word	0x40023c00
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08005268 	.word	0x08005268
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026cc:	b094      	sub	sp, #80	@ 0x50
 80026ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80026d4:	2300      	movs	r3, #0
 80026d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026d8:	2300      	movs	r3, #0
 80026da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e0:	4b79      	ldr	r3, [pc, #484]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d00d      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x40>
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	f200 80e1 	bhi.w	80028b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x34>
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d003      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x3a>
 80026fa:	e0db      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026fc:	4b73      	ldr	r3, [pc, #460]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x204>)
 80026fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002700:	e0db      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002702:	4b73      	ldr	r3, [pc, #460]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002704:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002706:	e0d8      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002708:	4b6f      	ldr	r3, [pc, #444]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002710:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002712:	4b6d      	ldr	r3, [pc, #436]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d063      	beq.n	80027e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271e:	4b6a      	ldr	r3, [pc, #424]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	2200      	movs	r2, #0
 8002726:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002728:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800272a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002730:	633b      	str	r3, [r7, #48]	@ 0x30
 8002732:	2300      	movs	r3, #0
 8002734:	637b      	str	r3, [r7, #52]	@ 0x34
 8002736:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800273a:	4622      	mov	r2, r4
 800273c:	462b      	mov	r3, r5
 800273e:	f04f 0000 	mov.w	r0, #0
 8002742:	f04f 0100 	mov.w	r1, #0
 8002746:	0159      	lsls	r1, r3, #5
 8002748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800274c:	0150      	lsls	r0, r2, #5
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4621      	mov	r1, r4
 8002754:	1a51      	subs	r1, r2, r1
 8002756:	6139      	str	r1, [r7, #16]
 8002758:	4629      	mov	r1, r5
 800275a:	eb63 0301 	sbc.w	r3, r3, r1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800276c:	4659      	mov	r1, fp
 800276e:	018b      	lsls	r3, r1, #6
 8002770:	4651      	mov	r1, sl
 8002772:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002776:	4651      	mov	r1, sl
 8002778:	018a      	lsls	r2, r1, #6
 800277a:	4651      	mov	r1, sl
 800277c:	ebb2 0801 	subs.w	r8, r2, r1
 8002780:	4659      	mov	r1, fp
 8002782:	eb63 0901 	sbc.w	r9, r3, r1
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800279a:	4690      	mov	r8, r2
 800279c:	4699      	mov	r9, r3
 800279e:	4623      	mov	r3, r4
 80027a0:	eb18 0303 	adds.w	r3, r8, r3
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	462b      	mov	r3, r5
 80027a8:	eb49 0303 	adc.w	r3, r9, r3
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ba:	4629      	mov	r1, r5
 80027bc:	024b      	lsls	r3, r1, #9
 80027be:	4621      	mov	r1, r4
 80027c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027c4:	4621      	mov	r1, r4
 80027c6:	024a      	lsls	r2, r1, #9
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ce:	2200      	movs	r2, #0
 80027d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027d8:	f7fd fd16 	bl	8000208 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4613      	mov	r3, r2
 80027e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027e4:	e058      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e6:	4b38      	ldr	r3, [pc, #224]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	099b      	lsrs	r3, r3, #6
 80027ec:	2200      	movs	r2, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	4611      	mov	r1, r2
 80027f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80027fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002800:	4642      	mov	r2, r8
 8002802:	464b      	mov	r3, r9
 8002804:	f04f 0000 	mov.w	r0, #0
 8002808:	f04f 0100 	mov.w	r1, #0
 800280c:	0159      	lsls	r1, r3, #5
 800280e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002812:	0150      	lsls	r0, r2, #5
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4641      	mov	r1, r8
 800281a:	ebb2 0a01 	subs.w	sl, r2, r1
 800281e:	4649      	mov	r1, r9
 8002820:	eb63 0b01 	sbc.w	fp, r3, r1
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002830:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002834:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002838:	ebb2 040a 	subs.w	r4, r2, sl
 800283c:	eb63 050b 	sbc.w	r5, r3, fp
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	00eb      	lsls	r3, r5, #3
 800284a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284e:	00e2      	lsls	r2, r4, #3
 8002850:	4614      	mov	r4, r2
 8002852:	461d      	mov	r5, r3
 8002854:	4643      	mov	r3, r8
 8002856:	18e3      	adds	r3, r4, r3
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	464b      	mov	r3, r9
 800285c:	eb45 0303 	adc.w	r3, r5, r3
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286e:	4629      	mov	r1, r5
 8002870:	028b      	lsls	r3, r1, #10
 8002872:	4621      	mov	r1, r4
 8002874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002878:	4621      	mov	r1, r4
 800287a:	028a      	lsls	r2, r1, #10
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002882:	2200      	movs	r2, #0
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	61fa      	str	r2, [r7, #28]
 8002888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800288c:	f7fd fcbc 	bl	8000208 <__aeabi_uldivmod>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4613      	mov	r3, r2
 8002896:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002898:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	3301      	adds	r3, #1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028b2:	e002      	b.n	80028ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x204>)
 80028b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3750      	adds	r7, #80	@ 0x50
 80028c0:	46bd      	mov	sp, r7
 80028c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	00f42400 	.word	0x00f42400
 80028d0:	007a1200 	.word	0x007a1200

080028d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d8:	4b03      	ldr	r3, [pc, #12]	@ (80028e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000000 	.word	0x20000000

080028ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028f0:	f7ff fff0 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	0a9b      	lsrs	r3, r3, #10
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	@ (8002910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800
 8002910:	08005278 	.word	0x08005278

08002914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002918:	f7ff ffdc 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0b5b      	lsrs	r3, r3, #13
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	@ (8002938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	08005278 	.word	0x08005278

0800293c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d012      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002964:	4b69      	ldr	r3, [pc, #420]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a68      	ldr	r2, [pc, #416]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800296e:	6093      	str	r3, [r2, #8]
 8002970:	4b66      	ldr	r3, [pc, #408]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002978:	4964      	ldr	r1, [pc, #400]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002986:	2301      	movs	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d017      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002996:	4b5d      	ldr	r3, [pc, #372]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002998:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800299c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a4:	4959      	ldr	r1, [pc, #356]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029b4:	d101      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d017      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029d2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	494a      	ldr	r1, [pc, #296]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029f0:	d101      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 808b 	beq.w	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	4b3a      	ldr	r3, [pc, #232]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	4a39      	ldr	r2, [pc, #228]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2c:	4b37      	ldr	r3, [pc, #220]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a38:	4b35      	ldr	r3, [pc, #212]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a34      	ldr	r2, [pc, #208]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a44:	f7fe fb9e 	bl	8001184 <HAL_GetTick>
 8002a48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4c:	f7fe fb9a 	bl	8001184 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	@ 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e357      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a6a:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d035      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d02e      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a88:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a96:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002aaa:	4a18      	ldr	r2, [pc, #96]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ab0:	4b16      	ldr	r3, [pc, #88]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d114      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fb62 	bl	8001184 <HAL_GetTick>
 8002ac0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac2:	e00a      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fb5e 	bl	8001184 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e319      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ada:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0ee      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002af2:	d111      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002af4:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b02:	400b      	ands	r3, r1
 8002b04:	4901      	ldr	r1, [pc, #4]	@ (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000
 8002b14:	0ffffcff 	.word	0x0ffffcff
 8002b18:	4baa      	ldr	r3, [pc, #680]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4aa9      	ldr	r2, [pc, #676]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b22:	6093      	str	r3, [r2, #8]
 8002b24:	4ba7      	ldr	r3, [pc, #668]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b26:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	49a4      	ldr	r1, [pc, #656]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d010      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b42:	4ba0      	ldr	r3, [pc, #640]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b48:	4a9e      	ldr	r2, [pc, #632]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b52:	4b9c      	ldr	r3, [pc, #624]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b54:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	4999      	ldr	r1, [pc, #612]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b70:	4b94      	ldr	r3, [pc, #592]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b7e:	4991      	ldr	r1, [pc, #580]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b92:	4b8c      	ldr	r3, [pc, #560]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ba0:	4988      	ldr	r1, [pc, #544]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bb4:	4b83      	ldr	r3, [pc, #524]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bc2:	4980      	ldr	r1, [pc, #512]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be4:	4977      	ldr	r1, [pc, #476]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bf8:	4b72      	ldr	r3, [pc, #456]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	496f      	ldr	r1, [pc, #444]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c20:	f023 020c 	bic.w	r2, r3, #12
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c28:	4966      	ldr	r1, [pc, #408]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c3c:	4b61      	ldr	r3, [pc, #388]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4a:	495e      	ldr	r1, [pc, #376]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c5e:	4b59      	ldr	r3, [pc, #356]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c64:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c6c:	4955      	ldr	r1, [pc, #340]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c80:	4b50      	ldr	r3, [pc, #320]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8e:	494d      	ldr	r1, [pc, #308]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ca2:	4b48      	ldr	r3, [pc, #288]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb0:	4944      	ldr	r1, [pc, #272]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd2:	493c      	ldr	r1, [pc, #240]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ce6:	4b37      	ldr	r3, [pc, #220]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf4:	4933      	ldr	r1, [pc, #204]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d08:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d16:	492b      	ldr	r1, [pc, #172]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d011      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d2a:	4b26      	ldr	r3, [pc, #152]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d30:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d38:	4922      	ldr	r1, [pc, #136]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d48:	d101      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d6a:	4b16      	ldr	r3, [pc, #88]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d70:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d78:	4912      	ldr	r1, [pc, #72]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d92:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d9c:	4909      	ldr	r1, [pc, #36]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d006      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 80d9 	beq.w	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002db8:	4b02      	ldr	r3, [pc, #8]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a01      	ldr	r2, [pc, #4]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002dc2:	e001      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dca:	f7fe f9db 	bl	8001184 <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dd2:	f7fe f9d7 	bl	8001184 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b64      	cmp	r3, #100	@ 0x64
 8002dde:	d901      	bls.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e194      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002de4:	4b6c      	ldr	r3, [pc, #432]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f0      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d021      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d11d      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e04:	4b64      	ldr	r3, [pc, #400]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e0a:	0c1b      	lsrs	r3, r3, #16
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e12:	4b61      	ldr	r3, [pc, #388]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e18:	0e1b      	lsrs	r3, r3, #24
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	019a      	lsls	r2, r3, #6
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	041b      	lsls	r3, r3, #16
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	071b      	lsls	r3, r3, #28
 8002e38:	4957      	ldr	r1, [pc, #348]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d02e      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e6a:	d129      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e7a:	4b47      	ldr	r3, [pc, #284]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e80:	0f1b      	lsrs	r3, r3, #28
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	019a      	lsls	r2, r3, #6
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	061b      	lsls	r3, r3, #24
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	071b      	lsls	r3, r3, #28
 8002ea0:	493d      	ldr	r1, [pc, #244]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eae:	f023 021f 	bic.w	r2, r3, #31
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	4937      	ldr	r1, [pc, #220]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01d      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ecc:	4b32      	ldr	r3, [pc, #200]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed2:	0e1b      	lsrs	r3, r3, #24
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002eda:	4b2f      	ldr	r3, [pc, #188]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee0:	0f1b      	lsrs	r3, r3, #28
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	019a      	lsls	r2, r3, #6
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	431a      	orrs	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	071b      	lsls	r3, r3, #28
 8002f00:	4925      	ldr	r1, [pc, #148]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d011      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	019a      	lsls	r2, r3, #6
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	061b      	lsls	r3, r3, #24
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	071b      	lsls	r3, r3, #28
 8002f30:	4919      	ldr	r1, [pc, #100]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f38:	4b17      	ldr	r3, [pc, #92]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a16      	ldr	r2, [pc, #88]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fe f91e 	bl	8001184 <HAL_GetTick>
 8002f48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f4c:	f7fe f91a 	bl	8001184 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	@ 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0d7      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	f040 80cd 	bne.w	800310c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f72:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a08      	ldr	r2, [pc, #32]	@ (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7e:	f7fe f901 	bl	8001184 <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f86:	f7fe f8fd 	bl	8001184 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b64      	cmp	r3, #100	@ 0x64
 8002f92:	d903      	bls.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0ba      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002f98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f9c:	4b5e      	ldr	r3, [pc, #376]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fa8:	d0ed      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d02e      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d12a      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fd2:	4b51      	ldr	r3, [pc, #324]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe6:	0f1b      	lsrs	r3, r3, #28
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	019a      	lsls	r2, r3, #6
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	061b      	lsls	r3, r3, #24
 8003000:	431a      	orrs	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	071b      	lsls	r3, r3, #28
 8003006:	4944      	ldr	r1, [pc, #272]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800300e:	4b42      	ldr	r3, [pc, #264]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003014:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	3b01      	subs	r3, #1
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	493d      	ldr	r1, [pc, #244]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d022      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003038:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800303c:	d11d      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800303e:	4b36      	ldr	r3, [pc, #216]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003044:	0e1b      	lsrs	r3, r3, #24
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800304c:	4b32      	ldr	r3, [pc, #200]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003052:	0f1b      	lsrs	r3, r3, #28
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	019a      	lsls	r2, r3, #6
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	431a      	orrs	r2, r3
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	431a      	orrs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	071b      	lsls	r3, r3, #28
 8003072:	4929      	ldr	r1, [pc, #164]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d028      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003086:	4b24      	ldr	r3, [pc, #144]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308c:	0e1b      	lsrs	r3, r3, #24
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003094:	4b20      	ldr	r3, [pc, #128]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309a:	0c1b      	lsrs	r3, r3, #16
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	019a      	lsls	r2, r3, #6
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	041b      	lsls	r3, r3, #16
 80030ac:	431a      	orrs	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	071b      	lsls	r3, r3, #28
 80030ba:	4917      	ldr	r1, [pc, #92]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030c2:	4b15      	ldr	r3, [pc, #84]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	4911      	ldr	r1, [pc, #68]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e4:	f7fe f84e 	bl	8001184 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030ec:	f7fe f84a 	bl	8001184 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	@ 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e007      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030fe:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800310a:	d1ef      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800

0800311c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e049      	b.n	80031c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fdbc 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3304      	adds	r3, #4
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f000 fa38 	bl	80035d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d020      	beq.n	800322e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01b      	beq.n	800322e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f06f 0202 	mvn.w	r2, #2
 80031fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f9bd 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 800321a:	e005      	b.n	8003228 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f9af 	bl	8003580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f9c0 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d020      	beq.n	800327a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01b      	beq.n	800327a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f06f 0204 	mvn.w	r2, #4
 800324a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f997 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 8003266:	e005      	b.n	8003274 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f989 	bl	8003580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f99a 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01b      	beq.n	80032c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f06f 0208 	mvn.w	r2, #8
 8003296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2204      	movs	r2, #4
 800329c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f971 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 80032b2:	e005      	b.n	80032c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f963 	bl	8003580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f974 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d01b      	beq.n	8003312 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f06f 0210 	mvn.w	r2, #16
 80032e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2208      	movs	r2, #8
 80032e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f94b 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 80032fe:	e005      	b.n	800330c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f93d 	bl	8003580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f94e 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00c      	beq.n	8003336 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f06f 0201 	mvn.w	r2, #1
 800332e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f91b 	bl	800356c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333c:	2b00      	cmp	r3, #0
 800333e:	d104      	bne.n	800334a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00c      	beq.n	8003364 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800335c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fb14 	bl	800398c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00c      	beq.n	8003388 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fb0c 	bl	80039a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00c      	beq.n	80033ac <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f908 	bl	80035bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00c      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d007      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0220 	mvn.w	r2, #32
 80033c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fad4 	bl	8003978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_TIM_ConfigClockSource+0x1c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e0b4      	b.n	800355e <HAL_TIM_ConfigClockSource+0x186>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	4b56      	ldr	r3, [pc, #344]	@ (8003568 <HAL_TIM_ConfigClockSource+0x190>)
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800341a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800342c:	d03e      	beq.n	80034ac <HAL_TIM_ConfigClockSource+0xd4>
 800342e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003432:	f200 8087 	bhi.w	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343a:	f000 8086 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x172>
 800343e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003442:	d87f      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b70      	cmp	r3, #112	@ 0x70
 8003446:	d01a      	beq.n	800347e <HAL_TIM_ConfigClockSource+0xa6>
 8003448:	2b70      	cmp	r3, #112	@ 0x70
 800344a:	d87b      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b60      	cmp	r3, #96	@ 0x60
 800344e:	d050      	beq.n	80034f2 <HAL_TIM_ConfigClockSource+0x11a>
 8003450:	2b60      	cmp	r3, #96	@ 0x60
 8003452:	d877      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b50      	cmp	r3, #80	@ 0x50
 8003456:	d03c      	beq.n	80034d2 <HAL_TIM_ConfigClockSource+0xfa>
 8003458:	2b50      	cmp	r3, #80	@ 0x50
 800345a:	d873      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b40      	cmp	r3, #64	@ 0x40
 800345e:	d058      	beq.n	8003512 <HAL_TIM_ConfigClockSource+0x13a>
 8003460:	2b40      	cmp	r3, #64	@ 0x40
 8003462:	d86f      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b30      	cmp	r3, #48	@ 0x30
 8003466:	d064      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x15a>
 8003468:	2b30      	cmp	r3, #48	@ 0x30
 800346a:	d86b      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	2b20      	cmp	r3, #32
 800346e:	d060      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x15a>
 8003470:	2b20      	cmp	r3, #32
 8003472:	d867      	bhi.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d05c      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x15a>
 8003478:	2b10      	cmp	r3, #16
 800347a:	d05a      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x15a>
 800347c:	e062      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800348e:	f000 f9c5 	bl	800381c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	609a      	str	r2, [r3, #8]
      break;
 80034aa:	e04f      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034bc:	f000 f9ae 	bl	800381c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034ce:	609a      	str	r2, [r3, #8]
      break;
 80034d0:	e03c      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034de:	461a      	mov	r2, r3
 80034e0:	f000 f922 	bl	8003728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2150      	movs	r1, #80	@ 0x50
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f97b 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 80034f0:	e02c      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034fe:	461a      	mov	r2, r3
 8003500:	f000 f941 	bl	8003786 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2160      	movs	r1, #96	@ 0x60
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f96b 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 8003510:	e01c      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800351e:	461a      	mov	r2, r3
 8003520:	f000 f902 	bl	8003728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2140      	movs	r1, #64	@ 0x40
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f95b 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 8003530:	e00c      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f000 f952 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 8003542:	e003      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
      break;
 8003548:	e000      	b.n	800354c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800354a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	fffeff88 	.word	0xfffeff88

0800356c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a46      	ldr	r2, [pc, #280]	@ (80036fc <TIM_Base_SetConfig+0x12c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ee:	d00f      	beq.n	8003610 <TIM_Base_SetConfig+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a43      	ldr	r2, [pc, #268]	@ (8003700 <TIM_Base_SetConfig+0x130>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00b      	beq.n	8003610 <TIM_Base_SetConfig+0x40>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a42      	ldr	r2, [pc, #264]	@ (8003704 <TIM_Base_SetConfig+0x134>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d007      	beq.n	8003610 <TIM_Base_SetConfig+0x40>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a41      	ldr	r2, [pc, #260]	@ (8003708 <TIM_Base_SetConfig+0x138>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a40      	ldr	r2, [pc, #256]	@ (800370c <TIM_Base_SetConfig+0x13c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d108      	bne.n	8003622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a35      	ldr	r2, [pc, #212]	@ (80036fc <TIM_Base_SetConfig+0x12c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d02b      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003630:	d027      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a32      	ldr	r2, [pc, #200]	@ (8003700 <TIM_Base_SetConfig+0x130>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d023      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a31      	ldr	r2, [pc, #196]	@ (8003704 <TIM_Base_SetConfig+0x134>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01f      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a30      	ldr	r2, [pc, #192]	@ (8003708 <TIM_Base_SetConfig+0x138>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01b      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2f      	ldr	r2, [pc, #188]	@ (800370c <TIM_Base_SetConfig+0x13c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d017      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2e      	ldr	r2, [pc, #184]	@ (8003710 <TIM_Base_SetConfig+0x140>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2d      	ldr	r2, [pc, #180]	@ (8003714 <TIM_Base_SetConfig+0x144>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00f      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a2c      	ldr	r2, [pc, #176]	@ (8003718 <TIM_Base_SetConfig+0x148>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00b      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a2b      	ldr	r2, [pc, #172]	@ (800371c <TIM_Base_SetConfig+0x14c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a2a      	ldr	r2, [pc, #168]	@ (8003720 <TIM_Base_SetConfig+0x150>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a29      	ldr	r2, [pc, #164]	@ (8003724 <TIM_Base_SetConfig+0x154>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d108      	bne.n	8003694 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a10      	ldr	r2, [pc, #64]	@ (80036fc <TIM_Base_SetConfig+0x12c>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_Base_SetConfig+0xf8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a12      	ldr	r2, [pc, #72]	@ (800370c <TIM_Base_SetConfig+0x13c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d103      	bne.n	80036d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d105      	bne.n	80036ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f023 0201 	bic.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	611a      	str	r2, [r3, #16]
  }
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	40000c00 	.word	0x40000c00
 800370c:	40010400 	.word	0x40010400
 8003710:	40014000 	.word	0x40014000
 8003714:	40014400 	.word	0x40014400
 8003718:	40014800 	.word	0x40014800
 800371c:	40001800 	.word	0x40001800
 8003720:	40001c00 	.word	0x40001c00
 8003724:	40002000 	.word	0x40002000

08003728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 0201 	bic.w	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f023 030a 	bic.w	r3, r3, #10
 8003764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003786:	b480      	push	{r7}
 8003788:	b087      	sub	sp, #28
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f023 0210 	bic.w	r2, r3, #16
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	031b      	lsls	r3, r3, #12
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	621a      	str	r2, [r3, #32]
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b085      	sub	sp, #20
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	f043 0307 	orr.w	r3, r3, #7
 8003808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	021a      	lsls	r2, r3, #8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	431a      	orrs	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4313      	orrs	r3, r2
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	609a      	str	r2, [r3, #8]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003870:	2302      	movs	r3, #2
 8003872:	e06d      	b.n	8003950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a30      	ldr	r2, [pc, #192]	@ (800395c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d004      	beq.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d108      	bne.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80038ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a20      	ldr	r2, [pc, #128]	@ (800395c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d022      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e6:	d01d      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d018      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1a      	ldr	r2, [pc, #104]	@ (800396c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a15      	ldr	r2, [pc, #84]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a16      	ldr	r2, [pc, #88]	@ (8003970 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a15      	ldr	r2, [pc, #84]	@ (8003974 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d10c      	bne.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800392a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	4313      	orrs	r3, r2
 8003934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	40010000 	.word	0x40010000
 8003960:	40010400 	.word	0x40010400
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40000c00 	.word	0x40000c00
 8003970:	40014000 	.word	0x40014000
 8003974:	40001800 	.word	0x40001800

08003978 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e040      	b.n	8003a48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fd f998 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2224      	movs	r2, #36	@ 0x24
 80039e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fe78 	bl	80046f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fc11 	bl	8004228 <UART_SetConfig>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e01b      	b.n	8003a48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fef7 	bl	8004834 <UART_CheckIdleState>
 8003a46:	4603      	mov	r3, r0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e048      	b.n	8003af4 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd f94a 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	@ 0x24
 8003a7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fe2a 	bl	80046f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fbc3 	bl	8004228 <UART_SetConfig>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e023      	b.n	8003af4 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8003aca:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0208 	orr.w	r2, r2, #8
 8003ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0201 	orr.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fea1 	bl	8004834 <UART_CheckIdleState>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b08b      	sub	sp, #44	@ 0x2c
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d147      	bne.n	8003ba2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_UART_Transmit_IT+0x22>
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e040      	b.n	8003ba4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	88fa      	ldrh	r2, [r7, #6]
 8003b34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2221      	movs	r2, #33	@ 0x21
 8003b4a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b54:	d107      	bne.n	8003b66 <HAL_UART_Transmit_IT+0x6a>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a13      	ldr	r2, [pc, #76]	@ (8003bb0 <HAL_UART_Transmit_IT+0xb4>)
 8003b62:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003b64:	e002      	b.n	8003b6c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a12      	ldr	r2, [pc, #72]	@ (8003bb4 <HAL_UART_Transmit_IT+0xb8>)
 8003b6a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	613b      	str	r3, [r7, #16]
   return(result);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	69f9      	ldr	r1, [r7, #28]
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e6      	bne.n	8003b6c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
  }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	372c      	adds	r7, #44	@ 0x2c
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	08004cf3 	.word	0x08004cf3
 8003bb4:	08004c3d 	.word	0x08004c3d

08003bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b0ba      	sub	sp, #232	@ 0xe8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003be2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003be6:	4013      	ands	r3, r2
 8003be8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d115      	bne.n	8003c20 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00f      	beq.n	8003c20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d009      	beq.n	8003c20 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8297 	beq.w	8004144 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
      }
      return;
 8003c1e:	e291      	b.n	8004144 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8117 	beq.w	8003e58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c3a:	4b85      	ldr	r3, [pc, #532]	@ (8003e50 <HAL_UART_IRQHandler+0x298>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 810a 	beq.w	8003e58 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d011      	beq.n	8003c74 <HAL_UART_IRQHandler+0xbc>
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00b      	beq.n	8003c74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2201      	movs	r2, #1
 8003c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d011      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xec>
 8003c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2202      	movs	r2, #2
 8003c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c9a:	f043 0204 	orr.w	r2, r3, #4
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x11c>
 8003cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d017      	beq.n	8003d10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00b      	beq.n	8003d10 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d06:	f043 0208 	orr.w	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d012      	beq.n	8003d42 <HAL_UART_IRQHandler+0x18a>
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00c      	beq.n	8003d42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 81fd 	beq.w	8004148 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8a:	2b40      	cmp	r3, #64	@ 0x40
 8003d8c:	d005      	beq.n	8003d9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d04f      	beq.n	8003e3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fed4 	bl	8004b48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003daa:	2b40      	cmp	r3, #64	@ 0x40
 8003dac:	d141      	bne.n	8003e32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3308      	adds	r3, #8
 8003dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003dda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1d9      	bne.n	8003dae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d013      	beq.n	8003e2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e06:	4a13      	ldr	r2, [pc, #76]	@ (8003e54 <HAL_UART_IRQHandler+0x29c>)
 8003e08:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fd fb69 	bl	80014e6 <HAL_DMA_Abort_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d017      	beq.n	8003e4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e24:	4610      	mov	r0, r2
 8003e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00f      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f9a0 	bl	8004170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00b      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f99c 	bl	8004170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e007      	b.n	8003e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f998 	bl	8004170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003e48:	e17e      	b.n	8004148 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4a:	bf00      	nop
    return;
 8003e4c:	e17c      	b.n	8004148 <HAL_UART_IRQHandler+0x590>
 8003e4e:	bf00      	nop
 8003e50:	04000120 	.word	0x04000120
 8003e54:	08004c11 	.word	0x08004c11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f040 814c 	bne.w	80040fa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8145 	beq.w	80040fa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 813e 	beq.w	80040fa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2210      	movs	r2, #16
 8003e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e90:	2b40      	cmp	r3, #64	@ 0x40
 8003e92:	f040 80b6 	bne.w	8004002 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8150 	beq.w	800414c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	f080 8148 	bcs.w	800414c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed0:	f000 8086 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003efe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1da      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3308      	adds	r3, #8
 8003f24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e1      	bne.n	8003f1e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f64:	e853 3f00 	ldrex	r3, [r3]
 8003f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e3      	bne.n	8003f5a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fb0:	f023 0310 	bic.w	r3, r3, #16
 8003fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e4      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fd fa13 	bl	8001406 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc fa7c 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004000:	e0a4      	b.n	800414c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800400e:	b29b      	uxth	r3, r3
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8096 	beq.w	8004150 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8091 	beq.w	8004150 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800403c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004042:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004050:	647b      	str	r3, [r7, #68]	@ 0x44
 8004052:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800405e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e4      	bne.n	800402e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3308      	adds	r3, #8
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	623b      	str	r3, [r7, #32]
   return(result);
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3308      	adds	r3, #8
 8004084:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004088:	633a      	str	r2, [r7, #48]	@ 0x30
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800408e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e3      	bne.n	8004064 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f023 0310 	bic.w	r3, r3, #16
 80040c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	69b9      	ldr	r1, [r7, #24]
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	617b      	str	r3, [r7, #20]
   return(result);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e4      	bne.n	80040b0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040f0:	4619      	mov	r1, r3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fc fa00 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040f8:	e02a      	b.n	8004150 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00e      	beq.n	8004124 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800410a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01c      	beq.n	8004154 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	4798      	blx	r3
    }
    return;
 8004122:	e017      	b.n	8004154 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d012      	beq.n	8004156 <HAL_UART_IRQHandler+0x59e>
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00c      	beq.n	8004156 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fe38 	bl	8004db2 <UART_EndTransmit_IT>
    return;
 8004142:	e008      	b.n	8004156 <HAL_UART_IRQHandler+0x59e>
      return;
 8004144:	bf00      	nop
 8004146:	e006      	b.n	8004156 <HAL_UART_IRQHandler+0x59e>
    return;
 8004148:	bf00      	nop
 800414a:	e004      	b.n	8004156 <HAL_UART_IRQHandler+0x59e>
      return;
 800414c:	bf00      	nop
 800414e:	e002      	b.n	8004156 <HAL_UART_IRQHandler+0x59e>
      return;
 8004150:	bf00      	nop
 8004152:	e000      	b.n	8004156 <HAL_UART_IRQHandler+0x59e>
    return;
 8004154:	bf00      	nop
  }

}
 8004156:	37e8      	adds	r7, #232	@ 0xe8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b08f      	sub	sp, #60	@ 0x3c
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_HalfDuplex_EnableReceiver+0x16>
 8004196:	2302      	movs	r3, #2
 8004198:	e040      	b.n	800421c <HAL_HalfDuplex_EnableReceiver+0x98>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_BUSY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2224      	movs	r2, #36	@ 0x24
 80041a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f023 030c 	bic.w	r3, r3, #12
 80041bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e6      	bne.n	80041a8 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	6979      	ldr	r1, [r7, #20]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	613b      	str	r3, [r7, #16]
   return(result);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e6      	bne.n	80041da <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UNLOCK(huart);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	373c      	adds	r7, #60	@ 0x3c
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4ba6      	ldr	r3, [pc, #664]	@ (80044ec <UART_SetConfig+0x2c4>)
 8004254:	4013      	ands	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	6979      	ldr	r1, [r7, #20]
 800425c:	430b      	orrs	r3, r1
 800425e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	430a      	orrs	r2, r1
 8004298:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a94      	ldr	r2, [pc, #592]	@ (80044f0 <UART_SetConfig+0x2c8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d120      	bne.n	80042e6 <UART_SetConfig+0xbe>
 80042a4:	4b93      	ldr	r3, [pc, #588]	@ (80044f4 <UART_SetConfig+0x2cc>)
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d816      	bhi.n	80042e0 <UART_SetConfig+0xb8>
 80042b2:	a201      	add	r2, pc, #4	@ (adr r2, 80042b8 <UART_SetConfig+0x90>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080042c9 	.word	0x080042c9
 80042bc:	080042d5 	.word	0x080042d5
 80042c0:	080042cf 	.word	0x080042cf
 80042c4:	080042db 	.word	0x080042db
 80042c8:	2301      	movs	r3, #1
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e150      	b.n	8004570 <UART_SetConfig+0x348>
 80042ce:	2302      	movs	r3, #2
 80042d0:	77fb      	strb	r3, [r7, #31]
 80042d2:	e14d      	b.n	8004570 <UART_SetConfig+0x348>
 80042d4:	2304      	movs	r3, #4
 80042d6:	77fb      	strb	r3, [r7, #31]
 80042d8:	e14a      	b.n	8004570 <UART_SetConfig+0x348>
 80042da:	2308      	movs	r3, #8
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	e147      	b.n	8004570 <UART_SetConfig+0x348>
 80042e0:	2310      	movs	r3, #16
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e144      	b.n	8004570 <UART_SetConfig+0x348>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a83      	ldr	r2, [pc, #524]	@ (80044f8 <UART_SetConfig+0x2d0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d132      	bne.n	8004356 <UART_SetConfig+0x12e>
 80042f0:	4b80      	ldr	r3, [pc, #512]	@ (80044f4 <UART_SetConfig+0x2cc>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d828      	bhi.n	8004350 <UART_SetConfig+0x128>
 80042fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004304 <UART_SetConfig+0xdc>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004339 	.word	0x08004339
 8004308:	08004351 	.word	0x08004351
 800430c:	08004351 	.word	0x08004351
 8004310:	08004351 	.word	0x08004351
 8004314:	08004345 	.word	0x08004345
 8004318:	08004351 	.word	0x08004351
 800431c:	08004351 	.word	0x08004351
 8004320:	08004351 	.word	0x08004351
 8004324:	0800433f 	.word	0x0800433f
 8004328:	08004351 	.word	0x08004351
 800432c:	08004351 	.word	0x08004351
 8004330:	08004351 	.word	0x08004351
 8004334:	0800434b 	.word	0x0800434b
 8004338:	2300      	movs	r3, #0
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e118      	b.n	8004570 <UART_SetConfig+0x348>
 800433e:	2302      	movs	r3, #2
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e115      	b.n	8004570 <UART_SetConfig+0x348>
 8004344:	2304      	movs	r3, #4
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e112      	b.n	8004570 <UART_SetConfig+0x348>
 800434a:	2308      	movs	r3, #8
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e10f      	b.n	8004570 <UART_SetConfig+0x348>
 8004350:	2310      	movs	r3, #16
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e10c      	b.n	8004570 <UART_SetConfig+0x348>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a68      	ldr	r2, [pc, #416]	@ (80044fc <UART_SetConfig+0x2d4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d120      	bne.n	80043a2 <UART_SetConfig+0x17a>
 8004360:	4b64      	ldr	r3, [pc, #400]	@ (80044f4 <UART_SetConfig+0x2cc>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800436a:	2b30      	cmp	r3, #48	@ 0x30
 800436c:	d013      	beq.n	8004396 <UART_SetConfig+0x16e>
 800436e:	2b30      	cmp	r3, #48	@ 0x30
 8004370:	d814      	bhi.n	800439c <UART_SetConfig+0x174>
 8004372:	2b20      	cmp	r3, #32
 8004374:	d009      	beq.n	800438a <UART_SetConfig+0x162>
 8004376:	2b20      	cmp	r3, #32
 8004378:	d810      	bhi.n	800439c <UART_SetConfig+0x174>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <UART_SetConfig+0x15c>
 800437e:	2b10      	cmp	r3, #16
 8004380:	d006      	beq.n	8004390 <UART_SetConfig+0x168>
 8004382:	e00b      	b.n	800439c <UART_SetConfig+0x174>
 8004384:	2300      	movs	r3, #0
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e0f2      	b.n	8004570 <UART_SetConfig+0x348>
 800438a:	2302      	movs	r3, #2
 800438c:	77fb      	strb	r3, [r7, #31]
 800438e:	e0ef      	b.n	8004570 <UART_SetConfig+0x348>
 8004390:	2304      	movs	r3, #4
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e0ec      	b.n	8004570 <UART_SetConfig+0x348>
 8004396:	2308      	movs	r3, #8
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e0e9      	b.n	8004570 <UART_SetConfig+0x348>
 800439c:	2310      	movs	r3, #16
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e0e6      	b.n	8004570 <UART_SetConfig+0x348>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a56      	ldr	r2, [pc, #344]	@ (8004500 <UART_SetConfig+0x2d8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d120      	bne.n	80043ee <UART_SetConfig+0x1c6>
 80043ac:	4b51      	ldr	r3, [pc, #324]	@ (80044f4 <UART_SetConfig+0x2cc>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80043b8:	d013      	beq.n	80043e2 <UART_SetConfig+0x1ba>
 80043ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80043bc:	d814      	bhi.n	80043e8 <UART_SetConfig+0x1c0>
 80043be:	2b80      	cmp	r3, #128	@ 0x80
 80043c0:	d009      	beq.n	80043d6 <UART_SetConfig+0x1ae>
 80043c2:	2b80      	cmp	r3, #128	@ 0x80
 80043c4:	d810      	bhi.n	80043e8 <UART_SetConfig+0x1c0>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <UART_SetConfig+0x1a8>
 80043ca:	2b40      	cmp	r3, #64	@ 0x40
 80043cc:	d006      	beq.n	80043dc <UART_SetConfig+0x1b4>
 80043ce:	e00b      	b.n	80043e8 <UART_SetConfig+0x1c0>
 80043d0:	2300      	movs	r3, #0
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e0cc      	b.n	8004570 <UART_SetConfig+0x348>
 80043d6:	2302      	movs	r3, #2
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e0c9      	b.n	8004570 <UART_SetConfig+0x348>
 80043dc:	2304      	movs	r3, #4
 80043de:	77fb      	strb	r3, [r7, #31]
 80043e0:	e0c6      	b.n	8004570 <UART_SetConfig+0x348>
 80043e2:	2308      	movs	r3, #8
 80043e4:	77fb      	strb	r3, [r7, #31]
 80043e6:	e0c3      	b.n	8004570 <UART_SetConfig+0x348>
 80043e8:	2310      	movs	r3, #16
 80043ea:	77fb      	strb	r3, [r7, #31]
 80043ec:	e0c0      	b.n	8004570 <UART_SetConfig+0x348>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a44      	ldr	r2, [pc, #272]	@ (8004504 <UART_SetConfig+0x2dc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d125      	bne.n	8004444 <UART_SetConfig+0x21c>
 80043f8:	4b3e      	ldr	r3, [pc, #248]	@ (80044f4 <UART_SetConfig+0x2cc>)
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004406:	d017      	beq.n	8004438 <UART_SetConfig+0x210>
 8004408:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800440c:	d817      	bhi.n	800443e <UART_SetConfig+0x216>
 800440e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004412:	d00b      	beq.n	800442c <UART_SetConfig+0x204>
 8004414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004418:	d811      	bhi.n	800443e <UART_SetConfig+0x216>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <UART_SetConfig+0x1fe>
 800441e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004422:	d006      	beq.n	8004432 <UART_SetConfig+0x20a>
 8004424:	e00b      	b.n	800443e <UART_SetConfig+0x216>
 8004426:	2300      	movs	r3, #0
 8004428:	77fb      	strb	r3, [r7, #31]
 800442a:	e0a1      	b.n	8004570 <UART_SetConfig+0x348>
 800442c:	2302      	movs	r3, #2
 800442e:	77fb      	strb	r3, [r7, #31]
 8004430:	e09e      	b.n	8004570 <UART_SetConfig+0x348>
 8004432:	2304      	movs	r3, #4
 8004434:	77fb      	strb	r3, [r7, #31]
 8004436:	e09b      	b.n	8004570 <UART_SetConfig+0x348>
 8004438:	2308      	movs	r3, #8
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e098      	b.n	8004570 <UART_SetConfig+0x348>
 800443e:	2310      	movs	r3, #16
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e095      	b.n	8004570 <UART_SetConfig+0x348>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2f      	ldr	r2, [pc, #188]	@ (8004508 <UART_SetConfig+0x2e0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d125      	bne.n	800449a <UART_SetConfig+0x272>
 800444e:	4b29      	ldr	r3, [pc, #164]	@ (80044f4 <UART_SetConfig+0x2cc>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004454:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004458:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800445c:	d017      	beq.n	800448e <UART_SetConfig+0x266>
 800445e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004462:	d817      	bhi.n	8004494 <UART_SetConfig+0x26c>
 8004464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004468:	d00b      	beq.n	8004482 <UART_SetConfig+0x25a>
 800446a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800446e:	d811      	bhi.n	8004494 <UART_SetConfig+0x26c>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <UART_SetConfig+0x254>
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004478:	d006      	beq.n	8004488 <UART_SetConfig+0x260>
 800447a:	e00b      	b.n	8004494 <UART_SetConfig+0x26c>
 800447c:	2301      	movs	r3, #1
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e076      	b.n	8004570 <UART_SetConfig+0x348>
 8004482:	2302      	movs	r3, #2
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	e073      	b.n	8004570 <UART_SetConfig+0x348>
 8004488:	2304      	movs	r3, #4
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e070      	b.n	8004570 <UART_SetConfig+0x348>
 800448e:	2308      	movs	r3, #8
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e06d      	b.n	8004570 <UART_SetConfig+0x348>
 8004494:	2310      	movs	r3, #16
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e06a      	b.n	8004570 <UART_SetConfig+0x348>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a1b      	ldr	r2, [pc, #108]	@ (800450c <UART_SetConfig+0x2e4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d138      	bne.n	8004516 <UART_SetConfig+0x2ee>
 80044a4:	4b13      	ldr	r3, [pc, #76]	@ (80044f4 <UART_SetConfig+0x2cc>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80044ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044b2:	d017      	beq.n	80044e4 <UART_SetConfig+0x2bc>
 80044b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044b8:	d82a      	bhi.n	8004510 <UART_SetConfig+0x2e8>
 80044ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044be:	d00b      	beq.n	80044d8 <UART_SetConfig+0x2b0>
 80044c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c4:	d824      	bhi.n	8004510 <UART_SetConfig+0x2e8>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <UART_SetConfig+0x2aa>
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ce:	d006      	beq.n	80044de <UART_SetConfig+0x2b6>
 80044d0:	e01e      	b.n	8004510 <UART_SetConfig+0x2e8>
 80044d2:	2300      	movs	r3, #0
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e04b      	b.n	8004570 <UART_SetConfig+0x348>
 80044d8:	2302      	movs	r3, #2
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e048      	b.n	8004570 <UART_SetConfig+0x348>
 80044de:	2304      	movs	r3, #4
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	e045      	b.n	8004570 <UART_SetConfig+0x348>
 80044e4:	2308      	movs	r3, #8
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e042      	b.n	8004570 <UART_SetConfig+0x348>
 80044ea:	bf00      	nop
 80044ec:	efff69f3 	.word	0xefff69f3
 80044f0:	40011000 	.word	0x40011000
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40004400 	.word	0x40004400
 80044fc:	40004800 	.word	0x40004800
 8004500:	40004c00 	.word	0x40004c00
 8004504:	40005000 	.word	0x40005000
 8004508:	40011400 	.word	0x40011400
 800450c:	40007800 	.word	0x40007800
 8004510:	2310      	movs	r3, #16
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e02c      	b.n	8004570 <UART_SetConfig+0x348>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a72      	ldr	r2, [pc, #456]	@ (80046e4 <UART_SetConfig+0x4bc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d125      	bne.n	800456c <UART_SetConfig+0x344>
 8004520:	4b71      	ldr	r3, [pc, #452]	@ (80046e8 <UART_SetConfig+0x4c0>)
 8004522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004526:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800452a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800452e:	d017      	beq.n	8004560 <UART_SetConfig+0x338>
 8004530:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004534:	d817      	bhi.n	8004566 <UART_SetConfig+0x33e>
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453a:	d00b      	beq.n	8004554 <UART_SetConfig+0x32c>
 800453c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004540:	d811      	bhi.n	8004566 <UART_SetConfig+0x33e>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <UART_SetConfig+0x326>
 8004546:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800454a:	d006      	beq.n	800455a <UART_SetConfig+0x332>
 800454c:	e00b      	b.n	8004566 <UART_SetConfig+0x33e>
 800454e:	2300      	movs	r3, #0
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	e00d      	b.n	8004570 <UART_SetConfig+0x348>
 8004554:	2302      	movs	r3, #2
 8004556:	77fb      	strb	r3, [r7, #31]
 8004558:	e00a      	b.n	8004570 <UART_SetConfig+0x348>
 800455a:	2304      	movs	r3, #4
 800455c:	77fb      	strb	r3, [r7, #31]
 800455e:	e007      	b.n	8004570 <UART_SetConfig+0x348>
 8004560:	2308      	movs	r3, #8
 8004562:	77fb      	strb	r3, [r7, #31]
 8004564:	e004      	b.n	8004570 <UART_SetConfig+0x348>
 8004566:	2310      	movs	r3, #16
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e001      	b.n	8004570 <UART_SetConfig+0x348>
 800456c:	2310      	movs	r3, #16
 800456e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004578:	d15b      	bne.n	8004632 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d828      	bhi.n	80045d2 <UART_SetConfig+0x3aa>
 8004580:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <UART_SetConfig+0x360>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	080045ad 	.word	0x080045ad
 800458c:	080045b5 	.word	0x080045b5
 8004590:	080045bd 	.word	0x080045bd
 8004594:	080045d3 	.word	0x080045d3
 8004598:	080045c3 	.word	0x080045c3
 800459c:	080045d3 	.word	0x080045d3
 80045a0:	080045d3 	.word	0x080045d3
 80045a4:	080045d3 	.word	0x080045d3
 80045a8:	080045cb 	.word	0x080045cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ac:	f7fe f99e 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 80045b0:	61b8      	str	r0, [r7, #24]
        break;
 80045b2:	e013      	b.n	80045dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045b4:	f7fe f9ae 	bl	8002914 <HAL_RCC_GetPCLK2Freq>
 80045b8:	61b8      	str	r0, [r7, #24]
        break;
 80045ba:	e00f      	b.n	80045dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045bc:	4b4b      	ldr	r3, [pc, #300]	@ (80046ec <UART_SetConfig+0x4c4>)
 80045be:	61bb      	str	r3, [r7, #24]
        break;
 80045c0:	e00c      	b.n	80045dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c2:	f7fe f881 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 80045c6:	61b8      	str	r0, [r7, #24]
        break;
 80045c8:	e008      	b.n	80045dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ce:	61bb      	str	r3, [r7, #24]
        break;
 80045d0:	e004      	b.n	80045dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	77bb      	strb	r3, [r7, #30]
        break;
 80045da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d074      	beq.n	80046cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	005a      	lsls	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	441a      	add	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b0f      	cmp	r3, #15
 80045fc:	d916      	bls.n	800462c <UART_SetConfig+0x404>
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004604:	d212      	bcs.n	800462c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f023 030f 	bic.w	r3, r3, #15
 800460e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	b29b      	uxth	r3, r3
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	b29a      	uxth	r2, r3
 800461c:	89fb      	ldrh	r3, [r7, #14]
 800461e:	4313      	orrs	r3, r2
 8004620:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	89fa      	ldrh	r2, [r7, #14]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	e04f      	b.n	80046cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	77bb      	strb	r3, [r7, #30]
 8004630:	e04c      	b.n	80046cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004632:	7ffb      	ldrb	r3, [r7, #31]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d828      	bhi.n	800468a <UART_SetConfig+0x462>
 8004638:	a201      	add	r2, pc, #4	@ (adr r2, 8004640 <UART_SetConfig+0x418>)
 800463a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463e:	bf00      	nop
 8004640:	08004665 	.word	0x08004665
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004675 	.word	0x08004675
 800464c:	0800468b 	.word	0x0800468b
 8004650:	0800467b 	.word	0x0800467b
 8004654:	0800468b 	.word	0x0800468b
 8004658:	0800468b 	.word	0x0800468b
 800465c:	0800468b 	.word	0x0800468b
 8004660:	08004683 	.word	0x08004683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004664:	f7fe f942 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 8004668:	61b8      	str	r0, [r7, #24]
        break;
 800466a:	e013      	b.n	8004694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7fe f952 	bl	8002914 <HAL_RCC_GetPCLK2Freq>
 8004670:	61b8      	str	r0, [r7, #24]
        break;
 8004672:	e00f      	b.n	8004694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004674:	4b1d      	ldr	r3, [pc, #116]	@ (80046ec <UART_SetConfig+0x4c4>)
 8004676:	61bb      	str	r3, [r7, #24]
        break;
 8004678:	e00c      	b.n	8004694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467a:	f7fe f825 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 800467e:	61b8      	str	r0, [r7, #24]
        break;
 8004680:	e008      	b.n	8004694 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004686:	61bb      	str	r3, [r7, #24]
        break;
 8004688:	e004      	b.n	8004694 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	77bb      	strb	r3, [r7, #30]
        break;
 8004692:	bf00      	nop
    }

    if (pclk != 0U)
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d018      	beq.n	80046cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	085a      	lsrs	r2, r3, #1
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	441a      	add	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b0f      	cmp	r3, #15
 80046b2:	d909      	bls.n	80046c8 <UART_SetConfig+0x4a0>
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ba:	d205      	bcs.n	80046c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	b29a      	uxth	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60da      	str	r2, [r3, #12]
 80046c6:	e001      	b.n	80046cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40007c00 	.word	0x40007c00
 80046e8:	40023800 	.word	0x40023800
 80046ec:	00f42400 	.word	0x00f42400

080046f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01a      	beq.n	8004806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ee:	d10a      	bne.n	8004806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08c      	sub	sp, #48	@ 0x30
 8004838:	af02      	add	r7, sp, #8
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004844:	f7fc fc9e 	bl	8001184 <HAL_GetTick>
 8004848:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b08      	cmp	r3, #8
 8004856:	d12e      	bne.n	80048b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004858:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	2200      	movs	r2, #0
 8004862:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f83b 	bl	80048e2 <UART_WaitOnFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d021      	beq.n	80048b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	69b9      	ldr	r1, [r7, #24]
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	617b      	str	r3, [r7, #20]
   return(result);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e6      	bne.n	8004872 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e011      	b.n	80048da <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3728      	adds	r7, #40	@ 0x28
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	4613      	mov	r3, r2
 80048f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f2:	e04f      	b.n	8004994 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d04b      	beq.n	8004994 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fc:	f7fc fc42 	bl	8001184 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	429a      	cmp	r2, r3
 800490a:	d302      	bcc.n	8004912 <UART_WaitOnFlagUntilTimeout+0x30>
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e04e      	b.n	80049b4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d037      	beq.n	8004994 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b80      	cmp	r3, #128	@ 0x80
 8004928:	d034      	beq.n	8004994 <UART_WaitOnFlagUntilTimeout+0xb2>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b40      	cmp	r3, #64	@ 0x40
 800492e:	d031      	beq.n	8004994 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b08      	cmp	r3, #8
 800493c:	d110      	bne.n	8004960 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2208      	movs	r2, #8
 8004944:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f8fe 	bl	8004b48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2208      	movs	r2, #8
 8004950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e029      	b.n	80049b4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800496a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800496e:	d111      	bne.n	8004994 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004978:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f8e4 	bl	8004b48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e00f      	b.n	80049b4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4013      	ands	r3, r2
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d0a0      	beq.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049bc:	b480      	push	{r7}
 80049be:	b097      	sub	sp, #92	@ 0x5c
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	88fa      	ldrh	r2, [r7, #6]
 80049d4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ee:	d10e      	bne.n	8004a0e <UART_Start_Receive_IT+0x52>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d105      	bne.n	8004a04 <UART_Start_Receive_IT+0x48>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80049fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a02:	e02d      	b.n	8004a60 <UART_Start_Receive_IT+0xa4>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	22ff      	movs	r2, #255	@ 0xff
 8004a08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a0c:	e028      	b.n	8004a60 <UART_Start_Receive_IT+0xa4>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10d      	bne.n	8004a32 <UART_Start_Receive_IT+0x76>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <UART_Start_Receive_IT+0x6c>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	22ff      	movs	r2, #255	@ 0xff
 8004a22:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a26:	e01b      	b.n	8004a60 <UART_Start_Receive_IT+0xa4>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	227f      	movs	r2, #127	@ 0x7f
 8004a2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a30:	e016      	b.n	8004a60 <UART_Start_Receive_IT+0xa4>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a3a:	d10d      	bne.n	8004a58 <UART_Start_Receive_IT+0x9c>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <UART_Start_Receive_IT+0x92>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	227f      	movs	r2, #127	@ 0x7f
 8004a48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a4c:	e008      	b.n	8004a60 <UART_Start_Receive_IT+0xa4>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	223f      	movs	r2, #63	@ 0x3f
 8004a52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a56:	e003      	b.n	8004a60 <UART_Start_Receive_IT+0xa4>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2222      	movs	r2, #34	@ 0x22
 8004a6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a90:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004a92:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a98:	e841 2300 	strex	r3, r2, [r1]
 8004a9c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e5      	bne.n	8004a70 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aac:	d107      	bne.n	8004abe <UART_Start_Receive_IT+0x102>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a21      	ldr	r2, [pc, #132]	@ (8004b40 <UART_Start_Receive_IT+0x184>)
 8004aba:	669a      	str	r2, [r3, #104]	@ 0x68
 8004abc:	e002      	b.n	8004ac4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a20      	ldr	r2, [pc, #128]	@ (8004b44 <UART_Start_Receive_IT+0x188>)
 8004ac2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d019      	beq.n	8004b00 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aec:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004af0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004af2:	e841 2300 	strex	r3, r2, [r1]
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e6      	bne.n	8004acc <UART_Start_Receive_IT+0x110>
 8004afe:	e018      	b.n	8004b32 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f043 0320 	orr.w	r3, r3, #32
 8004b14:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b1e:	623b      	str	r3, [r7, #32]
 8004b20:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	69f9      	ldr	r1, [r7, #28]
 8004b24:	6a3a      	ldr	r2, [r7, #32]
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e6      	bne.n	8004b00 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	375c      	adds	r7, #92	@ 0x5c
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	08004faf 	.word	0x08004faf
 8004b44:	08004e07 	.word	0x08004e07

08004b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b095      	sub	sp, #84	@ 0x54
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b76:	e841 2300 	strex	r3, r2, [r1]
 8004b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1e6      	bne.n	8004b50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3308      	adds	r3, #8
 8004b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f023 0301 	bic.w	r3, r3, #1
 8004b98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e5      	bne.n	8004b82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d118      	bne.n	8004bf0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f023 0310 	bic.w	r3, r3, #16
 8004bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6979      	ldr	r1, [r7, #20]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e6      	bne.n	8004bbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c04:	bf00      	nop
 8004c06:	3754      	adds	r7, #84	@ 0x54
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff fa9e 	bl	8004170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b08f      	sub	sp, #60	@ 0x3c
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c48:	2b21      	cmp	r3, #33	@ 0x21
 8004c4a:	d14c      	bne.n	8004ce6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d132      	bne.n	8004cbe <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c78:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e6      	bne.n	8004c58 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6979      	ldr	r1, [r7, #20]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e6      	bne.n	8004c8a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004cbc:	e013      	b.n	8004ce6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc2:	781a      	ldrb	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004ce6:	bf00      	nop
 8004ce8:	373c      	adds	r7, #60	@ 0x3c
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b091      	sub	sp, #68	@ 0x44
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cfe:	2b21      	cmp	r3, #33	@ 0x21
 8004d00:	d151      	bne.n	8004da6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d132      	bne.n	8004d74 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	69b9      	ldr	r1, [r7, #24]
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e6      	bne.n	8004d40 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004d72:	e018      	b.n	8004da6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d88:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8e:	1c9a      	adds	r2, r3, #2
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004da6:	bf00      	nop
 8004da8:	3744      	adds	r7, #68	@ 0x44
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b088      	sub	sp, #32
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dce:	61fb      	str	r3, [r7, #28]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6979      	ldr	r1, [r7, #20]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	613b      	str	r3, [r7, #16]
   return(result);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e6      	bne.n	8004dba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7fb fb97 	bl	800052c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dfe:	bf00      	nop
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b09c      	sub	sp, #112	@ 0x70
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e14:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e1e:	2b22      	cmp	r3, #34	@ 0x22
 8004e20:	f040 80b9 	bne.w	8004f96 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e2e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e32:	b2d9      	uxtb	r1, r3
 8004e34:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3e:	400a      	ands	r2, r1
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f040 809c 	bne.w	8004fa6 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e8e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e6      	bne.n	8004e6e <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ec0:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ec2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e5      	bne.n	8004ea0 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d018      	beq.n	8004f28 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	623b      	str	r3, [r7, #32]
   return(result);
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e6      	bne.n	8004ef6 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d12e      	bne.n	8004f8e <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0310 	bic.w	r3, r3, #16
 8004f4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	461a      	mov	r2, r3
 8004f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	69b9      	ldr	r1, [r7, #24]
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	617b      	str	r3, [r7, #20]
   return(result);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e6      	bne.n	8004f36 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d103      	bne.n	8004f7e <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2210      	movs	r2, #16
 8004f7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fb fab6 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f8c:	e00b      	b.n	8004fa6 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff f8e4 	bl	800415c <HAL_UART_RxCpltCallback>
}
 8004f94:	e007      	b.n	8004fa6 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699a      	ldr	r2, [r3, #24]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0208 	orr.w	r2, r2, #8
 8004fa4:	619a      	str	r2, [r3, #24]
}
 8004fa6:	bf00      	nop
 8004fa8:	3770      	adds	r7, #112	@ 0x70
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b09c      	sub	sp, #112	@ 0x70
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fbc:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fc6:	2b22      	cmp	r3, #34	@ 0x22
 8004fc8:	f040 80b9 	bne.w	800513e <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fda:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004fdc:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004fe0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff0:	1c9a      	adds	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	f040 809c 	bne.w	800514e <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005026:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800502a:	667b      	str	r3, [r7, #100]	@ 0x64
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005034:	657b      	str	r3, [r7, #84]	@ 0x54
 8005036:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800503a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e6      	bne.n	8005016 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3308      	adds	r3, #8
 800504e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3308      	adds	r3, #8
 8005066:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005068:	643a      	str	r2, [r7, #64]	@ 0x40
 800506a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800506e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e5      	bne.n	8005048 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e6      	bne.n	800509e <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d12e      	bne.n	8005136 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f023 0310 	bic.w	r3, r3, #16
 80050f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6979      	ldr	r1, [r7, #20]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	613b      	str	r3, [r7, #16]
   return(result);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e6      	bne.n	80050de <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b10      	cmp	r3, #16
 800511c:	d103      	bne.n	8005126 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2210      	movs	r2, #16
 8005124:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fb f9e2 	bl	80004f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005134:	e00b      	b.n	800514e <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff f810 	bl	800415c <HAL_UART_RxCpltCallback>
}
 800513c:	e007      	b.n	800514e <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0208 	orr.w	r2, r2, #8
 800514c:	619a      	str	r2, [r3, #24]
}
 800514e:	bf00      	nop
 8005150:	3770      	adds	r7, #112	@ 0x70
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b08c      	sub	sp, #48	@ 0x30
 800515a:	af00      	add	r7, sp, #0
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	4613      	mov	r3, r2
 8005162:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005170:	2b20      	cmp	r3, #32
 8005172:	d13b      	bne.n	80051ec <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e034      	b.n	80051ee <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	461a      	mov	r2, r3
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f7ff fc10 	bl	80049bc <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d11d      	bne.n	80051e0 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2210      	movs	r2, #16
 80051aa:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	e853 3f00 	ldrex	r3, [r3]
 80051b8:	617b      	str	r3, [r7, #20]
   return(result);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f043 0310 	orr.w	r3, r3, #16
 80051c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80051cc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6a39      	ldr	r1, [r7, #32]
 80051d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e6      	bne.n	80051ac <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80051de:	e002      	b.n	80051e6 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80051e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80051ea:	e000      	b.n	80051ee <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80051ec:	2302      	movs	r3, #2
  }
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3730      	adds	r7, #48	@ 0x30
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <memset>:
 80051f6:	4402      	add	r2, r0
 80051f8:	4603      	mov	r3, r0
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d100      	bne.n	8005200 <memset+0xa>
 80051fe:	4770      	bx	lr
 8005200:	f803 1b01 	strb.w	r1, [r3], #1
 8005204:	e7f9      	b.n	80051fa <memset+0x4>
	...

08005208 <__libc_init_array>:
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	4d0d      	ldr	r5, [pc, #52]	@ (8005240 <__libc_init_array+0x38>)
 800520c:	4c0d      	ldr	r4, [pc, #52]	@ (8005244 <__libc_init_array+0x3c>)
 800520e:	1b64      	subs	r4, r4, r5
 8005210:	10a4      	asrs	r4, r4, #2
 8005212:	2600      	movs	r6, #0
 8005214:	42a6      	cmp	r6, r4
 8005216:	d109      	bne.n	800522c <__libc_init_array+0x24>
 8005218:	4d0b      	ldr	r5, [pc, #44]	@ (8005248 <__libc_init_array+0x40>)
 800521a:	4c0c      	ldr	r4, [pc, #48]	@ (800524c <__libc_init_array+0x44>)
 800521c:	f000 f818 	bl	8005250 <_init>
 8005220:	1b64      	subs	r4, r4, r5
 8005222:	10a4      	asrs	r4, r4, #2
 8005224:	2600      	movs	r6, #0
 8005226:	42a6      	cmp	r6, r4
 8005228:	d105      	bne.n	8005236 <__libc_init_array+0x2e>
 800522a:	bd70      	pop	{r4, r5, r6, pc}
 800522c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005230:	4798      	blx	r3
 8005232:	3601      	adds	r6, #1
 8005234:	e7ee      	b.n	8005214 <__libc_init_array+0xc>
 8005236:	f855 3b04 	ldr.w	r3, [r5], #4
 800523a:	4798      	blx	r3
 800523c:	3601      	adds	r6, #1
 800523e:	e7f2      	b.n	8005226 <__libc_init_array+0x1e>
 8005240:	08005288 	.word	0x08005288
 8005244:	08005288 	.word	0x08005288
 8005248:	08005288 	.word	0x08005288
 800524c:	0800528c 	.word	0x0800528c

08005250 <_init>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	bf00      	nop
 8005254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005256:	bc08      	pop	{r3}
 8005258:	469e      	mov	lr, r3
 800525a:	4770      	bx	lr

0800525c <_fini>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	bf00      	nop
 8005260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005262:	bc08      	pop	{r3}
 8005264:	469e      	mov	lr, r3
 8005266:	4770      	bx	lr
